
MEK_VDI_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010340  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000944  08010400  08010400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d44  08010d44  0001247c  2**0
                  CONTENTS
  4 .ARM          00000000  08010d44  08010d44  0001247c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010d44  08010d44  0001247c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d44  08010d44  00011d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010d48  08010d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000047c  20000000  08010d4c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00001ce4  2000047c  080111c8  0001247c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002160  080111c8  00013160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001247c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b65b  00000000  00000000  000124a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c26  00000000  00000000  0003daff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  00044728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001695  00000000  00000000  00046410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251cb  00000000  00000000  00047aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a58f  00000000  00000000  0006cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca68f  00000000  00000000  000971ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016188e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e2c  00000000  00000000  001618d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00168700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000047c 	.word	0x2000047c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080103d4 	.word	0x080103d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000480 	.word	0x20000480
 8000104:	080103d4 	.word	0x080103d4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	781a      	ldrb	r2, [r3, #0]
 8000250:	210f      	movs	r1, #15
 8000252:	187b      	adds	r3, r7, r1
 8000254:	701a      	strb	r2, [r3, #0]
    return value;
 8000256:	187b      	adds	r3, r7, r1
 8000258:	781b      	ldrb	r3, [r3, #0]
}
 800025a:	0018      	movs	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	b004      	add	sp, #16
 8000260:	bd80      	pop	{r7, pc}

08000262 <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 8000262:	b580      	push	{r7, lr}
 8000264:	b082      	sub	sp, #8
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	000a      	movs	r2, r1
 800026c:	1cfb      	adds	r3, r7, #3
 800026e:	701a      	strb	r2, [r3, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000270:	1cfb      	adds	r3, r7, #3
 8000272:	781a      	ldrb	r2, [r3, #0]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8000278:	2301      	movs	r3, #1
}
 800027a:	0018      	movs	r0, r3
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bd80      	pop	{r7, pc}

08000282 <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 8000282:	b580      	push	{r7, lr}
 8000284:	b082      	sub	sp, #8
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 800028c:	0039      	movs	r1, r7
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2204      	movs	r2, #4
 8000292:	0018      	movs	r0, r3
 8000294:	f00f fc44 	bl	800fb20 <memmove>
    return (uint8_t)(sizeof(value));
 8000298:	2304      	movs	r3, #4
}
 800029a:	0018      	movs	r0, r3
 800029c:	46bd      	mov	sp, r7
 800029e:	b002      	add	sp, #8
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <OD_getIndex>:
 * @param entry Object Dictionary entry.
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex(const OD_entry_t* entry) {
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b082      	sub	sp, #8
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d002      	beq.n	80002b6 <OD_getIndex+0x14>
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	e000      	b.n	80002b8 <OD_getIndex+0x16>
 80002b6:	2300      	movs	r3, #0
}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}

080002c0 <OD_extension_init>:
 * NULL, extension will be removed.
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d101      	bne.n	80002d4 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80002d0:	2305      	movs	r3, #5
 80002d2:	e003      	b.n	80002dc <OD_extension_init+0x1c>
    }
    entry->extension = extension;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80002da:	2300      	movs	r3, #0
}
 80002dc:	0018      	movs	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	b002      	add	sp, #8
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <OD_get_u32>:
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af02      	add	r7, sp, #8
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	607a      	str	r2, [r7, #4]
 80002ee:	603b      	str	r3, [r7, #0]
 80002f0:	200b      	movs	r0, #11
 80002f2:	183b      	adds	r3, r7, r0
 80002f4:	1c0a      	adds	r2, r1, #0
 80002f6:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	183b      	adds	r3, r7, r0
 80002fc:	7819      	ldrb	r1, [r3, #0]
 80002fe:	68f8      	ldr	r0, [r7, #12]
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2304      	movs	r3, #4
 8000306:	f001 fd25 	bl	8001d54 <OD_get_value>
 800030a:	0003      	movs	r3, r0
}
 800030c:	0018      	movs	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	b004      	add	sp, #16
 8000312:	bd80      	pop	{r7, pc}

08000314 <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d00c      	beq.n	8000342 <OD_read_1014_default+0x2e>
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	7d1b      	ldrb	r3, [r3, #20]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d108      	bne.n	8000342 <OD_read_1014_default+0x2e>
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d005      	beq.n	8000342 <OD_read_1014_default+0x2e>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d902      	bls.n	8000342 <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d101      	bne.n	8000346 <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 8000342:	2309      	movs	r3, #9
 8000344:	e01c      	b.n	8000380 <OD_read_1014_default+0x6c>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <OD_read_1014_default+0x44>
 8000354:	2300      	movs	r3, #0
 8000356:	e001      	b.n	800035c <OD_read_1014_default+0x48>
 8000358:	2380      	movs	r3, #128	@ 0x80
 800035a:	061b      	lsls	r3, r3, #24
 800035c:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	2228      	movs	r2, #40	@ 0x28
 8000362:	5c9b      	ldrb	r3, [r3, r2]
 8000364:	3380      	adds	r3, #128	@ 0x80
 8000366:	693a      	ldr	r2, [r7, #16]
 8000368:	4313      	orrs	r3, r2
 800036a:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 800036c:	693a      	ldr	r2, [r7, #16]
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	0011      	movs	r1, r2
 8000372:	0018      	movs	r0, r3
 8000374:	f7ff ff85 	bl	8000282 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	2204      	movs	r2, #4
 800037c:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800037e:	2300      	movs	r3, #0
}
 8000380:	0018      	movs	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	b006      	add	sp, #24
 8000386:	bd80      	pop	{r7, pc}

08000388 <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
 8000394:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d00f      	beq.n	80003bc <OD_read_1003+0x34>
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d00c      	beq.n	80003bc <OD_read_1003+0x34>
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d009      	beq.n	80003bc <OD_read_1003+0x34>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b03      	cmp	r3, #3
 80003ac:	d803      	bhi.n	80003b6 <OD_read_1003+0x2e>
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	7d1b      	ldrb	r3, [r3, #20]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d102      	bne.n	80003bc <OD_read_1003+0x34>
        || (count < 1U)) {
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d101      	bne.n	80003c0 <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 80003bc:	2309      	movs	r3, #9
 80003be:	e057      	b.n	8000470 <OD_read_1003+0xe8>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	7f1b      	ldrb	r3, [r3, #28]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d801      	bhi.n	80003d2 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 80003ce:	2309      	movs	r3, #9
 80003d0:	e04e      	b.n	8000470 <OD_read_1003+0xe8>
    }
    if (stream->subIndex == 0U) {
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	7d1b      	ldrb	r3, [r3, #20]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d10c      	bne.n	80003f4 <OD_read_1003+0x6c>
        (void)CO_setUint8(buf, em->fifoCount);
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	2220      	movs	r2, #32
 80003de:	5c9a      	ldrb	r2, [r3, r2]
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f7ff ff3c 	bl	8000262 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	2201      	movs	r2, #1
 80003ee:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80003f0:	2300      	movs	r3, #0
 80003f2:	e03d      	b.n	8000470 <OD_read_1003+0xe8>
    } else if (stream->subIndex <= em->fifoCount) {
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	7d1a      	ldrb	r2, [r3, #20]
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	2120      	movs	r1, #32
 80003fc:	5c5b      	ldrb	r3, [r3, r1]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d835      	bhi.n	800046e <OD_read_1003+0xe6>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	7f5b      	ldrb	r3, [r3, #29]
 8000406:	001a      	movs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	7d1b      	ldrb	r3, [r3, #20]
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	b29a      	uxth	r2, r3
 8000410:	2116      	movs	r1, #22
 8000412:	187b      	adds	r3, r7, r1
 8000414:	801a      	strh	r2, [r3, #0]
        if (index < 0) {
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2200      	movs	r2, #0
 800041a:	5e9b      	ldrsh	r3, [r3, r2]
 800041c:	2b00      	cmp	r3, #0
 800041e:	da09      	bge.n	8000434 <OD_read_1003+0xac>
            index += (int16_t)em->fifoSize;
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	7f1b      	ldrb	r3, [r3, #28]
 8000424:	001a      	movs	r2, r3
 8000426:	187b      	adds	r3, r7, r1
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	18d3      	adds	r3, r2, r3
 800042c:	b29a      	uxth	r2, r3
 800042e:	187b      	adds	r3, r7, r1
 8000430:	801a      	strh	r2, [r3, #0]
 8000432:	e009      	b.n	8000448 <OD_read_1003+0xc0>
        } else if (index >= (int16_t)(em->fifoSize)) {
 8000434:	2316      	movs	r3, #22
 8000436:	18fb      	adds	r3, r7, r3
 8000438:	2200      	movs	r2, #0
 800043a:	5e9b      	ldrsh	r3, [r3, r2]
 800043c:	693a      	ldr	r2, [r7, #16]
 800043e:	7f12      	ldrb	r2, [r2, #28]
 8000440:	4293      	cmp	r3, r2
 8000442:	db01      	blt.n	8000448 <OD_read_1003+0xc0>
            return ODR_DEV_INCOMPAT;
 8000444:	2309      	movs	r3, #9
 8000446:	e013      	b.n	8000470 <OD_read_1003+0xe8>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	699a      	ldr	r2, [r3, #24]
 800044c:	2316      	movs	r3, #22
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	2100      	movs	r1, #0
 8000452:	5e5b      	ldrsh	r3, [r3, r1]
 8000454:	00db      	lsls	r3, r3, #3
 8000456:	18d3      	adds	r3, r2, r3
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	0011      	movs	r1, r2
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff ff0f 	bl	8000282 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	2204      	movs	r2, #4
 8000468:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800046a:	2300      	movs	r3, #0
 800046c:	e000      	b.n	8000470 <OD_read_1003+0xe8>
    } else {
        return ODR_NO_DATA;
 800046e:	2319      	movs	r3, #25
    }
}
 8000470:	0018      	movs	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	b006      	add	sp, #24
 8000476:	bd80      	pop	{r7, pc}

08000478 <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d00c      	beq.n	80004a6 <OD_write_1003+0x2e>
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	7d1b      	ldrb	r3, [r3, #20]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d108      	bne.n	80004a6 <OD_write_1003+0x2e>
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d005      	beq.n	80004a6 <OD_write_1003+0x2e>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d102      	bne.n	80004a6 <OD_write_1003+0x2e>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d101      	bne.n	80004aa <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 80004a6:	2309      	movs	r3, #9
 80004a8:	e012      	b.n	80004d0 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	0018      	movs	r0, r3
 80004ae:	f7ff fec9 	bl	8000244 <CO_getUint8>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80004b6:	230f      	movs	r3, #15
 80004b8:	e00a      	b.n	80004d0 <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	2220      	movs	r2, #32
 80004c4:	2100      	movs	r1, #0
 80004c6:	5499      	strb	r1, [r3, r2]

    *countWritten = sizeof(uint8_t);
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	2201      	movs	r2, #1
 80004cc:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80004ce:	2300      	movs	r3, #0
}
 80004d0:	0018      	movs	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b006      	add	sp, #24
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 80004e6:	2317      	movs	r3, #23
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d01d      	beq.n	8000530 <CO_EM_init+0x58>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d01a      	beq.n	8000530 <CO_EM_init+0x58>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d104      	bne.n	800050a <CO_EM_init+0x32>
 8000500:	2328      	movs	r3, #40	@ 0x28
 8000502:	18fb      	adds	r3, r7, r3
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d812      	bhi.n	8000530 <CO_EM_init+0x58>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 800050a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00f      	beq.n	8000530 <CO_EM_init+0x58>
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d00c      	beq.n	8000530 <CO_EM_init+0x58>
 8000516:	2238      	movs	r2, #56	@ 0x38
 8000518:	18bb      	adds	r3, r7, r2
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d007      	beq.n	8000530 <CO_EM_init+0x58>
 8000520:	18bb      	adds	r3, r7, r2
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b25b      	sxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	db02      	blt.n	8000530 <CO_EM_init+0x58>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 800052a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800052c:	2b00      	cmp	r3, #0
 800052e:	d102      	bne.n	8000536 <CO_EM_init+0x5e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000530:	2301      	movs	r3, #1
 8000532:	425b      	negs	r3, r3
 8000534:	e0c1      	b.n	80006ba <CO_EM_init+0x1e2>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2250      	movs	r2, #80	@ 0x50
 800053a:	2100      	movs	r1, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f00f fb02 	bl	800fb46 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	68ba      	ldr	r2, [r7, #8]
 8000546:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	2300      	movs	r3, #0
 800054c:	2201      	movs	r2, #1
 800054e:	2100      	movs	r1, #0
 8000550:	f001 fc8e 	bl	8001e70 <OD_getPtr>
 8000554:	0002      	movs	r2, r0
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d10d      	bne.n	800057e <CO_EM_init+0xa6>
        if (errInfo != NULL) {
 8000562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000564:	2b00      	cmp	r3, #0
 8000566:	d007      	beq.n	8000578 <CO_EM_init+0xa0>
            *errInfo = OD_getIndex(OD_1001_errReg);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0018      	movs	r0, r3
 800056c:	f7ff fe99 	bl	80002a2 <OD_getIndex>
 8000570:	0003      	movs	r3, r0
 8000572:	001a      	movs	r2, r3
 8000574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000576:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000578:	230c      	movs	r3, #12
 800057a:	425b      	negs	r3, r3
 800057c:	e09d      	b.n	80006ba <CO_EM_init+0x1e2>
    }
    *em->errorRegister = 0;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	2328      	movs	r3, #40	@ 0x28
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	7713      	strb	r3, [r2, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 8000596:	2516      	movs	r5, #22
 8000598:	197c      	adds	r4, r7, r5
 800059a:	2310      	movs	r3, #16
 800059c:	18fa      	adds	r2, r7, r3
 800059e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80005a0:	2301      	movs	r3, #1
 80005a2:	2100      	movs	r1, #0
 80005a4:	f7ff fe9e 	bl	80002e4 <OD_get_u32>
 80005a8:	0003      	movs	r3, r0
 80005aa:	7023      	strb	r3, [r4, #0]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 80005ac:	197b      	adds	r3, r7, r5
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d103      	bne.n	80005be <CO_EM_init+0xe6>
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	4a42      	ldr	r2, [pc, #264]	@ (80006c4 <CO_EM_init+0x1ec>)
 80005ba:	4013      	ands	r3, r2
 80005bc:	d013      	beq.n	80005e6 <CO_EM_init+0x10e>
        if (errInfo != NULL) {
 80005be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d007      	beq.n	80005d4 <CO_EM_init+0xfc>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80005c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c6:	0018      	movs	r0, r3
 80005c8:	f7ff fe6b 	bl	80002a2 <OD_getIndex>
 80005cc:	0003      	movs	r3, r0
 80005ce:	001a      	movs	r2, r3
 80005d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005d2:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 80005d4:	2316      	movs	r3, #22
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <CO_EM_init+0x10e>
            return CO_ERROR_OD_PARAMETERS;
 80005e0:	230c      	movs	r3, #12
 80005e2:	425b      	negs	r3, r3
 80005e4:	e069      	b.n	80006ba <CO_EM_init+0x1e2>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 80005e6:	2338      	movs	r3, #56	@ 0x38
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	2314      	movs	r3, #20
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	3280      	adds	r2, #128	@ 0x80
 80005f4:	801a      	strh	r2, [r3, #0]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	43db      	mvns	r3, r3
 80005fa:	0fdb      	lsrs	r3, r3, #31
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	001a      	movs	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	625a      	str	r2, [r3, #36]	@ 0x24

    em->OD_1014_extension.object = em;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	631a      	str	r2, [r3, #48]	@ 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4a2e      	ldr	r2, [pc, #184]	@ (80006c8 <CO_EM_init+0x1f0>)
 800060e:	635a      	str	r2, [r3, #52]	@ 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4a2e      	ldr	r2, [pc, #184]	@ (80006cc <CO_EM_init+0x1f4>)
 8000614:	639a      	str	r2, [r3, #56]	@ 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3330      	adds	r3, #48	@ 0x30
 800061a:	001a      	movs	r2, r3
 800061c:	2516      	movs	r5, #22
 800061e:	197c      	adds	r4, r7, r5
 8000620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f7ff fe4b 	bl	80002c0 <OD_extension_init>
 800062a:	0003      	movs	r3, r0
 800062c:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 800062e:	197b      	adds	r3, r7, r5
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b25b      	sxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00d      	beq.n	8000654 <CO_EM_init+0x17c>
        if (errInfo != NULL) {
 8000638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <CO_EM_init+0x176>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800063e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff fe2e 	bl	80002a2 <OD_getIndex>
 8000646:	0003      	movs	r3, r0
 8000648:	001a      	movs	r2, r3
 800064a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800064c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800064e:	230c      	movs	r3, #12
 8000650:	425b      	negs	r3, r3
 8000652:	e032      	b.n	80006ba <CO_EM_init+0x1e2>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2238      	movs	r2, #56	@ 0x38
 8000658:	18ba      	adds	r2, r7, r2
 800065a:	2128      	movs	r1, #40	@ 0x28
 800065c:	7812      	ldrb	r2, [r2, #0]
 800065e:	545a      	strb	r2, [r3, r1]

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 8000660:	2314      	movs	r3, #20
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	881a      	ldrh	r2, [r3, #0]
 8000666:	2330      	movs	r3, #48	@ 0x30
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	68b8      	ldr	r0, [r7, #8]
 800066e:	2300      	movs	r3, #0
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2308      	movs	r3, #8
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2300      	movs	r3, #0
 8000678:	f007 fb7e 	bl	8007d78 <CO_CANtxBufferInit>
 800067c:	0002      	movs	r2, r0
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (em->CANtxBuff == NULL) {
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <CO_EM_init+0x1b8>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800068a:	2301      	movs	r3, #1
 800068c:	425b      	negs	r3, r3
 800068e:	e014      	b.n	80006ba <CO_EM_init+0x1e2>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	641a      	str	r2, [r3, #64]	@ 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4a0d      	ldr	r2, [pc, #52]	@ (80006d0 <CO_EM_init+0x1f8>)
 800069a:	645a      	str	r2, [r3, #68]	@ 0x44
    em->OD_1003_extension.write = OD_write_1003;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a0d      	ldr	r2, [pc, #52]	@ (80006d4 <CO_EM_init+0x1fc>)
 80006a0:	649a      	str	r2, [r3, #72]	@ 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3340      	adds	r3, #64	@ 0x40
 80006a6:	001a      	movs	r2, r3
 80006a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff fe07 	bl	80002c0 <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80006b2:	2317      	movs	r3, #23
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b25b      	sxtb	r3, r3
}
 80006ba:	0018      	movs	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	b006      	add	sp, #24
 80006c0:	bdb0      	pop	{r4, r5, r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	7ffff800 	.word	0x7ffff800
 80006c8:	08000315 	.word	0x08000315
 80006cc:	080018cb 	.word	0x080018cb
 80006d0:	08000389 	.word	0x08000389
 80006d4:	08000479 	.word	0x08000479

080006d8 <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b089      	sub	sp, #36	@ 0x24
 80006dc:	af02      	add	r7, sp, #8
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	695a      	ldr	r2, [r3, #20]
 80006ea:	2014      	movs	r0, #20
 80006ec:	183b      	adds	r3, r7, r0
 80006ee:	8a52      	ldrh	r2, [r2, #18]
 80006f0:	801a      	strh	r2, [r3, #0]
    if (CANerrSt != em->CANerrorStatusOld) {
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	8a1b      	ldrh	r3, [r3, #16]
 80006f6:	183a      	adds	r2, r7, r0
 80006f8:	8812      	ldrh	r2, [r2, #0]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d100      	bne.n	8000700 <CO_EM_process+0x28>
 80006fe:	e0b0      	b.n	8000862 <CO_EM_process+0x18a>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	8a19      	ldrh	r1, [r3, #16]
 8000704:	2412      	movs	r4, #18
 8000706:	193b      	adds	r3, r7, r4
 8000708:	183a      	adds	r2, r7, r0
 800070a:	8812      	ldrh	r2, [r2, #0]
 800070c:	404a      	eors	r2, r1
 800070e:	801a      	strh	r2, [r3, #0]
        em->CANerrorStatusOld = CANerrSt;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	0001      	movs	r1, r0
 8000714:	187a      	adds	r2, r7, r1
 8000716:	8812      	ldrh	r2, [r2, #0]
 8000718:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 800071a:	193b      	adds	r3, r7, r4
 800071c:	881a      	ldrh	r2, [r3, #0]
 800071e:	2302      	movs	r3, #2
 8000720:	33ff      	adds	r3, #255	@ 0xff
 8000722:	4013      	ands	r3, r2
 8000724:	d00f      	beq.n	8000746 <CO_EM_process+0x6e>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 8000726:	187b      	adds	r3, r7, r1
 8000728:	881a      	ldrh	r2, [r3, #0]
 800072a:	2302      	movs	r3, #2
 800072c:	33ff      	adds	r3, #255	@ 0xff
 800072e:	4013      	ands	r3, r2
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	4193      	sbcs	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	0019      	movs	r1, r3
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	2300      	movs	r3, #0
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2300      	movs	r3, #0
 8000740:	2201      	movs	r2, #1
 8000742:	f000 f945 	bl	80009d0 <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 8000746:	2312      	movs	r3, #18
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2202      	movs	r2, #2
 800074e:	4013      	ands	r3, r2
 8000750:	d010      	beq.n	8000774 <CO_EM_process+0x9c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8000752:	2314      	movs	r3, #20
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2202      	movs	r2, #2
 800075a:	4013      	ands	r3, r2
 800075c:	1e5a      	subs	r2, r3, #1
 800075e:	4193      	sbcs	r3, r2
 8000760:	b2db      	uxtb	r3, r3
 8000762:	0019      	movs	r1, r3
 8000764:	4a97      	ldr	r2, [pc, #604]	@ (80009c4 <CO_EM_process+0x2ec>)
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	2300      	movs	r3, #0
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	0013      	movs	r3, r2
 800076e:	2207      	movs	r2, #7
 8000770:	f000 f92e 	bl	80009d0 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 8000774:	2312      	movs	r3, #18
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2204      	movs	r2, #4
 800077c:	4013      	ands	r3, r2
 800077e:	d010      	beq.n	80007a2 <CO_EM_process+0xca>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 8000780:	2314      	movs	r3, #20
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	2204      	movs	r2, #4
 8000788:	4013      	ands	r3, r2
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	4193      	sbcs	r3, r2
 800078e:	b2db      	uxtb	r3, r3
 8000790:	0019      	movs	r1, r3
 8000792:	4a8d      	ldr	r2, [pc, #564]	@ (80009c8 <CO_EM_process+0x2f0>)
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	2300      	movs	r3, #0
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	0013      	movs	r3, r2
 800079c:	2212      	movs	r2, #18
 800079e:	f000 f917 	bl	80009d0 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 80007a2:	2312      	movs	r3, #18
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	2208      	movs	r2, #8
 80007aa:	4013      	ands	r3, r2
 80007ac:	d010      	beq.n	80007d0 <CO_EM_process+0xf8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 80007ae:	2314      	movs	r3, #20
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	2208      	movs	r2, #8
 80007b6:	4013      	ands	r3, r2
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	4193      	sbcs	r3, r2
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	0019      	movs	r1, r3
 80007c0:	4a82      	ldr	r2, [pc, #520]	@ (80009cc <CO_EM_process+0x2f4>)
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	2300      	movs	r3, #0
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	0013      	movs	r3, r2
 80007ca:	2214      	movs	r2, #20
 80007cc:	f000 f900 	bl	80009d0 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 80007d0:	2312      	movs	r3, #18
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	4013      	ands	r3, r2
 80007da:	d010      	beq.n	80007fe <CO_EM_process+0x126>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 80007dc:	2314      	movs	r3, #20
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	2280      	movs	r2, #128	@ 0x80
 80007e4:	4013      	ands	r3, r2
 80007e6:	1e5a      	subs	r2, r3, #1
 80007e8:	4193      	sbcs	r3, r2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	0019      	movs	r1, r3
 80007ee:	2381      	movs	r3, #129	@ 0x81
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	2200      	movs	r2, #0
 80007f6:	9200      	str	r2, [sp, #0]
 80007f8:	2215      	movs	r2, #21
 80007fa:	f000 f8e9 	bl	80009d0 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 80007fe:	2312      	movs	r3, #18
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	881a      	ldrh	r2, [r3, #0]
 8000804:	2380      	movs	r3, #128	@ 0x80
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4013      	ands	r3, r2
 800080a:	d011      	beq.n	8000830 <CO_EM_process+0x158>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 800080c:	2314      	movs	r3, #20
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	881a      	ldrh	r2, [r3, #0]
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4013      	ands	r3, r2
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	4193      	sbcs	r3, r2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	0019      	movs	r1, r3
 8000820:	4a68      	ldr	r2, [pc, #416]	@ (80009c4 <CO_EM_process+0x2ec>)
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	2300      	movs	r3, #0
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	0013      	movs	r3, r2
 800082a:	2206      	movs	r2, #6
 800082c:	f000 f8d0 	bl	80009d0 <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 8000830:	2312      	movs	r3, #18
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	881a      	ldrh	r2, [r3, #0]
 8000836:	2380      	movs	r3, #128	@ 0x80
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	4013      	ands	r3, r2
 800083c:	d011      	beq.n	8000862 <CO_EM_process+0x18a>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 800083e:	2314      	movs	r3, #20
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	881a      	ldrh	r2, [r3, #0]
 8000844:	2380      	movs	r3, #128	@ 0x80
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	4013      	ands	r3, r2
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	0019      	movs	r1, r3
 8000852:	4a5e      	ldr	r2, [pc, #376]	@ (80009cc <CO_EM_process+0x2f4>)
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	2300      	movs	r3, #0
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	0013      	movs	r3, r2
 800085c:	2213      	movs	r2, #19
 800085e:	f000 f8b7 	bl	80009d0 <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000862:	2117      	movs	r1, #23
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	795b      	ldrb	r3, [r3, #5]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d005      	beq.n	800087e <CO_EM_process+0x1a6>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	187a      	adds	r2, r7, r1
 8000876:	7812      	ldrb	r2, [r2, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	430a      	orrs	r2, r1
 800087c:	701a      	strb	r2, [r3, #0]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	789b      	ldrb	r3, [r3, #2]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d103      	bne.n	800088e <CO_EM_process+0x1b6>
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	78db      	ldrb	r3, [r3, #3]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d006      	beq.n	800089c <CO_EM_process+0x1c4>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 800088e:	2217      	movs	r2, #23
 8000890:	18bb      	adds	r3, r7, r2
 8000892:	18ba      	adds	r2, r7, r2
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	2110      	movs	r1, #16
 8000898:	430a      	orrs	r2, r1
 800089a:	701a      	strb	r2, [r3, #0]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	7a1b      	ldrb	r3, [r3, #8]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d103      	bne.n	80008ac <CO_EM_process+0x1d4>
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	7a5b      	ldrb	r3, [r3, #9]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d007      	beq.n	80008bc <CO_EM_process+0x1e4>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 80008ac:	2217      	movs	r2, #23
 80008ae:	18bb      	adds	r3, r7, r2
 80008b0:	18ba      	adds	r2, r7, r2
 80008b2:	7812      	ldrb	r2, [r2, #0]
 80008b4:	2180      	movs	r1, #128	@ 0x80
 80008b6:	4249      	negs	r1, r1
 80008b8:	430a      	orrs	r2, r1
 80008ba:	701a      	strb	r2, [r3, #0]
    }
    *em->errorRegister = errorRegister;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	2017      	movs	r0, #23
 80008c2:	183a      	adds	r2, r7, r0
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d100      	bne.n	80008d0 <CO_EM_process+0x1f8>
 80008ce:	e073      	b.n	80009b8 <CO_EM_process+0x2e0>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	7f1b      	ldrb	r3, [r3, #28]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d800      	bhi.n	80008da <CO_EM_process+0x202>
 80008d8:	e070      	b.n	80009bc <CO_EM_process+0x2e4>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 80008da:	2411      	movs	r4, #17
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	7f92      	ldrb	r2, [r2, #30]
 80008e2:	701a      	strb	r2, [r3, #0]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d166      	bne.n	80009bc <CO_EM_process+0x2e4>
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	7f5b      	ldrb	r3, [r3, #29]
 80008f2:	193a      	adds	r2, r7, r4
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d060      	beq.n	80009bc <CO_EM_process+0x2e4>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	699a      	ldr	r2, [r3, #24]
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	18d3      	adds	r3, r2, r3
 8000906:	6819      	ldr	r1, [r3, #0]
 8000908:	183b      	adds	r3, r7, r0
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	041a      	lsls	r2, r3, #16
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6998      	ldr	r0, [r3, #24]
 8000912:	193b      	adds	r3, r7, r4
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	18c3      	adds	r3, r0, r3
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000922:	1d58      	adds	r0, r3, #5
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	699a      	ldr	r2, [r3, #24]
 8000928:	193b      	adds	r3, r7, r4
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	18d3      	adds	r3, r2, r3
 8000930:	2208      	movs	r2, #8
 8000932:	0019      	movs	r1, r3
 8000934:	f00f f99d 	bl	800fc72 <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	695a      	ldr	r2, [r3, #20]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000940:	0019      	movs	r1, r3
 8000942:	0010      	movs	r0, r2
 8000944:	f007 fad6 	bl	8007ef4 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	193b      	adds	r3, r7, r4
 800094e:	3201      	adds	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	7f1b      	ldrb	r3, [r3, #28]
 8000956:	193a      	adds	r2, r7, r4
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	d202      	bcs.n	8000964 <CO_EM_process+0x28c>
 800095e:	193b      	adds	r3, r7, r4
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	e000      	b.n	8000966 <CO_EM_process+0x28e>
 8000964:	2200      	movs	r2, #0
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	7fdb      	ldrb	r3, [r3, #31]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d10c      	bne.n	800098c <CO_EM_process+0x2b4>
                em->fifoOverflow = 2;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2202      	movs	r2, #2
 8000976:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 8000978:	2380      	movs	r3, #128	@ 0x80
 800097a:	015b      	lsls	r3, r3, #5
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	2200      	movs	r2, #0
 8000980:	9200      	str	r2, [sp, #0]
 8000982:	2220      	movs	r2, #32
 8000984:	2101      	movs	r1, #1
 8000986:	f000 f823 	bl	80009d0 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 800098a:	e017      	b.n	80009bc <CO_EM_process+0x2e4>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	7fdb      	ldrb	r3, [r3, #31]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d113      	bne.n	80009bc <CO_EM_process+0x2e4>
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	7f9a      	ldrb	r2, [r3, #30]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	7f5b      	ldrb	r3, [r3, #29]
 800099c:	429a      	cmp	r2, r3
 800099e:	d10d      	bne.n	80009bc <CO_EM_process+0x2e4>
                em->fifoOverflow = 0;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2200      	movs	r2, #0
 80009a4:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2300      	movs	r3, #0
 80009ae:	2220      	movs	r2, #32
 80009b0:	2100      	movs	r1, #0
 80009b2:	f000 f80d 	bl	80009d0 <CO_error>
    return;
 80009b6:	e001      	b.n	80009bc <CO_EM_process+0x2e4>
        return;
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	e000      	b.n	80009be <CO_EM_process+0x2e6>
    return;
 80009bc:	46c0      	nop			@ (mov r8, r8)
}
 80009be:	46bd      	mov	sp, r7
 80009c0:	b007      	add	sp, #28
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	00008120 	.word	0x00008120
 80009c8:	00008140 	.word	0x00008140
 80009cc:	00008110 	.word	0x00008110

080009d0 <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	@ 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	0019      	movs	r1, r3
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	1c0a      	adds	r2, r1, #0
 80009e4:	801a      	strh	r2, [r3, #0]
    if (em == NULL) {
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d100      	bne.n	80009ee <CO_error+0x1e>
 80009ec:	e0be      	b.n	8000b6c <CO_error+0x19c>
        return;
    }

    uint8_t index = errorBit >> 3;
 80009ee:	212f      	movs	r1, #47	@ 0x2f
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	1dfa      	adds	r2, r7, #7
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	08d2      	lsrs	r2, r2, #3
 80009f8:	701a      	strb	r2, [r3, #0]
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2207      	movs	r2, #7
 8000a00:	4013      	ands	r3, r2
 8000a02:	2201      	movs	r2, #1
 8000a04:	409a      	lsls	r2, r3
 8000a06:	202e      	movs	r0, #46	@ 0x2e
 8000a08:	183b      	adds	r3, r7, r0
 8000a0a:	701a      	strb	r2, [r3, #0]

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b09      	cmp	r3, #9
 8000a12:	d90c      	bls.n	8000a2e <CO_error+0x5e>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2205      	movs	r2, #5
 8000a18:	701a      	strb	r2, [r3, #0]
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8000a1a:	183b      	adds	r3, r7, r0
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	22c2      	movs	r2, #194	@ 0xc2
 8000a24:	01d2      	lsls	r2, r2, #7
 8000a26:	801a      	strh	r2, [r3, #0]
        infoCode = errorBit;
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8000a2e:	232f      	movs	r3, #47	@ 0x2f
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	18d3      	adds	r3, r2, r3
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	2027      	movs	r0, #39	@ 0x27
 8000a40:	183b      	adds	r3, r7, r0
 8000a42:	212e      	movs	r1, #46	@ 0x2e
 8000a44:	1879      	adds	r1, r7, r1
 8000a46:	7809      	ldrb	r1, [r1, #0]
 8000a48:	400a      	ands	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d004      	beq.n	8000a5c <CO_error+0x8c>
        if (errorStatusBitMasked != 0U) {
 8000a52:	183b      	adds	r3, r7, r0
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d009      	beq.n	8000a6e <CO_error+0x9e>
            return;
 8000a5a:	e08a      	b.n	8000b72 <CO_error+0x1a2>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 8000a5c:	2327      	movs	r3, #39	@ 0x27
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d100      	bne.n	8000a68 <CO_error+0x98>
 8000a66:	e083      	b.n	8000b70 <CO_error+0x1a0>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	801a      	strh	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	061a      	lsls	r2, r3, #24
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a7e:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a84:	f3ef 8210 	mrs	r2, PRIMASK
 8000a88:	617a      	str	r2, [r7, #20]
  return(result);
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
    if (setError) {
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d009      	beq.n	8000aac <CO_error+0xdc>
        *errorStatusBits |= bitmask;
 8000a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	232e      	movs	r3, #46	@ 0x2e
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e00d      	b.n	8000ac8 <CO_error+0xf8>
    } else {
        *errorStatusBits &= ~bitmask;
 8000aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	222e      	movs	r2, #46	@ 0x2e
 8000ab4:	18ba      	adds	r2, r7, r2
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	b252      	sxtb	r2, r2
 8000aba:	43d2      	mvns	r2, r2
 8000abc:	b252      	sxtb	r2, r2
 8000abe:	4013      	ands	r3, r2
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ac6:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	7f1b      	ldrb	r3, [r3, #28]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d945      	bls.n	8000b5c <CO_error+0x18c>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000ad0:	201b      	movs	r0, #27
 8000ad2:	183b      	adds	r3, r7, r0
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	7f52      	ldrb	r2, [r2, #29]
 8000ad8:	701a      	strb	r2, [r3, #0]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8000ada:	212d      	movs	r1, #45	@ 0x2d
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	183a      	adds	r2, r7, r0
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	3201      	adds	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
        if (fifoWrPtrNext >= em->fifoSize) {
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	7f1b      	ldrb	r3, [r3, #28]
 8000aea:	187a      	adds	r2, r7, r1
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d302      	bcc.n	8000af8 <CO_error+0x128>
            fifoWrPtrNext = 0;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	7f9b      	ldrb	r3, [r3, #30]
 8000afc:	222d      	movs	r2, #45	@ 0x2d
 8000afe:	18ba      	adds	r2, r7, r2
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d103      	bne.n	8000b0e <CO_error+0x13e>
            em->fifoOverflow = 1;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	77da      	strb	r2, [r3, #31]
 8000b0c:	e026      	b.n	8000b5c <CO_error+0x18c>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	699a      	ldr	r2, [r3, #24]
 8000b12:	211b      	movs	r1, #27
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	18d3      	adds	r3, r2, r3
 8000b1c:	6a3a      	ldr	r2, [r7, #32]
 8000b1e:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	699a      	ldr	r2, [r3, #24]
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	18d3      	adds	r3, r2, r3
 8000b2c:	69fa      	ldr	r2, [r7, #28]
 8000b2e:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	222d      	movs	r2, #45	@ 0x2d
 8000b34:	18ba      	adds	r2, r7, r2
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	5c9b      	ldrb	r3, [r3, r2]
 8000b40:	001a      	movs	r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	7f1b      	ldrb	r3, [r3, #28]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <CO_error+0x18c>
                em->fifoCount++;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2220      	movs	r2, #32
 8000b50:	5c9b      	ldrb	r3, [r3, r2]
 8000b52:	3301      	adds	r3, #1
 8000b54:	b2d9      	uxtb	r1, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2220      	movs	r2, #32
 8000b5a:	5499      	strb	r1, [r3, r2]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	f383 8810 	msr	PRIMASK, r3
}
 8000b6a:	e002      	b.n	8000b72 <CO_error+0x1a2>
        return;
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	e000      	b.n	8000b72 <CO_error+0x1a2>
            return;
 8000b70:	46c0      	nop			@ (mov r8, r8)
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b00c      	add	sp, #48	@ 0x30
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	230c      	movs	r3, #12
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	2204      	movs	r2, #4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f00e ffc9 	bl	800fb20 <memmove>
    return value;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b004      	add	sp, #16
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <OD_getIndex+0x14>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	e000      	b.n	8000bae <OD_getIndex+0x16>
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	0018      	movs	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	e003      	b.n	8000bd2 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af02      	add	r7, sp, #8
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	200b      	movs	r0, #11
 8000be8:	183b      	adds	r3, r7, r0
 8000bea:	1c0a      	adds	r2, r1, #0
 8000bec:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	183b      	adds	r3, r7, r0
 8000bf2:	7819      	ldrb	r1, [r3, #0]
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	f001 f8aa 	bl	8001d54 <OD_get_value>
 8000c00:	0003      	movs	r3, r0
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000c18:	2113      	movs	r1, #19
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	7912      	ldrb	r2, [r2, #4]
 8000c20:	701a      	strb	r2, [r3, #0]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	3305      	adds	r3, #5
 8000c26:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d107      	bne.n	8000c40 <CO_HBcons_receive+0x36>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b006      	add	sp, #24
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d012      	beq.n	8000c88 <OD_write_1016+0x40>
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00f      	beq.n	8000c88 <OD_write_1016+0x40>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	7d1b      	ldrb	r3, [r3, #20]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00b      	beq.n	8000c88 <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	7d1a      	ldrb	r2, [r3, #20]
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	7a1b      	ldrb	r3, [r3, #8]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d805      	bhi.n	8000c88 <OD_write_1016+0x40>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d102      	bne.n	8000c88 <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 8000c88:	2309      	movs	r3, #9
 8000c8a:	e02c      	b.n	8000ce6 <OD_write_1016+0x9e>
    }

    uint32_t val = CO_getUint32(buf);
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff ff72 	bl	8000b78 <CO_getUint32>
 8000c94:	0003      	movs	r3, r0
 8000c96:	61bb      	str	r3, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	0c1a      	lsrs	r2, r3, #16
 8000c9c:	2017      	movs	r0, #23
 8000c9e:	183b      	adds	r3, r7, r0
 8000ca0:	701a      	strb	r2, [r3, #0]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000ca2:	2514      	movs	r5, #20
 8000ca4:	197b      	adds	r3, r7, r5
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	801a      	strh	r2, [r3, #0]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	7d1b      	ldrb	r3, [r3, #20]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	b2d9      	uxtb	r1, r3
 8000cb2:	2613      	movs	r6, #19
 8000cb4:	19bc      	adds	r4, r7, r6
 8000cb6:	197b      	adds	r3, r7, r5
 8000cb8:	881d      	ldrh	r5, [r3, #0]
 8000cba:	183b      	adds	r3, r7, r0
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	69f8      	ldr	r0, [r7, #28]
 8000cc0:	002b      	movs	r3, r5
 8000cc2:	f000 f8e9 	bl	8000e98 <CO_HBconsumer_initEntry>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	7023      	strb	r3, [r4, #0]
    if (ret != CO_ERROR_NO) {
 8000cca:	19bb      	adds	r3, r7, r6
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <OD_write_1016+0x90>
        return ODR_PAR_INCOMPAT;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	e006      	b.n	8000ce6 <OD_write_1016+0x9e>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f000 fdf3 	bl	80018ca <OD_writeOriginal>
 8000ce4:	0003      	movs	r3, r0
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b009      	add	sp, #36	@ 0x24
 8000cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000cf0 <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	1cfb      	adds	r3, r7, #3
 8000d00:	701a      	strb	r2, [r3, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00b      	beq.n	8000d20 <CO_HBconsumer_init+0x30>
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d008      	beq.n	8000d20 <CO_HBconsumer_init+0x30>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <CO_HBconsumer_init+0x30>
 8000d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <CO_HBconsumer_init+0x30>
        || (CANdevRx == NULL)) {
 8000d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <CO_HBconsumer_init+0x36>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000d20:	2301      	movs	r3, #1
 8000d22:	425b      	negs	r3, r3
 8000d24:	e0af      	b.n	8000e86 <CO_HBconsumer_init+0x196>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2230      	movs	r2, #48	@ 0x30
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f00e ff0a 	bl	800fb46 <memset>
    HBcons->em = em;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d42:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2238      	movs	r2, #56	@ 0x38
 8000d48:	2108      	movs	r1, #8
 8000d4a:	1852      	adds	r2, r2, r1
 8000d4c:	19d2      	adds	r2, r2, r7
 8000d4e:	8812      	ldrh	r2, [r2, #0]
 8000d50:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8000d52:	1cfb      	adds	r3, r7, #3
 8000d54:	781a      	ldrb	r2, [r3, #0]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d58:	789b      	ldrb	r3, [r3, #2]
 8000d5a:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d900      	bls.n	8000d62 <CO_HBconsumer_init+0x72>
 8000d60:	001a      	movs	r2, r3
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000d68:	231f      	movs	r3, #31
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e059      	b.n	8000e26 <CO_HBconsumer_init+0x136>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 8000d72:	231f      	movs	r3, #31
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b2d9      	uxtb	r1, r3
 8000d7c:	251e      	movs	r5, #30
 8000d7e:	197c      	adds	r4, r7, r5
 8000d80:	2314      	movs	r3, #20
 8000d82:	18fa      	adds	r2, r7, r3
 8000d84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000d86:	2301      	movs	r3, #1
 8000d88:	f7ff ff27 	bl	8000bda <OD_get_u32>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	7023      	strb	r3, [r4, #0]
        if (odRet != ODR_OK) {
 8000d90:	197b      	adds	r3, r7, r5
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00d      	beq.n	8000db6 <CO_HBconsumer_init+0xc6>
            if (errInfo != NULL) {
 8000d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d007      	beq.n	8000db0 <CO_HBconsumer_init+0xc0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fef8 	bl	8000b98 <OD_getIndex>
 8000da8:	0003      	movs	r3, r0
 8000daa:	001a      	movs	r2, r3
 8000dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dae:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8000db0:	230c      	movs	r3, #12
 8000db2:	425b      	negs	r3, r3
 8000db4:	e067      	b.n	8000e86 <CO_HBconsumer_init+0x196>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	0c1a      	lsrs	r2, r3, #16
 8000dba:	211d      	movs	r1, #29
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	701a      	strb	r2, [r3, #0]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	201a      	movs	r0, #26
 8000dc4:	183b      	adds	r3, r7, r0
 8000dc6:	801a      	strh	r2, [r3, #0]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 8000dc8:	2619      	movs	r6, #25
 8000dca:	19bc      	adds	r4, r7, r6
 8000dcc:	183b      	adds	r3, r7, r0
 8000dce:	881d      	ldrh	r5, [r3, #0]
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	231f      	movs	r3, #31
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	7819      	ldrb	r1, [r3, #0]
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	002b      	movs	r3, r5
 8000dde:	f000 f85b 	bl	8000e98 <CO_HBconsumer_initEntry>
 8000de2:	0003      	movs	r3, r0
 8000de4:	7023      	strb	r3, [r4, #0]
        if (ret != CO_ERROR_NO) {
 8000de6:	19bb      	adds	r3, r7, r6
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d014      	beq.n	8000e1a <CO_HBconsumer_init+0x12a>
            if (errInfo != NULL) {
 8000df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d007      	beq.n	8000e06 <CO_HBconsumer_init+0x116>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff fecd 	bl	8000b98 <OD_getIndex>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	001a      	movs	r2, r3
 8000e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e04:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 8000e06:	2219      	movs	r2, #25
 8000e08:	18bb      	adds	r3, r7, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	330c      	adds	r3, #12
 8000e10:	d003      	beq.n	8000e1a <CO_HBconsumer_init+0x12a>
                return ret;
 8000e12:	18bb      	adds	r3, r7, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	e035      	b.n	8000e86 <CO_HBconsumer_init+0x196>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000e1a:	211f      	movs	r1, #31
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	3201      	adds	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	7a1b      	ldrb	r3, [r3, #8]
 8000e2a:	221f      	movs	r2, #31
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	7812      	ldrb	r2, [r2, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d39e      	bcc.n	8000d72 <CO_HBconsumer_init+0x82>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4a14      	ldr	r2, [pc, #80]	@ (8000e90 <CO_HBconsumer_init+0x1a0>)
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4a14      	ldr	r2, [pc, #80]	@ (8000e94 <CO_HBconsumer_init+0x1a4>)
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3320      	adds	r3, #32
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	251e      	movs	r5, #30
 8000e4e:	197c      	adds	r4, r7, r5
 8000e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff feae 	bl	8000bb6 <OD_extension_init>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8000e5e:	197b      	adds	r3, r7, r5
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d00d      	beq.n	8000e84 <CO_HBconsumer_init+0x194>
        if (errInfo != NULL) {
 8000e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <CO_HBconsumer_init+0x18e>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 8000e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff fe91 	bl	8000b98 <OD_getIndex>
 8000e76:	0003      	movs	r3, r0
 8000e78:	001a      	movs	r2, r3
 8000e7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e7c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	425b      	negs	r3, r3
 8000e82:	e000      	b.n	8000e86 <CO_HBconsumer_init+0x196>
    }
#endif

    return CO_ERROR_NO;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b009      	add	sp, #36	@ 0x24
 8000e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	0800180d 	.word	0x0800180d
 8000e94:	08000c49 	.word	0x08000c49

08000e98 <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	b08d      	sub	sp, #52	@ 0x34
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	000c      	movs	r4, r1
 8000ea2:	0010      	movs	r0, r2
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	1cfb      	adds	r3, r7, #3
 8000ea8:	1c22      	adds	r2, r4, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	1cbb      	adds	r3, r7, #2
 8000eae:	1c02      	adds	r2, r0, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	1c0a      	adds	r2, r1, #0
 8000eb6:	801a      	strh	r2, [r3, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000eb8:	231f      	movs	r3, #31
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <CO_HBconsumer_initEntry+0x3a>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a1b      	ldrb	r3, [r3, #8]
 8000eca:	1cfa      	adds	r2, r7, #3
 8000ecc:	7812      	ldrb	r2, [r2, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d302      	bcc.n	8000ed8 <CO_HBconsumer_initEntry+0x40>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	425b      	negs	r3, r3
 8000ed6:	e0a0      	b.n	800101a <CO_HBconsumer_initEntry+0x182>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 8000ed8:	003b      	movs	r3, r7
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d036      	beq.n	8000f4e <CO_HBconsumer_initEntry+0xb6>
 8000ee0:	1cbb      	adds	r3, r7, #2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d032      	beq.n	8000f4e <CO_HBconsumer_initEntry+0xb6>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000ee8:	231e      	movs	r3, #30
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e026      	b.n	8000f40 <CO_HBconsumer_initEntry+0xa8>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	261e      	movs	r6, #30
 8000ef8:	19bb      	adds	r3, r7, r6
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	18d2      	adds	r2, r2, r3
 8000f00:	2508      	movs	r5, #8
 8000f02:	197b      	adds	r3, r7, r5
 8000f04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f06:	c313      	stmia	r3!, {r0, r1, r4}
 8000f08:	6812      	ldr	r2, [r2, #0]
 8000f0a:	601a      	str	r2, [r3, #0]
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 8000f0c:	1cfa      	adds	r2, r7, #3
 8000f0e:	19bb      	adds	r3, r7, r6
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d00d      	beq.n	8000f34 <CO_HBconsumer_initEntry+0x9c>
 8000f18:	197b      	adds	r3, r7, r5
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d009      	beq.n	8000f34 <CO_HBconsumer_initEntry+0x9c>
 8000f20:	197b      	adds	r3, r7, r5
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	1cba      	adds	r2, r7, #2
 8000f26:	7812      	ldrb	r2, [r2, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d103      	bne.n	8000f34 <CO_HBconsumer_initEntry+0x9c>
                ret = CO_ERROR_OD_PARAMETERS;
 8000f2c:	231f      	movs	r3, #31
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	22f4      	movs	r2, #244	@ 0xf4
 8000f32:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f34:	211e      	movs	r1, #30
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	3201      	adds	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7a1b      	ldrb	r3, [r3, #8]
 8000f44:	221e      	movs	r2, #30
 8000f46:	18ba      	adds	r2, r7, r2
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3d1      	bcc.n	8000ef2 <CO_HBconsumer_initEntry+0x5a>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8000f4e:	231f      	movs	r3, #31
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d15b      	bne.n	8001012 <CO_HBconsumer_initEntry+0x17a>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	1cfb      	adds	r3, r7, #3
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	18d3      	adds	r3, r2, r3
 8000f66:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	1cba      	adds	r2, r7, #2
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 8000f70:	003b      	movs	r3, r7
 8000f72:	881a      	ldrh	r2, [r3, #0]
 8000f74:	0013      	movs	r3, r2
 8000f76:	015b      	lsls	r3, r3, #5
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	189b      	adds	r3, r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	001a      	movs	r2, r3
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	22ff      	movs	r2, #255	@ 0xff
 8000f8a:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d011      	beq.n	8000fbe <CO_HBconsumer_initEntry+0x126>
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00d      	beq.n	8000fbe <CO_HBconsumer_initEntry+0x126>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	001a      	movs	r2, r3
 8000fa8:	231c      	movs	r3, #28
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	21e0      	movs	r1, #224	@ 0xe0
 8000fae:	00c9      	lsls	r1, r1, #3
 8000fb0:	468c      	mov	ip, r1
 8000fb2:	4462      	add	r2, ip
 8000fb4:	801a      	strh	r2, [r3, #0]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	709a      	strb	r2, [r3, #2]
 8000fbc:	e009      	b.n	8000fd2 <CO_HBconsumer_initEntry+0x13a>
        } else {
            COB_ID = 0;
 8000fbe:	231c      	movs	r3, #28
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	801a      	strh	r2, [r3, #0]
            monitoredNode->time_us = 0;
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6998      	ldr	r0, [r3, #24]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	8b9a      	ldrh	r2, [r3, #28]
 8000fda:	1cfb      	adds	r3, r7, #3
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	18d3      	adds	r3, r2, r3
 8000fe2:	b299      	uxth	r1, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	1cfb      	adds	r3, r7, #3
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	18d3      	adds	r3, r2, r3
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8000ff0:	221f      	movs	r2, #31
 8000ff2:	18bc      	adds	r4, r7, r2
 8000ff4:	4e0b      	ldr	r6, [pc, #44]	@ (8001024 <CO_HBconsumer_initEntry+0x18c>)
 8000ff6:	221c      	movs	r2, #28
 8000ff8:	18ba      	adds	r2, r7, r2
 8000ffa:	8815      	ldrh	r5, [r2, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <CO_HBconsumer_initEntry+0x190>)
 8000ffe:	9202      	str	r2, [sp, #8]
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2300      	movs	r3, #0
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	0033      	movs	r3, r6
 8001008:	002a      	movs	r2, r5
 800100a:	f006 fe4d 	bl	8007ca8 <CO_CANrxBufferInit>
 800100e:	0003      	movs	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
    }
    return ret;
 8001012:	231f      	movs	r3, #31
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b25b      	sxtb	r3, r3
}
 800101a:	0018      	movs	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	b009      	add	sp, #36	@ 0x24
 8001020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	000007ff 	.word	0x000007ff
 8001028:	08000c0b 	.word	0x08000c0b

0800102c <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	@ 0x38
 8001030:	af02      	add	r7, sp, #8
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 800103a:	2301      	movs	r3, #1
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 800103e:	2301      	movs	r3, #1
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d100      	bne.n	800104a <CO_HBconsumer_process+0x1e>
 8001048:	e07d      	b.n	8001146 <CO_HBconsumer_process+0x11a>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <CO_HBconsumer_process+0x28>
 8001052:	e078      	b.n	8001146 <CO_HBconsumer_process+0x11a>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001054:	2327      	movs	r3, #39	@ 0x27
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e06b      	b.n	8001136 <CO_HBconsumer_process+0x10a>
            uint32_t timeDifference_us_copy = timeDifference_us;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	2127      	movs	r1, #39	@ 0x27
 8001068:	187b      	adds	r3, r7, r1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	18d3      	adds	r3, r2, r3
 8001070:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	789b      	ldrb	r3, [r3, #2]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d056      	beq.n	8001128 <CO_HBconsumer_process+0xfc>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d022      	beq.n	80010c8 <CO_HBconsumer_process+0x9c>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	b25b      	sxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d112      	bne.n	80010b2 <CO_HBconsumer_process+0x86>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	789b      	ldrb	r3, [r3, #2]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d10a      	bne.n	80010aa <CO_HBconsumer_process+0x7e>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	187b      	adds	r3, r7, r1
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4a56      	ldr	r2, [pc, #344]	@ (80011f8 <CO_HBconsumer_process+0x1cc>)
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	0013      	movs	r3, r2
 80010a2:	221c      	movs	r2, #28
 80010a4:	2101      	movs	r1, #1
 80010a6:	f7ff fc93 	bl	80009d0 <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	2201      	movs	r2, #1
 80010ae:	709a      	strb	r2, [r3, #2]
 80010b0:	e007      	b.n	80010c2 <CO_HBconsumer_process+0x96>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2202      	movs	r2, #2
 80010b6:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	789b      	ldrb	r3, [r3, #2]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d11d      	bne.n	800110c <CO_HBconsumer_process+0xe0>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	18d2      	adds	r2, r2, r3
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d311      	bcc.n	800110c <CO_HBconsumer_process+0xe0>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	2327      	movs	r3, #39	@ 0x27
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4a41      	ldr	r2, [pc, #260]	@ (80011f8 <CO_HBconsumer_process+0x1cc>)
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	0013      	movs	r3, r2
 80010f8:	221b      	movs	r2, #27
 80010fa:	2101      	movs	r1, #1
 80010fc:	f7ff fc68 	bl	80009d0 <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	22ff      	movs	r2, #255	@ 0xff
 8001104:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	2203      	movs	r2, #3
 800110a:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	789b      	ldrb	r3, [r3, #2]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d001      	beq.n	8001118 <CO_HBconsumer_process+0xec>
                allMonitoredActiveCurrent = false;
 8001114:	2300      	movs	r3, #0
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	785b      	ldrb	r3, [r3, #1]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	2b05      	cmp	r3, #5
 8001120:	d003      	beq.n	800112a <CO_HBconsumer_process+0xfe>
                allMonitoredOperationalCurrent = false;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001126:	e000      	b.n	800112a <CO_HBconsumer_process+0xfe>
                continue;
 8001128:	46c0      	nop			@ (mov r8, r8)
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800112a:	2127      	movs	r1, #39	@ 0x27
 800112c:	187b      	adds	r3, r7, r1
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	187b      	adds	r3, r7, r1
 8001132:	3201      	adds	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	7a1b      	ldrb	r3, [r3, #8]
 800113a:	2227      	movs	r2, #39	@ 0x27
 800113c:	18ba      	adds	r2, r7, r2
 800113e:	7812      	ldrb	r2, [r2, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d38c      	bcc.n	800105e <CO_HBconsumer_process+0x32>
 8001144:	e031      	b.n	80011aa <CO_HBconsumer_process+0x17e>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <CO_HBconsumer_process+0x128>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d02a      	beq.n	80011aa <CO_HBconsumer_process+0x17e>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001154:	231f      	movs	r3, #31
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e01a      	b.n	8001194 <CO_HBconsumer_process+0x168>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	231f      	movs	r3, #31
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	18d3      	adds	r3, r2, r3
 800116c:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	22ff      	movs	r2, #255	@ 0xff
 8001172:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <CO_HBconsumer_process+0x15c>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2201      	movs	r2, #1
 8001186:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001188:	211f      	movs	r1, #31
 800118a:	187b      	adds	r3, r7, r1
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	187b      	adds	r3, r7, r1
 8001190:	3201      	adds	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	7a1b      	ldrb	r3, [r3, #8]
 8001198:	221f      	movs	r2, #31
 800119a:	18ba      	adds	r2, r7, r2
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3dd      	bcc.n	800115e <CO_HBconsumer_process+0x132>
            }
        }
        allMonitoredActiveCurrent = false;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        allMonitoredOperationalCurrent = false;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d114      	bne.n	80011dc <CO_HBconsumer_process+0x1b0>
 80011b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d011      	beq.n	80011dc <CO_HBconsumer_process+0x1b0>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	2300      	movs	r3, #0
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	221b      	movs	r2, #27
 80011c4:	2100      	movs	r1, #0
 80011c6:	f7ff fc03 	bl	80009d0 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	2300      	movs	r3, #0
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	221c      	movs	r2, #28
 80011d6:	2100      	movs	r1, #0
 80011d8:	f7ff fbfa 	bl	80009d0 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011e0:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011e6:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b00c      	add	sp, #48	@ 0x30
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	00008130 	.word	0x00008130

080011fc <CO_getUint16>:
CO_getUint16(const void* buf) {
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	240e      	movs	r4, #14
 8001208:	193b      	adds	r3, r7, r4
 800120a:	2202      	movs	r2, #2
 800120c:	0018      	movs	r0, r3
 800120e:	f00e fc87 	bl	800fb20 <memmove>
    return value;
 8001212:	193b      	adds	r3, r7, r4
 8001214:	881b      	ldrh	r3, [r3, #0]
}
 8001216:	0018      	movs	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	b005      	add	sp, #20
 800121c:	bd90      	pop	{r4, r7, pc}

0800121e <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <OD_getIndex+0x14>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	e000      	b.n	8001234 <OD_getIndex+0x16>
 8001232:	2300      	movs	r3, #0
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}

0800123c <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 800124c:	2305      	movs	r3, #5
 800124e:	e003      	b.n	8001258 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bd80      	pop	{r7, pc}

08001260 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	200b      	movs	r0, #11
 800126e:	183b      	adds	r3, r7, r0
 8001270:	1c0a      	adds	r2, r1, #0
 8001272:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	183b      	adds	r3, r7, r0
 8001278:	7819      	ldrb	r1, [r3, #0]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2302      	movs	r3, #2
 8001282:	f000 fd67 	bl	8001d54 <OD_get_value>
 8001286:	0003      	movs	r3, r0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}

08001290 <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	000a      	movs	r2, r1
 800129a:	1cfb      	adds	r3, r7, #3
 800129c:	701a      	strb	r2, [r3, #0]
    uint8_t index = errorBit >> 3;
 800129e:	210f      	movs	r1, #15
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	1cfa      	adds	r2, r7, #3
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	08d2      	lsrs	r2, r2, #3
 80012a8:	701a      	strb	r2, [r3, #0]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80012aa:	1cfb      	adds	r3, r7, #3
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2207      	movs	r2, #7
 80012b0:	4013      	ands	r3, r2
 80012b2:	2201      	movs	r2, #1
 80012b4:	409a      	lsls	r2, r3
 80012b6:	200e      	movs	r0, #14
 80012b8:	183b      	adds	r3, r7, r0
 80012ba:	701a      	strb	r2, [r3, #0]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00d      	beq.n	80012de <CO_isError+0x4e>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	d809      	bhi.n	80012de <CO_isError+0x4e>
            || (em->errorStatusBits[index] & bitmask) != 0)
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	183a      	adds	r2, r7, r0
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	4013      	ands	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
               : false;
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <CO_isError+0x52>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <CO_isError+0x54>
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}

080012ec <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <CO_getErrorRegister+0x1e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <CO_getErrorRegister+0x1e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	e000      	b.n	800130c <CO_getErrorRegister+0x20>
 800130a:	2300      	movs	r3, #0
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b002      	add	sp, #8
 8001312:	bd80      	pop	{r7, pc}

08001314 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800131e:	2017      	movs	r0, #23
 8001320:	183b      	adds	r3, r7, r0
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	7912      	ldrb	r2, [r2, #4]
 8001326:	701a      	strb	r2, [r3, #0]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	3305      	adds	r3, #5
 800132c:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 800132e:	230f      	movs	r3, #15
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	701a      	strb	r2, [r3, #0]
    uint8_t nodeId = data[1];
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	210e      	movs	r1, #14
 800133e:	187b      	adds	r3, r7, r1
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	701a      	strb	r2, [r3, #0]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 8001348:	183b      	adds	r3, r7, r0
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d10e      	bne.n	800136e <CO_NMT_receive+0x5a>
 8001350:	187b      	adds	r3, r7, r1
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <CO_NMT_receive+0x50>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	78db      	ldrb	r3, [r3, #3]
 800135c:	187a      	adds	r2, r7, r1
 800135e:	7812      	ldrb	r2, [r2, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d104      	bne.n	800136e <CO_NMT_receive+0x5a>
        NMT->internalCommand = command;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	220f      	movs	r2, #15
 8001368:	18ba      	adds	r2, r7, r2
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b006      	add	sp, #24
 8001374:	bd80      	pop	{r7, pc}

08001376 <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00c      	beq.n	80013a4 <OD_write_1017+0x2e>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	7d1b      	ldrb	r3, [r3, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d108      	bne.n	80013a4 <OD_write_1017+0x2e>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <OD_write_1017+0x2e>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d102      	bne.n	80013a4 <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 80013a4:	2309      	movs	r3, #9
 80013a6:	e01b      	b.n	80013e0 <OD_write_1017+0x6a>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff ff23 	bl	80011fc <CO_getUint16>
 80013b6:	0003      	movs	r3, r0
 80013b8:	001a      	movs	r2, r3
 80013ba:	0013      	movs	r3, r2
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	189b      	adds	r3, r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	001a      	movs	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	68b9      	ldr	r1, [r7, #8]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 fa76 	bl	80018ca <OD_writeOriginal>
 80013de:	0003      	movs	r3, r0
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b006      	add	sp, #24
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ea:	b08b      	sub	sp, #44	@ 0x2c
 80013ec:	af04      	add	r7, sp, #16
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	001a      	movs	r2, r3
 80013f6:	1cfb      	adds	r3, r7, #3
 80013f8:	701a      	strb	r2, [r3, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80013fa:	2317      	movs	r3, #23
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00b      	beq.n	8001420 <CO_NMT_init+0x38>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d008      	beq.n	8001420 <CO_NMT_init+0x38>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <CO_NMT_init+0x38>
 8001414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <CO_NMT_init+0x38>
        || (HB_CANdevTx == NULL)
 800141a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <CO_NMT_init+0x3e>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001420:	2301      	movs	r3, #1
 8001422:	425b      	negs	r3, r3
 8001424:	e0c6      	b.n	80015b4 <CO_NMT_init+0x1cc>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	222c      	movs	r2, #44	@ 0x2c
 800142a:	2100      	movs	r1, #0
 800142c:	0018      	movs	r0, r3
 800142e:	f00e fb8a 	bl	800fb46 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1cfa      	adds	r2, r7, #3
 8001442:	7812      	ldrb	r2, [r2, #0]
 8001444:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	2328      	movs	r3, #40	@ 0x28
 800144a:	2108      	movs	r1, #8
 800144c:	185b      	adds	r3, r3, r1
 800144e:	19db      	adds	r3, r3, r7
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	8093      	strh	r3, [r2, #4]
    NMT->em = em;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 800145a:	232c      	movs	r3, #44	@ 0x2c
 800145c:	185b      	adds	r3, r3, r1
 800145e:	19db      	adds	r3, r3, r7
 8001460:	881a      	ldrh	r2, [r3, #0]
 8001462:	0013      	movs	r3, r2
 8001464:	015b      	lsls	r3, r3, #5
 8001466:	1a9b      	subs	r3, r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	189b      	adds	r3, r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	001a      	movs	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001474:	2516      	movs	r5, #22
 8001476:	197c      	adds	r4, r7, r5
 8001478:	2314      	movs	r3, #20
 800147a:	18fa      	adds	r2, r7, r3
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	2301      	movs	r3, #1
 8001480:	2100      	movs	r1, #0
 8001482:	f7ff feed 	bl	8001260 <OD_get_u16>
 8001486:	0003      	movs	r3, r0
 8001488:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 800148a:	197b      	adds	r3, r7, r5
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b25b      	sxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00d      	beq.n	80014b0 <CO_NMT_init+0xc8>
        if (errInfo != NULL) {
 8001494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <CO_NMT_init+0xc2>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff febe 	bl	800121e <OD_getIndex>
 80014a2:	0003      	movs	r3, r0
 80014a4:	001a      	movs	r2, r3
 80014a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014a8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80014aa:	230c      	movs	r3, #12
 80014ac:	425b      	negs	r3, r3
 80014ae:	e081      	b.n	80015b4 <CO_NMT_init+0x1cc>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 80014b0:	2314      	movs	r3, #20
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	001a      	movs	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	015b      	lsls	r3, r3, #5
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	189b      	adds	r3, r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	001a      	movs	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4a3a      	ldr	r2, [pc, #232]	@ (80015bc <CO_NMT_init+0x1d4>)
 80014d4:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4a39      	ldr	r2, [pc, #228]	@ (80015c0 <CO_NMT_init+0x1d8>)
 80014da:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3310      	adds	r3, #16
 80014e0:	001a      	movs	r2, r3
 80014e2:	2516      	movs	r5, #22
 80014e4:	197c      	adds	r4, r7, r5
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	0011      	movs	r1, r2
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff fea6 	bl	800123c <OD_extension_init>
 80014f0:	0003      	movs	r3, r0
 80014f2:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 80014f4:	197b      	adds	r3, r7, r5
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00d      	beq.n	800151a <CO_NMT_init+0x132>
        if (errInfo != NULL) {
 80014fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <CO_NMT_init+0x12c>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fe89 	bl	800121e <OD_getIndex>
 800150c:	0003      	movs	r3, r0
 800150e:	001a      	movs	r2, r3
 8001510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001512:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001514:	230c      	movs	r3, #12
 8001516:	425b      	negs	r3, r3
 8001518:	e04c      	b.n	80015b4 <CO_NMT_init+0x1cc>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	429a      	cmp	r2, r3
 8001524:	d903      	bls.n	800152e <CO_NMT_init+0x146>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 800152e:	2617      	movs	r6, #23
 8001530:	19bc      	adds	r4, r7, r6
 8001532:	4d24      	ldr	r5, [pc, #144]	@ (80015c4 <CO_NMT_init+0x1dc>)
 8001534:	2338      	movs	r3, #56	@ 0x38
 8001536:	2108      	movs	r1, #8
 8001538:	185b      	adds	r3, r3, r1
 800153a:	19db      	adds	r3, r3, r7
 800153c:	881a      	ldrh	r2, [r3, #0]
 800153e:	2334      	movs	r3, #52	@ 0x34
 8001540:	185b      	adds	r3, r3, r1
 8001542:	19db      	adds	r3, r3, r7
 8001544:	8819      	ldrh	r1, [r3, #0]
 8001546:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001548:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <CO_NMT_init+0x1e0>)
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	2300      	movs	r3, #0
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	002b      	movs	r3, r5
 8001556:	f006 fba7 	bl	8007ca8 <CO_CANrxBufferInit>
 800155a:	0003      	movs	r3, r0
 800155c:	7023      	strb	r3, [r4, #0]
    if (ret != CO_ERROR_NO) {
 800155e:	19bb      	adds	r3, r7, r6
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b25b      	sxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <CO_NMT_init+0x188>
        return ret;
 8001568:	19bb      	adds	r3, r7, r6
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	e021      	b.n	80015b4 <CO_NMT_init+0x1cc>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 8001576:	2344      	movs	r3, #68	@ 0x44
 8001578:	2108      	movs	r1, #8
 800157a:	185b      	adds	r3, r3, r1
 800157c:	19db      	adds	r3, r3, r7
 800157e:	881a      	ldrh	r2, [r3, #0]
 8001580:	2340      	movs	r3, #64	@ 0x40
 8001582:	185b      	adds	r3, r3, r1
 8001584:	19db      	adds	r3, r3, r7
 8001586:	8819      	ldrh	r1, [r3, #0]
 8001588:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800158a:	2300      	movs	r3, #0
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	2301      	movs	r3, #1
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2300      	movs	r3, #0
 8001594:	f006 fbf0 	bl	8007d78 <CO_CANtxBufferInit>
 8001598:	0002      	movs	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (NMT->HB_TXbuff == NULL) {
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <CO_NMT_init+0x1c4>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80015a6:	2301      	movs	r3, #1
 80015a8:	425b      	negs	r3, r3
 80015aa:	e003      	b.n	80015b4 <CO_NMT_init+0x1cc>
    }

    return ret;
 80015ac:	2317      	movs	r3, #23
 80015ae:	18fb      	adds	r3, r7, r3
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b25b      	sxtb	r3, r3
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b007      	add	sp, #28
 80015ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015bc:	0800180d 	.word	0x0800180d
 80015c0:	08001377 	.word	0x08001377
 80015c4:	000007ff 	.word	0x000007ff
 80015c8:	08001315 	.word	0x08001315

080015cc <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b08f      	sub	sp, #60	@ 0x3c
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80015da:	2137      	movs	r1, #55	@ 0x37
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	701a      	strb	r2, [r3, #0]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80015e4:	2336      	movs	r3, #54	@ 0x36
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	425a      	negs	r2, r3
 80015f4:	4153      	adcs	r3, r2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	d204      	bcs.n	800160e <CO_NMT_process+0x42>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	1ad2      	subs	r2, r2, r3
 800160c:	e000      	b.n	8001610 <CO_NMT_process+0x44>
 800160e:	2200      	movs	r2, #0
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	60da      	str	r2, [r3, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 8001614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001616:	2b00      	cmp	r3, #0
 8001618:	d110      	bne.n	800163c <CO_NMT_process+0x70>
        || ((NMT->HBproducerTime_us != 0U)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d027      	beq.n	8001672 <CO_NMT_process+0xa6>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <CO_NMT_process+0x70>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	b25b      	sxtb	r3, r3
 8001630:	2237      	movs	r2, #55	@ 0x37
 8001632:	18ba      	adds	r2, r7, r2
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	b252      	sxtb	r2, r2
 8001638:	429a      	cmp	r2, r3
 800163a:	d01a      	beq.n	8001672 <CO_NMT_process+0xa6>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	2437      	movs	r4, #55	@ 0x37
 8001642:	193a      	adds	r2, r7, r4
 8001644:	7812      	ldrb	r2, [r2, #0]
 8001646:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001650:	0019      	movs	r1, r3
 8001652:	0010      	movs	r0, r2
 8001654:	f006 fc4e 	bl	8007ef4 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001658:	193b      	adds	r3, r7, r4
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b25b      	sxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <CO_NMT_process+0x9e>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_PRE_OPERATIONAL) != 0U)
 8001662:	193b      	adds	r3, r7, r4
 8001664:	227f      	movs	r2, #127	@ 0x7f
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e003      	b.n	8001672 <CO_NMT_process+0xa6>
                              : CO_NMT_PRE_OPERATIONAL;
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2237      	movs	r2, #55	@ 0x37
 8001676:	18ba      	adds	r2, r7, r2
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	789b      	ldrb	r3, [r3, #2]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d02c      	beq.n	80016de <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	789b      	ldrb	r3, [r3, #2]
 8001688:	2b82      	cmp	r3, #130	@ 0x82
 800168a:	d01f      	beq.n	80016cc <CO_NMT_process+0x100>
 800168c:	dc23      	bgt.n	80016d6 <CO_NMT_process+0x10a>
 800168e:	2b81      	cmp	r3, #129	@ 0x81
 8001690:	d017      	beq.n	80016c2 <CO_NMT_process+0xf6>
 8001692:	dc20      	bgt.n	80016d6 <CO_NMT_process+0x10a>
 8001694:	2b80      	cmp	r3, #128	@ 0x80
 8001696:	d00f      	beq.n	80016b8 <CO_NMT_process+0xec>
 8001698:	dc1d      	bgt.n	80016d6 <CO_NMT_process+0x10a>
 800169a:	2b01      	cmp	r3, #1
 800169c:	d002      	beq.n	80016a4 <CO_NMT_process+0xd8>
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d005      	beq.n	80016ae <CO_NMT_process+0xe2>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 80016a2:	e018      	b.n	80016d6 <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 80016a4:	2337      	movs	r3, #55	@ 0x37
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2205      	movs	r2, #5
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e014      	b.n	80016d8 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 80016ae:	2337      	movs	r3, #55	@ 0x37
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	2204      	movs	r2, #4
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e00f      	b.n	80016d8 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 80016b8:	2337      	movs	r3, #55	@ 0x37
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	227f      	movs	r2, #127	@ 0x7f
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	e00a      	b.n	80016d8 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 80016c2:	2336      	movs	r3, #54	@ 0x36
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	2202      	movs	r2, #2
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e005      	b.n	80016d8 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 80016cc:	2336      	movs	r3, #54	@ 0x36
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
 80016d4:	e000      	b.n	80016d8 <CO_NMT_process+0x10c>
                break;
 80016d6:	46c0      	nop			@ (mov r8, r8)
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	889b      	ldrh	r3, [r3, #4]
 80016e2:	001a      	movs	r2, r3
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	015b      	lsls	r3, r3, #5
 80016e8:	4013      	ands	r3, r2
 80016ea:	1e5a      	subs	r2, r3, #1
 80016ec:	4193      	sbcs	r3, r2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	2112      	movs	r1, #18
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff fdc9 	bl	8001290 <CO_isError>
 80016fe:	0003      	movs	r3, r0
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	211b      	movs	r1, #27
 8001708:	0018      	movs	r0, r3
 800170a:	f7ff fdc1 	bl	8001290 <CO_isError>
 800170e:	0003      	movs	r3, r0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	211c      	movs	r1, #28
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fdb9 	bl	8001290 <CO_isError>
 800171e:	0003      	movs	r3, r0
 8001720:	623b      	str	r3, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 8001722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00a      	beq.n	800173e <CO_NMT_process+0x172>
 8001728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <CO_NMT_process+0x16e>
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <CO_NMT_process+0x16e>
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <CO_NMT_process+0x172>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <CO_NMT_process+0x174>
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	889b      	ldrh	r3, [r3, #4]
 8001746:	001a      	movs	r2, r3
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	019b      	lsls	r3, r3, #6
 800174c:	4013      	ands	r3, r2
 800174e:	1e5a      	subs	r2, r3, #1
 8001750:	4193      	sbcs	r3, r2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	0018      	movs	r0, r3
 800175c:	f7ff fdc6 	bl	80012ec <CO_getErrorRegister>
 8001760:	0003      	movs	r3, r0
 8001762:	001a      	movs	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	889b      	ldrh	r3, [r3, #4]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4013      	ands	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	4193      	sbcs	r3, r2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <CO_NMT_process+0x1ba>
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <CO_NMT_process+0x1ba>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <CO_NMT_process+0x1bc>
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 800178a:	2337      	movs	r3, #55	@ 0x37
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	2b05      	cmp	r3, #5
 8001794:	d113      	bne.n	80017be <CO_NMT_process+0x1f2>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <CO_NMT_process+0x1d6>
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00d      	beq.n	80017be <CO_NMT_process+0x1f2>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	889b      	ldrh	r3, [r3, #4]
 80017a6:	001a      	movs	r2, r3
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	01db      	lsls	r3, r3, #7
 80017ac:	4013      	ands	r3, r2
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 80017ae:	d001      	beq.n	80017b4 <CO_NMT_process+0x1e8>
 80017b0:	2204      	movs	r2, #4
 80017b2:	e000      	b.n	80017b6 <CO_NMT_process+0x1ea>
 80017b4:	227f      	movs	r2, #127	@ 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 80017b6:	2337      	movs	r3, #55	@ 0x37
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e013      	b.n	80017e6 <CO_NMT_process+0x21a>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	889b      	ldrh	r3, [r3, #4]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	da0e      	bge.n	80017e6 <CO_NMT_process+0x21a>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 80017c8:	2237      	movs	r2, #55	@ 0x37
 80017ca:	18bb      	adds	r3, r7, r2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80017d2:	d108      	bne.n	80017e6 <CO_NMT_process+0x21a>
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d105      	bne.n	80017e6 <CO_NMT_process+0x21a>
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <CO_NMT_process+0x21a>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 80017e0:	18bb      	adds	r3, r7, r2
 80017e2:	2205      	movs	r2, #5
 80017e4:	701a      	strb	r2, [r3, #0]
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2137      	movs	r1, #55	@ 0x37
 80017ea:	187a      	adds	r2, r7, r1
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <CO_NMT_process+0x232>
        *NMTstate = NMTstateCpy;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	187a      	adds	r2, r7, r1
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 80017fe:	2336      	movs	r3, #54	@ 0x36
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	781b      	ldrb	r3, [r3, #0]
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b00f      	add	sp, #60	@ 0x3c
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <OD_readOriginal+0x20>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <OD_readOriginal+0x20>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800182c:	2309      	movs	r3, #9
 800182e:	e048      	b.n	80018c2 <OD_readOriginal+0xb6>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001842:	230e      	movs	r3, #14
 8001844:	e03d      	b.n	80018c2 <OD_readOriginal+0xb6>
    }

    ODR_t returnCode = ODR_OK;
 8001846:	2317      	movs	r3, #23
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d103      	bne.n	800185e <OD_readOriginal+0x52>
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	d924      	bls.n	80018a8 <OD_readOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	429a      	cmp	r2, r3
 8001866:	d801      	bhi.n	800186c <OD_readOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 8001868:	2309      	movs	r3, #9
 800186a:	e02a      	b.n	80018c2 <OD_readOriginal+0xb6>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	18d3      	adds	r3, r2, r3
 800187e:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d90c      	bls.n	80018a2 <OD_readOriginal+0x96>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	18d2      	adds	r2, r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001898:	2317      	movs	r3, #23
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	22ff      	movs	r2, #255	@ 0xff
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e002      	b.n	80018a8 <OD_readOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	69b9      	ldr	r1, [r7, #24]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	0018      	movs	r0, r3
 80018b0:	f00e f9df 	bl	800fc72 <memcpy>

    *countRead = dataLenToCopy;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	601a      	str	r2, [r3, #0]
    return returnCode;
 80018ba:	2317      	movs	r3, #23
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b25b      	sxtb	r3, r3
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b008      	add	sp, #32
 80018c8:	bd80      	pop	{r7, pc}

080018ca <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b088      	sub	sp, #32
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <OD_writeOriginal+0x20>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <OD_writeOriginal+0x20>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80018ea:	2309      	movs	r3, #9
 80018ec:	e05d      	b.n	80019aa <OD_writeOriginal+0xe0>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 8001904:	230e      	movs	r3, #14
 8001906:	e050      	b.n	80019aa <OD_writeOriginal+0xe0>
    }

    ODR_t returnCode = ODR_OK;
 8001908:	2313      	movs	r3, #19
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d103      	bne.n	8001920 <OD_writeOriginal+0x56>
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	d926      	bls.n	800196e <OD_writeOriginal+0xa4>
        if (stream->dataOffset >= dataLenToCopy) {
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	429a      	cmp	r2, r3
 8001928:	d801      	bhi.n	800192e <OD_writeOriginal+0x64>
            return ODR_DEV_INCOMPAT;
 800192a:	2309      	movs	r3, #9
 800192c:	e03d      	b.n	80019aa <OD_writeOriginal+0xe0>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	18d3      	adds	r3, r2, r3
 8001944:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d90c      	bls.n	8001968 <OD_writeOriginal+0x9e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	18d2      	adds	r2, r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 800195e:	2313      	movs	r3, #19
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	22ff      	movs	r2, #255	@ 0xff
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	e002      	b.n	800196e <OD_writeOriginal+0xa4>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	d201      	bcs.n	800197a <OD_writeOriginal+0xb0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8001976:	230c      	movs	r3, #12
 8001978:	e017      	b.n	80019aa <OD_writeOriginal+0xe0>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	429a      	cmp	r2, r3
 8001980:	d812      	bhi.n	80019a8 <OD_writeOriginal+0xde>
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	d80e      	bhi.n	80019a8 <OD_writeOriginal+0xde>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	0018      	movs	r0, r3
 8001992:	f00e f96e 	bl	800fc72 <memcpy>
 8001996:	46c0      	nop			@ (mov r8, r8)
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	601a      	str	r2, [r3, #0]
    return returnCode;
 800199e:	2313      	movs	r3, #19
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	e000      	b.n	80019aa <OD_writeOriginal+0xe0>
        return ODR_DEV_INCOMPAT;
 80019a8:	2309      	movs	r3, #9
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b008      	add	sp, #32
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 80019c0:	2302      	movs	r3, #2
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b004      	add	sp, #16
 80019c8:	bd80      	pop	{r7, pc}

080019ca <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 80019d8:	2302      	movs	r3, #2
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b004      	add	sp, #16
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index) {
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	000a      	movs	r2, r1
 80019ec:	1cbb      	adds	r3, r7, #2
 80019ee:	801a      	strh	r2, [r3, #0]
    if ((od == NULL) || (od->size == 0U)) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <OD_find+0x1c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <OD_find+0x20>
        return NULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e066      	b.n	8001ad0 <OD_find+0xee>
    }

    uint16_t min = 0;
 8001a02:	2316      	movs	r3, #22
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	2200      	movs	r2, #0
 8001a08:	801a      	strh	r2, [r3, #0]
    uint16_t max = od->size - 1U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	881a      	ldrh	r2, [r3, #0]
 8001a0e:	2314      	movs	r3, #20
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	3a01      	subs	r2, #1
 8001a14:	801a      	strh	r2, [r3, #0]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
    while (min < max) {
 8001a16:	e03a      	b.n	8001a8e <OD_find+0xac>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001a18:	2316      	movs	r3, #22
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	881a      	ldrh	r2, [r3, #0]
 8001a1e:	2314      	movs	r3, #20
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	18d3      	adds	r3, r2, r3
 8001a26:	105a      	asrs	r2, r3, #1
 8001a28:	200e      	movs	r0, #14
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	801a      	strh	r2, [r3, #0]
        OD_entry_t* entry = &od->list[cur];
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	183b      	adds	r3, r7, r0
 8001a34:	881a      	ldrh	r2, [r3, #0]
 8001a36:	0013      	movs	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	189b      	adds	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	18cb      	adds	r3, r1, r3
 8001a40:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	1cba      	adds	r2, r7, #2
 8001a48:	8812      	ldrh	r2, [r2, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d101      	bne.n	8001a52 <OD_find+0x70>
            return entry;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	e03e      	b.n	8001ad0 <OD_find+0xee>
        }

        if (index < entry->index) {
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	1cba      	adds	r2, r7, #2
 8001a58:	8812      	ldrh	r2, [r2, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d210      	bcs.n	8001a80 <OD_find+0x9e>
            max = (cur > 0U) ? (cur - 1U) : cur;
 8001a5e:	220e      	movs	r2, #14
 8001a60:	18bb      	adds	r3, r7, r2
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <OD_find+0x90>
 8001a68:	18bb      	adds	r3, r7, r2
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	e002      	b.n	8001a78 <OD_find+0x96>
 8001a72:	230e      	movs	r3, #14
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	2214      	movs	r2, #20
 8001a7a:	18ba      	adds	r2, r7, r2
 8001a7c:	8013      	strh	r3, [r2, #0]
 8001a7e:	e006      	b.n	8001a8e <OD_find+0xac>
        } else {
            min = cur + 1U;
 8001a80:	2316      	movs	r3, #22
 8001a82:	18fb      	adds	r3, r7, r3
 8001a84:	220e      	movs	r2, #14
 8001a86:	18ba      	adds	r2, r7, r2
 8001a88:	8812      	ldrh	r2, [r2, #0]
 8001a8a:	3201      	adds	r2, #1
 8001a8c:	801a      	strh	r2, [r3, #0]
    while (min < max) {
 8001a8e:	2016      	movs	r0, #22
 8001a90:	183a      	adds	r2, r7, r0
 8001a92:	2114      	movs	r1, #20
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	8812      	ldrh	r2, [r2, #0]
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3bc      	bcc.n	8001a18 <OD_find+0x36>
        }
    }

    if (min == max) {
 8001a9e:	183a      	adds	r2, r7, r0
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	8812      	ldrh	r2, [r2, #0]
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d111      	bne.n	8001ace <OD_find+0xec>
        OD_entry_t* entry = &od->list[min];
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6859      	ldr	r1, [r3, #4]
 8001aae:	183b      	adds	r3, r7, r0
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	189b      	adds	r3, r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	18cb      	adds	r3, r1, r3
 8001abc:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	1cba      	adds	r2, r7, #2
 8001ac4:	8812      	ldrh	r2, [r2, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d101      	bne.n	8001ace <OD_find+0xec>
            return entry;
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	e000      	b.n	8001ad0 <OD_find+0xee>
        }
    }

    return NULL; /* entry does not exist in OD */
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b006      	add	sp, #24
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <OD_getSub>:

ODR_t
OD_getSub(const OD_entry_t* entry, uint8_t subIndex, OD_IO_t* io, bool_t odOrig) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	@ 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	230b      	movs	r3, #11
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	1c0a      	adds	r2, r1, #0
 8001aea:	701a      	strb	r2, [r3, #0]
    if ((entry == NULL) || (entry->odObject == NULL)) {
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <OD_getSub+0x22>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <OD_getSub+0x26>
        return ODR_IDX_NOT_EXIST;
 8001afa:	2305      	movs	r3, #5
 8001afc:	e0ff      	b.n	8001cfe <OD_getSub+0x226>
    }
    if (io == NULL) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <OD_getSub+0x30>
        return ODR_DEV_INCOMPAT;
 8001b04:	2309      	movs	r3, #9
 8001b06:	e0fa      	b.n	8001cfe <OD_getSub+0x226>
    }

    ODR_t ret = ODR_OK;
 8001b08:	232f      	movs	r3, #47	@ 0x2f
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
    OD_stream_t* stream = &io->stream;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	623b      	str	r3, [r7, #32]

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK) {
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	78db      	ldrb	r3, [r3, #3]
 8001b18:	001a      	movs	r2, r3
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d05d      	beq.n	8001bde <OD_getSub+0x106>
 8001b22:	dd00      	ble.n	8001b26 <OD_getSub+0x4e>
 8001b24:	e0a2      	b.n	8001c6c <OD_getSub+0x194>
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d002      	beq.n	8001b30 <OD_getSub+0x58>
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d01a      	beq.n	8001b64 <OD_getSub+0x8c>
 8001b2e:	e09d      	b.n	8001c6c <OD_getSub+0x194>
        case ODT_VAR: {
            if (subIndex > 0U) {
 8001b30:	230b      	movs	r3, #11
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d004      	beq.n	8001b44 <OD_getSub+0x6c>
                ret = ODR_SUB_NOT_EXIST;
 8001b3a:	232f      	movs	r3, #47	@ 0x2f
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	220e      	movs	r2, #14
 8001b40:	701a      	strb	r2, [r3, #0]
                break;
 8001b42:	e098      	b.n	8001c76 <OD_getSub+0x19e>
            }
            CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	613b      	str	r3, [r7, #16]

            stream->attribute = odo->attribute;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	791a      	ldrb	r2, [r3, #4]
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	609a      	str	r2, [r3, #8]
            break;
 8001b62:	e088      	b.n	8001c76 <OD_getSub+0x19e>
        }
        case ODT_ARR: {
            if (subIndex >= entry->subEntriesCount) {
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	789b      	ldrb	r3, [r3, #2]
 8001b68:	220b      	movs	r2, #11
 8001b6a:	18ba      	adds	r2, r7, r2
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d304      	bcc.n	8001b7c <OD_getSub+0xa4>
                ret = ODR_SUB_NOT_EXIST;
 8001b72:	232f      	movs	r3, #47	@ 0x2f
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	220e      	movs	r2, #14
 8001b78:	701a      	strb	r2, [r3, #0]
                break;
 8001b7a:	e07c      	b.n	8001c76 <OD_getSub+0x19e>
            }
            CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	61bb      	str	r3, [r7, #24]

            if (subIndex == 0U) {
 8001b82:	230b      	movs	r3, #11
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10b      	bne.n	8001ba4 <OD_getSub+0xcc>
                stream->attribute = odo->attribute0;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	7a1a      	ldrb	r2, [r3, #8]
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	741a      	strb	r2, [r3, #16]
                stream->dataOrig = odo->dataOrig0;
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	601a      	str	r2, [r3, #0]
                stream->dataLength = 1;
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	609a      	str	r2, [r3, #8]
                stream->attribute = odo->attribute;
                uint8_t* ptr = odo->dataOrig;
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
                stream->dataLength = odo->dataElementLength;
            }
            break;
 8001ba2:	e068      	b.n	8001c76 <OD_getSub+0x19e>
                stream->attribute = odo->attribute;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	7a5a      	ldrb	r2, [r3, #9]
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	741a      	strb	r2, [r3, #16]
                uint8_t* ptr = odo->dataOrig;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	617b      	str	r3, [r7, #20]
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00a      	beq.n	8001bce <OD_getSub+0xf6>
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	220b      	movs	r2, #11
 8001bbe:	18ba      	adds	r2, r7, r2
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	3a01      	subs	r2, #1
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	4353      	muls	r3, r2
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	18d2      	adds	r2, r2, r3
 8001bcc:	e000      	b.n	8001bd0 <OD_getSub+0xf8>
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	601a      	str	r2, [r3, #0]
                stream->dataLength = odo->dataElementLength;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	609a      	str	r2, [r3, #8]
            break;
 8001bdc:	e04b      	b.n	8001c76 <OD_getSub+0x19e>
        }
        case ODT_REC: {
            CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61fb      	str	r3, [r7, #28]
            CO_PROGMEM OD_obj_record_t* odo = NULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001be8:	2327      	movs	r3, #39	@ 0x27
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	e020      	b.n	8001c34 <OD_getSub+0x15c>
                if (odoArr[i].subIndex == subIndex) {
 8001bf2:	2127      	movs	r1, #39	@ 0x27
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	189b      	adds	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	001a      	movs	r2, r3
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	189b      	adds	r3, r3, r2
 8001c06:	791b      	ldrb	r3, [r3, #4]
 8001c08:	220b      	movs	r2, #11
 8001c0a:	18ba      	adds	r2, r7, r2
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10a      	bne.n	8001c28 <OD_getSub+0x150>
                    odo = &odoArr[i];
 8001c12:	187b      	adds	r3, r7, r1
 8001c14:	781a      	ldrb	r2, [r3, #0]
 8001c16:	0013      	movs	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	189b      	adds	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	001a      	movs	r2, r3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	189b      	adds	r3, r3, r2
 8001c24:	62bb      	str	r3, [r7, #40]	@ 0x28
                    break;
 8001c26:	e00c      	b.n	8001c42 <OD_getSub+0x16a>
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001c28:	2127      	movs	r1, #39	@ 0x27
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	3201      	adds	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	789b      	ldrb	r3, [r3, #2]
 8001c38:	2227      	movs	r2, #39	@ 0x27
 8001c3a:	18ba      	adds	r2, r7, r2
 8001c3c:	7812      	ldrb	r2, [r2, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d3d7      	bcc.n	8001bf2 <OD_getSub+0x11a>
                }
            }
            if (odo == NULL) {
 8001c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d104      	bne.n	8001c52 <OD_getSub+0x17a>
                ret = ODR_SUB_NOT_EXIST;
 8001c48:	232f      	movs	r3, #47	@ 0x2f
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	220e      	movs	r2, #14
 8001c4e:	701a      	strb	r2, [r3, #0]
                break;
 8001c50:	e011      	b.n	8001c76 <OD_getSub+0x19e>
            }

            stream->attribute = odo->attribute;
 8001c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c54:	795a      	ldrb	r2, [r3, #5]
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 8001c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	609a      	str	r2, [r3, #8]
            break;
 8001c6a:	e004      	b.n	8001c76 <OD_getSub+0x19e>
        }
        default: {
            ret = ODR_DEV_INCOMPAT;
 8001c6c:	232f      	movs	r3, #47	@ 0x2f
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2209      	movs	r2, #9
 8001c72:	701a      	strb	r2, [r3, #0]
            break;
 8001c74:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (ret == ODR_OK) {
 8001c76:	232f      	movs	r3, #47	@ 0x2f
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d139      	bne.n	8001cf6 <OD_getSub+0x21e>
        /* Access data from the original OD location */
        if ((entry->extension == NULL) || odOrig) {
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <OD_getSub+0x1b8>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <OD_getSub+0x1cc>
            io->read = OD_readOriginal;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a1d      	ldr	r2, [pc, #116]	@ (8001d08 <OD_getSub+0x230>)
 8001c94:	619a      	str	r2, [r3, #24]
            io->write = OD_writeOriginal;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <OD_getSub+0x234>)
 8001c9a:	61da      	str	r2, [r3, #28]
            stream->object = NULL;
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	e01c      	b.n	8001cde <OD_getSub+0x206>
        }
        /* Access data from extension specified by application */
        else {
            io->read = (entry->extension->read != NULL) ? entry->extension->read : OD_readDisabled;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <OD_getSub+0x1de>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	e000      	b.n	8001cb8 <OD_getSub+0x1e0>
 8001cb6:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <OD_getSub+0x238>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
            io->write = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <OD_getSub+0x1f6>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	e000      	b.n	8001cd0 <OD_getSub+0x1f8>
 8001cce:	4a11      	ldr	r2, [pc, #68]	@ (8001d14 <OD_getSub+0x23c>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	61da      	str	r2, [r3, #28]
            stream->object = entry->extension->object;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	605a      	str	r2, [r3, #4]
        }

        /* Reset stream data offset */
        stream->dataOffset = 0;
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]

        /* Add informative data */
        stream->index = entry->index;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	881a      	ldrh	r2, [r3, #0]
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	825a      	strh	r2, [r3, #18]
        stream->subIndex = subIndex;
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	220b      	movs	r2, #11
 8001cf0:	18ba      	adds	r2, r7, r2
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	751a      	strb	r2, [r3, #20]
    }

    return ret;
 8001cf6:	232f      	movs	r3, #47	@ 0x2f
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b25b      	sxtb	r3, r3
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b00c      	add	sp, #48	@ 0x30
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	0800180d 	.word	0x0800180d
 8001d0c:	080018cb 	.word	0x080018cb
 8001d10:	080019b3 	.word	0x080019b3
 8001d14:	080019cb 	.word	0x080019cb

08001d18 <OD_getSDOabCode>:

uint32_t
OD_getSDOabCode(ODR_t returnCode) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	0002      	movs	r2, r0
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	701a      	strb	r2, [r3, #0]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001d24:	1dfb      	adds	r3, r7, #7
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d2a:	d804      	bhi.n	8001d36 <OD_getSDOabCode+0x1e>
 8001d2c:	1dfb      	adds	r3, r7, #7
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	2b19      	cmp	r3, #25
 8001d34:	dd02      	ble.n	8001d3c <OD_getSDOabCode+0x24>
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <OD_getSDOabCode+0x38>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3a:	e005      	b.n	8001d48 <OD_getSDOabCode+0x30>
 8001d3c:	1dfb      	adds	r3, r7, #7
 8001d3e:	2200      	movs	r2, #0
 8001d40:	569a      	ldrsb	r2, [r3, r2]
 8001d42:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <OD_getSDOabCode+0x38>)
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	58d3      	ldr	r3, [r2, r3]
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	08010610 	.word	0x08010610

08001d54 <OD_get_value>:

ODR_t
OD_get_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d56:	b091      	sub	sp, #68	@ 0x44
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	230b      	movs	r3, #11
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	1c0a      	adds	r2, r1, #0
 8001d66:	701a      	strb	r2, [r3, #0]
    if (val == NULL) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <OD_get_value+0x1e>
        return ODR_DEV_INCOMPAT;
 8001d6e:	2309      	movs	r3, #9
 8001d70:	e033      	b.n	8001dda <OD_get_value+0x86>
    }

    OD_IO_t io = {NULL};
 8001d72:	2418      	movs	r4, #24
 8001d74:	193b      	adds	r3, r7, r4
 8001d76:	0018      	movs	r0, r3
 8001d78:	2320      	movs	r3, #32
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	f00d fee2 	bl	800fb46 <memset>
    OD_stream_t* stream = &io.stream;
 8001d82:	0022      	movs	r2, r4
 8001d84:	18bb      	adds	r3, r7, r2
 8001d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countRd = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001d8c:	263b      	movs	r6, #59	@ 0x3b
 8001d8e:	19bc      	adds	r4, r7, r6
 8001d90:	6dbd      	ldr	r5, [r7, #88]	@ 0x58
 8001d92:	18ba      	adds	r2, r7, r2
 8001d94:	230b      	movs	r3, #11
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	7819      	ldrb	r1, [r3, #0]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	002b      	movs	r3, r5
 8001d9e:	f7ff fe9b 	bl	8001ad8 <OD_getSub>
 8001da2:	0003      	movs	r3, r0
 8001da4:	7023      	strb	r3, [r4, #0]

    if (ret != ODR_OK) {
 8001da6:	19bb      	adds	r3, r7, r6
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b25b      	sxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <OD_get_value+0x64>
        return ret;
 8001db0:	19bb      	adds	r3, r7, r6
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	e010      	b.n	8001dda <OD_get_value+0x86>
    }
    if (stream->dataLength != len) {
 8001db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <OD_get_value+0x72>
        return ODR_TYPE_MISMATCH;
 8001dc2:	230b      	movs	r3, #11
 8001dc4:	e009      	b.n	8001dda <OD_get_value+0x86>
    }

    return io.read(stream, val, len, &countRd);
 8001dc6:	2318      	movs	r3, #24
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	699c      	ldr	r4, [r3, #24]
 8001dcc:	2314      	movs	r3, #20
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001dd6:	47a0      	blx	r4
 8001dd8:	0003      	movs	r3, r0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b011      	add	sp, #68	@ 0x44
 8001de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001de2 <OD_set_value>:

ODR_t
OD_set_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de4:	b091      	sub	sp, #68	@ 0x44
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	230b      	movs	r3, #11
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	1c0a      	adds	r2, r1, #0
 8001df4:	701a      	strb	r2, [r3, #0]
    if (val == NULL) {
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <OD_set_value+0x1e>
        return ODR_DEV_INCOMPAT;
 8001dfc:	2309      	movs	r3, #9
 8001dfe:	e033      	b.n	8001e68 <OD_set_value+0x86>
    }

    OD_IO_t io = {NULL};
 8001e00:	2418      	movs	r4, #24
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	0018      	movs	r0, r3
 8001e06:	2320      	movs	r3, #32
 8001e08:	001a      	movs	r2, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f00d fe9b 	bl	800fb46 <memset>
    OD_stream_t* stream = &io.stream;
 8001e10:	0022      	movs	r2, r4
 8001e12:	18bb      	adds	r3, r7, r2
 8001e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countWritten = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001e1a:	263b      	movs	r6, #59	@ 0x3b
 8001e1c:	19bc      	adds	r4, r7, r6
 8001e1e:	6dbd      	ldr	r5, [r7, #88]	@ 0x58
 8001e20:	18ba      	adds	r2, r7, r2
 8001e22:	230b      	movs	r3, #11
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	7819      	ldrb	r1, [r3, #0]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	002b      	movs	r3, r5
 8001e2c:	f7ff fe54 	bl	8001ad8 <OD_getSub>
 8001e30:	0003      	movs	r3, r0
 8001e32:	7023      	strb	r3, [r4, #0]

    if (ret != ODR_OK) {
 8001e34:	19bb      	adds	r3, r7, r6
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <OD_set_value+0x64>
        return ret;
 8001e3e:	19bb      	adds	r3, r7, r6
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b25b      	sxtb	r3, r3
 8001e44:	e010      	b.n	8001e68 <OD_set_value+0x86>
    }
    if (stream->dataLength != len) {
 8001e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <OD_set_value+0x72>
        return ODR_TYPE_MISMATCH;
 8001e50:	230b      	movs	r3, #11
 8001e52:	e009      	b.n	8001e68 <OD_set_value+0x86>
    }

    return io.write(stream, val, len, &countWritten);
 8001e54:	2318      	movs	r3, #24
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	69dc      	ldr	r4, [r3, #28]
 8001e5a:	2314      	movs	r3, #20
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e64:	47a0      	blx	r4
 8001e66:	0003      	movs	r3, r0
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b011      	add	sp, #68	@ 0x44
 8001e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e70 <OD_getPtr>:

void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err) {
 8001e70:	b5b0      	push	{r4, r5, r7, lr}
 8001e72:	b08e      	sub	sp, #56	@ 0x38
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	200b      	movs	r0, #11
 8001e7e:	183b      	adds	r3, r7, r0
 8001e80:	1c0a      	adds	r2, r1, #0
 8001e82:	701a      	strb	r2, [r3, #0]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8001e84:	2210      	movs	r2, #16
 8001e86:	18bb      	adds	r3, r7, r2
 8001e88:	633b      	str	r3, [r7, #48]	@ 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001e8a:	2537      	movs	r5, #55	@ 0x37
 8001e8c:	197c      	adds	r4, r7, r5
 8001e8e:	18ba      	adds	r2, r7, r2
 8001e90:	183b      	adds	r3, r7, r0
 8001e92:	7819      	ldrb	r1, [r3, #0]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	2301      	movs	r3, #1
 8001e98:	f7ff fe1e 	bl	8001ad8 <OD_getSub>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	7023      	strb	r3, [r4, #0]

    if (errCopy == ODR_OK) {
 8001ea0:	197b      	adds	r3, r7, r5
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <OD_getPtr+0x6c>
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U)) {
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <OD_getPtr+0x4a>
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d104      	bne.n	8001ec4 <OD_getPtr+0x54>
            errCopy = ODR_DEV_INCOMPAT;
 8001eba:	2337      	movs	r3, #55	@ 0x37
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	2209      	movs	r2, #9
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e00b      	b.n	8001edc <OD_getPtr+0x6c>
        } else if ((len != 0U) && (len != stream->dataLength)) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <OD_getPtr+0x6c>
 8001eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d003      	beq.n	8001edc <OD_getPtr+0x6c>
            errCopy = ODR_TYPE_MISMATCH;
 8001ed4:	2337      	movs	r3, #55	@ 0x37
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	220b      	movs	r2, #11
 8001eda:	701a      	strb	r2, [r3, #0]
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if (err != NULL) {
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d004      	beq.n	8001eec <OD_getPtr+0x7c>
        *err = errCopy;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2237      	movs	r2, #55	@ 0x37
 8001ee6:	18ba      	adds	r2, r7, r2
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	701a      	strb	r2, [r3, #0]
    }

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 8001eec:	2337      	movs	r3, #55	@ 0x37
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <OD_getPtr+0x8e>
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	e000      	b.n	8001f00 <OD_getPtr+0x90>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b00e      	add	sp, #56	@ 0x38
 8001f06:	bdb0      	pop	{r4, r5, r7, pc}

08001f08 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	210f      	movs	r1, #15
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	701a      	strb	r2, [r3, #0]
    return value;
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	781b      	ldrb	r3, [r3, #0]
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b004      	add	sp, #16
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001f26:	b590      	push	{r4, r7, lr}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	240e      	movs	r4, #14
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	2202      	movs	r2, #2
 8001f36:	0018      	movs	r0, r3
 8001f38:	f00d fdf2 	bl	800fb20 <memmove>
    return value;
 8001f3c:	193b      	adds	r3, r7, r4
 8001f3e:	881b      	ldrh	r3, [r3, #0]
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b005      	add	sp, #20
 8001f46:	bd90      	pop	{r4, r7, pc}

08001f48 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	230c      	movs	r3, #12
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2204      	movs	r2, #4
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f00d fde1 	bl	800fb20 <memmove>
    return value;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8001f72:	0039      	movs	r1, r7
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2204      	movs	r2, #4
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f00d fdd1 	bl	800fb20 <memmove>
    return (uint8_t)(sizeof(value));
 8001f7e:	2304      	movs	r3, #4
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <OD_getIndex+0x14>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	e000      	b.n	8001f9e <OD_getIndex+0x16>
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e003      	b.n	8001fc2 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af02      	add	r7, sp, #8
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	200b      	movs	r0, #11
 8001fd8:	183b      	adds	r3, r7, r0
 8001fda:	1c0a      	adds	r2, r1, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	183b      	adds	r3, r7, r0
 8001fe2:	7819      	ldrb	r1, [r3, #0]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	f7ff feb2 	bl	8001d54 <OD_get_value>
 8001ff0:	0003      	movs	r3, r0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b004      	add	sp, #16
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af02      	add	r7, sp, #8
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	200b      	movs	r0, #11
 8002008:	183b      	adds	r3, r7, r0
 800200a:	1c0a      	adds	r2, r1, #0
 800200c:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	183b      	adds	r3, r7, r0
 8002012:	7819      	ldrb	r1, [r3, #0]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2302      	movs	r3, #2
 800201c:	f7ff fe9a 	bl	8001d54 <OD_get_value>
 8002020:	0003      	movs	r3, r0
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bd80      	pop	{r7, pc}

0800202a <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af02      	add	r7, sp, #8
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	200b      	movs	r0, #11
 8002038:	183b      	adds	r3, r7, r0
 800203a:	1c0a      	adds	r2, r1, #0
 800203c:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	183b      	adds	r3, r7, r0
 8002042:	7819      	ldrb	r1, [r3, #0]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2304      	movs	r3, #4
 800204c:	f7ff fe82 	bl	8001d54 <OD_get_value>
 8002050:	0003      	movs	r3, r0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b004      	add	sp, #16
 8002058:	bd80      	pop	{r7, pc}

0800205a <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <OD_write_dummy+0x1a>
        *countWritten = count;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}

0800207e <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <OD_read_dummy+0x20>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <OD_read_dummy+0x20>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 800209e:	2309      	movs	r3, #9
 80020a0:	e011      	b.n	80020c6 <OD_read_dummy+0x48>
    }

    if (count > stream->dataLength) {
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d902      	bls.n	80020b2 <OD_read_dummy+0x34>
        count = stream->dataLength;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2100      	movs	r1, #0
 80020b8:	0018      	movs	r0, r3
 80020ba:	f00d fd44 	bl	800fb46 <memset>

    *countRead = count;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b092      	sub	sp, #72	@ 0x48
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	701a      	strb	r2, [r3, #0]
    uint16_t index = (uint16_t)(map >> 16);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	0c1a      	lsrs	r2, r3, #16
 80020e4:	2346      	movs	r3, #70	@ 0x46
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	801a      	strh	r2, [r3, #0]
    uint8_t subIndex = (uint8_t)(map >> 8);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	0a1a      	lsrs	r2, r3, #8
 80020ee:	2345      	movs	r3, #69	@ 0x45
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	701a      	strb	r2, [r3, #0]
    uint8_t mappedLengthBits = (uint8_t)map;
 80020f4:	2144      	movs	r1, #68	@ 0x44
 80020f6:	187b      	adds	r3, r7, r1
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	701a      	strb	r2, [r3, #0]
    uint8_t mappedLength = mappedLengthBits >> 3;
 80020fc:	2043      	movs	r0, #67	@ 0x43
 80020fe:	183b      	adds	r3, r7, r0
 8002100:	187a      	adds	r2, r7, r1
 8002102:	7812      	ldrb	r2, [r2, #0]
 8002104:	08d2      	lsrs	r2, r2, #3
 8002106:	701a      	strb	r2, [r3, #0]
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	015b      	lsls	r3, r3, #5
 800210e:	3310      	adds	r3, #16
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	18d3      	adds	r3, r2, r3
 8002114:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002116:	183b      	adds	r3, r7, r0
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b08      	cmp	r3, #8
 800211c:	d901      	bls.n	8002122 <PDOconfigMap+0x52>
        return ODR_MAP_LEN; /* PDO length exceeded */
 800211e:	2307      	movs	r3, #7
 8002120:	e0a8      	b.n	8002274 <PDOconfigMap+0x1a4>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 8002122:	2346      	movs	r3, #70	@ 0x46
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	2b1f      	cmp	r3, #31
 800212a:	d81d      	bhi.n	8002168 <PDOconfigMap+0x98>
 800212c:	2345      	movs	r3, #69	@ 0x45
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d118      	bne.n	8002168 <PDOconfigMap+0x98>
        OD_stream_t* stream = &OD_IO->stream;
 8002136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002138:	63bb      	str	r3, [r7, #56]	@ 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 800213a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800213c:	2218      	movs	r2, #24
 800213e:	2100      	movs	r1, #0
 8002140:	0018      	movs	r0, r3
 8002142:	f00d fd00 	bl	800fb46 <memset>
        stream->dataLength = mappedLength;
 8002146:	2143      	movs	r1, #67	@ 0x43
 8002148:	187b      	adds	r3, r7, r1
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800214e:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 8002150:	187b      	adds	r3, r7, r1
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002156:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 8002158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800215a:	4a48      	ldr	r2, [pc, #288]	@ (800227c <PDOconfigMap+0x1ac>)
 800215c:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 800215e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002160:	4a47      	ldr	r2, [pc, #284]	@ (8002280 <PDOconfigMap+0x1b0>)
 8002162:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	e085      	b.n	8002274 <PDOconfigMap+0x1a4>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 8002168:	2346      	movs	r3, #70	@ 0x46
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002170:	0011      	movs	r1, r2
 8002172:	0018      	movs	r0, r3
 8002174:	f7ff fc35 	bl	80019e2 <OD_find>
 8002178:	0003      	movs	r3, r0
 800217a:	637b      	str	r3, [r7, #52]	@ 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 800217c:	2533      	movs	r5, #51	@ 0x33
 800217e:	197c      	adds	r4, r7, r5
 8002180:	2310      	movs	r3, #16
 8002182:	18fa      	adds	r2, r7, r3
 8002184:	2345      	movs	r3, #69	@ 0x45
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	7819      	ldrb	r1, [r3, #0]
 800218a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800218c:	2300      	movs	r3, #0
 800218e:	f7ff fca3 	bl	8001ad8 <OD_getSub>
 8002192:	0003      	movs	r3, r0
 8002194:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8002196:	197b      	adds	r3, r7, r5
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b25b      	sxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <PDOconfigMap+0xd8>
        return odRet;
 80021a0:	197b      	adds	r3, r7, r5
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	e065      	b.n	8002274 <PDOconfigMap+0x1a4>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <PDOconfigMap+0xe2>
 80021ae:	2208      	movs	r2, #8
 80021b0:	e000      	b.n	80021b4 <PDOconfigMap+0xe4>
 80021b2:	2204      	movs	r2, #4
 80021b4:	2132      	movs	r1, #50	@ 0x32
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	701a      	strb	r2, [r3, #0]
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 80021ba:	2010      	movs	r0, #16
 80021bc:	183b      	adds	r3, r7, r0
 80021be:	7c1b      	ldrb	r3, [r3, #16]
 80021c0:	187a      	adds	r2, r7, r1
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	4013      	ands	r3, r2
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00c      	beq.n	80021e6 <PDOconfigMap+0x116>
 80021cc:	2344      	movs	r3, #68	@ 0x44
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2207      	movs	r2, #7
 80021d4:	4013      	ands	r3, r2
 80021d6:	d106      	bne.n	80021e6 <PDOconfigMap+0x116>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 80021d8:	183b      	adds	r3, r7, r0
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	2343      	movs	r3, #67	@ 0x43
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d201      	bcs.n	80021ea <PDOconfigMap+0x11a>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 80021e6:	2306      	movs	r3, #6
 80021e8:	e044      	b.n	8002274 <PDOconfigMap+0x1a4>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 80021ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ec:	2210      	movs	r2, #16
 80021ee:	18ba      	adds	r2, r7, r2
 80021f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021f2:	c313      	stmia	r3!, {r0, r1, r4}
 80021f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021f6:	c313      	stmia	r3!, {r0, r1, r4}
 80021f8:	ca03      	ldmia	r2!, {r0, r1}
 80021fa:	c303      	stmia	r3!, {r0, r1}
    OD_IO->stream.dataOffset = mappedLength;
 80021fc:	2343      	movs	r3, #67	@ 0x43
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002204:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d132      	bne.n	8002272 <PDOconfigMap+0x1a2>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 800220c:	2445      	movs	r4, #69	@ 0x45
 800220e:	193b      	adds	r3, r7, r4
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b1f      	cmp	r3, #31
 8002214:	d826      	bhi.n	8002264 <PDOconfigMap+0x194>
 8002216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d022      	beq.n	8002264 <PDOconfigMap+0x194>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 800221e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	193b      	adds	r3, r7, r4
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	08db      	lsrs	r3, r3, #3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	0018      	movs	r0, r3
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	0003      	movs	r3, r0
 8002232:	3308      	adds	r3, #8
 8002234:	18cb      	adds	r3, r1, r3
 8002236:	1d19      	adds	r1, r3, #4
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3244      	adds	r2, #68	@ 0x44
 800223c:	0092      	lsls	r2, r2, #2
 800223e:	50d1      	str	r1, [r2, r3]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 8002240:	193b      	adds	r3, r7, r4
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2207      	movs	r2, #7
 8002246:	4013      	ands	r3, r2
 8002248:	2201      	movs	r2, #1
 800224a:	409a      	lsls	r2, r3
 800224c:	0011      	movs	r1, r2
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	b2c8      	uxtb	r0, r1
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	2398      	movs	r3, #152	@ 0x98
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	188a      	adds	r2, r1, r2
 800225c:	18d3      	adds	r3, r2, r3
 800225e:	1c02      	adds	r2, r0, #0
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e006      	b.n	8002272 <PDOconfigMap+0x1a2>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002264:	1dfb      	adds	r3, r7, #7
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3244      	adds	r2, #68	@ 0x44
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	2100      	movs	r1, #0
 8002270:	50d1      	str	r1, [r2, r3]
        }
    }
#endif

    return ODR_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b012      	add	sp, #72	@ 0x48
 800227a:	bdb0      	pop	{r4, r5, r7, pc}
 800227c:	0800207f 	.word	0x0800207f
 8002280:	0800205b 	.word	0x0800205b

08002284 <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 8002284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002286:	b08d      	sub	sp, #52	@ 0x34
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t mappedObjectsCount = 0;
 8002296:	211b      	movs	r1, #27
 8002298:	187b      	adds	r3, r7, r1
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 800229e:	2522      	movs	r5, #34	@ 0x22
 80022a0:	197c      	adds	r4, r7, r5
 80022a2:	187a      	adds	r2, r7, r1
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	2301      	movs	r3, #1
 80022a8:	2100      	movs	r1, #0
 80022aa:	f7ff fe8e 	bl	8001fca <OD_get_u8>
 80022ae:	0003      	movs	r3, r0
 80022b0:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 80022b2:	197b      	adds	r3, r7, r5
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00d      	beq.n	80022d8 <PDO_initMapping+0x54>
        if (errInfo != NULL) {
 80022bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d007      	beq.n	80022d2 <PDO_initMapping+0x4e>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff fe5f 	bl	8001f88 <OD_getIndex>
 80022ca:	0003      	movs	r3, r0
 80022cc:	021a      	lsls	r2, r3, #8
 80022ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80022d2:	230c      	movs	r3, #12
 80022d4:	425b      	negs	r3, r3
 80022d6:	e092      	b.n	80023fe <PDO_initMapping+0x17a>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80022d8:	2323      	movs	r3, #35	@ 0x23
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e068      	b.n	80023b4 <PDO_initMapping+0x130>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 80022e2:	2523      	movs	r5, #35	@ 0x23
 80022e4:	197b      	adds	r3, r7, r5
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	3310      	adds	r3, #16
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	18d3      	adds	r3, r2, r3
 80022f0:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 80022f6:	197b      	adds	r3, r7, r5
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	b2d9      	uxtb	r1, r3
 80022fe:	2622      	movs	r6, #34	@ 0x22
 8002300:	19bc      	adds	r4, r7, r6
 8002302:	2314      	movs	r3, #20
 8002304:	18fa      	adds	r2, r7, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	2301      	movs	r3, #1
 800230a:	f7ff fe8e 	bl	800202a <OD_get_u32>
 800230e:	0003      	movs	r3, r0
 8002310:	7023      	strb	r3, [r4, #0]
        if (odRet == ODR_SUB_NOT_EXIST) {
 8002312:	19bb      	adds	r3, r7, r6
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b25b      	sxtb	r3, r3
 8002318:	2b0e      	cmp	r3, #14
 800231a:	d044      	beq.n	80023a6 <PDO_initMapping+0x122>
            continue;
        }
        if (odRet != ODR_OK) {
 800231c:	19bb      	adds	r3, r7, r6
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b25b      	sxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <PDO_initMapping+0xc4>
            if (errInfo != NULL) {
 8002326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <PDO_initMapping+0xbe>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f7ff fe2a 	bl	8001f88 <OD_getIndex>
 8002334:	0003      	movs	r3, r0
 8002336:	021a      	lsls	r2, r3, #8
 8002338:	197b      	adds	r3, r7, r5
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	431a      	orrs	r2, r3
 800233e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002340:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002342:	230c      	movs	r3, #12
 8002344:	425b      	negs	r3, r3
 8002346:	e05a      	b.n	80023fe <PDO_initMapping+0x17a>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 8002348:	6979      	ldr	r1, [r7, #20]
 800234a:	2622      	movs	r6, #34	@ 0x22
 800234c:	19bc      	adds	r4, r7, r6
 800234e:	683d      	ldr	r5, [r7, #0]
 8002350:	2323      	movs	r3, #35	@ 0x23
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	002b      	movs	r3, r5
 800235e:	f7ff feb7 	bl	80020d0 <PDOconfigMap>
 8002362:	0003      	movs	r3, r0
 8002364:	7023      	strb	r3, [r4, #0]
        if (odRet != ODR_OK) {
 8002366:	19bb      	adds	r3, r7, r6
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b25b      	sxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00c      	beq.n	800238a <PDO_initMapping+0x106>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	22ff      	movs	r2, #255	@ 0xff
 800237a:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 800237c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <PDO_initMapping+0x106>
                *erroneousMap = map;
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002388:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 800238a:	231b      	movs	r3, #27
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2223      	movs	r2, #35	@ 0x23
 8002392:	18ba      	adds	r2, r7, r2
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d206      	bcs.n	80023a8 <PDO_initMapping+0x124>
            pdoDataLength += OD_IO->stream.dataOffset;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a0:	18d3      	adds	r3, r2, r3
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a4:	e000      	b.n	80023a8 <PDO_initMapping+0x124>
            continue;
 80023a6:	46c0      	nop			@ (mov r8, r8)
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80023a8:	2123      	movs	r1, #35	@ 0x23
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	3201      	adds	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	2323      	movs	r3, #35	@ 0x23
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b07      	cmp	r3, #7
 80023bc:	d991      	bls.n	80022e2 <PDO_initMapping+0x5e>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d807      	bhi.n	80023d4 <PDO_initMapping+0x150>
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10b      	bne.n	80023e2 <PDO_initMapping+0x15e>
 80023ca:	231b      	movs	r3, #27
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <PDO_initMapping+0x15e>
        if (*erroneousMap == 0U) {
 80023d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <PDO_initMapping+0x15e>
            *erroneousMap = 1;
 80023dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 80023e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <PDO_initMapping+0x178>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80023f2:	231b      	movs	r3, #27
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b00b      	add	sp, #44	@ 0x2c
 8002404:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002406 <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002408:	b08f      	sub	sp, #60	@ 0x3c
 800240a:	af02      	add	r7, sp, #8
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <OD_write_PDO_mapping+0x28>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <OD_write_PDO_mapping+0x28>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <OD_write_PDO_mapping+0x28>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	7d1b      	ldrb	r3, [r3, #20]
 800242a:	2b08      	cmp	r3, #8
 800242c:	d901      	bls.n	8002432 <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 800242e:	2309      	movs	r3, #9
 8002430:	e096      	b.n	8002560 <OD_write_PDO_mapping+0x15a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d107      	bne.n	8002450 <OD_write_PDO_mapping+0x4a>
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	7b5b      	ldrb	r3, [r3, #13]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <OD_write_PDO_mapping+0x4e>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	7d1b      	ldrb	r3, [r3, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002450:	2302      	movs	r3, #2
 8002452:	e085      	b.n	8002560 <OD_write_PDO_mapping+0x15a>
    }

    if (stream->subIndex == 0U) {
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	7d1b      	ldrb	r3, [r3, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d153      	bne.n	8002504 <OD_write_PDO_mapping+0xfe>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 800245c:	251e      	movs	r5, #30
 800245e:	197c      	adds	r4, r7, r5
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff fd50 	bl	8001f08 <CO_getUint8>
 8002468:	0003      	movs	r3, r0
 800246a:	7023      	strb	r3, [r4, #0]
        size_t pdoDataLength = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002470:	197b      	adds	r3, r7, r5
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d901      	bls.n	800247c <OD_write_PDO_mapping+0x76>
            return ODR_MAP_LEN;
 8002478:	2307      	movs	r3, #7
 800247a:	e071      	b.n	8002560 <OD_write_PDO_mapping+0x15a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 800247c:	232b      	movs	r3, #43	@ 0x2b
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e01d      	b.n	80024c2 <OD_write_PDO_mapping+0xbc>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002486:	232b      	movs	r3, #43	@ 0x2b
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	015b      	lsls	r3, r3, #5
 800248e:	3310      	adds	r3, #16
 8002490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002492:	18d3      	adds	r3, r2, r3
 8002494:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d901      	bls.n	80024ae <OD_write_PDO_mapping+0xa8>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 80024aa:	2306      	movs	r3, #6
 80024ac:	e058      	b.n	8002560 <OD_write_PDO_mapping+0x15a>
            }
            pdoDataLength += mappedLength;
 80024ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	18d3      	adds	r3, r2, r3
 80024b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80024b6:	212b      	movs	r1, #43	@ 0x2b
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	3201      	adds	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	232b      	movs	r3, #43	@ 0x2b
 80024c4:	18fa      	adds	r2, r7, r3
 80024c6:	231e      	movs	r3, #30
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d3d9      	bcc.n	8002486 <OD_write_PDO_mapping+0x80>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 80024d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d901      	bls.n	80024dc <OD_write_PDO_mapping+0xd6>
            return ODR_MAP_LEN;
 80024d8:	2307      	movs	r3, #7
 80024da:	e041      	b.n	8002560 <OD_write_PDO_mapping+0x15a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 80024dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <OD_write_PDO_mapping+0xea>
 80024e2:	231e      	movs	r3, #30
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <OD_write_PDO_mapping+0xea>
            return ODR_INVALID_VALUE;
 80024ec:	230f      	movs	r3, #15
 80024ee:	e037      	b.n	8002560 <OD_write_PDO_mapping+0x15a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80024f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	221e      	movs	r2, #30
 80024fc:	18ba      	adds	r2, r7, r2
 80024fe:	7812      	ldrb	r2, [r2, #0]
 8002500:	735a      	strb	r2, [r3, #13]
 8002502:	e026      	b.n	8002552 <OD_write_PDO_mapping+0x14c>
    } else {
        uint32_t val = CO_getUint32(buf);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff fd1e 	bl	8001f48 <CO_getUint32>
 800250c:	0003      	movs	r3, r0
 800250e:	623b      	str	r3, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	7d1b      	ldrb	r3, [r3, #20]
 8002514:	3b01      	subs	r3, #1
 8002516:	b2dd      	uxtb	r5, r3
 8002518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251a:	239c      	movs	r3, #156	@ 0x9c
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	58d6      	ldr	r6, [r2, r3]
 8002520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002522:	239e      	movs	r3, #158	@ 0x9e
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	58d3      	ldr	r3, [r2, r3]
 8002528:	221f      	movs	r2, #31
 800252a:	18bc      	adds	r4, r7, r2
 800252c:	6a39      	ldr	r1, [r7, #32]
 800252e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	0033      	movs	r3, r6
 8002534:	002a      	movs	r2, r5
 8002536:	f7ff fdcb 	bl	80020d0 <PDOconfigMap>
 800253a:	0003      	movs	r3, r0
 800253c:	7023      	strb	r3, [r4, #0]
        if (odRet != ODR_OK) {
 800253e:	221f      	movs	r2, #31
 8002540:	18bb      	adds	r3, r7, r2
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b25b      	sxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <OD_write_PDO_mapping+0x14c>
            return odRet;
 800254a:	18bb      	adds	r3, r7, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b25b      	sxtb	r3, r3
 8002550:	e006      	b.n	8002560 <OD_write_PDO_mapping+0x15a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f7ff f9b6 	bl	80018ca <OD_writeOriginal>
 800255e:	0003      	movs	r3, r0
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b00d      	add	sp, #52	@ 0x34
 8002566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002568 <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002576:	251b      	movs	r5, #27
 8002578:	197c      	adds	r4, r7, r5
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff f943 	bl	800180c <OD_readOriginal>
 8002586:	0003      	movs	r3, r0
 8002588:	7023      	strb	r3, [r4, #0]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 800258a:	197b      	adds	r3, r7, r5
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b25b      	sxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d13e      	bne.n	8002612 <OD_read_PDO_commParam+0xaa>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	7d1b      	ldrb	r3, [r3, #20]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d13a      	bne.n	8002612 <OD_read_PDO_commParam+0xaa>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d136      	bne.n	8002612 <OD_read_PDO_commParam+0xaa>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff fccb 	bl	8001f48 <CO_getUint32>
 80025b2:	0003      	movs	r3, r0
 80025b4:	61fb      	str	r3, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	2112      	movs	r1, #18
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	0552      	lsls	r2, r2, #21
 80025c0:	0d52      	lsrs	r2, r2, #21
 80025c2:	801a      	strh	r2, [r3, #0]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <OD_read_PDO_commParam+0x8c>
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	6979      	ldr	r1, [r7, #20]
 80025d2:	23a1      	movs	r3, #161	@ 0xa1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	5acb      	ldrh	r3, [r1, r3]
 80025d8:	0019      	movs	r1, r3
 80025da:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <OD_read_PDO_commParam+0xbc>)
 80025dc:	400b      	ands	r3, r1
 80025de:	429a      	cmp	r2, r3
 80025e0:	d108      	bne.n	80025f4 <OD_read_PDO_commParam+0x8c>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	041b      	lsls	r3, r3, #16
 80025e8:	6979      	ldr	r1, [r7, #20]
 80025ea:	22a1      	movs	r2, #161	@ 0xa1
 80025ec:	0052      	lsls	r2, r2, #1
 80025ee:	5a8a      	ldrh	r2, [r1, r2]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d104      	bne.n	8002606 <OD_read_PDO_commParam+0x9e>
            COB_ID |= 0x80000000U;
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2280      	movs	r2, #128	@ 0x80
 8002600:	0612      	lsls	r2, r2, #24
 8002602:	4313      	orrs	r3, r2
 8002604:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	0011      	movs	r1, r2
 800260c:	0018      	movs	r0, r3
 800260e:	f7ff fcab 	bl	8001f68 <CO_setUint32>
    }

    return returnCode;
 8002612:	231b      	movs	r3, #27
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b25b      	sxtb	r3, r3
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b008      	add	sp, #32
 8002620:	bdb0      	pop	{r4, r5, r7, pc}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	0000ff80 	.word	0x0000ff80

08002628 <CO_PDO_receive>:
 * will be received. For more information and description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void
CO_PDO_receive(void* object, void* msg) {
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b089      	sub	sp, #36	@ 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
    CO_RPDO_t* RPDO = object;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800263a:	2013      	movs	r0, #19
 800263c:	183b      	adds	r3, r7, r0
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	7912      	ldrb	r2, [r2, #4]
 8002642:	701a      	strb	r2, [r3, #0]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	3305      	adds	r3, #5
 8002648:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 800264a:	241f      	movs	r4, #31
 800264c:	193b      	adds	r3, r7, r4
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	22c0      	movs	r2, #192	@ 0xc0
 8002652:	0052      	lsls	r2, r2, #1
 8002654:	5c8a      	ldrb	r2, [r1, r2]
 8002656:	701a      	strb	r2, [r3, #0]

    if (PDO->valid) {
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d051      	beq.n	8002704 <CO_PDO_receive+0xdc>
        if (DLC >= PDO->dataLength) {
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	7b1b      	ldrb	r3, [r3, #12]
 8002664:	183a      	adds	r2, r7, r0
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d343      	bcc.n	80026f4 <CO_PDO_receive+0xcc>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	7b1b      	ldrb	r3, [r3, #12]
 8002670:	183a      	adds	r2, r7, r0
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d107      	bne.n	8002688 <CO_PDO_receive+0x60>
                if (err == CO_RPDO_RX_ACK_ERROR) {
 8002678:	193b      	adds	r3, r7, r4
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10b      	bne.n	8002698 <CO_PDO_receive+0x70>
                    err = CO_RPDO_RX_OK;
 8002680:	193b      	adds	r3, r7, r4
 8002682:	220b      	movs	r2, #11
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e007      	b.n	8002698 <CO_PDO_receive+0x70>
                }
            } else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002688:	221f      	movs	r2, #31
 800268a:	18bb      	adds	r3, r7, r2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <CO_PDO_receive+0x70>
                    err = CO_RPDO_RX_LONG;
 8002692:	18bb      	adds	r3, r7, r2
 8002694:	220d      	movs	r2, #13
 8002696:	701a      	strb	r2, [r3, #0]
                }
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002698:	211e      	movs	r1, #30
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if (RPDO->synchronous && (RPDO->SYNC != NULL) && RPDO->SYNC->CANrxToggle) {
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	23c4      	movs	r3, #196	@ 0xc4
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	58d3      	ldr	r3, [r2, r3]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00f      	beq.n	80026cc <CO_PDO_receive+0xa4>
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	23c2      	movs	r3, #194	@ 0xc2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	58d3      	ldr	r3, [r2, r3]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <CO_PDO_receive+0xa4>
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	23c2      	movs	r3, #194	@ 0xc2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	58d3      	ldr	r3, [r2, r3]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <CO_PDO_receive+0xa4>
                bufNo = 1;
 80026c6:	187b      	adds	r3, r7, r1
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            (void)memcpy(RPDO->CANrxData[bufNo], data, CO_PDO_MAX_SIZE);
 80026cc:	241e      	movs	r4, #30
 80026ce:	193b      	adds	r3, r7, r4
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	332e      	adds	r3, #46	@ 0x2e
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	18d3      	adds	r3, r2, r3
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	2208      	movs	r2, #8
 80026de:	0018      	movs	r0, r3
 80026e0:	f00d fac7 	bl	800fc72 <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	325a      	adds	r2, #90	@ 0x5a
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	2101      	movs	r1, #1
 80026f0:	50d1      	str	r1, [r2, r3]
 80026f2:	e007      	b.n	8002704 <CO_PDO_receive+0xdc>
            /* Optional signal to RTOS, which can resume task, which handles the RPDO. */
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        } else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 80026f4:	221f      	movs	r2, #31
 80026f6:	18bb      	adds	r3, r7, r2
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <CO_PDO_receive+0xdc>
            err = CO_RPDO_RX_SHORT;
 80026fe:	18bb      	adds	r3, r7, r2
 8002700:	220c      	movs	r2, #12
 8002702:	701a      	strb	r2, [r3, #0]
        } else { /* MISRA C 2004 14.10 */
        }
    }

    RPDO->receiveError = err;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	231f      	movs	r3, #31
 8002708:	18f9      	adds	r1, r7, r3
 800270a:	23c0      	movs	r3, #192	@ 0xc0
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	7809      	ldrb	r1, [r1, #0]
 8002710:	54d1      	strb	r1, [r2, r3]
}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b009      	add	sp, #36	@ 0x24
 8002718:	bd90      	pop	{r4, r7, pc}
	...

0800271c <OD_write_14xx>:
 * Custom function for writing OD object "RPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_14xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800271c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271e:	b093      	sub	sp, #76	@ 0x4c
 8002720:	af04      	add	r7, sp, #16
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <OD_write_14xx+0x26>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <OD_write_14xx+0x26>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <OD_write_14xx+0x26>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d901      	bls.n	8002746 <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002742:	2309      	movs	r3, #9
 8002744:	e141      	b.n	80029ca <OD_write_14xx+0x2ae>
    }

    CO_RPDO_t* RPDO = stream->object;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	633b      	str	r3, [r7, #48]	@ 0x30
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	2310      	movs	r3, #16
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	0018      	movs	r0, r3
 800275a:	f00d fa8a 	bl	800fc72 <memcpy>

    switch (stream->subIndex) {
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	7d1b      	ldrb	r3, [r3, #20]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d100      	bne.n	8002768 <OD_write_14xx+0x4c>
 8002766:	e10d      	b.n	8002984 <OD_write_14xx+0x268>
 8002768:	dd00      	ble.n	800276c <OD_write_14xx+0x50>
 800276a:	e123      	b.n	80029b4 <OD_write_14xx+0x298>
 800276c:	2b01      	cmp	r3, #1
 800276e:	d003      	beq.n	8002778 <OD_write_14xx+0x5c>
 8002770:	2b02      	cmp	r3, #2
 8002772:	d100      	bne.n	8002776 <OD_write_14xx+0x5a>
 8002774:	e0d9      	b.n	800292a <OD_write_14xx+0x20e>
            break;
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 8002776:	e11d      	b.n	80029b4 <OD_write_14xx+0x298>
            uint32_t COB_ID = CO_getUint32(buf);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	0018      	movs	r0, r3
 800277c:	f7ff fbe4 	bl	8001f48 <CO_getUint32>
 8002780:	0003      	movs	r3, r0
 8002782:	61fb      	str	r3, [r7, #28]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	b29a      	uxth	r2, r3
 8002788:	2136      	movs	r1, #54	@ 0x36
 800278a:	187b      	adds	r3, r7, r1
 800278c:	0552      	lsls	r2, r2, #21
 800278e:	0d52      	lsrs	r2, r2, #21
 8002790:	801a      	strh	r2, [r3, #0]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	43db      	mvns	r3, r3
 8002796:	0fdb      	lsrs	r3, r3, #31
 8002798:	b2db      	uxtb	r3, r3
 800279a:	61bb      	str	r3, [r7, #24]
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && PDO->valid && (CAN_ID != PDO->configuredCanId))
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4a8d      	ldr	r2, [pc, #564]	@ (80029d4 <OD_write_14xx+0x2b8>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	d000      	beq.n	80027a6 <OD_write_14xx+0x8a>
 80027a4:	e057      	b.n	8002856 <OD_write_14xx+0x13a>
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <OD_write_14xx+0xa8>
 80027ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <OD_write_14xx+0xa8>
 80027b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027b6:	23a2      	movs	r3, #162	@ 0xa2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	5ad3      	ldrh	r3, [r2, r3]
 80027bc:	187a      	adds	r2, r7, r1
 80027be:	8812      	ldrh	r2, [r2, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d148      	bne.n	8002856 <OD_write_14xx+0x13a>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d03e      	beq.n	8002848 <OD_write_14xx+0x12c>
 80027ca:	2136      	movs	r1, #54	@ 0x36
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80027d2:	d940      	bls.n	8002856 <OD_write_14xx+0x13a>
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	881a      	ldrh	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	429a      	cmp	r2, r3
 80027de:	d905      	bls.n	80027ec <OD_write_14xx+0xd0>
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	881a      	ldrh	r2, [r3, #0]
 80027e4:	23c0      	movs	r3, #192	@ 0xc0
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d934      	bls.n	8002856 <OD_write_14xx+0x13a>
 80027ec:	2136      	movs	r1, #54	@ 0x36
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	881a      	ldrh	r2, [r3, #0]
 80027f2:	23b0      	movs	r3, #176	@ 0xb0
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d905      	bls.n	8002806 <OD_write_14xx+0xea>
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	23c0      	movs	r3, #192	@ 0xc0
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	429a      	cmp	r2, r3
 8002804:	d327      	bcc.n	8002856 <OD_write_14xx+0x13a>
 8002806:	2136      	movs	r1, #54	@ 0x36
 8002808:	187b      	adds	r3, r7, r1
 800280a:	881a      	ldrh	r2, [r3, #0]
 800280c:	23c0      	movs	r3, #192	@ 0xc0
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	429a      	cmp	r2, r3
 8002812:	d905      	bls.n	8002820 <OD_write_14xx+0x104>
 8002814:	187b      	adds	r3, r7, r1
 8002816:	881a      	ldrh	r2, [r3, #0]
 8002818:	23d0      	movs	r3, #208	@ 0xd0
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	429a      	cmp	r2, r3
 800281e:	d31a      	bcc.n	8002856 <OD_write_14xx+0x13a>
 8002820:	2136      	movs	r1, #54	@ 0x36
 8002822:	187b      	adds	r3, r7, r1
 8002824:	881a      	ldrh	r2, [r3, #0]
 8002826:	23dc      	movs	r3, #220	@ 0xdc
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	429a      	cmp	r2, r3
 800282c:	d305      	bcc.n	800283a <OD_write_14xx+0x11e>
 800282e:	187b      	adds	r3, r7, r1
 8002830:	881a      	ldrh	r2, [r3, #0]
 8002832:	23e0      	movs	r3, #224	@ 0xe0
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	429a      	cmp	r2, r3
 8002838:	d30d      	bcc.n	8002856 <OD_write_14xx+0x13a>
 800283a:	2336      	movs	r3, #54	@ 0x36
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	23e0      	movs	r3, #224	@ 0xe0
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	429a      	cmp	r2, r3
 8002846:	d806      	bhi.n	8002856 <OD_write_14xx+0x13a>
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <OD_write_14xx+0x13e>
 800284e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002850:	7b5b      	ldrb	r3, [r3, #13]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <OD_write_14xx+0x13e>
                return ODR_INVALID_VALUE;
 8002856:	230f      	movs	r3, #15
 8002858:	e0b7      	b.n	80029ca <OD_write_14xx+0x2ae>
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 800285a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	429a      	cmp	r2, r3
 8002862:	d109      	bne.n	8002878 <OD_write_14xx+0x15c>
 8002864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002866:	23a2      	movs	r3, #162	@ 0xa2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	5ad3      	ldrh	r3, [r2, r3]
 800286c:	2236      	movs	r2, #54	@ 0x36
 800286e:	18ba      	adds	r2, r7, r2
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d100      	bne.n	8002878 <OD_write_14xx+0x15c>
 8002876:	e09f      	b.n	80029b8 <OD_write_14xx+0x29c>
                if (CAN_ID == PDO->preDefinedCanId) {
 8002878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800287a:	23a1      	movs	r3, #161	@ 0xa1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	5ad3      	ldrh	r3, [r2, r3]
 8002880:	2236      	movs	r2, #54	@ 0x36
 8002882:	18ba      	adds	r2, r7, r2
 8002884:	8812      	ldrh	r2, [r2, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d109      	bne.n	800289e <OD_write_14xx+0x182>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	227f      	movs	r2, #127	@ 0x7f
 800288e:	4393      	bics	r3, r2
 8002890:	001a      	movs	r2, r3
 8002892:	2310      	movs	r3, #16
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f7ff fb65 	bl	8001f68 <CO_setUint32>
                if (!valid) {
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d103      	bne.n	80028ac <OD_write_14xx+0x190>
                    CAN_ID = 0;
 80028a4:	2336      	movs	r3, #54	@ 0x36
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	801a      	strh	r2, [r3, #0]
                CO_ReturnError_t ret = CO_CANrxBufferInit(PDO->CANdev, PDO->CANdevIdx, CAN_ID, 0x7FF, false,
 80028ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ae:	6858      	ldr	r0, [r3, #4]
 80028b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028b2:	23a0      	movs	r3, #160	@ 0xa0
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	5ad1      	ldrh	r1, [r2, r3]
 80028b8:	2617      	movs	r6, #23
 80028ba:	19bc      	adds	r4, r7, r6
 80028bc:	4d46      	ldr	r5, [pc, #280]	@ (80029d8 <OD_write_14xx+0x2bc>)
 80028be:	2336      	movs	r3, #54	@ 0x36
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	881a      	ldrh	r2, [r3, #0]
 80028c4:	4b45      	ldr	r3, [pc, #276]	@ (80029dc <OD_write_14xx+0x2c0>)
 80028c6:	9302      	str	r3, [sp, #8]
 80028c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	002b      	movs	r3, r5
 80028d2:	f005 f9e9 	bl	8007ca8 <CO_CANrxBufferInit>
 80028d6:	0003      	movs	r3, r0
 80028d8:	7023      	strb	r3, [r4, #0]
                if (valid && (ret == CO_ERROR_NO)) {
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00f      	beq.n	8002900 <OD_write_14xx+0x1e4>
 80028e0:	19bb      	adds	r3, r7, r6
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b25b      	sxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10a      	bne.n	8002900 <OD_write_14xx+0x1e4>
                    PDO->valid = true;
 80028ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ec:	2201      	movs	r2, #1
 80028ee:	609a      	str	r2, [r3, #8]
                    PDO->configuredCanId = CAN_ID;
 80028f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028f2:	2336      	movs	r3, #54	@ 0x36
 80028f4:	18f9      	adds	r1, r7, r3
 80028f6:	23a2      	movs	r3, #162	@ 0xa2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	8809      	ldrh	r1, [r1, #0]
 80028fc:	52d1      	strh	r1, [r2, r3]
            break;
 80028fe:	e05b      	b.n	80029b8 <OD_write_14xx+0x29c>
                    PDO->valid = false;
 8002900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
                    CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002908:	23b4      	movs	r3, #180	@ 0xb4
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2100      	movs	r1, #0
 800290e:	50d1      	str	r1, [r2, r3]
                    CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002912:	23b6      	movs	r3, #182	@ 0xb6
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2100      	movs	r1, #0
 8002918:	50d1      	str	r1, [r2, r3]
                    if (ret != CO_ERROR_NO) {
 800291a:	2317      	movs	r3, #23
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b25b      	sxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d048      	beq.n	80029b8 <OD_write_14xx+0x29c>
                        return ODR_DEV_INCOMPAT;
 8002926:	2309      	movs	r3, #9
 8002928:	e04f      	b.n	80029ca <OD_write_14xx+0x2ae>
        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 800292a:	2527      	movs	r5, #39	@ 0x27
 800292c:	197c      	adds	r4, r7, r5
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	0018      	movs	r0, r3
 8002932:	f7ff fae9 	bl	8001f08 <CO_getUint8>
 8002936:	0003      	movs	r3, r0
 8002938:	7023      	strb	r3, [r4, #0]
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 800293a:	197b      	adds	r3, r7, r5
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002940:	d905      	bls.n	800294e <OD_write_14xx+0x232>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8002942:	197b      	adds	r3, r7, r5
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2bfd      	cmp	r3, #253	@ 0xfd
 8002948:	d801      	bhi.n	800294e <OD_write_14xx+0x232>
                return ODR_INVALID_VALUE;
 800294a:	230f      	movs	r3, #15
 800294c:	e03d      	b.n	80029ca <OD_write_14xx+0x2ae>
            bool_t synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 800294e:	2327      	movs	r3, #39	@ 0x27
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	781a      	ldrb	r2, [r3, #0]
 8002954:	21f0      	movs	r1, #240	@ 0xf0
 8002956:	2300      	movs	r3, #0
 8002958:	4291      	cmp	r1, r2
 800295a:	415b      	adcs	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	623b      	str	r3, [r7, #32]
            if (RPDO->synchronous != synchronous) {
 8002960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002962:	23c4      	movs	r3, #196	@ 0xc4
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	58d3      	ldr	r3, [r2, r3]
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	429a      	cmp	r2, r3
 800296c:	d004      	beq.n	8002978 <OD_write_14xx+0x25c>
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800296e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002970:	23b6      	movs	r3, #182	@ 0xb6
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2100      	movs	r1, #0
 8002976:	50d1      	str	r1, [r2, r3]
            RPDO->synchronous = synchronous;
 8002978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800297a:	23c4      	movs	r3, #196	@ 0xc4
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	6a39      	ldr	r1, [r7, #32]
 8002980:	50d1      	str	r1, [r2, r3]
            break;
 8002982:	e01a      	b.n	80029ba <OD_write_14xx+0x29e>
            uint32_t eventTime = CO_getUint16(buf);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff facd 	bl	8001f26 <CO_getUint16>
 800298c:	0003      	movs	r3, r0
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
            RPDO->timeoutTime_us = eventTime * 1000U;
 8002990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002992:	0013      	movs	r3, r2
 8002994:	015b      	lsls	r3, r3, #5
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	189b      	adds	r3, r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	0019      	movs	r1, r3
 80029a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a2:	23c6      	movs	r3, #198	@ 0xc6
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	50d1      	str	r1, [r2, r3]
            RPDO->timeoutTimer = 0;
 80029a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029aa:	23c8      	movs	r3, #200	@ 0xc8
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2100      	movs	r1, #0
 80029b0:	50d1      	str	r1, [r2, r3]
            break;
 80029b2:	e002      	b.n	80029ba <OD_write_14xx+0x29e>
            break;
 80029b4:	46c0      	nop			@ (mov r8, r8)
 80029b6:	e000      	b.n	80029ba <OD_write_14xx+0x29e>
            break;
 80029b8:	46c0      	nop			@ (mov r8, r8)
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	2110      	movs	r1, #16
 80029c0:	1879      	adds	r1, r7, r1
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f7fe ff81 	bl	80018ca <OD_writeOriginal>
 80029c8:	0003      	movs	r3, r0
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b00f      	add	sp, #60	@ 0x3c
 80029d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	3ffff800 	.word	0x3ffff800
 80029d8:	000007ff 	.word	0x000007ff
 80029dc:	08002629 	.word	0x08002629

080029e0 <CO_RPDO_init>:
CO_RPDO_init(CO_RPDO_t* RPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_14xx_RPDOCommPar, OD_entry_t* OD_16xx_RPDOMapPar,
             CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint32_t* errInfo) {
 80029e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e2:	b091      	sub	sp, #68	@ 0x44
 80029e4:	af04      	add	r7, sp, #16
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if ((RPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_14xx_RPDOCommPar == NULL) || (OD_16xx_RPDOMapPar == NULL)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00e      	beq.n	8002a16 <CO_RPDO_init+0x36>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <CO_RPDO_init+0x36>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <CO_RPDO_init+0x36>
 8002a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <CO_RPDO_init+0x36>
 8002a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <CO_RPDO_init+0x36>
        || (CANdevRx == NULL)) {
 8002a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <CO_RPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002a16:	2301      	movs	r3, #1
 8002a18:	425b      	negs	r3, r3
 8002a1a:	e159      	b.n	8002cd0 <CO_RPDO_init+0x2f0>
    }

    /* clear object */
    (void)memset(RPDO, 0, sizeof(CO_RPDO_t));
 8002a1c:	23ca      	movs	r3, #202	@ 0xca
 8002a1e:	005a      	lsls	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2100      	movs	r1, #0
 8002a24:	0018      	movs	r0, r3
 8002a26:	f00d f88e 	bl	800fb46 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a34:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO, OD, OD_16xx_RPDOMapPar, true, errInfo, &erroneousMap);
 8002a3a:	2523      	movs	r5, #35	@ 0x23
 8002a3c:	197c      	adds	r4, r7, r5
 8002a3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a44:	231c      	movs	r3, #28
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f7ff fc18 	bl	8002284 <PDO_initMapping>
 8002a54:	0003      	movs	r3, r0
 8002a56:	7023      	strb	r3, [r4, #0]
    if (ret != CO_ERROR_NO) {
 8002a58:	197b      	adds	r3, r7, r5
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <CO_RPDO_init+0x8a>
        return ret;
 8002a62:	197b      	adds	r3, r7, r5
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	e132      	b.n	8002cd0 <CO_RPDO_init+0x2f0>
    }

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 8002a6e:	2522      	movs	r5, #34	@ 0x22
 8002a70:	197c      	adds	r4, r7, r5
 8002a72:	2318      	movs	r3, #24
 8002a74:	18fa      	adds	r2, r7, r3
 8002a76:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002a78:	2301      	movs	r3, #1
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	f7ff fad5 	bl	800202a <OD_get_u32>
 8002a80:	0003      	movs	r3, r0
 8002a82:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8002a84:	197b      	adds	r3, r7, r5
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b25b      	sxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00f      	beq.n	8002aae <CO_RPDO_init+0xce>
        if (errInfo != NULL) {
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <CO_RPDO_init+0xc8>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1U;
 8002a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff fa76 	bl	8001f88 <OD_getIndex>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa6:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	425b      	negs	r3, r3
 8002aac:	e110      	b.n	8002cd0 <CO_RPDO_init+0x2f0>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	0fdb      	lsrs	r3, r3, #31
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	212a      	movs	r1, #42	@ 0x2a
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	0552      	lsls	r2, r2, #21
 8002ac2:	0d52      	lsrs	r2, r2, #21
 8002ac4:	801a      	strh	r2, [r3, #0]
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8002ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <CO_RPDO_init+0x10a>
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	7b5b      	ldrb	r3, [r3, #13]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <CO_RPDO_init+0xfc>
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d106      	bne.n	8002aea <CO_RPDO_init+0x10a>
        valid = false;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0U) {
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <CO_RPDO_init+0x10a>
            erroneousMap = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00f      	beq.n	8002b10 <CO_RPDO_init+0x130>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d001      	beq.n	8002afe <CO_RPDO_init+0x11e>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	e000      	b.n	8002b00 <CO_RPDO_init+0x120>
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2282      	movs	r2, #130	@ 0x82
 8002b02:	0212      	lsls	r2, r2, #8
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	0013      	movs	r3, r2
 8002b08:	221a      	movs	r2, #26
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	f7fd ff60 	bl	80009d0 <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <CO_RPDO_init+0x13e>
        CAN_ID = 0;
 8002b16:	232a      	movs	r3, #42	@ 0x2a
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	801a      	strh	r2, [r3, #0]
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8002b1e:	202a      	movs	r0, #42	@ 0x2a
 8002b20:	183b      	adds	r3, r7, r0
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00f      	beq.n	8002b48 <CO_RPDO_init+0x168>
 8002b28:	183b      	adds	r3, r7, r0
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	2440      	movs	r4, #64	@ 0x40
 8002b2e:	2508      	movs	r5, #8
 8002b30:	1963      	adds	r3, r4, r5
 8002b32:	19db      	adds	r3, r3, r7
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	4968      	ldr	r1, [pc, #416]	@ (8002cd8 <CO_RPDO_init+0x2f8>)
 8002b38:	400b      	ands	r3, r1
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d104      	bne.n	8002b48 <CO_RPDO_init+0x168>
        CAN_ID = preDefinedCanId;
 8002b3e:	183a      	adds	r2, r7, r0
 8002b40:	1963      	adds	r3, r4, r5
 8002b42:	19db      	adds	r3, r3, r7
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	8013      	strh	r3, [r2, #0]
    }

    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CAN_ID, 0x7FF, false, (void*)RPDO, CO_PDO_receive);
 8002b48:	2623      	movs	r6, #35	@ 0x23
 8002b4a:	19bc      	adds	r4, r7, r6
 8002b4c:	4d63      	ldr	r5, [pc, #396]	@ (8002cdc <CO_RPDO_init+0x2fc>)
 8002b4e:	232a      	movs	r3, #42	@ 0x2a
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	881a      	ldrh	r2, [r3, #0]
 8002b54:	2350      	movs	r3, #80	@ 0x50
 8002b56:	2108      	movs	r1, #8
 8002b58:	185b      	adds	r3, r3, r1
 8002b5a:	19db      	adds	r3, r3, r7
 8002b5c:	8819      	ldrh	r1, [r3, #0]
 8002b5e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002b60:	4b5f      	ldr	r3, [pc, #380]	@ (8002ce0 <CO_RPDO_init+0x300>)
 8002b62:	9302      	str	r3, [sp, #8]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	002b      	movs	r3, r5
 8002b6e:	f005 f89b 	bl	8007ca8 <CO_CANrxBufferInit>
 8002b72:	0003      	movs	r3, r0
 8002b74:	7023      	strb	r3, [r4, #0]
    if (ret != CO_ERROR_NO) {
 8002b76:	19bb      	adds	r3, r7, r6
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	b25b      	sxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <CO_RPDO_init+0x1a8>
        return ret;
 8002b80:	19bb      	adds	r3, r7, r6
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	e0a3      	b.n	8002cd0 <CO_RPDO_init+0x2f0>
    }

    PDO->valid = valid;
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b8c:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - transmission type */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8002b8e:	2117      	movs	r1, #23
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	22fe      	movs	r2, #254	@ 0xfe
 8002b94:	701a      	strb	r2, [r3, #0]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 8002b96:	2522      	movs	r5, #34	@ 0x22
 8002b98:	197c      	adds	r4, r7, r5
 8002b9a:	187a      	adds	r2, r7, r1
 8002b9c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	f7ff fa12 	bl	8001fca <OD_get_u8>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8002baa:	197b      	adds	r3, r7, r5
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	b25b      	sxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00f      	beq.n	8002bd4 <CO_RPDO_init+0x1f4>
        if (errInfo != NULL) {
 8002bb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <CO_RPDO_init+0x1ee>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2U;
 8002bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7ff f9e3 	bl	8001f88 <OD_getIndex>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bcc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002bce:	230c      	movs	r3, #12
 8002bd0:	425b      	negs	r3, r3
 8002bd2:	e07d      	b.n	8002cd0 <CO_RPDO_init+0x2f0>
    }

    RPDO->SYNC = SYNC;
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	23c2      	movs	r3, #194	@ 0xc2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	6839      	ldr	r1, [r7, #0]
 8002bdc:	50d1      	str	r1, [r2, r3]
    RPDO->synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 8002bde:	2317      	movs	r3, #23
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	21f0      	movs	r1, #240	@ 0xf0
 8002be6:	2300      	movs	r3, #0
 8002be8:	4291      	cmp	r1, r2
 8002bea:	415b      	adcs	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	0019      	movs	r1, r3
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	23c4      	movs	r3, #196	@ 0xc4
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	50d1      	str	r1, [r2, r3]
#endif

    /* Configure communication parameter - event-timer (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    uint16_t eventTime = 0;
 8002bf8:	2114      	movs	r1, #20
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	801a      	strh	r2, [r3, #0]
    (void)OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002c00:	000c      	movs	r4, r1
 8002c02:	187a      	adds	r2, r7, r1
 8002c04:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002c06:	2301      	movs	r3, #1
 8002c08:	2105      	movs	r1, #5
 8002c0a:	f7ff f9f6 	bl	8001ffa <OD_get_u16>
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000U;
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	001a      	movs	r2, r3
 8002c14:	0013      	movs	r3, r2
 8002c16:	015b      	lsls	r3, r3, #5
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	189b      	adds	r3, r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	0019      	movs	r1, r3
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	23c6      	movs	r3, #198	@ 0xc6
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	50d1      	str	r1, [r2, r3]
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = true;
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2c:	239c      	movs	r3, #156	@ 0x9c
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2101      	movs	r1, #1
 8002c32:	50d1      	str	r1, [r2, r3]
    PDO->OD = OD;
 8002c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c36:	239e      	movs	r3, #158	@ 0x9e
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	50d1      	str	r1, [r2, r3]
    PDO->CANdevIdx = CANdevRxIdx;
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c40:	2350      	movs	r3, #80	@ 0x50
 8002c42:	2008      	movs	r0, #8
 8002c44:	181b      	adds	r3, r3, r0
 8002c46:	19d9      	adds	r1, r3, r7
 8002c48:	23a0      	movs	r3, #160	@ 0xa0
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	8809      	ldrh	r1, [r1, #0]
 8002c4e:	52d1      	strh	r1, [r2, r3]
    PDO->preDefinedCanId = preDefinedCanId;
 8002c50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c52:	2340      	movs	r3, #64	@ 0x40
 8002c54:	181b      	adds	r3, r3, r0
 8002c56:	19db      	adds	r3, r3, r7
 8002c58:	22a1      	movs	r2, #161	@ 0xa1
 8002c5a:	0052      	lsls	r2, r2, #1
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	528b      	strh	r3, [r1, r2]
    PDO->configuredCanId = CAN_ID;
 8002c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c62:	232a      	movs	r3, #42	@ 0x2a
 8002c64:	18f9      	adds	r1, r7, r3
 8002c66:	23a2      	movs	r3, #162	@ 0xa2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	8809      	ldrh	r1, [r1, #0]
 8002c6c:	52d1      	strh	r1, [r2, r3]
    PDO->OD_communicationParam_ext.object = RPDO;
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c70:	23a4      	movs	r3, #164	@ 0xa4
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	68f9      	ldr	r1, [r7, #12]
 8002c76:	50d1      	str	r1, [r2, r3]
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7a:	23a6      	movs	r3, #166	@ 0xa6
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4919      	ldr	r1, [pc, #100]	@ (8002ce4 <CO_RPDO_init+0x304>)
 8002c80:	50d1      	str	r1, [r2, r3]
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 8002c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c84:	23a8      	movs	r3, #168	@ 0xa8
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4917      	ldr	r1, [pc, #92]	@ (8002ce8 <CO_RPDO_init+0x308>)
 8002c8a:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.object = RPDO;
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8e:	23ac      	movs	r3, #172	@ 0xac
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	68f9      	ldr	r1, [r7, #12]
 8002c94:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c98:	23ae      	movs	r3, #174	@ 0xae
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4913      	ldr	r1, [pc, #76]	@ (8002cec <CO_RPDO_init+0x30c>)
 8002c9e:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca2:	23b0      	movs	r3, #176	@ 0xb0
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4912      	ldr	r1, [pc, #72]	@ (8002cf0 <CO_RPDO_init+0x310>)
 8002ca8:	50d1      	str	r1, [r2, r3]
    (void)OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	3349      	adds	r3, #73	@ 0x49
 8002cae:	33ff      	adds	r3, #255	@ 0xff
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cb4:	0011      	movs	r1, r2
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f7ff f975 	bl	8001fa6 <OD_extension_init>
    (void)OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	3359      	adds	r3, #89	@ 0x59
 8002cc0:	33ff      	adds	r3, #255	@ 0xff
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cc6:	0011      	movs	r1, r2
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff f96c 	bl	8001fa6 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b00d      	add	sp, #52	@ 0x34
 8002cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd8:	0000ff80 	.word	0x0000ff80
 8002cdc:	000007ff 	.word	0x000007ff
 8002ce0:	08002629 	.word	0x08002629
 8002ce4:	08002569 	.word	0x08002569
 8002ce8:	0800271d 	.word	0x0800271d
 8002cec:	0800180d 	.word	0x0800180d
 8002cf0:	08002407 	.word	0x08002407

08002cf4 <CO_RPDO_process>:
void
CO_RPDO_process(CO_RPDO_t* RPDO,
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 8002cf4:	b5b0      	push	{r4, r5, r7, lr}
 8002cf6:	b096      	sub	sp, #88	@ 0x58
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
    (void)syncWas;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    (void)timerNext_us;
#endif

    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	633b      	str	r3, [r7, #48]	@ 0x30

    if (PDO->valid && NMTisOperational
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d100      	bne.n	8002d10 <CO_RPDO_process+0x1c>
 8002d0e:	e148      	b.n	8002fa2 <CO_RPDO_process+0x2ae>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d100      	bne.n	8002d18 <CO_RPDO_process+0x24>
 8002d16:	e144      	b.n	8002fa2 <CO_RPDO_process+0x2ae>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (syncWas || !RPDO->synchronous)
 8002d18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <CO_RPDO_process+0x38>
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	23c4      	movs	r3, #196	@ 0xc4
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	58d3      	ldr	r3, [r2, r3]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d000      	beq.n	8002d2c <CO_RPDO_process+0x38>
 8002d2a:	e13a      	b.n	8002fa2 <CO_RPDO_process+0x2ae>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	23c0      	movs	r3, #192	@ 0xc0
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	2b0a      	cmp	r3, #10
 8002d36:	d92a      	bls.n	8002d8e <CO_RPDO_process+0x9a>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	23c0      	movs	r3, #192	@ 0xc0
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	3b0b      	subs	r3, #11
 8002d42:	1e5a      	subs	r2, r3, #1
 8002d44:	4193      	sbcs	r3, r2
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint16_t code = (RPDO->receiveError == CO_RPDO_RX_SHORT) ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	23c0      	movs	r3, #192	@ 0xc0
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d101      	bne.n	8002d5a <CO_RPDO_process+0x66>
 8002d56:	4aa1      	ldr	r2, [pc, #644]	@ (8002fdc <CO_RPDO_process+0x2e8>)
 8002d58:	e000      	b.n	8002d5c <CO_RPDO_process+0x68>
 8002d5a:	4aa1      	ldr	r2, [pc, #644]	@ (8002fe0 <CO_RPDO_process+0x2ec>)
 8002d5c:	212a      	movs	r1, #42	@ 0x2a
 8002d5e:	187b      	adds	r3, r7, r1
 8002d60:	801a      	strh	r2, [r3, #0]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH, code, PDO->dataLength);
 8002d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	7b1b      	ldrb	r3, [r3, #12]
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d72:	9200      	str	r2, [sp, #0]
 8002d74:	2204      	movs	r2, #4
 8002d76:	f7fd fe2b 	bl	80009d0 <CO_error>
            RPDO->receiveError = setError ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8002d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <CO_RPDO_process+0x90>
 8002d80:	2101      	movs	r1, #1
 8002d82:	e000      	b.n	8002d86 <CO_RPDO_process+0x92>
 8002d84:	2100      	movs	r1, #0
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	23c0      	movs	r3, #192	@ 0xc0
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	54d1      	strb	r1, [r2, r3]
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8002d8e:	214f      	movs	r1, #79	@ 0x4f
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (RPDO->synchronous && (RPDO->SYNC != NULL) && !RPDO->SYNC->CANrxToggle) {
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	23c4      	movs	r3, #196	@ 0xc4
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	58d3      	ldr	r3, [r2, r3]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00f      	beq.n	8002dc2 <CO_RPDO_process+0xce>
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	23c2      	movs	r3, #194	@ 0xc2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	58d3      	ldr	r3, [r2, r3]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <CO_RPDO_process+0xce>
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	23c2      	movs	r3, #194	@ 0xc2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	58d3      	ldr	r3, [r2, r3]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <CO_RPDO_process+0xce>
            bufNo = 1;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
        }
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002dc6:	e08b      	b.n	8002ee0 <CO_RPDO_process+0x1ec>
            rpdoReceived = true;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint8_t* dataRPDO = RPDO->CANrxData[bufNo];
 8002dcc:	214f      	movs	r1, #79	@ 0x4f
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	332e      	adds	r3, #46	@ 0x2e
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	18d3      	adds	r3, r2, r3
 8002dda:	647b      	str	r3, [r7, #68]	@ 0x44
            OD_size_t verifyLength = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	643b      	str	r3, [r7, #64]	@ 0x40

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	325a      	adds	r2, #90	@ 0x5a
 8002de8:	0092      	lsls	r2, r2, #2
 8002dea:	2100      	movs	r1, #0
 8002dec:	50d1      	str	r1, [r2, r3]

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002dee:	233f      	movs	r3, #63	@ 0x3f
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e053      	b.n	8002ea0 <CO_RPDO_process+0x1ac>
                OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002df8:	233f      	movs	r3, #63	@ 0x3f
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	015b      	lsls	r3, r3, #5
 8002e00:	3310      	adds	r3, #16
 8002e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e04:	18d3      	adds	r3, r2, r3
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24

                /* get mappedLength from temporary storage */
                OD_size_t* dataOffset = &OD_IO->stream.dataOffset;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	623b      	str	r3, [r7, #32]
                uint8_t mappedLength = (uint8_t)(*dataOffset);
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	211f      	movs	r1, #31
 8002e14:	187b      	adds	r3, r7, r1
 8002e16:	701a      	strb	r2, [r3, #0]

                /* additional safety check. */
                verifyLength += (OD_size_t)mappedLength;
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e1e:	18d3      	adds	r3, r2, r3
 8002e20:	643b      	str	r3, [r7, #64]	@ 0x40
                if (verifyLength > CO_PDO_MAX_SIZE) {
 8002e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d843      	bhi.n	8002eb0 <CO_RPDO_process+0x1bc>
                    break;
                }

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (ODdataLength > CO_PDO_MAX_SIZE) {
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d901      	bls.n	8002e38 <CO_RPDO_process+0x144>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8002e34:	2308      	movs	r3, #8
 8002e36:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t* dataOD;
                if (ODdataLength > mappedLength) {
 8002e38:	251f      	movs	r5, #31
 8002e3a:	197b      	adds	r3, r7, r5
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d910      	bls.n	8002e66 <CO_RPDO_process+0x172>
                    (void)memset(buf, 0, sizeof(buf));
 8002e44:	2414      	movs	r4, #20
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	2208      	movs	r2, #8
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f00c fe7a 	bl	800fb46 <memset>
                    (void)memcpy(buf, dataRPDO, mappedLength);
 8002e52:	197b      	adds	r3, r7, r5
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e58:	193b      	adds	r3, r7, r4
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f00c ff09 	bl	800fc72 <memcpy>
                    dataOD = buf;
 8002e60:	193b      	adds	r3, r7, r4
 8002e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e64:	e001      	b.n	8002e6a <CO_RPDO_process+0x176>
                } else {
                    dataOD = dataRPDO;
 8002e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e68:	637b      	str	r3, [r7, #52]	@ 0x34
                }
#endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD, ODdataLength, &countWritten);
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	69dc      	ldr	r4, [r3, #28]
 8002e74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e76:	2310      	movs	r3, #16
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e7c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002e7e:	47a0      	blx	r4
                *dataOffset = mappedLength;
 8002e80:	211f      	movs	r1, #31
 8002e82:	187b      	adds	r3, r7, r1
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e90:	18d3      	adds	r3, r2, r3
 8002e92:	647b      	str	r3, [r7, #68]	@ 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002e94:	213f      	movs	r1, #63	@ 0x3f
 8002e96:	187b      	adds	r3, r7, r1
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	3201      	adds	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	7b5b      	ldrb	r3, [r3, #13]
 8002ea4:	223f      	movs	r2, #63	@ 0x3f
 8002ea6:	18ba      	adds	r2, r7, r2
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d3a4      	bcc.n	8002df8 <CO_RPDO_process+0x104>
 8002eae:	e000      	b.n	8002eb2 <CO_RPDO_process+0x1be>
                    break;
 8002eb0:	46c0      	nop			@ (mov r8, r8)
            for (uint8_t i = 0; i < PDO->dataLength; i++) {
                *PDO->mapPointer[i] = dataRPDO[i];
            }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

            if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 8002eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d805      	bhi.n	8002ec4 <CO_RPDO_process+0x1d0>
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eba:	7b1b      	ldrb	r3, [r3, #12]
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00d      	beq.n	8002ee0 <CO_RPDO_process+0x1ec>
                /* bug in software, should not happen */
                CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL,
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eca:	2280      	movs	r2, #128	@ 0x80
 8002ecc:	0352      	lsls	r2, r2, #13
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	22c2      	movs	r2, #194	@ 0xc2
 8002ed2:	01d2      	lsls	r2, r2, #7
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	0013      	movs	r3, r2
 8002ed8:	222c      	movs	r2, #44	@ 0x2c
 8002eda:	2101      	movs	r1, #1
 8002edc:	f7fd fd78 	bl	80009d0 <CO_error>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002ee0:	234f      	movs	r3, #79	@ 0x4f
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	325a      	adds	r2, #90	@ 0x5a
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	58d3      	ldr	r3, [r2, r3]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d000      	beq.n	8002ef4 <CO_RPDO_process+0x200>
 8002ef2:	e769      	b.n	8002dc8 <CO_RPDO_process+0xd4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void)rpdoReceived;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        if (RPDO->timeoutTime_us > 0U) {
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	23c6      	movs	r3, #198	@ 0xc6
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	58d3      	ldr	r3, [r2, r3]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d067      	beq.n	8002fd0 <CO_RPDO_process+0x2dc>
            if (rpdoReceived) {
 8002f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01b      	beq.n	8002f3e <CO_RPDO_process+0x24a>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	23c8      	movs	r3, #200	@ 0xc8
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	58d2      	ldr	r2, [r2, r3]
 8002f0e:	68f9      	ldr	r1, [r7, #12]
 8002f10:	23c6      	movs	r3, #198	@ 0xc6
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	58cb      	ldr	r3, [r1, r3]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d90b      	bls.n	8002f32 <CO_RPDO_process+0x23e>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT, RPDO->timeoutTimer);
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	23c8      	movs	r3, #200	@ 0xc8
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	58d3      	ldr	r3, [r2, r3]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2217      	movs	r2, #23
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	f7fd fd4f 	bl	80009d0 <CO_error>
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	23c8      	movs	r3, #200	@ 0xc8
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2101      	movs	r1, #1
 8002f3a:	50d1      	str	r1, [r2, r3]
    ) {
 8002f3c:	e048      	b.n	8002fd0 <CO_RPDO_process+0x2dc>
            } else if ((RPDO->timeoutTimer > 0U) && (RPDO->timeoutTimer < RPDO->timeoutTime_us)) {
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	23c8      	movs	r3, #200	@ 0xc8
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	58d3      	ldr	r3, [r2, r3]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d042      	beq.n	8002fd0 <CO_RPDO_process+0x2dc>
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	23c8      	movs	r3, #200	@ 0xc8
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	58d2      	ldr	r2, [r2, r3]
 8002f52:	68f9      	ldr	r1, [r7, #12]
 8002f54:	23c6      	movs	r3, #198	@ 0xc6
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	58cb      	ldr	r3, [r1, r3]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d238      	bcs.n	8002fd0 <CO_RPDO_process+0x2dc>
                RPDO->timeoutTimer += timeDifference_us;
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	23c8      	movs	r3, #200	@ 0xc8
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	58d2      	ldr	r2, [r2, r3]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	18d1      	adds	r1, r2, r3
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	23c8      	movs	r3, #200	@ 0xc8
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	50d1      	str	r1, [r2, r3]

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	23c8      	movs	r3, #200	@ 0xc8
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	58d2      	ldr	r2, [r2, r3]
 8002f7a:	68f9      	ldr	r1, [r7, #12]
 8002f7c:	23c6      	movs	r3, #198	@ 0xc6
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	58cb      	ldr	r3, [r1, r3]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d924      	bls.n	8002fd0 <CO_RPDO_process+0x2dc>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT, CO_EMC_RPDO_TIMEOUT, RPDO->timeoutTimer);
 8002f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	23c8      	movs	r3, #200	@ 0xc8
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	58d3      	ldr	r3, [r2, r3]
 8002f92:	4a14      	ldr	r2, [pc, #80]	@ (8002fe4 <CO_RPDO_process+0x2f0>)
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	0013      	movs	r3, r2
 8002f98:	2217      	movs	r2, #23
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	f7fd fd18 	bl	80009d0 <CO_error>
    ) {
 8002fa0:	e016      	b.n	8002fd0 <CO_RPDO_process+0x2dc>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    }  /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (!PDO->valid || !NMTisOperational) {
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <CO_RPDO_process+0x2bc>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d110      	bne.n	8002fd2 <CO_RPDO_process+0x2de>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	23b4      	movs	r3, #180	@ 0xb4
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	50d1      	str	r1, [r2, r3]
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	23b6      	movs	r3, #182	@ 0xb6
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	50d1      	str	r1, [r2, r3]
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
            RPDO->timeoutTimer = 0;
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	23c8      	movs	r3, #200	@ 0xc8
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2100      	movs	r1, #0
 8002fcc:	50d1      	str	r1, [r2, r3]
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        RPDO->timeoutTimer = 0;
#endif
#endif
    }
}
 8002fce:	e000      	b.n	8002fd2 <CO_RPDO_process+0x2de>
    ) {
 8002fd0:	46c0      	nop			@ (mov r8, r8)
}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b014      	add	sp, #80	@ 0x50
 8002fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	00008210 	.word	0x00008210
 8002fe0:	00008220 	.word	0x00008220
 8002fe4:	00008250 	.word	0x00008250

08002fe8 <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002fe8:	b5b0      	push	{r4, r5, r7, lr}
 8002fea:	b092      	sub	sp, #72	@ 0x48
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <OD_write_18xx+0x26>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <OD_write_18xx+0x26>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <OD_write_18xx+0x26>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d901      	bls.n	8003012 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 800300e:	2309      	movs	r3, #9
 8003010:	e174      	b.n	80032fc <OD_write_18xx+0x314>
    }

    CO_TPDO_t* TPDO = stream->object;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	63bb      	str	r3, [r7, #56]	@ 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8003018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	2314      	movs	r3, #20
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	0018      	movs	r0, r3
 8003026:	f00c fe24 	bl	800fc72 <memcpy>

    switch (stream->subIndex) {
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	7d1b      	ldrb	r3, [r3, #20]
 800302e:	2b06      	cmp	r3, #6
 8003030:	d900      	bls.n	8003034 <OD_write_18xx+0x4c>
 8003032:	e158      	b.n	80032e6 <OD_write_18xx+0x2fe>
 8003034:	009a      	lsls	r2, r3, #2
 8003036:	4bb3      	ldr	r3, [pc, #716]	@ (8003304 <OD_write_18xx+0x31c>)
 8003038:	18d3      	adds	r3, r2, r3
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	469f      	mov	pc, r3
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	0018      	movs	r0, r3
 8003042:	f7fe ff81 	bl	8001f48 <CO_getUint32>
 8003046:	0003      	movs	r3, r0
 8003048:	623b      	str	r3, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	b29a      	uxth	r2, r3
 800304e:	213e      	movs	r1, #62	@ 0x3e
 8003050:	187b      	adds	r3, r7, r1
 8003052:	0552      	lsls	r2, r2, #21
 8003054:	0d52      	lsrs	r2, r2, #21
 8003056:	801a      	strh	r2, [r3, #0]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	43db      	mvns	r3, r3
 800305c:	0fdb      	lsrs	r3, r3, #31
 800305e:	b2db      	uxtb	r3, r3
 8003060:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	4aa8      	ldr	r2, [pc, #672]	@ (8003308 <OD_write_18xx+0x320>)
 8003066:	4013      	ands	r3, r2
 8003068:	d000      	beq.n	800306c <OD_write_18xx+0x84>
 800306a:	e057      	b.n	800311c <OD_write_18xx+0x134>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <OD_write_18xx+0xa2>
 8003072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <OD_write_18xx+0xa2>
 800307a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800307c:	23a2      	movs	r3, #162	@ 0xa2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	5ad3      	ldrh	r3, [r2, r3]
 8003082:	187a      	adds	r2, r7, r1
 8003084:	8812      	ldrh	r2, [r2, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d148      	bne.n	800311c <OD_write_18xx+0x134>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d03e      	beq.n	800310e <OD_write_18xx+0x126>
 8003090:	213e      	movs	r1, #62	@ 0x3e
 8003092:	187b      	adds	r3, r7, r1
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	2b7f      	cmp	r3, #127	@ 0x7f
 8003098:	d940      	bls.n	800311c <OD_write_18xx+0x134>
 800309a:	187b      	adds	r3, r7, r1
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	@ 0x80
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d905      	bls.n	80030b2 <OD_write_18xx+0xca>
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	881a      	ldrh	r2, [r3, #0]
 80030aa:	23c0      	movs	r3, #192	@ 0xc0
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d934      	bls.n	800311c <OD_write_18xx+0x134>
 80030b2:	213e      	movs	r1, #62	@ 0x3e
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	881a      	ldrh	r2, [r3, #0]
 80030b8:	23b0      	movs	r3, #176	@ 0xb0
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	429a      	cmp	r2, r3
 80030be:	d905      	bls.n	80030cc <OD_write_18xx+0xe4>
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	23c0      	movs	r3, #192	@ 0xc0
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d327      	bcc.n	800311c <OD_write_18xx+0x134>
 80030cc:	213e      	movs	r1, #62	@ 0x3e
 80030ce:	187b      	adds	r3, r7, r1
 80030d0:	881a      	ldrh	r2, [r3, #0]
 80030d2:	23c0      	movs	r3, #192	@ 0xc0
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d905      	bls.n	80030e6 <OD_write_18xx+0xfe>
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	881a      	ldrh	r2, [r3, #0]
 80030de:	23d0      	movs	r3, #208	@ 0xd0
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d31a      	bcc.n	800311c <OD_write_18xx+0x134>
 80030e6:	213e      	movs	r1, #62	@ 0x3e
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	881a      	ldrh	r2, [r3, #0]
 80030ec:	23dc      	movs	r3, #220	@ 0xdc
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d305      	bcc.n	8003100 <OD_write_18xx+0x118>
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	881a      	ldrh	r2, [r3, #0]
 80030f8:	23e0      	movs	r3, #224	@ 0xe0
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d30d      	bcc.n	800311c <OD_write_18xx+0x134>
 8003100:	233e      	movs	r3, #62	@ 0x3e
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	881a      	ldrh	r2, [r3, #0]
 8003106:	23e0      	movs	r3, #224	@ 0xe0
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	429a      	cmp	r2, r3
 800310c:	d806      	bhi.n	800311c <OD_write_18xx+0x134>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <OD_write_18xx+0x138>
 8003114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003116:	7b5b      	ldrb	r3, [r3, #13]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <OD_write_18xx+0x138>
                return ODR_INVALID_VALUE;
 800311c:	230f      	movs	r3, #15
 800311e:	e0ed      	b.n	80032fc <OD_write_18xx+0x314>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8003120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	429a      	cmp	r2, r3
 8003128:	d109      	bne.n	800313e <OD_write_18xx+0x156>
 800312a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800312c:	23a2      	movs	r3, #162	@ 0xa2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	5ad3      	ldrh	r3, [r2, r3]
 8003132:	223e      	movs	r2, #62	@ 0x3e
 8003134:	18ba      	adds	r2, r7, r2
 8003136:	8812      	ldrh	r2, [r2, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d100      	bne.n	800313e <OD_write_18xx+0x156>
 800313c:	e0d5      	b.n	80032ea <OD_write_18xx+0x302>
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId) {
 800313e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003140:	23a1      	movs	r3, #161	@ 0xa1
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	5ad3      	ldrh	r3, [r2, r3]
 8003146:	223e      	movs	r2, #62	@ 0x3e
 8003148:	18ba      	adds	r2, r7, r2
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d109      	bne.n	8003164 <OD_write_18xx+0x17c>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	227f      	movs	r2, #127	@ 0x7f
 8003154:	4393      	bics	r3, r2
 8003156:	001a      	movs	r2, r3
 8003158:	2314      	movs	r3, #20
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	0011      	movs	r1, r2
 800315e:	0018      	movs	r0, r3
 8003160:	f7fe ff02 	bl	8001f68 <CO_setUint32>
                }
                if (!valid) {
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <OD_write_18xx+0x18a>
                    CAN_ID = 0;
 800316a:	233e      	movs	r3, #62	@ 0x3e
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	2200      	movs	r2, #0
 8003170:	801a      	strh	r2, [r3, #0]
                }

                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8003172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003174:	6858      	ldr	r0, [r3, #4]
 8003176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003178:	23a0      	movs	r3, #160	@ 0xa0
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	5ad4      	ldrh	r4, [r2, r3]
 800317e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003180:	7b1a      	ldrb	r2, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8003182:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003184:	23b6      	movs	r3, #182	@ 0xb6
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	5cc9      	ldrb	r1, [r1, r3]
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 800318a:	25f0      	movs	r5, #240	@ 0xf0
 800318c:	2300      	movs	r3, #0
 800318e:	428d      	cmp	r5, r1
 8003190:	415b      	adcs	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	001d      	movs	r5, r3
 8003196:	233e      	movs	r3, #62	@ 0x3e
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	8819      	ldrh	r1, [r3, #0]
 800319c:	9501      	str	r5, [sp, #4]
 800319e:	9200      	str	r2, [sp, #0]
 80031a0:	2300      	movs	r3, #0
 80031a2:	000a      	movs	r2, r1
 80031a4:	0021      	movs	r1, r4
 80031a6:	f004 fde7 	bl	8007d78 <CO_CANtxBufferInit>
 80031aa:	0003      	movs	r3, r0
 80031ac:	61bb      	str	r3, [r7, #24]

                if (CANtxBuff == NULL) {
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <OD_write_18xx+0x1d0>
                    return ODR_DEV_INCOMPAT;
 80031b4:	2309      	movs	r3, #9
 80031b6:	e0a1      	b.n	80032fc <OD_write_18xx+0x314>
                }

                TPDO->CANtxBuff = CANtxBuff;
 80031b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031ba:	23b4      	movs	r3, #180	@ 0xb4
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	69b9      	ldr	r1, [r7, #24]
 80031c0:	50d1      	str	r1, [r2, r3]
                PDO->valid = valid;
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 80031c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031ca:	233e      	movs	r3, #62	@ 0x3e
 80031cc:	18f9      	adds	r1, r7, r3
 80031ce:	23a2      	movs	r3, #162	@ 0xa2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	8809      	ldrh	r1, [r1, #0]
 80031d4:	52d1      	strh	r1, [r2, r3]
            }
            break;
 80031d6:	e088      	b.n	80032ea <OD_write_18xx+0x302>
        }

        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 80031d8:	2527      	movs	r5, #39	@ 0x27
 80031da:	197c      	adds	r4, r7, r5
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	0018      	movs	r0, r3
 80031e0:	f7fe fe92 	bl	8001f08 <CO_getUint8>
 80031e4:	0003      	movs	r3, r0
 80031e6:	7023      	strb	r3, [r4, #0]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80031e8:	197b      	adds	r3, r7, r5
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2bf0      	cmp	r3, #240	@ 0xf0
 80031ee:	d905      	bls.n	80031fc <OD_write_18xx+0x214>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 80031f0:	197b      	adds	r3, r7, r5
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2bfd      	cmp	r3, #253	@ 0xfd
 80031f6:	d801      	bhi.n	80031fc <OD_write_18xx+0x214>
                return ODR_INVALID_VALUE;
 80031f8:	230f      	movs	r3, #15
 80031fa:	e07f      	b.n	80032fc <OD_write_18xx+0x314>
            }
            TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 80031fc:	2027      	movs	r0, #39	@ 0x27
 80031fe:	183b      	adds	r3, r7, r0
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	21f0      	movs	r1, #240	@ 0xf0
 8003204:	2300      	movs	r3, #0
 8003206:	4291      	cmp	r1, r2
 8003208:	415b      	adcs	r3, r3
 800320a:	b2d9      	uxtb	r1, r3
 800320c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800320e:	23b4      	movs	r3, #180	@ 0xb4
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	58d3      	ldr	r3, [r2, r3]
 8003214:	000a      	movs	r2, r1
 8003216:	615a      	str	r2, [r3, #20]
            TPDO->syncCounter = 255;
 8003218:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800321a:	237a      	movs	r3, #122	@ 0x7a
 800321c:	33ff      	adds	r3, #255	@ 0xff
 800321e:	21ff      	movs	r1, #255	@ 0xff
 8003220:	54d1      	strb	r1, [r2, r3]
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
                return ODR_INVALID_VALUE;
            }
#endif
            TPDO->transmissionType = transmissionType;
 8003222:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003224:	1839      	adds	r1, r7, r0
 8003226:	23b6      	movs	r3, #182	@ 0xb6
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	7809      	ldrb	r1, [r1, #0]
 800322c:	54d1      	strb	r1, [r2, r3]
            TPDO->sendRequest = true;
 800322e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003230:	23b8      	movs	r3, #184	@ 0xb8
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2101      	movs	r1, #1
 8003236:	50d1      	str	r1, [r2, r3]
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = 0;
 8003238:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800323a:	23c2      	movs	r3, #194	@ 0xc2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2100      	movs	r1, #0
 8003240:	50d1      	str	r1, [r2, r3]
            TPDO->eventTimer = 0;
 8003242:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003244:	23c4      	movs	r3, #196	@ 0xc4
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	2100      	movs	r1, #0
 800324a:	50d1      	str	r1, [r2, r3]
#endif
            break;
 800324c:	e04e      	b.n	80032ec <OD_write_18xx+0x304>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 800324e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <OD_write_18xx+0x272>
                return ODR_INVALID_VALUE;
 8003256:	230f      	movs	r3, #15
 8003258:	e050      	b.n	80032fc <OD_write_18xx+0x314>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	0018      	movs	r0, r3
 800325e:	f7fe fe62 	bl	8001f26 <CO_getUint16>
 8003262:	0003      	movs	r3, r0
 8003264:	62bb      	str	r3, [r7, #40]	@ 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	2264      	movs	r2, #100	@ 0x64
 800326a:	435a      	muls	r2, r3
 800326c:	0011      	movs	r1, r2
 800326e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003270:	23be      	movs	r3, #190	@ 0xbe
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	50d1      	str	r1, [r2, r3]
            TPDO->inhibitTimer = 0;
 8003276:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003278:	23c2      	movs	r3, #194	@ 0xc2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2100      	movs	r1, #0
 800327e:	50d1      	str	r1, [r2, r3]
            break;
 8003280:	e034      	b.n	80032ec <OD_write_18xx+0x304>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	0018      	movs	r0, r3
 8003286:	f7fe fe4e 	bl	8001f26 <CO_getUint16>
 800328a:	0003      	movs	r3, r0
 800328c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 800328e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003290:	0013      	movs	r3, r2
 8003292:	015b      	lsls	r3, r3, #5
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	189b      	adds	r3, r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	0019      	movs	r1, r3
 800329e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032a0:	23c0      	movs	r3, #192	@ 0xc0
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	50d1      	str	r1, [r2, r3]
            TPDO->eventTimer = 0;
 80032a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032a8:	23c4      	movs	r3, #196	@ 0xc4
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2100      	movs	r1, #0
 80032ae:	50d1      	str	r1, [r2, r3]
            break;
 80032b0:	e01c      	b.n	80032ec <OD_write_18xx+0x304>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 80032b2:	2533      	movs	r5, #51	@ 0x33
 80032b4:	197c      	adds	r4, r7, r5
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7fe fe25 	bl	8001f08 <CO_getUint8>
 80032be:	0003      	movs	r3, r0
 80032c0:	7023      	strb	r3, [r4, #0]

            if (PDO->valid || (syncStartValue > 240U)) {
 80032c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <OD_write_18xx+0x2ea>
 80032ca:	197b      	adds	r3, r7, r5
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2bf0      	cmp	r3, #240	@ 0xf0
 80032d0:	d901      	bls.n	80032d6 <OD_write_18xx+0x2ee>
                return ODR_INVALID_VALUE;
 80032d2:	230f      	movs	r3, #15
 80032d4:	e012      	b.n	80032fc <OD_write_18xx+0x314>
            }
            TPDO->syncStartValue = syncStartValue;
 80032d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032d8:	2333      	movs	r3, #51	@ 0x33
 80032da:	18f9      	adds	r1, r7, r3
 80032dc:	23bc      	movs	r3, #188	@ 0xbc
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	7809      	ldrb	r1, [r1, #0]
 80032e2:	54d1      	strb	r1, [r2, r3]
            break;
 80032e4:	e002      	b.n	80032ec <OD_write_18xx+0x304>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	e000      	b.n	80032ec <OD_write_18xx+0x304>
            break;
 80032ea:	46c0      	nop			@ (mov r8, r8)
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	2114      	movs	r1, #20
 80032f2:	1879      	adds	r1, r7, r1
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7fe fae8 	bl	80018ca <OD_writeOriginal>
 80032fa:	0003      	movs	r3, r0
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b010      	add	sp, #64	@ 0x40
 8003302:	bdb0      	pop	{r4, r5, r7, pc}
 8003304:	08010678 	.word	0x08010678
 8003308:	3ffff800 	.word	0x3ffff800

0800330c <CO_TPDO_init>:
CO_TPDO_init(CO_TPDO_t* TPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_18xx_TPDOCommPar, OD_entry_t* OD_1Axx_TPDOMapPar,
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint32_t* errInfo) {
 800330c:	b5b0      	push	{r4, r5, r7, lr}
 800330e:	b08e      	sub	sp, #56	@ 0x38
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
    ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <CO_TPDO_init+0x36>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <CO_TPDO_init+0x36>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <CO_TPDO_init+0x36>
 8003330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <CO_TPDO_init+0x36>
 8003336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) {
 800333c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <CO_TPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003342:	2301      	movs	r3, #1
 8003344:	425b      	negs	r3, r3
 8003346:	e18c      	b.n	8003662 <CO_TPDO_init+0x356>
    }

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 8003348:	23c6      	movs	r3, #198	@ 0xc6
 800334a:	005a      	lsls	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2100      	movs	r1, #0
 8003350:	0018      	movs	r0, r3
 8003352:	f00c fbf8 	bl	800fb46 <memset>

    /* Configure object variables */
    PDO->em = em;
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003360:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 8003366:	2523      	movs	r5, #35	@ 0x23
 8003368:	197c      	adds	r4, r7, r5
 800336a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003370:	231c      	movs	r3, #28
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2300      	movs	r3, #0
 800337c:	f7fe ff82 	bl	8002284 <PDO_initMapping>
 8003380:	0003      	movs	r3, r0
 8003382:	7023      	strb	r3, [r4, #0]
    if (ret != CO_ERROR_NO) {
 8003384:	197b      	adds	r3, r7, r5
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b25b      	sxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <CO_TPDO_init+0x8a>
        return ret;
 800338e:	197b      	adds	r3, r7, r5
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b25b      	sxtb	r3, r3
 8003394:	e165      	b.n	8003662 <CO_TPDO_init+0x356>
    }

    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003396:	211b      	movs	r1, #27
 8003398:	187b      	adds	r3, r7, r1
 800339a:	22fe      	movs	r2, #254	@ 0xfe
 800339c:	701a      	strb	r2, [r3, #0]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 800339e:	2522      	movs	r5, #34	@ 0x22
 80033a0:	197c      	adds	r4, r7, r5
 80033a2:	187a      	adds	r2, r7, r1
 80033a4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80033a6:	2301      	movs	r3, #1
 80033a8:	2102      	movs	r1, #2
 80033aa:	f7fe fe0e 	bl	8001fca <OD_get_u8>
 80033ae:	0003      	movs	r3, r0
 80033b0:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 80033b2:	197b      	adds	r3, r7, r5
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b25b      	sxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00f      	beq.n	80033dc <CO_TPDO_init+0xd0>
        if (errInfo != NULL) {
 80033bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <CO_TPDO_init+0xca>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 80033c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fe fddf 	bl	8001f88 <OD_getIndex>
 80033ca:	0003      	movs	r3, r0
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	2202      	movs	r2, #2
 80033d0:	431a      	orrs	r2, r3
 80033d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80033d6:	230c      	movs	r3, #12
 80033d8:	425b      	negs	r3, r3
 80033da:	e142      	b.n	8003662 <CO_TPDO_init+0x356>
    }
    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 80033dc:	221b      	movs	r2, #27
 80033de:	18bb      	adds	r3, r7, r2
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2bfd      	cmp	r3, #253	@ 0xfd
 80033e4:	d806      	bhi.n	80033f4 <CO_TPDO_init+0xe8>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80033e6:	18bb      	adds	r3, r7, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2bf0      	cmp	r3, #240	@ 0xf0
 80033ec:	d902      	bls.n	80033f4 <CO_TPDO_init+0xe8>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80033ee:	18bb      	adds	r3, r7, r2
 80033f0:	22fe      	movs	r2, #254	@ 0xfe
 80033f2:	701a      	strb	r2, [r3, #0]
    }
    TPDO->transmissionType = transmissionType;
 80033f4:	231b      	movs	r3, #27
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	7819      	ldrb	r1, [r3, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	23b6      	movs	r3, #182	@ 0xb6
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	54d1      	strb	r1, [r2, r3]
    TPDO->sendRequest = true;
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	23b8      	movs	r3, #184	@ 0xb8
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	2101      	movs	r1, #1
 800340a:	50d1      	str	r1, [r2, r3]

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003410:	2522      	movs	r5, #34	@ 0x22
 8003412:	197c      	adds	r4, r7, r5
 8003414:	2314      	movs	r3, #20
 8003416:	18fa      	adds	r2, r7, r3
 8003418:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800341a:	2301      	movs	r3, #1
 800341c:	2101      	movs	r1, #1
 800341e:	f7fe fe04 	bl	800202a <OD_get_u32>
 8003422:	0003      	movs	r3, r0
 8003424:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8003426:	197b      	adds	r3, r7, r5
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b25b      	sxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00f      	beq.n	8003450 <CO_TPDO_init+0x144>
        if (errInfo != NULL) {
 8003430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <CO_TPDO_init+0x13e>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 8003436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003438:	0018      	movs	r0, r3
 800343a:	f7fe fda5 	bl	8001f88 <OD_getIndex>
 800343e:	0003      	movs	r3, r0
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	2201      	movs	r2, #1
 8003444:	431a      	orrs	r2, r3
 8003446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003448:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800344a:	230c      	movs	r3, #12
 800344c:	425b      	negs	r3, r3
 800344e:	e108      	b.n	8003662 <CO_TPDO_init+0x356>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	43db      	mvns	r3, r3
 8003454:	0fdb      	lsrs	r3, r3, #31
 8003456:	b2db      	uxtb	r3, r3
 8003458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	b29a      	uxth	r2, r3
 800345e:	212a      	movs	r1, #42	@ 0x2a
 8003460:	187b      	adds	r3, r7, r1
 8003462:	0552      	lsls	r2, r2, #21
 8003464:	0d52      	lsrs	r2, r2, #21
 8003466:	801a      	strh	r2, [r3, #0]
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00e      	beq.n	800348c <CO_TPDO_init+0x180>
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	7b5b      	ldrb	r3, [r3, #13]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <CO_TPDO_init+0x172>
 8003476:	187b      	adds	r3, r7, r1
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <CO_TPDO_init+0x180>
        valid = false;
 800347e:	2300      	movs	r3, #0
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0U) {
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <CO_TPDO_init+0x180>
            erroneousMap = 1;
 8003488:	2301      	movs	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00f      	beq.n	80034b2 <CO_TPDO_init+0x1a6>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d001      	beq.n	80034a0 <CO_TPDO_init+0x194>
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	e000      	b.n	80034a2 <CO_TPDO_init+0x196>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2282      	movs	r2, #130	@ 0x82
 80034a4:	0212      	lsls	r2, r2, #8
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	0013      	movs	r3, r2
 80034aa:	221a      	movs	r2, #26
 80034ac:	2101      	movs	r1, #1
 80034ae:	f7fd fa8f 	bl	80009d0 <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d103      	bne.n	80034c0 <CO_TPDO_init+0x1b4>
        CAN_ID = 0;
 80034b8:	232a      	movs	r3, #42	@ 0x2a
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2200      	movs	r2, #0
 80034be:	801a      	strh	r2, [r3, #0]
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 80034c0:	202a      	movs	r0, #42	@ 0x2a
 80034c2:	183b      	adds	r3, r7, r0
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00c      	beq.n	80034e4 <CO_TPDO_init+0x1d8>
 80034ca:	183b      	adds	r3, r7, r0
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	2440      	movs	r4, #64	@ 0x40
 80034d0:	193b      	adds	r3, r7, r4
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	4965      	ldr	r1, [pc, #404]	@ (800366c <CO_TPDO_init+0x360>)
 80034d6:	400b      	ands	r3, r1
 80034d8:	429a      	cmp	r2, r3
 80034da:	d103      	bne.n	80034e4 <CO_TPDO_init+0x1d8>
        CAN_ID = preDefinedCanId;
 80034dc:	183a      	adds	r2, r7, r0
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	8013      	strh	r3, [r2, #0]
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	7b1a      	ldrb	r2, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 80034e8:	68f9      	ldr	r1, [r7, #12]
 80034ea:	23b6      	movs	r3, #182	@ 0xb6
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	5cc9      	ldrb	r1, [r1, r3]
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 80034f0:	20f0      	movs	r0, #240	@ 0xf0
 80034f2:	2300      	movs	r3, #0
 80034f4:	4288      	cmp	r0, r1
 80034f6:	415b      	adcs	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	001d      	movs	r5, r3
 80034fc:	232a      	movs	r3, #42	@ 0x2a
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	881c      	ldrh	r4, [r3, #0]
 8003502:	2350      	movs	r3, #80	@ 0x50
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	8819      	ldrh	r1, [r3, #0]
 8003508:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800350a:	9501      	str	r5, [sp, #4]
 800350c:	9200      	str	r2, [sp, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	0022      	movs	r2, r4
 8003512:	f004 fc31 	bl	8007d78 <CO_CANtxBufferInit>
 8003516:	0001      	movs	r1, r0
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	23b4      	movs	r3, #180	@ 0xb4
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	50d1      	str	r1, [r2, r3]

    if (TPDO->CANtxBuff == NULL) {
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	23b4      	movs	r3, #180	@ 0xb4
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	58d3      	ldr	r3, [r2, r3]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <CO_TPDO_init+0x226>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800352c:	2301      	movs	r3, #1
 800352e:	425b      	negs	r3, r3
 8003530:	e097      	b.n	8003662 <CO_TPDO_init+0x356>
    }

    PDO->valid = valid;
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003536:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 8003538:	2112      	movs	r1, #18
 800353a:	187b      	adds	r3, r7, r1
 800353c:	2200      	movs	r2, #0
 800353e:	801a      	strh	r2, [r3, #0]
    uint16_t eventTime = 0;
 8003540:	2510      	movs	r5, #16
 8003542:	197b      	adds	r3, r7, r5
 8003544:	2200      	movs	r2, #0
 8003546:	801a      	strh	r2, [r3, #0]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8003548:	000c      	movs	r4, r1
 800354a:	187a      	adds	r2, r7, r1
 800354c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800354e:	2301      	movs	r3, #1
 8003550:	2103      	movs	r1, #3
 8003552:	f7fe fd52 	bl	8001ffa <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8003556:	197a      	adds	r2, r7, r5
 8003558:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800355a:	2301      	movs	r3, #1
 800355c:	2105      	movs	r1, #5
 800355e:	f7fe fd4c 	bl	8001ffa <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 8003562:	193b      	adds	r3, r7, r4
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	001a      	movs	r2, r3
 8003568:	2364      	movs	r3, #100	@ 0x64
 800356a:	4353      	muls	r3, r2
 800356c:	0019      	movs	r1, r3
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	23be      	movs	r3, #190	@ 0xbe
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	50d1      	str	r1, [r2, r3]
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 8003576:	197b      	adds	r3, r7, r5
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	001a      	movs	r2, r3
 800357c:	0013      	movs	r3, r2
 800357e:	015b      	lsls	r3, r3, #5
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	189b      	adds	r3, r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	0019      	movs	r1, r3
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	23c0      	movs	r3, #192	@ 0xc0
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	50d1      	str	r1, [r2, r3]
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	23bc      	movs	r3, #188	@ 0xbc
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	2100      	movs	r1, #0
 800359a:	54d1      	strb	r1, [r2, r3]
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3379      	adds	r3, #121	@ 0x79
 80035a0:	33ff      	adds	r3, #255	@ 0xff
 80035a2:	001a      	movs	r2, r3
 80035a4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80035a6:	2301      	movs	r3, #1
 80035a8:	2106      	movs	r1, #6
 80035aa:	f7fe fd0e 	bl	8001fca <OD_get_u8>
    TPDO->SYNC = SYNC;
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	23ba      	movs	r3, #186	@ 0xba
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	6839      	ldr	r1, [r7, #0]
 80035b6:	50d1      	str	r1, [r2, r3]
    TPDO->syncCounter = 255;
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	237a      	movs	r3, #122	@ 0x7a
 80035bc:	33ff      	adds	r3, #255	@ 0xff
 80035be:	21ff      	movs	r1, #255	@ 0xff
 80035c0:	54d1      	strb	r1, [r2, r3]
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 80035c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c4:	239c      	movs	r3, #156	@ 0x9c
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2100      	movs	r1, #0
 80035ca:	50d1      	str	r1, [r2, r3]
    PDO->OD = OD;
 80035cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ce:	239e      	movs	r3, #158	@ 0x9e
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	50d1      	str	r1, [r2, r3]
    PDO->CANdevIdx = CANdevTxIdx;
 80035d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d8:	2350      	movs	r3, #80	@ 0x50
 80035da:	18f9      	adds	r1, r7, r3
 80035dc:	23a0      	movs	r3, #160	@ 0xa0
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	8809      	ldrh	r1, [r1, #0]
 80035e2:	52d1      	strh	r1, [r2, r3]
    PDO->preDefinedCanId = preDefinedCanId;
 80035e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035e6:	2340      	movs	r3, #64	@ 0x40
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	22a1      	movs	r2, #161	@ 0xa1
 80035ec:	0052      	lsls	r2, r2, #1
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	528b      	strh	r3, [r1, r2]
    PDO->configuredCanId = CAN_ID;
 80035f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f4:	232a      	movs	r3, #42	@ 0x2a
 80035f6:	18f9      	adds	r1, r7, r3
 80035f8:	23a2      	movs	r3, #162	@ 0xa2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	8809      	ldrh	r1, [r1, #0]
 80035fe:	52d1      	strh	r1, [r2, r3]
    PDO->OD_communicationParam_ext.object = TPDO;
 8003600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003602:	23a4      	movs	r3, #164	@ 0xa4
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	68f9      	ldr	r1, [r7, #12]
 8003608:	50d1      	str	r1, [r2, r3]
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 800360a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360c:	23a6      	movs	r3, #166	@ 0xa6
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4917      	ldr	r1, [pc, #92]	@ (8003670 <CO_TPDO_init+0x364>)
 8003612:	50d1      	str	r1, [r2, r3]
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8003614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003616:	23a8      	movs	r3, #168	@ 0xa8
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4916      	ldr	r1, [pc, #88]	@ (8003674 <CO_TPDO_init+0x368>)
 800361c:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.object = TPDO;
 800361e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003620:	23ac      	movs	r3, #172	@ 0xac
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8003628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362a:	23ae      	movs	r3, #174	@ 0xae
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4912      	ldr	r1, [pc, #72]	@ (8003678 <CO_TPDO_init+0x36c>)
 8003630:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003634:	23b0      	movs	r3, #176	@ 0xb0
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4910      	ldr	r1, [pc, #64]	@ (800367c <CO_TPDO_init+0x370>)
 800363a:	50d1      	str	r1, [r2, r3]
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	3349      	adds	r3, #73	@ 0x49
 8003640:	33ff      	adds	r3, #255	@ 0xff
 8003642:	001a      	movs	r2, r3
 8003644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003646:	0011      	movs	r1, r2
 8003648:	0018      	movs	r0, r3
 800364a:	f7fe fcac 	bl	8001fa6 <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	3359      	adds	r3, #89	@ 0x59
 8003652:	33ff      	adds	r3, #255	@ 0xff
 8003654:	001a      	movs	r2, r3
 8003656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003658:	0011      	movs	r1, r2
 800365a:	0018      	movs	r0, r3
 800365c:	f7fe fca3 	bl	8001fa6 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003660:	2300      	movs	r3, #0
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b00c      	add	sp, #48	@ 0x30
 8003668:	bdb0      	pop	{r4, r5, r7, pc}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	0000ff80 	.word	0x0000ff80
 8003670:	08002569 	.word	0x08002569
 8003674:	08002fe9 	.word	0x08002fe9
 8003678:	0800180d 	.word	0x0800180d
 800367c:	08002407 	.word	0x08002407

08003680 <CO_TPDOsend>:
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO) {
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b093      	sub	sp, #76	@ 0x4c
 8003684:	af02      	add	r7, sp, #8
 8003686:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t* dataTPDO = &TPDO->CANtxBuff->data[0];
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	23b4      	movs	r3, #180	@ 0xb4
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	58d3      	ldr	r3, [r2, r3]
 8003694:	3305      	adds	r3, #5
 8003696:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t verifyLength = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	23b6      	movs	r3, #182	@ 0xb6
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	5cd3      	ldrb	r3, [r2, r3]
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <CO_TPDOsend+0x34>
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	23b6      	movs	r3, #182	@ 0xb6
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	5cd3      	ldrb	r3, [r2, r3]
 80036b0:	2bfd      	cmp	r3, #253	@ 0xfd
 80036b2:	d901      	bls.n	80036b8 <CO_TPDOsend+0x38>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <CO_TPDOsend+0x3a>
 80036b8:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80036bc:	2337      	movs	r3, #55	@ 0x37
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e075      	b.n	80037b2 <CO_TPDOsend+0x132>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 80036c6:	2337      	movs	r3, #55	@ 0x37
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	015b      	lsls	r3, r3, #5
 80036ce:	3310      	adds	r3, #16
 80036d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036d2:	18d3      	adds	r3, r2, r3
 80036d4:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	211b      	movs	r1, #27
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	701a      	strb	r2, [r3, #0]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036ea:	18d3      	adds	r3, r2, r3
 80036ec:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 80036ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d866      	bhi.n	80037c2 <CO_TPDOsend+0x142>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d901      	bls.n	8003704 <CO_TPDOsend+0x84>
            ODdataLength = CO_PDO_MAX_SIZE;
 8003700:	2308      	movs	r3, #8
 8003702:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003704:	231b      	movs	r3, #27
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370c:	429a      	cmp	r2, r3
 800370e:	d909      	bls.n	8003724 <CO_TPDOsend+0xa4>
            (void)memset(buf, 0, sizeof(buf));
 8003710:	240c      	movs	r4, #12
 8003712:	193b      	adds	r3, r7, r4
 8003714:	2208      	movs	r2, #8
 8003716:	2100      	movs	r1, #0
 8003718:	0018      	movs	r0, r3
 800371a:	f00c fa14 	bl	800fb46 <memset>
            dataTPDOCopy = buf;
 800371e:	193b      	adds	r3, r7, r4
 8003720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003722:	e001      	b.n	8003728 <CO_TPDOsend+0xa8>
        } else {
            dataTPDOCopy = dataTPDO;
 8003724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003726:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	699c      	ldr	r4, [r3, #24]
 8003732:	2308      	movs	r3, #8
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003738:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800373a:	69f8      	ldr	r0, [r7, #28]
 800373c:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 800373e:	211b      	movs	r1, #27
 8003740:	187b      	adds	r3, r7, r1
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8003748:	187b      	adds	r3, r7, r1
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800374e:	429a      	cmp	r2, r3
 8003750:	d907      	bls.n	8003762 <CO_TPDOsend+0xe2>
            (void)memcpy(dataTPDO, buf, mappedLength);
 8003752:	187b      	adds	r3, r7, r1
 8003754:	781a      	ldrb	r2, [r3, #0]
 8003756:	230c      	movs	r3, #12
 8003758:	18f9      	adds	r1, r7, r3
 800375a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800375c:	0018      	movs	r0, r3
 800375e:	f00c fa88 	bl	800fc72 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8003762:	2137      	movs	r1, #55	@ 0x37
 8003764:	187b      	adds	r3, r7, r1
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376a:	3244      	adds	r2, #68	@ 0x44
 800376c:	0092      	lsls	r2, r2, #2
 800376e:	58d3      	ldr	r3, [r2, r3]
 8003770:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d010      	beq.n	800379a <CO_TPDOsend+0x11a>
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00d      	beq.n	800379a <CO_TPDOsend+0x11a>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	187b      	adds	r3, r7, r1
 8003784:	7819      	ldrb	r1, [r3, #0]
 8003786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003788:	2398      	movs	r3, #152	@ 0x98
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	1841      	adds	r1, r0, r1
 800378e:	18cb      	adds	r3, r1, r3
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	b2da      	uxtb	r2, r3
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 800379a:	231b      	movs	r3, #27
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037a2:	18d3      	adds	r3, r2, r3
 80037a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80037a6:	2137      	movs	r1, #55	@ 0x37
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	3201      	adds	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b4:	7b5b      	ldrb	r3, [r3, #13]
 80037b6:	2237      	movs	r2, #55	@ 0x37
 80037b8:	18ba      	adds	r2, r7, r2
 80037ba:	7812      	ldrb	r2, [r2, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d382      	bcc.n	80036c6 <CO_TPDOsend+0x46>
 80037c0:	e000      	b.n	80037c4 <CO_TPDOsend+0x144>
            break;
 80037c2:	46c0      	nop			@ (mov r8, r8)
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 80037c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d805      	bhi.n	80037d6 <CO_TPDOsend+0x156>
 80037ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037cc:	7b1b      	ldrb	r3, [r3, #12]
 80037ce:	001a      	movs	r2, r3
 80037d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d010      	beq.n	80037f8 <CO_TPDOsend+0x178>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000 | verifyLength));
 80037d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	0392      	lsls	r2, r2, #14
 80037e0:	4313      	orrs	r3, r2
 80037e2:	22c2      	movs	r2, #194	@ 0xc2
 80037e4:	01d2      	lsls	r2, r2, #7
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	0013      	movs	r3, r2
 80037ea:	222c      	movs	r2, #44	@ 0x2c
 80037ec:	2101      	movs	r1, #1
 80037ee:	f7fd f8ef 	bl	80009d0 <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 80037f2:	230d      	movs	r3, #13
 80037f4:	425b      	negs	r3, r3
 80037f6:	e01e      	b.n	8003836 <CO_TPDOsend+0x1b6>
    }

    TPDO->sendRequest = false;
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	23b8      	movs	r3, #184	@ 0xb8
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2100      	movs	r1, #0
 8003800:	50d1      	str	r1, [r2, r3]
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	23c0      	movs	r3, #192	@ 0xc0
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	58d1      	ldr	r1, [r2, r3]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	23c4      	movs	r3, #196	@ 0xc4
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	50d1      	str	r1, [r2, r3]
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	23be      	movs	r3, #190	@ 0xbe
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	58d1      	ldr	r1, [r2, r3]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	23c2      	movs	r3, #194	@ 0xc2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	50d1      	str	r1, [r2, r3]
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8003822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003824:	6858      	ldr	r0, [r3, #4]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	23b4      	movs	r3, #180	@ 0xb4
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	58d3      	ldr	r3, [r2, r3]
 800382e:	0019      	movs	r1, r3
 8003830:	f004 fb60 	bl	8007ef4 <CO_CANsend>
 8003834:	0003      	movs	r3, r0
}
 8003836:	0018      	movs	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	b011      	add	sp, #68	@ 0x44
 800383c:	bd90      	pop	{r4, r7, pc}

0800383e <CO_TPDO_process>:
void
CO_TPDO_process(CO_TPDO_t* TPDO,
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || defined CO_DOXYGEN
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 800383e:	b580      	push	{r7, lr}
 8003840:	b088      	sub	sp, #32
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
    (void)timerNext_us;
#endif
    (void)syncWas;

    if (PDO->valid && NMTisOperational) {
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d100      	bne.n	800385a <CO_TPDO_process+0x1c>
 8003858:	e113      	b.n	8003a82 <CO_TPDO_process+0x244>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d100      	bne.n	8003862 <CO_TPDO_process+0x24>
 8003860:	e10f      	b.n	8003a82 <CO_TPDO_process+0x244>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	23b6      	movs	r3, #182	@ 0xb6
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	5cd3      	ldrb	r3, [r2, r3]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <CO_TPDO_process+0x3c>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	23b6      	movs	r3, #182	@ 0xb6
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	5cd3      	ldrb	r3, [r2, r3]
 8003876:	2bfd      	cmp	r3, #253	@ 0xfd
 8003878:	d95a      	bls.n	8003930 <CO_TPDO_process+0xf2>
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U) {
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	23c0      	movs	r3, #192	@ 0xc0
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	58d3      	ldr	r3, [r2, r3]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01d      	beq.n	80038c2 <CO_TPDO_process+0x84>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	23c4      	movs	r3, #196	@ 0xc4
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	58d3      	ldr	r3, [r2, r3]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	429a      	cmp	r2, r3
 8003892:	d206      	bcs.n	80038a2 <CO_TPDO_process+0x64>
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	23c4      	movs	r3, #196	@ 0xc4
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	58d2      	ldr	r2, [r2, r3]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	e000      	b.n	80038a4 <CO_TPDO_process+0x66>
 80038a2:	2300      	movs	r3, #0
 80038a4:	68f9      	ldr	r1, [r7, #12]
 80038a6:	22c4      	movs	r2, #196	@ 0xc4
 80038a8:	0052      	lsls	r2, r2, #1
 80038aa:	508b      	str	r3, [r1, r2]
                if (TPDO->eventTimer == 0U) {
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	23c4      	movs	r3, #196	@ 0xc4
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	58d3      	ldr	r3, [r2, r3]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <CO_TPDO_process+0x84>
                    TPDO->sendRequest = true;
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	23b8      	movs	r3, #184	@ 0xb8
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	2101      	movs	r1, #1
 80038c0:	50d1      	str	r1, [r2, r3]
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	23b8      	movs	r3, #184	@ 0xb8
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	58d3      	ldr	r3, [r2, r3]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d130      	bne.n	8003930 <CO_TPDO_process+0xf2>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80038ce:	231f      	movs	r3, #31
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e024      	b.n	8003922 <CO_TPDO_process+0xe4>
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 80038d8:	211f      	movs	r1, #31
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	781a      	ldrb	r2, [r3, #0]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	3244      	adds	r2, #68	@ 0x44
 80038e2:	0092      	lsls	r2, r2, #2
 80038e4:	58d3      	ldr	r3, [r2, r3]
 80038e6:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d013      	beq.n	8003916 <CO_TPDO_process+0xd8>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U) {
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	187a      	adds	r2, r7, r1
 80038f4:	7811      	ldrb	r1, [r2, #0]
 80038f6:	69b8      	ldr	r0, [r7, #24]
 80038f8:	2298      	movs	r2, #152	@ 0x98
 80038fa:	0052      	lsls	r2, r2, #1
 80038fc:	1841      	adds	r1, r0, r1
 80038fe:	188a      	adds	r2, r1, r2
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	4013      	ands	r3, r2
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <CO_TPDO_process+0xd8>
                            TPDO->sendRequest = true;
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	23b8      	movs	r3, #184	@ 0xb8
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	2101      	movs	r1, #1
 8003912:	50d1      	str	r1, [r2, r3]
                            break;
 8003914:	e00c      	b.n	8003930 <CO_TPDO_process+0xf2>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003916:	211f      	movs	r1, #31
 8003918:	187b      	adds	r3, r7, r1
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	187b      	adds	r3, r7, r1
 800391e:	3201      	adds	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	7b5b      	ldrb	r3, [r3, #13]
 8003926:	221f      	movs	r2, #31
 8003928:	18ba      	adds	r2, r7, r2
 800392a:	7812      	ldrb	r2, [r2, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d3d3      	bcc.n	80038d8 <CO_TPDO_process+0x9a>
#endif
        }
#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	23b6      	movs	r3, #182	@ 0xb6
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	2bfd      	cmp	r3, #253	@ 0xfd
 800393a:	d925      	bls.n	8003988 <CO_TPDO_process+0x14a>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	23c2      	movs	r3, #194	@ 0xc2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	58d3      	ldr	r3, [r2, r3]
                                                                          : 0U;
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	d206      	bcs.n	8003958 <CO_TPDO_process+0x11a>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	23c2      	movs	r3, #194	@ 0xc2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	58d2      	ldr	r2, [r2, r3]
                                                                          : 0U;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	e000      	b.n	800395a <CO_TPDO_process+0x11c>
 8003958:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	22c2      	movs	r2, #194	@ 0xc2
 800395e:	0052      	lsls	r2, r2, #1
 8003960:	508b      	str	r3, [r1, r2]

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) {
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	23b8      	movs	r3, #184	@ 0xb8
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	58d3      	ldr	r3, [r2, r3]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d100      	bne.n	8003970 <CO_TPDO_process+0x132>
 800396e:	e09d      	b.n	8003aac <CO_TPDO_process+0x26e>
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	23c2      	movs	r3, #194	@ 0xc2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	58d3      	ldr	r3, [r2, r3]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d000      	beq.n	800397e <CO_TPDO_process+0x140>
 800397c:	e096      	b.n	8003aac <CO_TPDO_process+0x26e>
                (void)CO_TPDOsend(TPDO);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff fe7d 	bl	8003680 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003986:	e091      	b.n	8003aac <CO_TPDO_process+0x26e>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	23ba      	movs	r3, #186	@ 0xba
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	58d3      	ldr	r3, [r2, r3]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d100      	bne.n	8003996 <CO_TPDO_process+0x158>
 8003994:	e08a      	b.n	8003aac <CO_TPDO_process+0x26e>
 8003996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d100      	bne.n	800399e <CO_TPDO_process+0x160>
 800399c:	e086      	b.n	8003aac <CO_TPDO_process+0x26e>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	23b6      	movs	r3, #182	@ 0xb6
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	5cd3      	ldrb	r3, [r2, r3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <CO_TPDO_process+0x184>
                if (TPDO->sendRequest) {
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	23b8      	movs	r3, #184	@ 0xb8
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	58d3      	ldr	r3, [r2, r3]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d100      	bne.n	80039b8 <CO_TPDO_process+0x17a>
 80039b6:	e079      	b.n	8003aac <CO_TPDO_process+0x26e>
                    (void)CO_TPDOsend(TPDO);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff fe60 	bl	8003680 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80039c0:	e074      	b.n	8003aac <CO_TPDO_process+0x26e>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	237a      	movs	r3, #122	@ 0x7a
 80039c6:	33ff      	adds	r3, #255	@ 0xff
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	2bff      	cmp	r3, #255	@ 0xff
 80039cc:	d11e      	bne.n	8003a0c <CO_TPDO_process+0x1ce>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	23ba      	movs	r3, #186	@ 0xba
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	58d3      	ldr	r3, [r2, r3]
 80039d6:	7c5b      	ldrb	r3, [r3, #17]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00b      	beq.n	80039f4 <CO_TPDO_process+0x1b6>
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	23bc      	movs	r3, #188	@ 0xbc
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <CO_TPDO_process+0x1b6>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	237a      	movs	r3, #122	@ 0x7a
 80039ec:	33ff      	adds	r3, #255	@ 0xff
 80039ee:	21fe      	movs	r1, #254	@ 0xfe
 80039f0:	54d1      	strb	r1, [r2, r3]
 80039f2:	e00b      	b.n	8003a0c <CO_TPDO_process+0x1ce>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	23b6      	movs	r3, #182	@ 0xb6
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	085b      	lsrs	r3, r3, #1
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	b2d9      	uxtb	r1, r3
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	237a      	movs	r3, #122	@ 0x7a
 8003a08:	33ff      	adds	r3, #255	@ 0xff
 8003a0a:	54d1      	strb	r1, [r2, r3]
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	237a      	movs	r3, #122	@ 0x7a
 8003a10:	33ff      	adds	r3, #255	@ 0xff
 8003a12:	5cd3      	ldrb	r3, [r2, r3]
 8003a14:	2bfe      	cmp	r3, #254	@ 0xfe
 8003a16:	d117      	bne.n	8003a48 <CO_TPDO_process+0x20a>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	23ba      	movs	r3, #186	@ 0xba
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	58d3      	ldr	r3, [r2, r3]
 8003a20:	7c9a      	ldrb	r2, [r3, #18]
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	23bc      	movs	r3, #188	@ 0xbc
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d13e      	bne.n	8003aac <CO_TPDO_process+0x26e>
                        TPDO->syncCounter = TPDO->transmissionType;
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	23b6      	movs	r3, #182	@ 0xb6
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	5cd1      	ldrb	r1, [r2, r3]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	237a      	movs	r3, #122	@ 0x7a
 8003a3a:	33ff      	adds	r3, #255	@ 0xff
 8003a3c:	54d1      	strb	r1, [r2, r3]
                        (void)CO_TPDOsend(TPDO);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7ff fe1d 	bl	8003680 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003a46:	e031      	b.n	8003aac <CO_TPDO_process+0x26e>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	237a      	movs	r3, #122	@ 0x7a
 8003a4c:	33ff      	adds	r3, #255	@ 0xff
 8003a4e:	5cd3      	ldrb	r3, [r2, r3]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b2d9      	uxtb	r1, r3
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	237a      	movs	r3, #122	@ 0x7a
 8003a58:	33ff      	adds	r3, #255	@ 0xff
 8003a5a:	54d1      	strb	r1, [r2, r3]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	237a      	movs	r3, #122	@ 0x7a
 8003a60:	33ff      	adds	r3, #255	@ 0xff
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d121      	bne.n	8003aac <CO_TPDO_process+0x26e>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	23b6      	movs	r3, #182	@ 0xb6
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	5cd1      	ldrb	r1, [r2, r3]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	237a      	movs	r3, #122	@ 0x7a
 8003a74:	33ff      	adds	r3, #255	@ 0xff
 8003a76:	54d1      	strb	r1, [r2, r3]
                    (void)CO_TPDOsend(TPDO);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7ff fe00 	bl	8003680 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003a80:	e014      	b.n	8003aac <CO_TPDO_process+0x26e>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	23b8      	movs	r3, #184	@ 0xb8
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	2101      	movs	r1, #1
 8003a8a:	50d1      	str	r1, [r2, r3]
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	23c2      	movs	r3, #194	@ 0xc2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	2100      	movs	r1, #0
 8003a94:	50d1      	str	r1, [r2, r3]
        TPDO->eventTimer = 0;
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	23c4      	movs	r3, #196	@ 0xc4
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	50d1      	str	r1, [r2, r3]
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	237a      	movs	r3, #122	@ 0x7a
 8003aa4:	33ff      	adds	r3, #255	@ 0xff
 8003aa6:	21ff      	movs	r1, #255	@ 0xff
 8003aa8:	54d1      	strb	r1, [r2, r3]
#endif
    }
}
 8003aaa:	e000      	b.n	8003aae <CO_TPDO_process+0x270>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003aac:	46c0      	nop			@ (mov r8, r8)
}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b008      	add	sp, #32
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	781a      	ldrb	r2, [r3, #0]
 8003ac2:	210f      	movs	r1, #15
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	701a      	strb	r2, [r3, #0]
    return value;
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	781b      	ldrb	r3, [r3, #0]
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b004      	add	sp, #16
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	230c      	movs	r3, #12
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f00c f81b 	bl	800fb20 <memmove>
    return value;
 8003aea:	68fb      	ldr	r3, [r7, #12]
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <OD_getIndex+0x14>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	e000      	b.n	8003b0a <OD_getIndex+0x16>
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b002      	add	sp, #8
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8003b22:	2305      	movs	r3, #5
 8003b24:	e003      	b.n	8003b2e <OD_extension_init+0x1c>
    entry->extension = extension;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	0018      	movs	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b002      	add	sp, #8
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af02      	add	r7, sp, #8
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	200b      	movs	r0, #11
 8003b44:	183b      	adds	r3, r7, r0
 8003b46:	1c0a      	adds	r2, r1, #0
 8003b48:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	183b      	adds	r3, r7, r0
 8003b4e:	7819      	ldrb	r1, [r3, #0]
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	2301      	movs	r3, #1
 8003b58:	f7fe f8fc 	bl	8001d54 <OD_get_value>
 8003b5c:	0003      	movs	r3, r0
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b004      	add	sp, #16
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af02      	add	r7, sp, #8
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	200b      	movs	r0, #11
 8003b74:	183b      	adds	r3, r7, r0
 8003b76:	1c0a      	adds	r2, r1, #0
 8003b78:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	183b      	adds	r3, r7, r0
 8003b7e:	7819      	ldrb	r1, [r3, #0]
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2304      	movs	r3, #4
 8003b88:	f7fe f8e4 	bl	8001d54 <OD_get_value>
 8003b8c:	0003      	movs	r3, r0
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b004      	add	sp, #16
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af02      	add	r7, sp, #8
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	200b      	movs	r0, #11
 8003ba4:	183b      	adds	r3, r7, r0
 8003ba6:	1c0a      	adds	r2, r1, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8003baa:	1d3a      	adds	r2, r7, #4
 8003bac:	183b      	adds	r3, r7, r0
 8003bae:	7819      	ldrb	r1, [r3, #0]
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	f7fe f913 	bl	8001de2 <OD_set_value>
 8003bbc:	0003      	movs	r3, r0
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003bd4:	2113      	movs	r1, #19
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	7912      	ldrb	r2, [r2, #4]
 8003bdc:	701a      	strb	r2, [r3, #0]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	3305      	adds	r3, #5
 8003be2:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d118      	bne.n	8003c1e <CO_SDO_receive+0x58>
        if (data[0] == 0x80U) {
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b80      	cmp	r3, #128	@ 0x80
 8003bf2:	d103      	bne.n	8003bfc <CO_SDO_receive+0x36>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003bfa:	e010      	b.n	8003c1e <CO_SDO_receive+0x58>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10c      	bne.n	8003c1e <CO_SDO_receive+0x58>
            (void)memcpy(SDO->CANrxData, data, DLC);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3340      	adds	r3, #64	@ 0x40
 8003c08:	0018      	movs	r0, r3
 8003c0a:	2313      	movs	r3, #19
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	0019      	movs	r1, r3
 8003c14:	f00c f82d 	bl	800fc72 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b006      	add	sp, #24
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 8003c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2a:	b08b      	sub	sp, #44	@ 0x2c
 8003c2c:	af04      	add	r7, sp, #16
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	0019      	movs	r1, r3
 8003c34:	1dbb      	adds	r3, r7, #6
 8003c36:	801a      	strh	r2, [r3, #0]
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	1c0a      	adds	r2, r1, #0
 8003c3c:	801a      	strh	r2, [r3, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d106      	bne.n	8003c56 <CO_SDOserver_init_canRxTx+0x2e>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d101      	bne.n	8003c56 <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e064      	b.n	8003d20 <CO_SDOserver_init_canRxTx+0xf8>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c5a:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c60:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	db02      	blt.n	8003c6e <CO_SDOserver_init_canRxTx+0x46>
 8003c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	e000      	b.n	8003c70 <CO_SDOserver_init_canRxTx+0x48>
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2316      	movs	r3, #22
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	801a      	strh	r2, [r3, #0]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 8003c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db02      	blt.n	8003c82 <CO_SDOserver_init_canRxTx+0x5a>
 8003c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	e000      	b.n	8003c84 <CO_SDOserver_init_canRxTx+0x5c>
 8003c82:	2200      	movs	r2, #0
 8003c84:	2114      	movs	r1, #20
 8003c86:	187b      	adds	r3, r7, r1
 8003c88:	801a      	strh	r2, [r3, #0]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 8003c8a:	2316      	movs	r3, #22
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <CO_SDOserver_init_canRxTx+0x7c>
 8003c94:	187b      	adds	r3, r7, r1
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <CO_SDOserver_init_canRxTx+0x7c>
        SDO->valid = true;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	611a      	str	r2, [r3, #16]
 8003ca2:	e00a      	b.n	8003cba <CO_SDOserver_init_canRxTx+0x92>
    } else {
        idC2S = 0;
 8003ca4:	2316      	movs	r3, #22
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	2200      	movs	r2, #0
 8003caa:	801a      	strh	r2, [r3, #0]
        idS2C = 0;
 8003cac:	2314      	movs	r3, #20
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	801a      	strh	r2, [r3, #0]
        SDO->valid = false;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 8003cba:	2613      	movs	r6, #19
 8003cbc:	19bc      	adds	r4, r7, r6
 8003cbe:	4d1a      	ldr	r5, [pc, #104]	@ (8003d28 <CO_SDOserver_init_canRxTx+0x100>)
 8003cc0:	2316      	movs	r3, #22
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	881a      	ldrh	r2, [r3, #0]
 8003cc6:	1dbb      	adds	r3, r7, #6
 8003cc8:	8819      	ldrh	r1, [r3, #0]
 8003cca:	68b8      	ldr	r0, [r7, #8]
 8003ccc:	4b17      	ldr	r3, [pc, #92]	@ (8003d2c <CO_SDOserver_init_canRxTx+0x104>)
 8003cce:	9302      	str	r3, [sp, #8]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	002b      	movs	r3, r5
 8003cda:	f003 ffe5 	bl	8007ca8 <CO_CANrxBufferInit>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	7023      	strb	r3, [r4, #0]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	2314      	movs	r3, #20
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	881a      	ldrh	r2, [r3, #0]
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	8819      	ldrh	r1, [r3, #0]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f004 f83d 	bl	8007d78 <CO_CANtxBufferInit>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <CO_SDOserver_init_canRxTx+0xf0>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003d0c:	19bb      	adds	r3, r7, r6
 8003d0e:	22ff      	movs	r2, #255	@ 0xff
 8003d10:	701a      	strb	r2, [r3, #0]
        SDO->valid = false;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003d18:	2313      	movs	r3, #19
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	b25b      	sxtb	r3, r3
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b007      	add	sp, #28
 8003d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d28:	000007ff 	.word	0x000007ff
 8003d2c:	08003bc7 	.word	0x08003bc7

08003d30 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	b08e      	sub	sp, #56	@ 0x38
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <OD_write_1201_additional+0x20>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <OD_write_1201_additional+0x20>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8003d50:	2309      	movs	r3, #9
 8003d52:	e13a      	b.n	8003fca <OD_write_1201_additional+0x29a>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (stream->subIndex) {
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	7d1b      	ldrb	r3, [r3, #20]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d100      	bne.n	8003d64 <OD_write_1201_additional+0x34>
 8003d62:	e110      	b.n	8003f86 <OD_write_1201_additional+0x256>
 8003d64:	dd00      	ble.n	8003d68 <OD_write_1201_additional+0x38>
 8003d66:	e126      	b.n	8003fb6 <OD_write_1201_additional+0x286>
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d100      	bne.n	8003d6e <OD_write_1201_additional+0x3e>
 8003d6c:	e089      	b.n	8003e82 <OD_write_1201_additional+0x152>
 8003d6e:	dd00      	ble.n	8003d72 <OD_write_1201_additional+0x42>
 8003d70:	e121      	b.n	8003fb6 <OD_write_1201_additional+0x286>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <OD_write_1201_additional+0x4c>
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d002      	beq.n	8003d80 <OD_write_1201_additional+0x50>
 8003d7a:	e11c      	b.n	8003fb6 <OD_write_1201_additional+0x286>
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	e124      	b.n	8003fca <OD_write_1201_additional+0x29a>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7ff fea6 	bl	8003ad4 <CO_getUint32>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	61bb      	str	r3, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	2116      	movs	r1, #22
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	0552      	lsls	r2, r2, #21
 8003d96:	0d52      	lsrs	r2, r2, #21
 8003d98:	801a      	strh	r2, [r3, #0]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	2014      	movs	r0, #20
 8003da2:	183b      	adds	r3, r7, r0
 8003da4:	0552      	lsls	r2, r2, #21
 8003da6:	0d52      	lsrs	r2, r2, #21
 8003da8:	801a      	strh	r2, [r3, #0]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	0fdb      	lsrs	r3, r3, #31
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	4a87      	ldr	r2, [pc, #540]	@ (8003fd4 <OD_write_1201_additional+0x2a4>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	d14e      	bne.n	8003e5a <OD_write_1201_additional+0x12a>
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <OD_write_1201_additional+0xa6>
 8003dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <OD_write_1201_additional+0xa6>
 8003dca:	187a      	adds	r2, r7, r1
 8003dcc:	183b      	adds	r3, r7, r0
 8003dce:	8812      	ldrh	r2, [r2, #0]
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d141      	bne.n	8003e5a <OD_write_1201_additional+0x12a>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d040      	beq.n	8003e5e <OD_write_1201_additional+0x12e>
 8003ddc:	2116      	movs	r1, #22
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003de4:	d939      	bls.n	8003e5a <OD_write_1201_additional+0x12a>
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	2380      	movs	r3, #128	@ 0x80
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d905      	bls.n	8003dfe <OD_write_1201_additional+0xce>
 8003df2:	187b      	adds	r3, r7, r1
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	23c0      	movs	r3, #192	@ 0xc0
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d92d      	bls.n	8003e5a <OD_write_1201_additional+0x12a>
 8003dfe:	2116      	movs	r1, #22
 8003e00:	187b      	adds	r3, r7, r1
 8003e02:	881a      	ldrh	r2, [r3, #0]
 8003e04:	23b0      	movs	r3, #176	@ 0xb0
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d905      	bls.n	8003e18 <OD_write_1201_additional+0xe8>
 8003e0c:	187b      	adds	r3, r7, r1
 8003e0e:	881a      	ldrh	r2, [r3, #0]
 8003e10:	23c0      	movs	r3, #192	@ 0xc0
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d320      	bcc.n	8003e5a <OD_write_1201_additional+0x12a>
 8003e18:	2116      	movs	r1, #22
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	23c0      	movs	r3, #192	@ 0xc0
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d905      	bls.n	8003e32 <OD_write_1201_additional+0x102>
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	881a      	ldrh	r2, [r3, #0]
 8003e2a:	23d0      	movs	r3, #208	@ 0xd0
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d313      	bcc.n	8003e5a <OD_write_1201_additional+0x12a>
 8003e32:	2116      	movs	r1, #22
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	881a      	ldrh	r2, [r3, #0]
 8003e38:	23dc      	movs	r3, #220	@ 0xdc
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d305      	bcc.n	8003e4c <OD_write_1201_additional+0x11c>
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	881a      	ldrh	r2, [r3, #0]
 8003e44:	23e0      	movs	r3, #224	@ 0xe0
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d306      	bcc.n	8003e5a <OD_write_1201_additional+0x12a>
 8003e4c:	2316      	movs	r3, #22
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	881a      	ldrh	r2, [r3, #0]
 8003e52:	23e0      	movs	r3, #224	@ 0xe0
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d901      	bls.n	8003e5e <OD_write_1201_additional+0x12e>
                return ODR_INVALID_VALUE;
 8003e5a:	230f      	movs	r3, #15
 8003e5c:	e0b5      	b.n	8003fca <OD_write_1201_additional+0x29a>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8003e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e60:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	224c      	movs	r2, #76	@ 0x4c
 8003e66:	5a9a      	ldrh	r2, [r3, r2]
 8003e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6a:	204e      	movs	r0, #78	@ 0x4e
 8003e6c:	5a1c      	ldrh	r4, [r3, r0]
 8003e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	0023      	movs	r3, r4
 8003e7c:	f7ff fed4 	bl	8003c28 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8003e80:	e09c      	b.n	8003fbc <OD_write_1201_additional+0x28c>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7ff fe25 	bl	8003ad4 <CO_getUint32>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	2122      	movs	r1, #34	@ 0x22
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	0552      	lsls	r2, r2, #21
 8003e98:	0d52      	lsrs	r2, r2, #21
 8003e9a:	801a      	strh	r2, [r3, #0]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	2020      	movs	r0, #32
 8003ea4:	183b      	adds	r3, r7, r0
 8003ea6:	0552      	lsls	r2, r2, #21
 8003ea8:	0d52      	lsrs	r2, r2, #21
 8003eaa:	801a      	strh	r2, [r3, #0]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	0fdb      	lsrs	r3, r3, #31
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	4a46      	ldr	r2, [pc, #280]	@ (8003fd4 <OD_write_1201_additional+0x2a4>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d14e      	bne.n	8003f5c <OD_write_1201_additional+0x22c>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <OD_write_1201_additional+0x1a8>
 8003ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <OD_write_1201_additional+0x1a8>
 8003ecc:	187a      	adds	r2, r7, r1
 8003ece:	183b      	adds	r3, r7, r0
 8003ed0:	8812      	ldrh	r2, [r2, #0]
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d141      	bne.n	8003f5c <OD_write_1201_additional+0x22c>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d040      	beq.n	8003f60 <OD_write_1201_additional+0x230>
 8003ede:	2122      	movs	r1, #34	@ 0x22
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ee6:	d939      	bls.n	8003f5c <OD_write_1201_additional+0x22c>
 8003ee8:	187b      	adds	r3, r7, r1
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	2380      	movs	r3, #128	@ 0x80
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d905      	bls.n	8003f00 <OD_write_1201_additional+0x1d0>
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	881a      	ldrh	r2, [r3, #0]
 8003ef8:	23c0      	movs	r3, #192	@ 0xc0
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d92d      	bls.n	8003f5c <OD_write_1201_additional+0x22c>
 8003f00:	2122      	movs	r1, #34	@ 0x22
 8003f02:	187b      	adds	r3, r7, r1
 8003f04:	881a      	ldrh	r2, [r3, #0]
 8003f06:	23b0      	movs	r3, #176	@ 0xb0
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d905      	bls.n	8003f1a <OD_write_1201_additional+0x1ea>
 8003f0e:	187b      	adds	r3, r7, r1
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	23c0      	movs	r3, #192	@ 0xc0
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d320      	bcc.n	8003f5c <OD_write_1201_additional+0x22c>
 8003f1a:	2122      	movs	r1, #34	@ 0x22
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	881a      	ldrh	r2, [r3, #0]
 8003f20:	23c0      	movs	r3, #192	@ 0xc0
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d905      	bls.n	8003f34 <OD_write_1201_additional+0x204>
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	881a      	ldrh	r2, [r3, #0]
 8003f2c:	23d0      	movs	r3, #208	@ 0xd0
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d313      	bcc.n	8003f5c <OD_write_1201_additional+0x22c>
 8003f34:	2122      	movs	r1, #34	@ 0x22
 8003f36:	187b      	adds	r3, r7, r1
 8003f38:	881a      	ldrh	r2, [r3, #0]
 8003f3a:	23dc      	movs	r3, #220	@ 0xdc
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d305      	bcc.n	8003f4e <OD_write_1201_additional+0x21e>
 8003f42:	187b      	adds	r3, r7, r1
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	23e0      	movs	r3, #224	@ 0xe0
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d306      	bcc.n	8003f5c <OD_write_1201_additional+0x22c>
 8003f4e:	2322      	movs	r3, #34	@ 0x22
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	881a      	ldrh	r2, [r3, #0]
 8003f54:	23e0      	movs	r3, #224	@ 0xe0
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d901      	bls.n	8003f60 <OD_write_1201_additional+0x230>
                return ODR_INVALID_VALUE;
 8003f5c:	230f      	movs	r3, #15
 8003f5e:	e034      	b.n	8003fca <OD_write_1201_additional+0x29a>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 8003f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f62:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f66:	224c      	movs	r2, #76	@ 0x4c
 8003f68:	5a9c      	ldrh	r4, [r3, r2]
 8003f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6c:	224e      	movs	r2, #78	@ 0x4e
 8003f6e:	5a9d      	ldrh	r5, [r3, r2]
 8003f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f78:	9201      	str	r2, [sp, #4]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	002b      	movs	r3, r5
 8003f7e:	0022      	movs	r2, r4
 8003f80:	f7ff fe52 	bl	8003c28 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 8003f84:	e01a      	b.n	8003fbc <OD_write_1201_additional+0x28c>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d001      	beq.n	8003f90 <OD_write_1201_additional+0x260>
                return ODR_TYPE_MISMATCH;
 8003f8c:	230b      	movs	r3, #11
 8003f8e:	e01c      	b.n	8003fca <OD_write_1201_additional+0x29a>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8003f90:	252b      	movs	r5, #43	@ 0x2b
 8003f92:	197c      	adds	r4, r7, r5
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7ff fd8d 	bl	8003ab6 <CO_getUint8>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	7023      	strb	r3, [r4, #0]
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003fa0:	197b      	adds	r3, r7, r5
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <OD_write_1201_additional+0x282>
 8003fa8:	197b      	adds	r3, r7, r5
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	b25b      	sxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	da03      	bge.n	8003fba <OD_write_1201_additional+0x28a>
                return ODR_INVALID_VALUE;
 8003fb2:	230f      	movs	r3, #15
 8003fb4:	e009      	b.n	8003fca <OD_write_1201_additional+0x29a>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8003fb6:	230e      	movs	r3, #14
 8003fb8:	e007      	b.n	8003fca <OD_write_1201_additional+0x29a>
            break;
 8003fba:	46c0      	nop			@ (mov r8, r8)
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7fd fc81 	bl	80018ca <OD_writeOriginal>
 8003fc8:	0003      	movs	r3, r0
}
 8003fca:	0018      	movs	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b00c      	add	sp, #48	@ 0x30
 8003fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	3ffff800 	.word	0x3ffff800

08003fd8 <CO_SDOserver_init>:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOserver_init(CO_SDOserver_t* SDO, OD_t* OD, OD_entry_t* OD_1200_SDOsrvPar, uint8_t nodeId,
                  uint16_t SDOtimeoutTime_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx,
                  uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8003fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fda:	b08d      	sub	sp, #52	@ 0x34
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	001a      	movs	r2, r3
 8003fe6:	1cfb      	adds	r3, r7, #3
 8003fe8:	701a      	strb	r2, [r3, #0]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <CO_SDOserver_init+0x2a>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <CO_SDOserver_init+0x2a>
 8003ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <CO_SDOserver_init+0x2a>
 8003ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <CO_SDOserver_init+0x30>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004002:	2301      	movs	r3, #1
 8004004:	425b      	negs	r3, r3
 8004006:	e149      	b.n	800429c <CO_SDOserver_init+0x2c4>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1cfa      	adds	r2, r7, #3
 8004012:	7812      	ldrb	r2, [r2, #0]
 8004014:	731a      	strb	r2, [r3, #12]
#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 8004016:	2338      	movs	r3, #56	@ 0x38
 8004018:	2208      	movs	r2, #8
 800401a:	189b      	adds	r3, r3, r2
 800401c:	19db      	adds	r3, r3, r7
 800401e:	881a      	ldrh	r2, [r3, #0]
 8004020:	0013      	movs	r3, r2
 8004022:	015b      	lsls	r3, r3, #5
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	189b      	adds	r3, r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	001a      	movs	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d123      	bne.n	8004086 <CO_SDOserver_init+0xae>
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U)) {
 800403e:	1cfb      	adds	r3, r7, #3
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <CO_SDOserver_init+0x78>
 8004046:	1cfb      	adds	r3, r7, #3
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	b25b      	sxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	da02      	bge.n	8004056 <CO_SDOserver_init+0x7e>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8004050:	2301      	movs	r3, #1
 8004052:	425b      	negs	r3, r3
 8004054:	e122      	b.n	800429c <CO_SDOserver_init+0x2c4>
        }

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8004056:	1cfb      	adds	r3, r7, #3
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	b29a      	uxth	r2, r3
 800405c:	2326      	movs	r3, #38	@ 0x26
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	21c0      	movs	r1, #192	@ 0xc0
 8004062:	00c9      	lsls	r1, r1, #3
 8004064:	468c      	mov	ip, r1
 8004066:	4462      	add	r2, ip
 8004068:	801a      	strh	r2, [r3, #0]
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 800406a:	1cfb      	adds	r3, r7, #3
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	b29a      	uxth	r2, r3
 8004070:	2324      	movs	r3, #36	@ 0x24
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	21b0      	movs	r1, #176	@ 0xb0
 8004076:	00c9      	lsls	r1, r1, #3
 8004078:	468c      	mov	ip, r1
 800407a:	4462      	add	r2, ip
 800407c:	801a      	strh	r2, [r3, #0]
        SDO->valid = true;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	611a      	str	r2, [r3, #16]
 8004084:	e0d6      	b.n	8004234 <CO_SDOserver_init+0x25c>
    } else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8004086:	2522      	movs	r5, #34	@ 0x22
 8004088:	197c      	adds	r4, r7, r5
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0018      	movs	r0, r3
 800408e:	f7ff fd31 	bl	8003af4 <OD_getIndex>
 8004092:	0003      	movs	r3, r0
 8004094:	8023      	strh	r3, [r4, #0]

        if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM) {
 8004096:	197b      	adds	r3, r7, r5
 8004098:	881a      	ldrh	r2, [r3, #0]
 800409a:	2390      	movs	r3, #144	@ 0x90
 800409c:	015b      	lsls	r3, r3, #5
 800409e:	429a      	cmp	r2, r3
 80040a0:	d131      	bne.n	8004106 <CO_SDOserver_init+0x12e>
            /* configure default SDO channel and SDO server parameters for it */
            if ((nodeId < 1U) || (nodeId > 127U)) {
 80040a2:	1cfb      	adds	r3, r7, #3
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <CO_SDOserver_init+0xdc>
 80040aa:	1cfb      	adds	r3, r7, #3
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	b25b      	sxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	da02      	bge.n	80040ba <CO_SDOserver_init+0xe2>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 80040b4:	2301      	movs	r3, #1
 80040b6:	425b      	negs	r3, r3
 80040b8:	e0f0      	b.n	800429c <CO_SDOserver_init+0x2c4>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80040ba:	1cfb      	adds	r3, r7, #3
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b29a      	uxth	r2, r3
 80040c0:	2126      	movs	r1, #38	@ 0x26
 80040c2:	187b      	adds	r3, r7, r1
 80040c4:	20c0      	movs	r0, #192	@ 0xc0
 80040c6:	00c0      	lsls	r0, r0, #3
 80040c8:	4684      	mov	ip, r0
 80040ca:	4462      	add	r2, ip
 80040cc:	801a      	strh	r2, [r3, #0]
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80040ce:	1cfb      	adds	r3, r7, #3
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	2424      	movs	r4, #36	@ 0x24
 80040d6:	193b      	adds	r3, r7, r4
 80040d8:	20b0      	movs	r0, #176	@ 0xb0
 80040da:	00c0      	lsls	r0, r0, #3
 80040dc:	4684      	mov	ip, r0
 80040de:	4462      	add	r2, ip
 80040e0:	801a      	strh	r2, [r3, #0]
            SDO->valid = true;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	611a      	str	r2, [r3, #16]

            (void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 80040e8:	187b      	adds	r3, r7, r1
 80040ea:	881a      	ldrh	r2, [r3, #0]
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	2301      	movs	r3, #1
 80040f0:	2101      	movs	r1, #1
 80040f2:	f7ff fd50 	bl	8003b96 <OD_set_u32>
            (void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 80040f6:	193b      	adds	r3, r7, r4
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	2301      	movs	r3, #1
 80040fe:	2102      	movs	r1, #2
 8004100:	f7ff fd49 	bl	8003b96 <OD_set_u32>
 8004104:	e096      	b.n	8004234 <CO_SDOserver_init+0x25c>
        } else if ((OD_SDOsrvParIdx > (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8004106:	2122      	movs	r1, #34	@ 0x22
 8004108:	187b      	adds	r3, r7, r1
 800410a:	881a      	ldrh	r2, [r3, #0]
 800410c:	2390      	movs	r3, #144	@ 0x90
 800410e:	015b      	lsls	r3, r3, #5
 8004110:	429a      	cmp	r2, r3
 8004112:	d800      	bhi.n	8004116 <CO_SDOserver_init+0x13e>
 8004114:	e08a      	b.n	800422c <CO_SDOserver_init+0x254>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8004116:	187b      	adds	r3, r7, r1
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	2394      	movs	r3, #148	@ 0x94
 800411c:	015b      	lsls	r3, r3, #5
 800411e:	429a      	cmp	r2, r3
 8004120:	d300      	bcc.n	8004124 <CO_SDOserver_init+0x14c>
 8004122:	e083      	b.n	800422c <CO_SDOserver_init+0x254>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8004124:	2621      	movs	r6, #33	@ 0x21
 8004126:	19bc      	adds	r4, r7, r6
 8004128:	251d      	movs	r5, #29
 800412a:	197a      	adds	r2, r7, r5
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	2301      	movs	r3, #1
 8004130:	2100      	movs	r1, #0
 8004132:	f7ff fd00 	bl	8003b36 <OD_get_u8>
 8004136:	0003      	movs	r3, r0
 8004138:	7023      	strb	r3, [r4, #0]
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 800413a:	2320      	movs	r3, #32
 800413c:	18fc      	adds	r4, r7, r3
 800413e:	2318      	movs	r3, #24
 8004140:	18fa      	adds	r2, r7, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	2301      	movs	r3, #1
 8004146:	2101      	movs	r1, #1
 8004148:	f7ff fd0d 	bl	8003b66 <OD_get_u32>
 800414c:	0003      	movs	r3, r0
 800414e:	7023      	strb	r3, [r4, #0]
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 8004150:	231f      	movs	r3, #31
 8004152:	18fc      	adds	r4, r7, r3
 8004154:	2314      	movs	r3, #20
 8004156:	18fa      	adds	r2, r7, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	2301      	movs	r3, #1
 800415c:	2102      	movs	r1, #2
 800415e:	f7ff fd02 	bl	8003b66 <OD_get_u32>
 8004162:	0003      	movs	r3, r0
 8004164:	7023      	strb	r3, [r4, #0]

            if ((odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U)) || (odRet1 != ODR_OK)
 8004166:	19bb      	adds	r3, r7, r6
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	b25b      	sxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d113      	bne.n	8004198 <CO_SDOserver_init+0x1c0>
 8004170:	197b      	adds	r3, r7, r5
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d003      	beq.n	8004180 <CO_SDOserver_init+0x1a8>
 8004178:	197b      	adds	r3, r7, r5
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d10b      	bne.n	8004198 <CO_SDOserver_init+0x1c0>
 8004180:	2320      	movs	r3, #32
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	b25b      	sxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <CO_SDOserver_init+0x1c0>
                || (odRet2 != ODR_OK)) {
 800418c:	231f      	movs	r3, #31
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	b25b      	sxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <CO_SDOserver_init+0x1d6>
                if (errInfo != NULL) {
 8004198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <CO_SDOserver_init+0x1d0>
                    *errInfo = OD_SDOsrvParIdx;
 800419e:	2322      	movs	r3, #34	@ 0x22
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	881a      	ldrh	r2, [r3, #0]
 80041a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a6:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 80041a8:	230c      	movs	r3, #12
 80041aa:	425b      	negs	r3, r3
 80041ac:	e076      	b.n	800429c <CO_SDOserver_init+0x2c4>
            }

            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db05      	blt.n	80041c0 <CO_SDOserver_init+0x1e8>
                                       ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 80041b8:	055b      	lsls	r3, r3, #21
 80041ba:	0d5b      	lsrs	r3, r3, #21
 80041bc:	b29a      	uxth	r2, r3
 80041be:	e000      	b.n	80041c2 <CO_SDOserver_init+0x1ea>
 80041c0:	2200      	movs	r2, #0
 80041c2:	2326      	movs	r3, #38	@ 0x26
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	801a      	strh	r2, [r3, #0]
                                       : 0U;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	db05      	blt.n	80041da <CO_SDOserver_init+0x202>
                                       ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 80041d2:	055b      	lsls	r3, r3, #21
 80041d4:	0d5b      	lsrs	r3, r3, #21
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	e000      	b.n	80041dc <CO_SDOserver_init+0x204>
 80041da:	2200      	movs	r2, #0
 80041dc:	2324      	movs	r3, #36	@ 0x24
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	801a      	strh	r2, [r3, #0]
                                       : 0U;

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
            SDO->OD_1200_extension.object = SDO;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	659a      	str	r2, [r3, #88]	@ 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a2e      	ldr	r2, [pc, #184]	@ (80042a4 <CO_SDOserver_init+0x2cc>)
 80041ec:	65da      	str	r2, [r3, #92]	@ 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4a2d      	ldr	r2, [pc, #180]	@ (80042a8 <CO_SDOserver_init+0x2d0>)
 80041f2:	661a      	str	r2, [r3, #96]	@ 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3358      	adds	r3, #88	@ 0x58
 80041f8:	001a      	movs	r2, r3
 80041fa:	251e      	movs	r5, #30
 80041fc:	197c      	adds	r4, r7, r5
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f7ff fc85 	bl	8003b12 <OD_extension_init>
 8004208:	0003      	movs	r3, r0
 800420a:	7023      	strb	r3, [r4, #0]
            if (odRetE != ODR_OK) {
 800420c:	197b      	adds	r3, r7, r5
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b25b      	sxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <CO_SDOserver_init+0x25a>
                if (errInfo != NULL) {
 8004216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <CO_SDOserver_init+0x24e>
                    *errInfo = OD_SDOsrvParIdx;
 800421c:	2322      	movs	r3, #34	@ 0x22
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004224:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8004226:	230c      	movs	r3, #12
 8004228:	425b      	negs	r3, r3
 800422a:	e037      	b.n	800429c <CO_SDOserver_init+0x2c4>
            }
#endif
        } else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 800422c:	2301      	movs	r3, #1
 800422e:	425b      	negs	r3, r3
 8004230:	e034      	b.n	800429c <CO_SDOserver_init+0x2c4>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8004232:	46c0      	nop			@ (mov r8, r8)
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800423e:	649a      	str	r2, [r3, #72]	@ 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2040      	movs	r0, #64	@ 0x40
 8004244:	2508      	movs	r5, #8
 8004246:	1942      	adds	r2, r0, r5
 8004248:	19d2      	adds	r2, r2, r7
 800424a:	214c      	movs	r1, #76	@ 0x4c
 800424c:	8812      	ldrh	r2, [r2, #0]
 800424e:	525a      	strh	r2, [r3, r1]
    SDO->CANdevTxIdx = CANdevTxIdx;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2448      	movs	r4, #72	@ 0x48
 8004254:	1962      	adds	r2, r4, r5
 8004256:	19d2      	adds	r2, r2, r7
 8004258:	214e      	movs	r1, #78	@ 0x4e
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	525a      	strh	r2, [r3, r1]
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = 0;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800426e:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8004270:	2326      	movs	r3, #38	@ 0x26
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	2224      	movs	r2, #36	@ 0x24
 8004278:	18ba      	adds	r2, r7, r2
 800427a:	8812      	ldrh	r2, [r2, #0]
 800427c:	002e      	movs	r6, r5
 800427e:	1961      	adds	r1, r4, r5
 8004280:	19c9      	adds	r1, r1, r7
 8004282:	880d      	ldrh	r5, [r1, #0]
 8004284:	1981      	adds	r1, r0, r6
 8004286:	19c9      	adds	r1, r1, r7
 8004288:	880c      	ldrh	r4, [r1, #0]
 800428a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	9201      	str	r2, [sp, #4]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	002b      	movs	r3, r5
 8004294:	0022      	movs	r2, r4
 8004296:	f7ff fcc7 	bl	8003c28 <CO_SDOserver_init_canRxTx>
 800429a:	0003      	movs	r3, r0
                                     CanId_ServerToClient);
}
 800429c:	0018      	movs	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	b00b      	add	sp, #44	@ 0x2c
 80042a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a4:	0800180d 	.word	0x0800180d
 80042a8:	08003d31 	.word	0x08003d31

080042ac <validateAndWriteToOD>:
 * @param crcOperation 0=none, 1=calculate, 2=calculate and compare
 * @parma crcClient crc checksum to campare with
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
validateAndWriteToOD(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, uint8_t crcOperation, uint16_t crcClient) {
 80042ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ae:	b08b      	sub	sp, #44	@ 0x2c
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	0019      	movs	r1, r3
 80042b8:	1dfb      	adds	r3, r7, #7
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	1c0a      	adds	r2, r1, #0
 80042c0:	801a      	strh	r2, [r3, #0]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	22a4      	movs	r2, #164	@ 0xa4
 80042c6:	589b      	ldr	r3, [r3, r2]
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (SDO->finished) {
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d100      	bne.n	80042d4 <validateAndWriteToOD+0x28>
 80042d2:	e083      	b.n	80043dc <validateAndWriteToOD+0x130>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd)) {
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d015      	beq.n	8004308 <validateAndWriteToOD+0x5c>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d00f      	beq.n	8004308 <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d901      	bls.n	80042f8 <validateAndWriteToOD+0x4c>
 80042f4:	4a77      	ldr	r2, [pc, #476]	@ (80044d4 <validateAndWriteToOD+0x228>)
 80042f6:	e000      	b.n	80042fa <validateAndWriteToOD+0x4e>
 80042f8:	4a77      	ldr	r2, [pc, #476]	@ (80044d8 <validateAndWriteToOD+0x22c>)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	751a      	strb	r2, [r3, #20]
            return false;
 8004304:	2300      	movs	r3, #0
 8004306:	e0e1      	b.n	80044cc <validateAndWriteToOD+0x220>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2228      	movs	r2, #40	@ 0x28
 8004312:	5c9b      	ldrb	r3, [r3, r2]
 8004314:	b25b      	sxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	da44      	bge.n	80043a4 <validateAndWriteToOD+0xf8>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <validateAndWriteToOD+0x7e>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	429a      	cmp	r2, r3
 8004328:	d93c      	bls.n	80043a4 <validateAndWriteToOD+0xf8>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	22a4      	movs	r2, #164	@ 0xa4
 800432e:	589b      	ldr	r3, [r3, r2]
 8004330:	3302      	adds	r3, #2
 8004332:	2b20      	cmp	r3, #32
 8004334:	d836      	bhi.n	80043a4 <validateAndWriteToOD+0xf8>
            SDO->buf[SDO->bufOffsetWr] = 0;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	22a4      	movs	r2, #164	@ 0xa4
 800433a:	589b      	ldr	r3, [r3, r2]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	2180      	movs	r1, #128	@ 0x80
 8004340:	18d3      	adds	r3, r2, r3
 8004342:	185b      	adds	r3, r3, r1
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
            SDO->bufOffsetWr++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	22a4      	movs	r2, #164	@ 0xa4
 800434c:	589b      	ldr	r3, [r3, r2]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	21a4      	movs	r1, #164	@ 0xa4
 8004354:	505a      	str	r2, [r3, r1]
            SDO->sizeTran++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	66da      	str	r2, [r3, #108]	@ 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <validateAndWriteToOD+0xc4>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436a:	6a3a      	ldr	r2, [r7, #32]
 800436c:	429a      	cmp	r2, r3
 800436e:	d914      	bls.n	800439a <validateAndWriteToOD+0xee>
                SDO->buf[SDO->bufOffsetWr] = 0;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	22a4      	movs	r2, #164	@ 0xa4
 8004374:	589b      	ldr	r3, [r3, r2]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	2180      	movs	r1, #128	@ 0x80
 800437a:	18d3      	adds	r3, r2, r3
 800437c:	185b      	adds	r3, r3, r1
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
                SDO->bufOffsetWr++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	22a4      	movs	r2, #164	@ 0xa4
 8004386:	589b      	ldr	r3, [r3, r2]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	21a4      	movs	r1, #164	@ 0xa4
 800438e:	505a      	str	r2, [r3, r1]
                SDO->sizeTran++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	66da      	str	r2, [r3, #108]	@ 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	621a      	str	r2, [r3, #32]
 80043a2:	e02d      	b.n	8004400 <validateAndWriteToOD+0x154>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <validateAndWriteToOD+0x108>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	621a      	str	r2, [r3, #32]
 80043b2:	e025      	b.n	8004400 <validateAndWriteToOD+0x154>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d020      	beq.n	8004400 <validateAndWriteToOD+0x154>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c2:	6a3a      	ldr	r2, [r7, #32]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d201      	bcs.n	80043cc <validateAndWriteToOD+0x120>
 80043c8:	4a42      	ldr	r2, [pc, #264]	@ (80044d4 <validateAndWriteToOD+0x228>)
 80043ca:	e000      	b.n	80043ce <validateAndWriteToOD+0x122>
 80043cc:	4a42      	ldr	r2, [pc, #264]	@ (80044d8 <validateAndWriteToOD+0x22c>)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	751a      	strb	r2, [r3, #20]
            return false;
 80043d8:	2300      	movs	r3, #0
 80043da:	e077      	b.n	80044cc <validateAndWriteToOD+0x220>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <validateAndWriteToOD+0x154>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d907      	bls.n	8004400 <validateAndWriteToOD+0x154>
            *abortCode = CO_SDO_AB_DATA_LONG;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a38      	ldr	r2, [pc, #224]	@ (80044d4 <validateAndWriteToOD+0x228>)
 80043f4:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	751a      	strb	r2, [r3, #20]
            return false;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e065      	b.n	80044cc <validateAndWriteToOD+0x220>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004408:	f3ef 8210 	mrs	r2, PRIMASK
 800440c:	617a      	str	r2, [r7, #20]
  return(result);
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004412:	b672      	cpsid	i
}
 8004414:	46c0      	nop			@ (mov r8, r8)
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3318      	adds	r3, #24
 800441e:	0018      	movs	r0, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3380      	adds	r3, #128	@ 0x80
 8004424:	0019      	movs	r1, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	22a4      	movs	r2, #164	@ 0xa4
 800442a:	589a      	ldr	r2, [r3, r2]
 800442c:	261f      	movs	r6, #31
 800442e:	19bc      	adds	r4, r7, r6
 8004430:	2310      	movs	r3, #16
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	47a8      	blx	r5
 8004436:	0003      	movs	r3, r0
 8004438:	7023      	strb	r3, [r4, #0]
    CO_UNLOCK_OD(SDO->CANdevTx);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f383 8810 	msr	PRIMASK, r3
}
 8004448:	46c0      	nop			@ (mov r8, r8)

    SDO->bufOffsetWr = 0;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	22a4      	movs	r2, #164	@ 0xa4
 800444e:	2100      	movs	r1, #0
 8004450:	5099      	str	r1, [r3, r2]

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8004452:	19bb      	adds	r3, r7, r6
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	b25b      	sxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d012      	beq.n	8004482 <validateAndWriteToOD+0x1d6>
 800445c:	19bb      	adds	r3, r7, r6
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	b25b      	sxtb	r3, r3
 8004462:	3301      	adds	r3, #1
 8004464:	d00d      	beq.n	8004482 <validateAndWriteToOD+0x1d6>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004466:	19bb      	adds	r3, r7, r6
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	b25b      	sxtb	r3, r3
 800446c:	0018      	movs	r0, r3
 800446e:	f7fd fc53 	bl	8001d18 <OD_getSDOabCode>
 8004472:	0002      	movs	r2, r0
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	751a      	strb	r2, [r3, #20]
        return false;
 800447e:	2300      	movs	r3, #0
 8004480:	e024      	b.n	80044cc <validateAndWriteToOD+0x220>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <validateAndWriteToOD+0x1fa>
 800448a:	231f      	movs	r3, #31
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	b25b      	sxtb	r3, r3
 8004492:	3301      	adds	r3, #1
 8004494:	d107      	bne.n	80044a6 <validateAndWriteToOD+0x1fa>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4a0f      	ldr	r2, [pc, #60]	@ (80044d8 <validateAndWriteToOD+0x22c>)
 800449a:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	751a      	strb	r2, [r3, #20]
        return false;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e012      	b.n	80044cc <validateAndWriteToOD+0x220>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10d      	bne.n	80044ca <validateAndWriteToOD+0x21e>
 80044ae:	231f      	movs	r3, #31
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b25b      	sxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <validateAndWriteToOD+0x21e>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4a05      	ldr	r2, [pc, #20]	@ (80044d4 <validateAndWriteToOD+0x228>)
 80044be:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	751a      	strb	r2, [r3, #20]
        return false;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e000      	b.n	80044cc <validateAndWriteToOD+0x220>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 80044ca:	2301      	movs	r3, #1
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b00b      	add	sp, #44	@ 0x2c
 80044d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d4:	06070012 	.word	0x06070012
 80044d8:	06070013 	.word	0x06070013

080044dc <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 80044dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044de:	b08d      	sub	sp, #52	@ 0x34
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	22a4      	movs	r2, #164	@ 0xa4
 80044ee:	589a      	ldr	r2, [r3, r2]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	21a8      	movs	r1, #168	@ 0xa8
 80044f4:	585b      	ldr	r3, [r3, r1]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d000      	beq.n	8004504 <readFromOd+0x28>
 8004502:	e0b1      	b.n	8004668 <readFromOd+0x18c>
 8004504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	429a      	cmp	r2, r3
 800450a:	d300      	bcc.n	800450e <readFromOd+0x32>
 800450c:	e0ac      	b.n	8004668 <readFromOd+0x18c>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3380      	adds	r3, #128	@ 0x80
 8004512:	0018      	movs	r0, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3380      	adds	r3, #128	@ 0x80
 8004518:	001a      	movs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	21a8      	movs	r1, #168	@ 0xa8
 800451e:	585b      	ldr	r3, [r3, r1]
 8004520:	18d3      	adds	r3, r2, r3
 8004522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004524:	0019      	movs	r1, r3
 8004526:	f00b fafb 	bl	800fb20 <memmove>
        SDO->bufOffsetRd = 0;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	22a8      	movs	r2, #168	@ 0xa8
 800452e:	2100      	movs	r1, #0
 8004530:	5099      	str	r1, [r3, r2]
        SDO->bufOffsetWr = countRemain;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	21a4      	movs	r1, #164	@ 0xa4
 8004536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004538:	505a      	str	r2, [r3, r1]

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	2220      	movs	r2, #32
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800454a:	f3ef 8210 	mrs	r2, PRIMASK
 800454e:	617a      	str	r2, [r7, #20]
  return(result);
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004554:	b672      	cpsid	i
}
 8004556:	46c0      	nop			@ (mov r8, r8)
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3318      	adds	r3, #24
 8004560:	0018      	movs	r0, r3
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	3380      	adds	r3, #128	@ 0x80
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	18d1      	adds	r1, r2, r3
 800456a:	262f      	movs	r6, #47	@ 0x2f
 800456c:	19bc      	adds	r4, r7, r6
 800456e:	2310      	movs	r3, #16
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	6a3a      	ldr	r2, [r7, #32]
 8004574:	47a8      	blx	r5
 8004576:	0003      	movs	r3, r0
 8004578:	7023      	strb	r3, [r4, #0]
        CO_UNLOCK_OD(SDO->CANdevTx);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004580:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f383 8810 	msr	PRIMASK, r3
}
 8004588:	46c0      	nop			@ (mov r8, r8)

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 800458a:	19bb      	adds	r3, r7, r6
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	b25b      	sxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d012      	beq.n	80045ba <readFromOd+0xde>
 8004594:	19bb      	adds	r3, r7, r6
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b25b      	sxtb	r3, r3
 800459a:	3301      	adds	r3, #1
 800459c:	d00d      	beq.n	80045ba <readFromOd+0xde>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800459e:	19bb      	adds	r3, r7, r6
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b25b      	sxtb	r3, r3
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7fd fbb7 	bl	8001d18 <OD_getSDOabCode>
 80045aa:	0002      	movs	r2, r0
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	751a      	strb	r2, [r3, #20]
            return false;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e057      	b.n	800466a <readFromOd+0x18e>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045be:	18d3      	adds	r3, r2, r3
 80045c0:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d02a      	beq.n	800461e <readFromOd+0x142>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2228      	movs	r2, #40	@ 0x28
 80045cc:	5c9b      	ldrb	r3, [r3, r2]
 80045ce:	b25b      	sxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	da24      	bge.n	800461e <readFromOd+0x142>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	2180      	movs	r1, #128	@ 0x80
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	18d3      	adds	r3, r2, r3
 80045dc:	185b      	adds	r3, r3, r1
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	3380      	adds	r3, #128	@ 0x80
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	18d3      	adds	r3, r2, r3
 80045ea:	0018      	movs	r0, r3
 80045ec:	f7fb fd8c 	bl	8000108 <strlen>
 80045f0:	0003      	movs	r3, r0
 80045f2:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (countStr == 0U) {
 80045f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <readFromOd+0x122>
                countStr = 1;
 80045fa:	2301      	movs	r3, #1
 80045fc:	62bb      	str	r3, [r7, #40]	@ 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004602:	429a      	cmp	r2, r3
 8004604:	d20b      	bcs.n	800461e <readFromOd+0x142>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004608:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 800460a:	232f      	movs	r3, #47	@ 0x2f
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	18d2      	adds	r2, r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	18d2      	adds	r2, r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	21a4      	movs	r1, #164	@ 0xa4
 8004628:	505a      	str	r2, [r3, r1]
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	22a4      	movs	r2, #164	@ 0xa4
 800462e:	589b      	ldr	r3, [r3, r2]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <readFromOd+0x164>
 8004634:	232f      	movs	r3, #47	@ 0x2f
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	b25b      	sxtb	r3, r3
 800463c:	3301      	adds	r3, #1
 800463e:	d110      	bne.n	8004662 <readFromOd+0x186>
            SDO->finished = false;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	675a      	str	r2, [r3, #116]	@ 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	22a4      	movs	r2, #164	@ 0xa4
 800464a:	589b      	ldr	r3, [r3, r2]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	429a      	cmp	r2, r3
 8004650:	d90a      	bls.n	8004668 <readFromOd+0x18c>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4a07      	ldr	r2, [pc, #28]	@ (8004674 <readFromOd+0x198>)
 8004656:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	751a      	strb	r2, [r3, #20]
                return false;
 800465e:	2300      	movs	r3, #0
 8004660:	e003      	b.n	800466a <readFromOd+0x18e>
            }
        } else {
            SDO->finished = true;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	675a      	str	r2, [r3, #116]	@ 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 8004668:	2301      	movs	r3, #1
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b00d      	add	sp, #52	@ 0x34
 8004670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	06040047 	.word	0x06040047

08004678 <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 8004678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800467a:	b09b      	sub	sp, #108	@ 0x6c
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 800468c:	2302      	movs	r3, #2
 800468e:	425b      	negs	r3, r3
 8004690:	f000 fcec 	bl	800506c <CO_SDOserver_process+0x9f4>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8004694:	2167      	movs	r1, #103	@ 0x67
 8004696:	187b      	adds	r3, r7, r1
 8004698:	2201      	movs	r2, #1
 800469a:	701a      	strb	r2, [r3, #0]
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 800469c:	2300      	movs	r3, #0
 800469e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a4:	1e5a      	subs	r2, r3, #1
 80046a6:	4193      	sbcs	r3, r2
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	657b      	str	r3, [r7, #84]	@ 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	7d1b      	ldrb	r3, [r3, #20]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <CO_SDOserver_process+0x54>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <CO_SDOserver_process+0x54>
 80046be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d103      	bne.n	80046cc <CO_SDOserver_process+0x54>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	2200      	movs	r2, #0
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	e2c4      	b.n	8004c56 <CO_SDOserver_process+0x5de>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <CO_SDOserver_process+0x62>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	63da      	str	r2, [r3, #60]	@ 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 80046e6:	2367      	movs	r3, #103	@ 0x67
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	e2b2      	b.n	8004c56 <CO_SDOserver_process+0x5de>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 80046f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d100      	bne.n	80046f8 <CO_SDOserver_process+0x80>
 80046f6:	e2ae      	b.n	8004c56 <CO_SDOserver_process+0x5de>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	7d1b      	ldrb	r3, [r3, #20]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d000      	beq.n	8004704 <CO_SDOserver_process+0x8c>
 8004702:	e0ce      	b.n	80048a2 <CO_SDOserver_process+0x22a>
            bool_t upload = false;
 8004704:	2300      	movs	r3, #0
 8004706:	663b      	str	r3, [r7, #96]	@ 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2240      	movs	r2, #64	@ 0x40
 800470c:	5c9b      	ldrb	r3, [r3, r2]
 800470e:	001a      	movs	r2, r3
 8004710:	23f0      	movs	r3, #240	@ 0xf0
 8004712:	4013      	ands	r3, r2
 8004714:	2b20      	cmp	r3, #32
 8004716:	d103      	bne.n	8004720 <CO_SDOserver_process+0xa8>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2211      	movs	r2, #17
 800471c:	751a      	strb	r2, [r3, #20]
 800471e:	e00f      	b.n	8004740 <CO_SDOserver_process+0xc8>
            } else if (SDO->CANrxData[0] == 0x40U) {
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2240      	movs	r2, #64	@ 0x40
 8004724:	5c9b      	ldrb	r3, [r3, r2]
 8004726:	2b40      	cmp	r3, #64	@ 0x40
 8004728:	d105      	bne.n	8004736 <CO_SDOserver_process+0xbe>
                upload = true;
 800472a:	2301      	movs	r3, #1
 800472c:	663b      	str	r3, [r7, #96]	@ 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2221      	movs	r2, #33	@ 0x21
 8004732:	751a      	strb	r2, [r3, #20]
 8004734:	e004      	b.n	8004740 <CO_SDOserver_process+0xc8>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8004736:	4bc7      	ldr	r3, [pc, #796]	@ (8004a54 <CO_SDOserver_process+0x3dc>)
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d165      	bne.n	8004812 <CO_SDOserver_process+0x19a>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2242      	movs	r2, #66	@ 0x42
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	b21a      	sxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2141      	movs	r1, #65	@ 0x41
 8004754:	5c5b      	ldrb	r3, [r3, r1]
 8004756:	b21b      	sxth	r3, r3
 8004758:	4313      	orrs	r3, r2
 800475a:	b21b      	sxth	r3, r3
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	871a      	strh	r2, [r3, #56]	@ 0x38
                SDO->subIndex = SDO->CANrxData[3];
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2243      	movs	r2, #67	@ 0x43
 8004766:	5c99      	ldrb	r1, [r3, r2]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	223a      	movs	r2, #58	@ 0x3a
 800476c:	5499      	strb	r1, [r3, r2]
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004776:	0019      	movs	r1, r3
 8004778:	0010      	movs	r0, r2
 800477a:	f7fd f932 	bl	80019e2 <OD_find>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	223a      	movs	r2, #58	@ 0x3a
 8004782:	5c99      	ldrb	r1, [r3, r2]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3318      	adds	r3, #24
 8004788:	001a      	movs	r2, r3
 800478a:	2553      	movs	r5, #83	@ 0x53
 800478c:	197c      	adds	r4, r7, r5
 800478e:	2300      	movs	r3, #0
 8004790:	f7fd f9a2 	bl	8001ad8 <OD_getSub>
 8004794:	0003      	movs	r3, r0
 8004796:	7023      	strb	r3, [r4, #0]
                if (odRet != ODR_OK) {
 8004798:	197b      	adds	r3, r7, r5
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	b25b      	sxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <CO_SDOserver_process+0x142>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80047a2:	197b      	adds	r3, r7, r5
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7fd fab5 	bl	8001d18 <OD_getSDOabCode>
 80047ae:	0003      	movs	r3, r0
 80047b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	751a      	strb	r2, [r3, #20]
 80047b8:	e02b      	b.n	8004812 <CO_SDOserver_process+0x19a>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2228      	movs	r2, #40	@ 0x28
 80047be:	5c9b      	ldrb	r3, [r3, r2]
 80047c0:	001a      	movs	r2, r3
 80047c2:	2303      	movs	r3, #3
 80047c4:	4013      	ands	r3, r2
 80047c6:	d105      	bne.n	80047d4 <CO_SDOserver_process+0x15c>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 80047c8:	4ba3      	ldr	r3, [pc, #652]	@ (8004a58 <CO_SDOserver_process+0x3e0>)
 80047ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	751a      	strb	r2, [r3, #20]
 80047d2:	e01e      	b.n	8004812 <CO_SDOserver_process+0x19a>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 80047d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00c      	beq.n	80047f4 <CO_SDOserver_process+0x17c>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2228      	movs	r2, #40	@ 0x28
 80047de:	5c9b      	ldrb	r3, [r3, r2]
 80047e0:	001a      	movs	r2, r3
 80047e2:	2301      	movs	r3, #1
 80047e4:	4013      	ands	r3, r2
 80047e6:	d105      	bne.n	80047f4 <CO_SDOserver_process+0x17c>
                        abortCode = CO_SDO_AB_WRITEONLY;
 80047e8:	4b9c      	ldr	r3, [pc, #624]	@ (8004a5c <CO_SDOserver_process+0x3e4>)
 80047ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	751a      	strb	r2, [r3, #20]
 80047f2:	e00e      	b.n	8004812 <CO_SDOserver_process+0x19a>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 80047f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <CO_SDOserver_process+0x19a>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2228      	movs	r2, #40	@ 0x28
 80047fe:	5c9b      	ldrb	r3, [r3, r2]
 8004800:	001a      	movs	r2, r3
 8004802:	2302      	movs	r3, #2
 8004804:	4013      	ands	r3, r2
 8004806:	d104      	bne.n	8004812 <CO_SDOserver_process+0x19a>
                        abortCode = CO_SDO_AB_READONLY;
 8004808:	4b95      	ldr	r3, [pc, #596]	@ (8004a60 <CO_SDOserver_process+0x3e8>)
 800480a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 8004812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004814:	2b00      	cmp	r3, #0
 8004816:	d044      	beq.n	80048a2 <CO_SDOserver_process+0x22a>
 8004818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d141      	bne.n	80048a2 <CO_SDOserver_process+0x22a>
                SDO->bufOffsetRd = 0;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	22a8      	movs	r2, #168	@ 0xa8
 8004822:	2100      	movs	r1, #0
 8004824:	5099      	str	r1, [r3, r2]
                SDO->bufOffsetWr = 0;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	22a4      	movs	r2, #164	@ 0xa4
 800482a:	2100      	movs	r1, #0
 800482c:	5099      	str	r1, [r3, r2]
                SDO->sizeTran = 0;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	66da      	str	r2, [r3, #108]	@ 0x6c
                SDO->finished = false;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	675a      	str	r2, [r3, #116]	@ 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 800483a:	232c      	movs	r3, #44	@ 0x2c
 800483c:	18f9      	adds	r1, r7, r3
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	2300      	movs	r3, #0
 8004842:	2207      	movs	r2, #7
 8004844:	f7ff fe4a 	bl	80044dc <readFromOd>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d02a      	beq.n	80048a2 <CO_SDOserver_process+0x22a>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01a      	beq.n	800488a <CO_SDOserver_process+0x212>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1a      	ldr	r2, [r3, #32]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	669a      	str	r2, [r3, #104]	@ 0x68

                        if (SDO->sizeInd == 0U) {
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <CO_SDOserver_process+0x1f8>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	22a4      	movs	r2, #164	@ 0xa4
 8004868:	589a      	ldr	r2, [r3, r2]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	669a      	str	r2, [r3, #104]	@ 0x68
 800486e:	e018      	b.n	80048a2 <CO_SDOserver_process+0x22a>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	21a4      	movs	r1, #164	@ 0xa4
 8004878:	585b      	ldr	r3, [r3, r1]
 800487a:	429a      	cmp	r2, r3
 800487c:	d011      	beq.n	80048a2 <CO_SDOserver_process+0x22a>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800487e:	4b79      	ldr	r3, [pc, #484]	@ (8004a64 <CO_SDOserver_process+0x3ec>)
 8004880:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	751a      	strb	r2, [r3, #20]
 8004888:	e00b      	b.n	80048a2 <CO_SDOserver_process+0x22a>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2228      	movs	r2, #40	@ 0x28
 800488e:	5c9b      	ldrb	r3, [r3, r2]
 8004890:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 8004892:	2b00      	cmp	r3, #0
 8004894:	db02      	blt.n	800489c <CO_SDOserver_process+0x224>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1a      	ldr	r2, [r3, #32]
 800489a:	e000      	b.n	800489e <CO_SDOserver_process+0x226>
 800489c:	2200      	movs	r2, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	669a      	str	r2, [r3, #104]	@ 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	7d1b      	ldrb	r3, [r3, #20]
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	2052      	movs	r0, #82	@ 0x52
 80048aa:	183b      	adds	r3, r7, r0
 80048ac:	1e51      	subs	r1, r2, #1
 80048ae:	418a      	sbcs	r2, r1
 80048b0:	701a      	strb	r2, [r3, #0]
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	7d1b      	ldrb	r3, [r3, #20]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d005      	beq.n	80048c8 <CO_SDOserver_process+0x250>
 80048bc:	183b      	adds	r3, r7, r0
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <CO_SDOserver_process+0x250>
 80048c4:	2201      	movs	r2, #1
 80048c6:	e000      	b.n	80048ca <CO_SDOserver_process+0x252>
 80048c8:	2200      	movs	r2, #0
 80048ca:	2052      	movs	r0, #82	@ 0x52
 80048cc:	183b      	adds	r3, r7, r0
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	2101      	movs	r1, #1
 80048d4:	400a      	ands	r2, r1
 80048d6:	701a      	strb	r2, [r3, #0]
        if (isOKstate) {
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d100      	bne.n	80048e2 <CO_SDOserver_process+0x26a>
 80048e0:	e1b1      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
            switch (SDO->state) {
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	7d1b      	ldrb	r3, [r3, #20]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b23      	cmp	r3, #35	@ 0x23
 80048ea:	d100      	bne.n	80048ee <CO_SDOserver_process+0x276>
 80048ec:	e17d      	b.n	8004bea <CO_SDOserver_process+0x572>
 80048ee:	dd00      	ble.n	80048f2 <CO_SDOserver_process+0x27a>
 80048f0:	e1a2      	b.n	8004c38 <CO_SDOserver_process+0x5c0>
 80048f2:	2b21      	cmp	r3, #33	@ 0x21
 80048f4:	d100      	bne.n	80048f8 <CO_SDOserver_process+0x280>
 80048f6:	e174      	b.n	8004be2 <CO_SDOserver_process+0x56a>
 80048f8:	dd00      	ble.n	80048fc <CO_SDOserver_process+0x284>
 80048fa:	e19d      	b.n	8004c38 <CO_SDOserver_process+0x5c0>
 80048fc:	2b11      	cmp	r3, #17
 80048fe:	d003      	beq.n	8004908 <CO_SDOserver_process+0x290>
 8004900:	2b13      	cmp	r3, #19
 8004902:	d100      	bne.n	8004906 <CO_SDOserver_process+0x28e>
 8004904:	e0f3      	b.n	8004aee <CO_SDOserver_process+0x476>
 8004906:	e197      	b.n	8004c38 <CO_SDOserver_process+0x5c0>
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2240      	movs	r2, #64	@ 0x40
 800490c:	5c9b      	ldrb	r3, [r3, r2]
 800490e:	001a      	movs	r2, r3
 8004910:	2302      	movs	r3, #2
 8004912:	4013      	ands	r3, r2
 8004914:	d100      	bne.n	8004918 <CO_SDOserver_process+0x2a0>
 8004916:	e0ab      	b.n	8004a70 <CO_SDOserver_process+0x3f8>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	647b      	str	r3, [r7, #68]	@ 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 800491e:	2304      	movs	r3, #4
 8004920:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2240      	movs	r2, #64	@ 0x40
 8004926:	5c9b      	ldrb	r3, [r3, r2]
 8004928:	001a      	movs	r2, r3
 800492a:	2301      	movs	r3, #1
 800492c:	4013      	ands	r3, r2
 800492e:	d00b      	beq.n	8004948 <CO_SDOserver_process+0x2d0>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2240      	movs	r2, #64	@ 0x40
 8004934:	5c9b      	ldrb	r3, [r3, r2]
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	b2db      	uxtb	r3, r3
 800493a:	001a      	movs	r2, r3
 800493c:	2303      	movs	r3, #3
 800493e:	4013      	ands	r3, r2
 8004940:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004946:	e007      	b.n	8004958 <CO_SDOserver_process+0x2e0>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 8004948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800494a:	2b00      	cmp	r3, #0
 800494c:	d004      	beq.n	8004958 <CO_SDOserver_process+0x2e0>
 800494e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004950:	2b03      	cmp	r3, #3
 8004952:	d801      	bhi.n	8004958 <CO_SDOserver_process+0x2e0>
                            dataSizeToWrite = sizeInOd;
 8004954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004956:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 8004958:	2024      	movs	r0, #36	@ 0x24
 800495a:	183b      	adds	r3, r7, r0
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	2200      	movs	r2, #0
 8004962:	809a      	strh	r2, [r3, #4]
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3344      	adds	r3, #68	@ 0x44
 8004968:	0019      	movs	r1, r3
 800496a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800496c:	183b      	adds	r3, r7, r0
 800496e:	0018      	movs	r0, r3
 8004970:	f00b f97f 	bl	800fc72 <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2228      	movs	r2, #40	@ 0x28
 8004978:	5c9b      	ldrb	r3, [r3, r2]
 800497a:	b25b      	sxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	da17      	bge.n	80049b0 <CO_SDOserver_process+0x338>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8004980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <CO_SDOserver_process+0x316>
 8004986:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800498a:	429a      	cmp	r2, r3
 800498c:	d210      	bcs.n	80049b0 <CO_SDOserver_process+0x338>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 800498e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004990:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	643b      	str	r3, [r7, #64]	@ 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 8004996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <CO_SDOserver_process+0x328>
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <CO_SDOserver_process+0x32a>
 80049a0:	2302      	movs	r3, #2
 80049a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80049a4:	18d3      	adds	r3, r2, r3
 80049a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80049ac:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 80049ae:	e016      	b.n	80049de <CO_SDOserver_process+0x366>
                        } else if (sizeInOd == 0U) {
 80049b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <CO_SDOserver_process+0x346>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80049ba:	621a      	str	r2, [r3, #32]
 80049bc:	e00f      	b.n	80049de <CO_SDOserver_process+0x366>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 80049be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80049c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d00b      	beq.n	80049de <CO_SDOserver_process+0x366>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80049c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80049c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d901      	bls.n	80049d2 <CO_SDOserver_process+0x35a>
 80049ce:	4b26      	ldr	r3, [pc, #152]	@ (8004a68 <CO_SDOserver_process+0x3f0>)
 80049d0:	e000      	b.n	80049d4 <CO_SDOserver_process+0x35c>
 80049d2:	4b26      	ldr	r3, [pc, #152]	@ (8004a6c <CO_SDOserver_process+0x3f4>)
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	751a      	strb	r2, [r3, #20]
                            break;
 80049dc:	e133      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e6:	f3ef 8210 	mrs	r2, PRIMASK
 80049ea:	633a      	str	r2, [r7, #48]	@ 0x30
  return(result);
 80049ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ee:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80049f0:	b672      	cpsid	i
}
 80049f2:	46c0      	nop			@ (mov r8, r8)
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3318      	adds	r3, #24
 80049fc:	0018      	movs	r0, r3
 80049fe:	263f      	movs	r6, #63	@ 0x3f
 8004a00:	19bc      	adds	r4, r7, r6
 8004a02:	2320      	movs	r3, #32
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a08:	2124      	movs	r1, #36	@ 0x24
 8004a0a:	1879      	adds	r1, r7, r1
 8004a0c:	47a8      	blx	r5
 8004a0e:	0003      	movs	r3, r0
 8004a10:	7023      	strb	r3, [r4, #0]
                        CO_UNLOCK_OD(SDO->CANdevTx);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a18:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1c:	f383 8810 	msr	PRIMASK, r3
}
 8004a20:	46c0      	nop			@ (mov r8, r8)

                        if (odRet != ODR_OK) {
 8004a22:	19bb      	adds	r3, r7, r6
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	b25b      	sxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <CO_SDOserver_process+0x3cc>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004a2c:	19bb      	adds	r3, r7, r6
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	b25b      	sxtb	r3, r3
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7fd f970 	bl	8001d18 <OD_getSDOabCode>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	751a      	strb	r2, [r3, #20]
                            break;
 8004a42:	e100      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2212      	movs	r2, #18
 8004a48:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	675a      	str	r2, [r3, #116]	@ 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 8004a50:	e0f9      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	05040001 	.word	0x05040001
 8004a58:	06010000 	.word	0x06010000
 8004a5c:	06010001 	.word	0x06010001
 8004a60:	06010002 	.word	0x06010002
 8004a64:	06040047 	.word	0x06040047
 8004a68:	06070012 	.word	0x06070012
 8004a6c:	06070013 	.word	0x06070013
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2240      	movs	r2, #64	@ 0x40
 8004a74:	5c9b      	ldrb	r3, [r3, r2]
 8004a76:	001a      	movs	r2, r3
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d02d      	beq.n	8004ada <CO_SDOserver_process+0x462>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	64bb      	str	r3, [r7, #72]	@ 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3344      	adds	r3, #68	@ 0x44
 8004a88:	0019      	movs	r1, r3
 8004a8a:	231c      	movs	r3, #28
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	2204      	movs	r2, #4
 8004a90:	0018      	movs	r0, r3
 8004a92:	f00b f8ee 	bl	800fc72 <memcpy>
                            SDO->sizeInd = CO_SWAP_32(size);
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	669a      	str	r2, [r3, #104]	@ 0x68
                            if (sizeInOd > 0U) {
 8004a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01e      	beq.n	8004ae0 <CO_SDOserver_process+0x468>
                                if (SDO->sizeInd > sizeInOd) {
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d205      	bcs.n	8004ab8 <CO_SDOserver_process+0x440>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 8004aac:	4bc6      	ldr	r3, [pc, #792]	@ (8004dc8 <CO_SDOserver_process+0x750>)
 8004aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	751a      	strb	r2, [r3, #20]
                                    break;
 8004ab6:	e0c6      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                                else if ((SDO->sizeInd < sizeInOd)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004abc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d90e      	bls.n	8004ae0 <CO_SDOserver_process+0x468>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2228      	movs	r2, #40	@ 0x28
 8004ac6:	5c9b      	ldrb	r3, [r3, r2]
 8004ac8:	b25b      	sxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	db08      	blt.n	8004ae0 <CO_SDOserver_process+0x468>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 8004ace:	4bbf      	ldr	r3, [pc, #764]	@ (8004dcc <CO_SDOserver_process+0x754>)
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	751a      	strb	r2, [r3, #20]
                                    break;
 8004ad8:	e0b5      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                            SDO->sizeInd = 0;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	669a      	str	r2, [r3, #104]	@ 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2212      	movs	r2, #18
 8004ae4:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	675a      	str	r2, [r3, #116]	@ 0x74
                    break;
 8004aec:	e0ab      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2240      	movs	r2, #64	@ 0x40
 8004af2:	5c9b      	ldrb	r3, [r3, r2]
 8004af4:	001a      	movs	r2, r3
 8004af6:	23e0      	movs	r3, #224	@ 0xe0
 8004af8:	4013      	ands	r3, r2
 8004afa:	d16c      	bne.n	8004bd6 <CO_SDOserver_process+0x55e>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2240      	movs	r2, #64	@ 0x40
 8004b00:	5c9b      	ldrb	r3, [r3, r2]
 8004b02:	001a      	movs	r2, r3
 8004b04:	2301      	movs	r3, #1
 8004b06:	4013      	ands	r3, r2
 8004b08:	1e5a      	subs	r2, r3, #1
 8004b0a:	4193      	sbcs	r3, r2
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	001a      	movs	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	675a      	str	r2, [r3, #116]	@ 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2240      	movs	r2, #64	@ 0x40
 8004b18:	5c9a      	ldrb	r2, [r3, r2]
 8004b1a:	2050      	movs	r0, #80	@ 0x50
 8004b1c:	183b      	adds	r3, r7, r0
 8004b1e:	2110      	movs	r1, #16
 8004b20:	400a      	ands	r2, r1
 8004b22:	701a      	strb	r2, [r3, #0]
                        if (toggle != SDO->toggle) {
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2270      	movs	r2, #112	@ 0x70
 8004b28:	5c9b      	ldrb	r3, [r3, r2]
 8004b2a:	183a      	adds	r2, r7, r0
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d005      	beq.n	8004b3e <CO_SDOserver_process+0x4c6>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004b32:	4ba7      	ldr	r3, [pc, #668]	@ (8004dd0 <CO_SDOserver_process+0x758>)
 8004b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	751a      	strb	r2, [r3, #20]
                            break;
 8004b3c:	e083      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2240      	movs	r2, #64	@ 0x40
 8004b42:	5c9b      	ldrb	r3, [r3, r2]
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	2207      	movs	r2, #7
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3380      	adds	r3, #128	@ 0x80
 8004b54:	001a      	movs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	21a4      	movs	r1, #164	@ 0xa4
 8004b5a:	585b      	ldr	r3, [r3, r1]
 8004b5c:	18d0      	adds	r0, r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3341      	adds	r3, #65	@ 0x41
 8004b62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b64:	0019      	movs	r1, r3
 8004b66:	f00b f884 	bl	800fc72 <memcpy>
                        SDO->bufOffsetWr += count;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	22a4      	movs	r2, #164	@ 0xa4
 8004b6e:	589a      	ldr	r2, [r3, r2]
 8004b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b72:	18d2      	adds	r2, r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	21a4      	movs	r1, #164	@ 0xa4
 8004b78:	505a      	str	r2, [r3, r1]
                        SDO->sizeTran += count;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b80:	18d2      	adds	r2, r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	66da      	str	r2, [r3, #108]	@ 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <CO_SDOserver_process+0x52e>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d905      	bls.n	8004ba6 <CO_SDOserver_process+0x52e>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8004dc8 <CO_SDOserver_process+0x750>)
 8004b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	751a      	strb	r2, [r3, #20]
                            break;
 8004ba4:	e04f      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <CO_SDOserver_process+0x544>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	22a4      	movs	r2, #164	@ 0xa4
 8004bb2:	589b      	ldr	r3, [r3, r2]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d808      	bhi.n	8004bce <CO_SDOserver_process+0x556>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 8004bbc:	232c      	movs	r3, #44	@ 0x2c
 8004bbe:	18f9      	adds	r1, r7, r3
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f7ff fb71 	bl	80042ac <validateAndWriteToOD>
 8004bca:	1e03      	subs	r3, r0, #0
 8004bcc:	d03a      	beq.n	8004c44 <CO_SDOserver_process+0x5cc>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2214      	movs	r2, #20
 8004bd2:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8004bd4:	e037      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                        abortCode = CO_SDO_AB_CMD;
 8004bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8004dd4 <CO_SDOserver_process+0x75c>)
 8004bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	751a      	strb	r2, [r3, #20]
                    break;
 8004be0:	e031      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2222      	movs	r2, #34	@ 0x22
 8004be6:	751a      	strb	r2, [r3, #20]
                    break;
 8004be8:	e02d      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2240      	movs	r2, #64	@ 0x40
 8004bee:	5c9b      	ldrb	r3, [r3, r2]
 8004bf0:	001a      	movs	r2, r3
 8004bf2:	23ef      	movs	r3, #239	@ 0xef
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b60      	cmp	r3, #96	@ 0x60
 8004bf8:	d118      	bne.n	8004c2c <CO_SDOserver_process+0x5b4>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2240      	movs	r2, #64	@ 0x40
 8004bfe:	5c9a      	ldrb	r2, [r3, r2]
 8004c00:	2051      	movs	r0, #81	@ 0x51
 8004c02:	183b      	adds	r3, r7, r0
 8004c04:	2110      	movs	r1, #16
 8004c06:	400a      	ands	r2, r1
 8004c08:	701a      	strb	r2, [r3, #0]
                        if (toggle != SDO->toggle) {
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2270      	movs	r2, #112	@ 0x70
 8004c0e:	5c9b      	ldrb	r3, [r3, r2]
 8004c10:	183a      	adds	r2, r7, r0
 8004c12:	7812      	ldrb	r2, [r2, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d005      	beq.n	8004c24 <CO_SDOserver_process+0x5ac>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004c18:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd0 <CO_SDOserver_process+0x758>)
 8004c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	751a      	strb	r2, [r3, #20]
                            break;
 8004c22:	e010      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2224      	movs	r2, #36	@ 0x24
 8004c28:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8004c2a:	e00c      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                        abortCode = CO_SDO_AB_CMD;
 8004c2c:	4b69      	ldr	r3, [pc, #420]	@ (8004dd4 <CO_SDOserver_process+0x75c>)
 8004c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	751a      	strb	r2, [r3, #20]
                    break;
 8004c36:	e006      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 8004c38:	4b66      	ldr	r3, [pc, #408]	@ (8004dd4 <CO_SDOserver_process+0x75c>)
 8004c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	751a      	strb	r2, [r3, #20]
                    break;
 8004c42:	e000      	b.n	8004c46 <CO_SDOserver_process+0x5ce>
                                break;
 8004c44:	46c0      	nop			@ (mov r8, r8)
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
        timeDifference_us = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	63da      	str	r2, [r3, #60]	@ 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 8004c56:	2367      	movs	r3, #103	@ 0x67
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	b25b      	sxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d11f      	bne.n	8004ca2 <CO_SDOserver_process+0x62a>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d205      	bcs.n	8004c7a <CO_SDOserver_process+0x602>
            SDO->timeoutTimer += timeDifference_us;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	18d2      	adds	r2, r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d304      	bcc.n	8004c90 <CO_SDOserver_process+0x618>
            abortCode = CO_SDO_AB_TIMEOUT;
 8004c86:	4b54      	ldr	r3, [pc, #336]	@ (8004dd8 <CO_SDOserver_process+0x760>)
 8004c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <CO_SDOserver_process+0x62a>
            ret = CO_SDO_RT_transmittBufferFull;
 8004c9a:	2367      	movs	r3, #103	@ 0x67
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	701a      	strb	r2, [r3, #0]
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8004ca2:	2367      	movs	r3, #103	@ 0x67
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b25b      	sxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d000      	beq.n	8004cb0 <CO_SDOserver_process+0x638>
 8004cae:	e19d      	b.n	8004fec <CO_SDOserver_process+0x974>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	3305      	adds	r3, #5
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	2100      	movs	r1, #0
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f00a ff43 	bl	800fb46 <memset>

        switch (SDO->state) {
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	7d1b      	ldrb	r3, [r3, #20]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b24      	cmp	r3, #36	@ 0x24
 8004cc8:	d100      	bne.n	8004ccc <CO_SDOserver_process+0x654>
 8004cca:	e0f3      	b.n	8004eb4 <CO_SDOserver_process+0x83c>
 8004ccc:	dd00      	ble.n	8004cd0 <CO_SDOserver_process+0x658>
 8004cce:	e18a      	b.n	8004fe6 <CO_SDOserver_process+0x96e>
 8004cd0:	2b22      	cmp	r3, #34	@ 0x22
 8004cd2:	d100      	bne.n	8004cd6 <CO_SDOserver_process+0x65e>
 8004cd4:	e082      	b.n	8004ddc <CO_SDOserver_process+0x764>
 8004cd6:	dd00      	ble.n	8004cda <CO_SDOserver_process+0x662>
 8004cd8:	e185      	b.n	8004fe6 <CO_SDOserver_process+0x96e>
 8004cda:	2b12      	cmp	r3, #18
 8004cdc:	d002      	beq.n	8004ce4 <CO_SDOserver_process+0x66c>
 8004cde:	2b14      	cmp	r3, #20
 8004ce0:	d042      	beq.n	8004d68 <CO_SDOserver_process+0x6f0>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 8004ce2:	e180      	b.n	8004fe6 <CO_SDOserver_process+0x96e>
                SDO->CANtxBuff->data[0] = 0x60;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2260      	movs	r2, #96	@ 0x60
 8004cea:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	213a      	movs	r1, #58	@ 0x3a
 8004d10:	5c52      	ldrb	r2, [r2, r1]
 8004d12:	721a      	strb	r2, [r3, #8]
                SDO->timeoutTimer = 0;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	67da      	str	r2, [r3, #124]	@ 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	0019      	movs	r1, r3
 8004d24:	0010      	movs	r0, r2
 8004d26:	f003 f8e5 	bl	8007ef4 <CO_CANsend>
                if (SDO->finished) {
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <CO_SDOserver_process+0x6ca>
                    SDO->state = CO_SDO_ST_IDLE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004d38:	2367      	movs	r3, #103	@ 0x67
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
                break;
 8004d40:	e154      	b.n	8004fec <CO_SDOserver_process+0x974>
                    SDO->toggle = 0x00;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2270      	movs	r2, #112	@ 0x70
 8004d46:	2100      	movs	r1, #0
 8004d48:	5499      	strb	r1, [r3, r2]
                    SDO->sizeTran = 0;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	66da      	str	r2, [r3, #108]	@ 0x6c
                    SDO->bufOffsetWr = 0;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	22a4      	movs	r2, #164	@ 0xa4
 8004d54:	2100      	movs	r1, #0
 8004d56:	5099      	str	r1, [r3, r2]
                    SDO->bufOffsetRd = 0;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	22a8      	movs	r2, #168	@ 0xa8
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	5099      	str	r1, [r3, r2]
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2213      	movs	r2, #19
 8004d64:	751a      	strb	r2, [r3, #20]
                break;
 8004d66:	e141      	b.n	8004fec <CO_SDOserver_process+0x974>
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2270      	movs	r2, #112	@ 0x70
 8004d6c:	5c9a      	ldrb	r2, [r3, r2]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2120      	movs	r1, #32
 8004d74:	430a      	orrs	r2, r1
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2270      	movs	r2, #112	@ 0x70
 8004d7e:	5c9b      	ldrb	r3, [r3, r2]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <CO_SDOserver_process+0x710>
 8004d84:	2110      	movs	r1, #16
 8004d86:	e000      	b.n	8004d8a <CO_SDOserver_process+0x712>
 8004d88:	2100      	movs	r1, #0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2270      	movs	r2, #112	@ 0x70
 8004d8e:	5499      	strb	r1, [r3, r2]
                SDO->timeoutTimer = 0;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	67da      	str	r2, [r3, #124]	@ 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	0019      	movs	r1, r3
 8004da0:	0010      	movs	r0, r2
 8004da2:	f003 f8a7 	bl	8007ef4 <CO_CANsend>
                if (SDO->finished) {
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <CO_SDOserver_process+0x746>
                    SDO->state = CO_SDO_ST_IDLE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004db4:	2367      	movs	r3, #103	@ 0x67
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
                break;
 8004dbc:	e116      	b.n	8004fec <CO_SDOserver_process+0x974>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2213      	movs	r2, #19
 8004dc2:	751a      	strb	r2, [r3, #20]
                break;
 8004dc4:	e112      	b.n	8004fec <CO_SDOserver_process+0x974>
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	06070012 	.word	0x06070012
 8004dcc:	06070013 	.word	0x06070013
 8004dd0:	05030000 	.word	0x05030000
 8004dd4:	05040001 	.word	0x05040001
 8004dd8:	05040000 	.word	0x05040000
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d025      	beq.n	8004e30 <CO_SDOserver_process+0x7b8>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d821      	bhi.n	8004e30 <CO_SDOserver_process+0x7b8>
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2204      	movs	r2, #4
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2143      	movs	r1, #67	@ 0x43
 8004e02:	430a      	orrs	r2, r1
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	3309      	adds	r3, #9
 8004e0e:	0018      	movs	r0, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3380      	adds	r3, #128	@ 0x80
 8004e14:	0019      	movs	r1, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e1a:	001a      	movs	r2, r3
 8004e1c:	f00a ff29 	bl	800fc72 <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004e26:	2367      	movs	r3, #103	@ 0x67
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e024      	b.n	8004e7a <CO_SDOserver_process+0x802>
                    if (SDO->sizeInd > 0U) {
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d012      	beq.n	8004e5e <CO_SDOserver_process+0x7e6>
                        uint32_t sizeInd = SDO->sizeInd;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2241      	movs	r2, #65	@ 0x41
 8004e48:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	3309      	adds	r3, #9
 8004e50:	2218      	movs	r2, #24
 8004e52:	18b9      	adds	r1, r7, r2
 8004e54:	2204      	movs	r2, #4
 8004e56:	0018      	movs	r0, r3
 8004e58:	f00a ff0b 	bl	800fc72 <memcpy>
 8004e5c:	e003      	b.n	8004e66 <CO_SDOserver_process+0x7ee>
                        SDO->CANtxBuff->data[0] = 0x40;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2240      	movs	r2, #64	@ 0x40
 8004e64:	715a      	strb	r2, [r3, #5]
                    SDO->toggle = 0x00;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2270      	movs	r2, #112	@ 0x70
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5499      	strb	r1, [r3, r2]
                    SDO->timeoutTimer = 0;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2223      	movs	r2, #35	@ 0x23
 8004e78:	751a      	strb	r2, [r3, #20]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004e8a:	0a1b      	lsrs	r3, r3, #8
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	213a      	movs	r1, #58	@ 0x3a
 8004e9e:	5c52      	ldrb	r2, [r2, r1]
 8004ea0:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	0019      	movs	r1, r3
 8004eac:	0010      	movs	r0, r2
 8004eae:	f003 f821 	bl	8007ef4 <CO_CANsend>
                break;
 8004eb2:	e09b      	b.n	8004fec <CO_SDOserver_process+0x974>
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 8004eb4:	232c      	movs	r3, #44	@ 0x2c
 8004eb6:	18f9      	adds	r1, r7, r3
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2207      	movs	r2, #7
 8004ebe:	f7ff fb0d 	bl	80044dc <readFromOd>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d100      	bne.n	8004ec8 <CO_SDOserver_process+0x850>
 8004ec6:	e090      	b.n	8004fea <CO_SDOserver_process+0x972>
                SDO->CANtxBuff->data[0] = SDO->toggle;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	2170      	movs	r1, #112	@ 0x70
 8004ed0:	5c52      	ldrb	r2, [r2, r1]
 8004ed2:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2270      	movs	r2, #112	@ 0x70
 8004ed8:	5c9b      	ldrb	r3, [r3, r2]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <CO_SDOserver_process+0x86a>
 8004ede:	2110      	movs	r1, #16
 8004ee0:	e000      	b.n	8004ee4 <CO_SDOserver_process+0x86c>
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2270      	movs	r2, #112	@ 0x70
 8004ee8:	5499      	strb	r1, [r3, r2]
                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	22a4      	movs	r2, #164	@ 0xa4
 8004eee:	589a      	ldr	r2, [r3, r2]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	21a8      	movs	r1, #168	@ 0xa8
 8004ef4:	585b      	ldr	r3, [r3, r1]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	65bb      	str	r3, [r7, #88]	@ 0x58
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 8004efa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004efc:	2b06      	cmp	r3, #6
 8004efe:	d906      	bls.n	8004f0e <CO_SDOserver_process+0x896>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01c      	beq.n	8004f42 <CO_SDOserver_process+0x8ca>
 8004f08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f0a:	2b07      	cmp	r3, #7
 8004f0c:	d119      	bne.n	8004f42 <CO_SDOserver_process+0x8ca>
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	795a      	ldrb	r2, [r3, #5]
 8004f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2107      	movs	r1, #7
 8004f1a:	1acb      	subs	r3, r1, r3
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	18db      	adds	r3, r3, r3
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4313      	orrs	r3, r2
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004f38:	2367      	movs	r3, #103	@ 0x67
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e007      	b.n	8004f52 <CO_SDOserver_process+0x8da>
                    SDO->timeoutTimer = 0;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2223      	movs	r2, #35	@ 0x23
 8004f4c:	751a      	strb	r2, [r3, #20]
                    count = 7;
 8004f4e:	2307      	movs	r3, #7
 8004f50:	65bb      	str	r3, [r7, #88]	@ 0x58
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	1d98      	adds	r0, r3, #6
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3380      	adds	r3, #128	@ 0x80
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	21a8      	movs	r1, #168	@ 0xa8
 8004f62:	585b      	ldr	r3, [r3, r1]
 8004f64:	18d3      	adds	r3, r2, r3
 8004f66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f68:	0019      	movs	r1, r3
 8004f6a:	f00a fe82 	bl	800fc72 <memcpy>
                SDO->bufOffsetRd += count;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	22a8      	movs	r2, #168	@ 0xa8
 8004f72:	589a      	ldr	r2, [r3, r2]
 8004f74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f76:	18d2      	adds	r2, r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	21a8      	movs	r1, #168	@ 0xa8
 8004f7c:	505a      	str	r2, [r3, r1]
                SDO->sizeTran += count;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004f82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f84:	18d2      	adds	r2, r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	66da      	str	r2, [r3, #108]	@ 0x6c
                if (SDO->sizeInd > 0U) {
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d020      	beq.n	8004fd4 <CO_SDOserver_process+0x95c>
                    if (SDO->sizeTran > SDO->sizeInd) {
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d905      	bls.n	8004faa <CO_SDOserver_process+0x932>
                        abortCode = CO_SDO_AB_DATA_LONG;
 8004f9e:	4b35      	ldr	r3, [pc, #212]	@ (8005074 <CO_SDOserver_process+0x9fc>)
 8004fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	751a      	strb	r2, [r3, #20]
                        break;
 8004fa8:	e020      	b.n	8004fec <CO_SDOserver_process+0x974>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 8004faa:	2167      	movs	r1, #103	@ 0x67
 8004fac:	187b      	adds	r3, r7, r1
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10e      	bne.n	8004fd4 <CO_SDOserver_process+0x95c>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d208      	bcs.n	8004fd4 <CO_SDOserver_process+0x95c>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8004fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8005078 <CO_SDOserver_process+0xa00>)
 8004fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 8004fc6:	187b      	adds	r3, r7, r1
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
                        SDO->state = CO_SDO_ST_ABORT;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	751a      	strb	r2, [r3, #20]
                        break;
 8004fd2:	e00b      	b.n	8004fec <CO_SDOserver_process+0x974>
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	0019      	movs	r1, r3
 8004fde:	0010      	movs	r0, r2
 8004fe0:	f002 ff88 	bl	8007ef4 <CO_CANsend>
                break;
 8004fe4:	e002      	b.n	8004fec <CO_SDOserver_process+0x974>
                break;
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	e000      	b.n	8004fec <CO_SDOserver_process+0x974>
                    break;
 8004fea:	46c0      	nop			@ (mov r8, r8)
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004fec:	2467      	movs	r4, #103	@ 0x67
 8004fee:	193b      	adds	r3, r7, r4
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b25b      	sxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d135      	bne.n	8005064 <CO_SDOserver_process+0x9ec>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	7d1b      	ldrb	r3, [r3, #20]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d130      	bne.n	8005064 <CO_SDOserver_process+0x9ec>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8005002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005004:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2280      	movs	r2, #128	@ 0x80
 800500c:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800501e:	0a1b      	lsrs	r3, r3, #8
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	213a      	movs	r1, #58	@ 0x3a
 8005032:	5c52      	ldrb	r2, [r2, r1]
 8005034:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	3309      	adds	r3, #9
 800503c:	2214      	movs	r2, #20
 800503e:	18b9      	adds	r1, r7, r2
 8005040:	2204      	movs	r2, #4
 8005042:	0018      	movs	r0, r3
 8005044:	f00a fe15 	bl	800fc72 <memcpy>
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	0019      	movs	r1, r3
 8005052:	0010      	movs	r0, r2
 8005054:	f002 ff4e 	bl	8007ef4 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 800505e:	193b      	adds	r3, r7, r4
 8005060:	22f6      	movs	r2, #246	@ 0xf6
 8005062:	701a      	strb	r2, [r3, #0]
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8005064:	2367      	movs	r3, #103	@ 0x67
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	b25b      	sxtb	r3, r3
}
 800506c:	0018      	movs	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	b01b      	add	sp, #108	@ 0x6c
 8005072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005074:	06070012 	.word	0x06070012
 8005078:	06070013 	.word	0x06070013

0800507c <CO_getUint8>:
CO_getUint8(const void* buf) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	781a      	ldrb	r2, [r3, #0]
 8005088:	210f      	movs	r1, #15
 800508a:	187b      	adds	r3, r7, r1
 800508c:	701a      	strb	r2, [r3, #0]
    return value;
 800508e:	187b      	adds	r3, r7, r1
 8005090:	781b      	ldrb	r3, [r3, #0]
}
 8005092:	0018      	movs	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	b004      	add	sp, #16
 8005098:	bd80      	pop	{r7, pc}

0800509a <CO_getUint32>:
CO_getUint32(const void* buf) {
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	230c      	movs	r3, #12
 80050a6:	18fb      	adds	r3, r7, r3
 80050a8:	2204      	movs	r2, #4
 80050aa:	0018      	movs	r0, r3
 80050ac:	f00a fd38 	bl	800fb20 <memmove>
    return value;
 80050b0:	68fb      	ldr	r3, [r7, #12]
}
 80050b2:	0018      	movs	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b004      	add	sp, #16
 80050b8:	bd80      	pop	{r7, pc}

080050ba <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <OD_getIndex+0x14>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	e000      	b.n	80050d0 <OD_getIndex+0x16>
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	0018      	movs	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b002      	add	sp, #8
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80050e8:	2305      	movs	r3, #5
 80050ea:	e003      	b.n	80050f4 <OD_extension_init+0x1c>
    entry->extension = extension;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	0018      	movs	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b002      	add	sp, #8
 80050fa:	bd80      	pop	{r7, pc}

080050fc <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	200b      	movs	r0, #11
 800510a:	183b      	adds	r3, r7, r0
 800510c:	1c0a      	adds	r2, r1, #0
 800510e:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	183b      	adds	r3, r7, r0
 8005114:	7819      	ldrb	r1, [r3, #0]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2301      	movs	r3, #1
 800511e:	f7fc fe19 	bl	8001d54 <OD_get_value>
 8005122:	0003      	movs	r3, r0
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b004      	add	sp, #16
 800512a:	bd80      	pop	{r7, pc}

0800512c <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	200b      	movs	r0, #11
 800513a:	183b      	adds	r3, r7, r0
 800513c:	1c0a      	adds	r2, r1, #0
 800513e:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	183b      	adds	r3, r7, r0
 8005144:	7819      	ldrb	r1, [r3, #0]
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2304      	movs	r3, #4
 800514e:	f7fc fe01 	bl	8001d54 <OD_get_value>
 8005152:	0003      	movs	r3, r0
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	b004      	add	sp, #16
 800515a:	bd80      	pop	{r7, pc}

0800515c <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	7c9b      	ldrb	r3, [r3, #18]
 8005168:	3301      	adds	r3, #1
 800516a:	b2da      	uxtb	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	749a      	strb	r2, [r3, #18]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	7c9a      	ldrb	r2, [r3, #18]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7c5b      	ldrb	r3, [r3, #17]
 8005178:	429a      	cmp	r2, r3
 800517a:	d902      	bls.n	8005182 <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	425a      	negs	r2, r3
 800518e:	4153      	adcs	r3, r2
 8005190:	b2db      	uxtb	r3, r3
 8005192:	001a      	movs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	7c92      	ldrb	r2, [r2, #18]
 80051a0:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051aa:	0019      	movs	r1, r3
 80051ac:	0010      	movs	r0, r2
 80051ae:	f002 fea1 	bl	8007ef4 <CO_CANsend>
 80051b2:	0003      	movs	r3, r0
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b002      	add	sp, #8
 80051ba:	bd80      	pop	{r7, pc}

080051bc <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80051ca:	210f      	movs	r1, #15
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	7912      	ldrb	r2, [r2, #4]
 80051d2:	701a      	strb	r2, [r3, #0]
    bool_t syncReceived = false;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	7c5b      	ldrb	r3, [r3, #17]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10f      	bne.n	8005200 <CO_SYNC_receive+0x44>
        if (DLC == 0U) {
 80051e0:	187b      	adds	r3, r7, r1
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <CO_SYNC_receive+0x32>
            syncReceived = true;
 80051e8:	2301      	movs	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e020      	b.n	8005230 <CO_SYNC_receive+0x74>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 80051ee:	230f      	movs	r3, #15
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2240      	movs	r2, #64	@ 0x40
 80051f6:	4313      	orrs	r3, r2
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	721a      	strb	r2, [r3, #8]
 80051fe:	e017      	b.n	8005230 <CO_SYNC_receive+0x74>
        }
    } else {
        if (DLC == 1U) {
 8005200:	230f      	movs	r3, #15
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d109      	bne.n	800521e <CO_SYNC_receive+0x62>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	3305      	adds	r3, #5
 800520e:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	781a      	ldrb	r2, [r3, #0]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8005218:	2301      	movs	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e008      	b.n	8005230 <CO_SYNC_receive+0x74>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 800521e:	230f      	movs	r3, #15
 8005220:	18fb      	adds	r3, r7, r3
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2280      	movs	r2, #128	@ 0x80
 8005226:	4252      	negs	r2, r2
 8005228:	4313      	orrs	r3, r2
 800522a:	b2da      	uxtb	r2, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <CO_SYNC_receive+0x90>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	425a      	negs	r2, r3
 800523c:	4153      	adcs	r3, r2
 800523e:	b2db      	uxtb	r3, r3
 8005240:	001a      	movs	r2, r3
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2201      	movs	r2, #1
 800524a:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 800524c:	46c0      	nop			@ (mov r8, r8)
 800524e:	46bd      	mov	sp, r7
 8005250:	b006      	add	sp, #24
 8005252:	bd80      	pop	{r7, pc}

08005254 <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8005254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005256:	b08f      	sub	sp, #60	@ 0x3c
 8005258:	af04      	add	r7, sp, #16
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00c      	beq.n	8005282 <OD_write_1005+0x2e>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	7d1b      	ldrb	r3, [r3, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d108      	bne.n	8005282 <OD_write_1005+0x2e>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <OD_write_1005+0x2e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d102      	bne.n	8005282 <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 8005282:	2309      	movs	r3, #9
 8005284:	e0c7      	b.n	8005416 <OD_write_1005+0x1c2>
    }

    CO_SYNC_t* SYNC = stream->object;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	0018      	movs	r0, r3
 8005290:	f7ff ff03 	bl	800509a <CO_getUint32>
 8005294:	0003      	movs	r3, r0
 8005296:	623b      	str	r3, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	b29a      	uxth	r2, r3
 800529c:	211e      	movs	r1, #30
 800529e:	187b      	adds	r3, r7, r1
 80052a0:	0552      	lsls	r2, r2, #21
 80052a2:	0d52      	lsrs	r2, r2, #21
 80052a4:	801a      	strh	r2, [r3, #0]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 80052a6:	6a3a      	ldr	r2, [r7, #32]
 80052a8:	2380      	movs	r3, #128	@ 0x80
 80052aa:	05db      	lsls	r3, r3, #23
 80052ac:	4013      	ands	r3, r2
 80052ae:	1e5a      	subs	r2, r3, #1
 80052b0:	4193      	sbcs	r3, r2
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	4a59      	ldr	r2, [pc, #356]	@ (8005420 <OD_write_1005+0x1cc>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	d14b      	bne.n	8005356 <OD_write_1005+0x102>
 80052be:	187b      	adds	r3, r7, r1
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80052c4:	d947      	bls.n	8005356 <OD_write_1005+0x102>
 80052c6:	187b      	adds	r3, r7, r1
 80052c8:	881a      	ldrh	r2, [r3, #0]
 80052ca:	2380      	movs	r3, #128	@ 0x80
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d905      	bls.n	80052de <OD_write_1005+0x8a>
 80052d2:	187b      	adds	r3, r7, r1
 80052d4:	881a      	ldrh	r2, [r3, #0]
 80052d6:	23c0      	movs	r3, #192	@ 0xc0
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	429a      	cmp	r2, r3
 80052dc:	d93b      	bls.n	8005356 <OD_write_1005+0x102>
 80052de:	211e      	movs	r1, #30
 80052e0:	187b      	adds	r3, r7, r1
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	23b0      	movs	r3, #176	@ 0xb0
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d905      	bls.n	80052f8 <OD_write_1005+0xa4>
 80052ec:	187b      	adds	r3, r7, r1
 80052ee:	881a      	ldrh	r2, [r3, #0]
 80052f0:	23c0      	movs	r3, #192	@ 0xc0
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d32e      	bcc.n	8005356 <OD_write_1005+0x102>
 80052f8:	211e      	movs	r1, #30
 80052fa:	187b      	adds	r3, r7, r1
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	23c0      	movs	r3, #192	@ 0xc0
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	429a      	cmp	r2, r3
 8005304:	d905      	bls.n	8005312 <OD_write_1005+0xbe>
 8005306:	187b      	adds	r3, r7, r1
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	23d0      	movs	r3, #208	@ 0xd0
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	429a      	cmp	r2, r3
 8005310:	d321      	bcc.n	8005356 <OD_write_1005+0x102>
 8005312:	211e      	movs	r1, #30
 8005314:	187b      	adds	r3, r7, r1
 8005316:	881a      	ldrh	r2, [r3, #0]
 8005318:	23dc      	movs	r3, #220	@ 0xdc
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	429a      	cmp	r2, r3
 800531e:	d305      	bcc.n	800532c <OD_write_1005+0xd8>
 8005320:	187b      	adds	r3, r7, r1
 8005322:	881a      	ldrh	r2, [r3, #0]
 8005324:	23e0      	movs	r3, #224	@ 0xe0
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	429a      	cmp	r2, r3
 800532a:	d314      	bcc.n	8005356 <OD_write_1005+0x102>
 800532c:	211e      	movs	r1, #30
 800532e:	187b      	adds	r3, r7, r1
 8005330:	881a      	ldrh	r2, [r3, #0]
 8005332:	23e0      	movs	r3, #224	@ 0xe0
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	429a      	cmp	r2, r3
 8005338:	d80d      	bhi.n	8005356 <OD_write_1005+0x102>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <OD_write_1005+0x106>
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <OD_write_1005+0x106>
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	2248      	movs	r2, #72	@ 0x48
 800534c:	5a9b      	ldrh	r3, [r3, r2]
 800534e:	187a      	adds	r2, r7, r1
 8005350:	8812      	ldrh	r2, [r2, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d001      	beq.n	800535a <OD_write_1005+0x106>
        return ODR_INVALID_VALUE;
 8005356:	230f      	movs	r3, #15
 8005358:	e05d      	b.n	8005416 <OD_write_1005+0x1c2>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	2248      	movs	r2, #72	@ 0x48
 800535e:	5a9b      	ldrh	r3, [r3, r2]
 8005360:	261e      	movs	r6, #30
 8005362:	19ba      	adds	r2, r7, r6
 8005364:	8812      	ldrh	r2, [r2, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d042      	beq.n	80053f0 <OD_write_1005+0x19c>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
 8005372:	2317      	movs	r3, #23
 8005374:	18fc      	adds	r4, r7, r3
 8005376:	4d2b      	ldr	r5, [pc, #172]	@ (8005424 <OD_write_1005+0x1d0>)
 8005378:	19bb      	adds	r3, r7, r6
 800537a:	881a      	ldrh	r2, [r3, #0]
 800537c:	4b2a      	ldr	r3, [pc, #168]	@ (8005428 <OD_write_1005+0x1d4>)
 800537e:	9302      	str	r3, [sp, #8]
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	2300      	movs	r3, #0
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	002b      	movs	r3, r5
 800538a:	f002 fc8d 	bl	8007ca8 <CO_CANrxBufferInit>
 800538e:	0003      	movs	r3, r0
 8005390:	7023      	strb	r3, [r4, #0]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 8005392:	2317      	movs	r3, #23
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	b25b      	sxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <OD_write_1005+0x14e>
            return ODR_DEV_INCOMPAT;
 800539e:	2309      	movs	r3, #9
 80053a0:	e039      	b.n	8005416 <OD_write_1005+0x1c2>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	224a      	movs	r2, #74	@ 0x4a
 80053aa:	5a99      	ldrh	r1, [r3, r2]
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 80053ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ae:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <OD_write_1005+0x164>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <OD_write_1005+0x166>
 80053b8:	2300      	movs	r3, #0
 80053ba:	221e      	movs	r2, #30
 80053bc:	18ba      	adds	r2, r7, r2
 80053be:	8812      	ldrh	r2, [r2, #0]
 80053c0:	2400      	movs	r4, #0
 80053c2:	9401      	str	r4, [sp, #4]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	f002 fcd6 	bl	8007d78 <CO_CANtxBufferInit>
 80053cc:	0002      	movs	r2, r0
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	62da      	str	r2, [r3, #44]	@ 0x2c

        if (SYNC->CANtxBuff == NULL) {
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <OD_write_1005+0x190>
            SYNC->isProducer = false;
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	2200      	movs	r2, #0
 80053de:	625a      	str	r2, [r3, #36]	@ 0x24
            return ODR_DEV_INCOMPAT;
 80053e0:	2309      	movs	r3, #9
 80053e2:	e018      	b.n	8005416 <OD_write_1005+0x1c2>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	221e      	movs	r2, #30
 80053e8:	18ba      	adds	r2, r7, r2
 80053ea:	2148      	movs	r1, #72	@ 0x48
 80053ec:	8812      	ldrh	r2, [r2, #0]
 80053ee:	525a      	strh	r2, [r3, r1]
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (isProducer) {
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <OD_write_1005+0x1b4>
        SYNC->counter = 0;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	2200      	movs	r2, #0
 8005400:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	2200      	movs	r2, #0
 8005406:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7fc fa5b 	bl	80018ca <OD_writeOriginal>
 8005414:	0003      	movs	r3, r0
}
 8005416:	0018      	movs	r0, r3
 8005418:	46bd      	mov	sp, r7
 800541a:	b00b      	add	sp, #44	@ 0x2c
 800541c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800541e:	46c0      	nop			@ (mov r8, r8)
 8005420:	bffff800 	.word	0xbffff800
 8005424:	000007ff 	.word	0x000007ff
 8005428:	080051bd 	.word	0x080051bd

0800542c <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800542c:	b5b0      	push	{r4, r5, r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00c      	beq.n	800545a <OD_write_1019+0x2e>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	7d1b      	ldrb	r3, [r3, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d108      	bne.n	800545a <OD_write_1019+0x2e>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d005      	beq.n	800545a <OD_write_1019+0x2e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d102      	bne.n	800545a <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 800545a:	2309      	movs	r3, #9
 800545c:	e049      	b.n	80054f2 <OD_write_1019+0xc6>
    }

    CO_SYNC_t* SYNC = stream->object;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8005464:	2513      	movs	r5, #19
 8005466:	197c      	adds	r4, r7, r5
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	0018      	movs	r0, r3
 800546c:	f7ff fe06 	bl	800507c <CO_getUint8>
 8005470:	0003      	movs	r3, r0
 8005472:	7023      	strb	r3, [r4, #0]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 8005474:	197b      	adds	r3, r7, r5
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d003      	beq.n	8005484 <OD_write_1019+0x58>
 800547c:	197b      	adds	r3, r7, r5
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2bf0      	cmp	r3, #240	@ 0xf0
 8005482:	d901      	bls.n	8005488 <OD_write_1019+0x5c>
        return ODR_INVALID_VALUE;
 8005484:	230f      	movs	r3, #15
 8005486:	e034      	b.n	80054f2 <OD_write_1019+0xc6>
    }
    if (*SYNC->OD_1006_period != 0U) {
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <OD_write_1019+0x6a>
        return ODR_DATA_DEV_STATE;
 8005492:	2317      	movs	r3, #23
 8005494:	e02d      	b.n	80054f2 <OD_write_1019+0xc6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	224a      	movs	r2, #74	@ 0x4a
 800549e:	5a99      	ldrh	r1, [r3, r2]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2248      	movs	r2, #72	@ 0x48
 80054a4:	5a9a      	ldrh	r2, [r3, r2]
 80054a6:	2313      	movs	r3, #19
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <OD_write_1019+0x88>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <OD_write_1019+0x8a>
 80054b4:	2300      	movs	r3, #0
 80054b6:	2400      	movs	r4, #0
 80054b8:	9401      	str	r4, [sp, #4]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	2300      	movs	r3, #0
 80054be:	f002 fc5b 	bl	8007d78 <CO_CANtxBufferInit>
 80054c2:	0002      	movs	r2, r0
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	62da      	str	r2, [r3, #44]	@ 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <OD_write_1019+0xae>
        SYNC->isProducer = false;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2200      	movs	r2, #0
 80054d4:	625a      	str	r2, [r3, #36]	@ 0x24
        return ODR_DEV_INCOMPAT;
 80054d6:	2309      	movs	r3, #9
 80054d8:	e00b      	b.n	80054f2 <OD_write_1019+0xc6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2213      	movs	r2, #19
 80054de:	18ba      	adds	r2, r7, r2
 80054e0:	7812      	ldrb	r2, [r2, #0]
 80054e2:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7fc f9ed 	bl	80018ca <OD_writeOriginal>
 80054f0:	0003      	movs	r3, r0
}
 80054f2:	0018      	movs	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b006      	add	sp, #24
 80054f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080054fc <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 80054fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fe:	b08d      	sub	sp, #52	@ 0x34
 8005500:	af04      	add	r7, sp, #16
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00e      	beq.n	800552e <CO_SYNC_init+0x32>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <CO_SYNC_init+0x32>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <CO_SYNC_init+0x32>
 8005522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 8005528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800552e:	2301      	movs	r3, #1
 8005530:	425b      	negs	r3, r3
 8005532:	e129      	b.n	8005788 <CO_SYNC_init+0x28c>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	225c      	movs	r2, #92	@ 0x5c
 8005538:	2100      	movs	r1, #0
 800553a:	0018      	movs	r0, r3
 800553c:	f00a fb03 	bl	800fb46 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8005540:	2380      	movs	r3, #128	@ 0x80
 8005542:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8005544:	251f      	movs	r5, #31
 8005546:	197c      	adds	r4, r7, r5
 8005548:	2318      	movs	r3, #24
 800554a:	18fa      	adds	r2, r7, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	2301      	movs	r3, #1
 8005550:	2100      	movs	r1, #0
 8005552:	f7ff fdeb 	bl	800512c <OD_get_u32>
 8005556:	0003      	movs	r3, r0
 8005558:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 800555a:	197b      	adds	r3, r7, r5
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b25b      	sxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00d      	beq.n	8005580 <CO_SYNC_init+0x84>
        if (errInfo != NULL) {
 8005564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <CO_SYNC_init+0x7e>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	0018      	movs	r0, r3
 800556e:	f7ff fda4 	bl	80050ba <OD_getIndex>
 8005572:	0003      	movs	r3, r0
 8005574:	001a      	movs	r2, r3
 8005576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005578:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800557a:	230c      	movs	r3, #12
 800557c:	425b      	negs	r3, r3
 800557e:	e103      	b.n	8005788 <CO_SYNC_init+0x28c>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4a81      	ldr	r2, [pc, #516]	@ (8005790 <CO_SYNC_init+0x294>)
 800558a:	63da      	str	r2, [r3, #60]	@ 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a81      	ldr	r2, [pc, #516]	@ (8005794 <CO_SYNC_init+0x298>)
 8005590:	641a      	str	r2, [r3, #64]	@ 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3338      	adds	r3, #56	@ 0x38
 8005596:	001a      	movs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	0011      	movs	r1, r2
 800559c:	0018      	movs	r0, r3
 800559e:	f7ff fd9b 	bl	80050d8 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 80055a2:	6838      	ldr	r0, [r7, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	2204      	movs	r2, #4
 80055a8:	2100      	movs	r1, #0
 80055aa:	f7fc fc61 	bl	8001e70 <OD_getPtr>
 80055ae:	0002      	movs	r2, r0
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10d      	bne.n	80055d8 <CO_SYNC_init+0xdc>
        if (errInfo != NULL) {
 80055bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <CO_SYNC_init+0xd6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	0018      	movs	r0, r3
 80055c6:	f7ff fd78 	bl	80050ba <OD_getIndex>
 80055ca:	0003      	movs	r3, r0
 80055cc:	001a      	movs	r2, r3
 80055ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80055d2:	230c      	movs	r3, #12
 80055d4:	425b      	negs	r3, r3
 80055d6:	e0d7      	b.n	8005788 <CO_SYNC_init+0x28c>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 80055d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80055da:	2300      	movs	r3, #0
 80055dc:	2204      	movs	r2, #4
 80055de:	2100      	movs	r1, #0
 80055e0:	f7fc fc46 	bl	8001e70 <OD_getPtr>
 80055e4:	0002      	movs	r2, r0
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 80055ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d011      	beq.n	8005614 <CO_SYNC_init+0x118>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10d      	bne.n	8005614 <CO_SYNC_init+0x118>
        if (errInfo != NULL) {
 80055f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <CO_SYNC_init+0x112>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 80055fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005600:	0018      	movs	r0, r3
 8005602:	f7ff fd5a 	bl	80050ba <OD_getIndex>
 8005606:	0003      	movs	r3, r0
 8005608:	001a      	movs	r2, r3
 800560a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800560c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800560e:	230c      	movs	r3, #12
 8005610:	425b      	negs	r3, r3
 8005612:	e0b9      	b.n	8005788 <CO_SYNC_init+0x28c>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 8005614:	2117      	movs	r1, #23
 8005616:	187b      	adds	r3, r7, r1
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]

    if (OD_1019_syncCounterOvf != NULL) {
 800561c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d03e      	beq.n	80056a0 <CO_SYNC_init+0x1a4>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8005622:	251f      	movs	r5, #31
 8005624:	197c      	adds	r4, r7, r5
 8005626:	187a      	adds	r2, r7, r1
 8005628:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800562a:	2301      	movs	r3, #1
 800562c:	2100      	movs	r1, #0
 800562e:	f7ff fd65 	bl	80050fc <OD_get_u8>
 8005632:	0003      	movs	r3, r0
 8005634:	7023      	strb	r3, [r4, #0]
        if (odRet != ODR_OK) {
 8005636:	197b      	adds	r3, r7, r5
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	b25b      	sxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00d      	beq.n	800565c <CO_SYNC_init+0x160>
            if (errInfo != NULL) {
 8005640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <CO_SYNC_init+0x15a>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8005646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005648:	0018      	movs	r0, r3
 800564a:	f7ff fd36 	bl	80050ba <OD_getIndex>
 800564e:	0003      	movs	r3, r0
 8005650:	001a      	movs	r2, r3
 8005652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005654:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8005656:	230c      	movs	r3, #12
 8005658:	425b      	negs	r3, r3
 800565a:	e095      	b.n	8005788 <CO_SYNC_init+0x28c>
        }
        if (syncCounterOvf == 1U) {
 800565c:	2217      	movs	r2, #23
 800565e:	18bb      	adds	r3, r7, r2
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d103      	bne.n	800566e <CO_SYNC_init+0x172>
            syncCounterOvf = 2;
 8005666:	18bb      	adds	r3, r7, r2
 8005668:	2202      	movs	r2, #2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	e007      	b.n	800567e <CO_SYNC_init+0x182>
        } else if (syncCounterOvf > 240U) {
 800566e:	2217      	movs	r2, #23
 8005670:	18bb      	adds	r3, r7, r2
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2bf0      	cmp	r3, #240	@ 0xf0
 8005676:	d902      	bls.n	800567e <CO_SYNC_init+0x182>
            syncCounterOvf = 240;
 8005678:	18bb      	adds	r3, r7, r2
 800567a:	22f0      	movs	r2, #240	@ 0xf0
 800567c:	701a      	strb	r2, [r3, #0]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	64da      	str	r2, [r3, #76]	@ 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a42      	ldr	r2, [pc, #264]	@ (8005790 <CO_SYNC_init+0x294>)
 8005688:	651a      	str	r2, [r3, #80]	@ 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a42      	ldr	r2, [pc, #264]	@ (8005798 <CO_SYNC_init+0x29c>)
 800568e:	655a      	str	r2, [r3, #84]	@ 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	334c      	adds	r3, #76	@ 0x4c
 8005694:	001a      	movs	r2, r3
 8005696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005698:	0011      	movs	r1, r2
 800569a:	0018      	movs	r0, r3
 800569c:	f7ff fd1c 	bl	80050d8 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 80056a0:	2317      	movs	r3, #23
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	2380      	movs	r3, #128	@ 0x80
 80056b4:	05db      	lsls	r3, r3, #23
 80056b6:	4013      	ands	r3, r2
 80056b8:	1e5a      	subs	r2, r3, #1
 80056ba:	4193      	sbcs	r3, r2
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	001a      	movs	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	625a      	str	r2, [r3, #36]	@ 0x24
    SYNC->CANdevTx = CANdevTx;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	055b      	lsls	r3, r3, #21
 80056d0:	0d5b      	lsrs	r3, r3, #21
 80056d2:	b299      	uxth	r1, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2248      	movs	r2, #72	@ 0x48
 80056d8:	5299      	strh	r1, [r3, r2]
    SYNC->CANdevRx = CANdevRx;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056de:	631a      	str	r2, [r3, #48]	@ 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	203c      	movs	r0, #60	@ 0x3c
 80056e4:	2108      	movs	r1, #8
 80056e6:	1842      	adds	r2, r0, r1
 80056e8:	19d2      	adds	r2, r2, r7
 80056ea:	8812      	ldrh	r2, [r2, #0]
 80056ec:	869a      	strh	r2, [r3, #52]	@ 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2244      	movs	r2, #68	@ 0x44
 80056f2:	1852      	adds	r2, r2, r1
 80056f4:	19d2      	adds	r2, r2, r7
 80056f6:	214a      	movs	r1, #74	@ 0x4a
 80056f8:	8812      	ldrh	r2, [r2, #0]
 80056fa:	525a      	strh	r2, [r3, r1]
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	055b      	lsls	r3, r3, #21
 8005702:	0d5b      	lsrs	r3, r3, #21
 8005704:	b29a      	uxth	r2, r3
 8005706:	261e      	movs	r6, #30
 8005708:	19bc      	adds	r4, r7, r6
 800570a:	4d24      	ldr	r5, [pc, #144]	@ (800579c <CO_SYNC_init+0x2a0>)
 800570c:	2108      	movs	r1, #8
 800570e:	1843      	adds	r3, r0, r1
 8005710:	19db      	adds	r3, r3, r7
 8005712:	8819      	ldrh	r1, [r3, #0]
 8005714:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005716:	4b22      	ldr	r3, [pc, #136]	@ (80057a0 <CO_SYNC_init+0x2a4>)
 8005718:	9302      	str	r3, [sp, #8]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	2300      	movs	r3, #0
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	002b      	movs	r3, r5
 8005724:	f002 fac0 	bl	8007ca8 <CO_CANrxBufferInit>
 8005728:	0003      	movs	r3, r0
 800572a:	7023      	strb	r3, [r4, #0]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 800572c:	19bb      	adds	r3, r7, r6
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	b25b      	sxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <CO_SYNC_init+0x242>
        return ret;
 8005736:	19bb      	adds	r3, r7, r6
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	b25b      	sxtb	r3, r3
 800573c:	e024      	b.n	8005788 <CO_SYNC_init+0x28c>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	b29b      	uxth	r3, r3
 8005742:	055b      	lsls	r3, r3, #21
 8005744:	0d5b      	lsrs	r3, r3, #21
 8005746:	b29c      	uxth	r4, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 8005748:	2317      	movs	r3, #23
 800574a:	18fb      	adds	r3, r7, r3
 800574c:	781b      	ldrb	r3, [r3, #0]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <CO_SYNC_init+0x25a>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <CO_SYNC_init+0x25c>
 8005756:	2300      	movs	r3, #0
 8005758:	2244      	movs	r2, #68	@ 0x44
 800575a:	2108      	movs	r1, #8
 800575c:	1852      	adds	r2, r2, r1
 800575e:	19d2      	adds	r2, r2, r7
 8005760:	8811      	ldrh	r1, [r2, #0]
 8005762:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8005764:	2200      	movs	r2, #0
 8005766:	9201      	str	r2, [sp, #4]
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	0022      	movs	r2, r4
 800576e:	f002 fb03 	bl	8007d78 <CO_CANtxBufferInit>
 8005772:	0002      	movs	r2, r0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (SYNC->CANtxBuff == NULL) {
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <CO_SYNC_init+0x28a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005780:	2301      	movs	r3, #1
 8005782:	425b      	negs	r3, r3
 8005784:	e000      	b.n	8005788 <CO_SYNC_init+0x28c>
    }
#endif

    return CO_ERROR_NO;
 8005786:	2300      	movs	r3, #0
}
 8005788:	0018      	movs	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	b009      	add	sp, #36	@ 0x24
 800578e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005790:	0800180d 	.word	0x0800180d
 8005794:	08005255 	.word	0x08005255
 8005798:	0800542d 	.word	0x0800542d
 800579c:	000007ff 	.word	0x000007ff
 80057a0:	080051bd 	.word	0x080051bd

080057a4 <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	@ 0x28
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 80057b2:	231f      	movs	r3, #31
 80057b4:	18fb      	adds	r3, r7, r3
 80057b6:	2200      	movs	r2, #0
 80057b8:	701a      	strb	r2, [r3, #0]

    if (NMTisPreOrOperational) {
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d100      	bne.n	80057c2 <CO_SYNC_process+0x1e>
 80057c0:	e08f      	b.n	80058e2 <CO_SYNC_process+0x13e>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	18d3      	adds	r3, r2, r3
 80057ca:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d902      	bls.n	80057dc <CO_SYNC_process+0x38>
            SYNC->timer = timerNew;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d009      	beq.n	80057f8 <CO_SYNC_process+0x54>
            SYNC->timer = 0;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 80057ea:	231f      	movs	r3, #31
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	2201      	movs	r2, #1
 80057f0:	701a      	strb	r2, [r3, #0]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <CO_SYNC_process+0x64>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	e000      	b.n	800580a <CO_SYNC_process+0x66>
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d035      	beq.n	800587e <CO_SYNC_process+0xda>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00d      	beq.n	8005836 <CO_SYNC_process+0x92>
                if (SYNC->timer >= OD_1006_period) {
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	429a      	cmp	r2, r3
 8005822:	d82c      	bhi.n	800587e <CO_SYNC_process+0xda>
                    syncStatus = CO_SYNC_RX_TX;
 8005824:	231f      	movs	r3, #31
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	2201      	movs	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
                    (void)CO_SYNCsend(SYNC);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	0018      	movs	r0, r3
 8005830:	f7ff fc94 	bl	800515c <CO_SYNCsend>
 8005834:	e023      	b.n	800587e <CO_SYNC_process+0xda>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	7c1b      	ldrb	r3, [r3, #16]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d11f      	bne.n	800587e <CO_SYNC_process+0xda>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	18d3      	adds	r3, r2, r3
 8005846:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	429a      	cmp	r2, r3
 800584e:	d202      	bcs.n	8005856 <CO_SYNC_process+0xb2>
                        periodTimeout = 0xFFFFFFFFU;
 8005850:	2301      	movs	r3, #1
 8005852:	425b      	negs	r3, r3
 8005854:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	429a      	cmp	r2, r3
 800585e:	d20e      	bcs.n	800587e <CO_SYNC_process+0xda>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2281      	movs	r2, #129	@ 0x81
 800586a:	0212      	lsls	r2, r2, #8
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	0013      	movs	r3, r2
 8005870:	2218      	movs	r2, #24
 8005872:	2101      	movs	r1, #1
 8005874:	f7fb f8ac 	bl	80009d0 <CO_error>
                        SYNC->timeoutError = 2;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2202      	movs	r2, #2
 800587c:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d017      	beq.n	80058b6 <CO_SYNC_process+0x112>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d012      	beq.n	80058b6 <CO_SYNC_process+0x112>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	699a      	ldr	r2, [r3, #24]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d90b      	bls.n	80058b6 <CO_SYNC_process+0x112>
            if (!SYNC->syncIsOutsideWindow) {
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <CO_SYNC_process+0x10a>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 80058a6:	231f      	movs	r3, #31
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	2202      	movs	r2, #2
 80058ac:	701a      	strb	r2, [r3, #0]
            }
            SYNC->syncIsOutsideWindow = true;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	615a      	str	r2, [r3, #20]
 80058b4:	e002      	b.n	80058bc <CO_SYNC_process+0x118>
        } else {
            SYNC->syncIsOutsideWindow = false;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	7a1b      	ldrb	r3, [r3, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01a      	beq.n	80058fa <CO_SYNC_process+0x156>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	7a1b      	ldrb	r3, [r3, #8]
 80058cc:	001a      	movs	r2, r3
 80058ce:	4b19      	ldr	r3, [pc, #100]	@ (8005934 <CO_SYNC_process+0x190>)
 80058d0:	9200      	str	r2, [sp, #0]
 80058d2:	2219      	movs	r2, #25
 80058d4:	2101      	movs	r1, #1
 80058d6:	f7fb f87b 	bl	80009d0 <CO_error>
            SYNC->receiveError = 0;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	721a      	strb	r2, [r3, #8]
 80058e0:	e00b      	b.n	80058fa <CO_SYNC_process+0x156>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 80058fa:	231f      	movs	r3, #31
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d10f      	bne.n	8005924 <CO_SYNC_process+0x180>
        if (SYNC->timeoutError == 2U) {
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	7c1b      	ldrb	r3, [r3, #16]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d108      	bne.n	800591e <CO_SYNC_process+0x17a>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	2300      	movs	r3, #0
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2300      	movs	r3, #0
 8005916:	2218      	movs	r2, #24
 8005918:	2100      	movs	r1, #0
 800591a:	f7fb f859 	bl	80009d0 <CO_error>
        }
        SYNC->timeoutError = 1;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2201      	movs	r2, #1
 8005922:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8005924:	231f      	movs	r3, #31
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	781b      	ldrb	r3, [r3, #0]
}
 800592a:	0018      	movs	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	b008      	add	sp, #32
 8005930:	bd80      	pop	{r7, pc}
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	00008240 	.word	0x00008240

08005938 <CO_getUint16>:
CO_getUint16(const void* buf) {
 8005938:	b590      	push	{r4, r7, lr}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	240e      	movs	r4, #14
 8005944:	193b      	adds	r3, r7, r4
 8005946:	2202      	movs	r2, #2
 8005948:	0018      	movs	r0, r3
 800594a:	f00a f8e9 	bl	800fb20 <memmove>
    return value;
 800594e:	193b      	adds	r3, r7, r4
 8005950:	881b      	ldrh	r3, [r3, #0]
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b005      	add	sp, #20
 8005958:	bd90      	pop	{r4, r7, pc}

0800595a <CO_getUint32>:
CO_getUint32(const void* buf) {
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	230c      	movs	r3, #12
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	2204      	movs	r2, #4
 800596a:	0018      	movs	r0, r3
 800596c:	f00a f8d8 	bl	800fb20 <memmove>
    return value;
 8005970:	68fb      	ldr	r3, [r7, #12]
}
 8005972:	0018      	movs	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	b004      	add	sp, #16
 8005978:	bd80      	pop	{r7, pc}

0800597a <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <OD_getIndex+0x14>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	e000      	b.n	8005990 <OD_getIndex+0x16>
 800598e:	2300      	movs	r3, #0
}
 8005990:	0018      	movs	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	b002      	add	sp, #8
 8005996:	bd80      	pop	{r7, pc}

08005998 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80059a8:	2305      	movs	r3, #5
 80059aa:	e003      	b.n	80059b4 <OD_extension_init+0x1c>
    entry->extension = extension;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	0018      	movs	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b002      	add	sp, #8
 80059ba:	bd80      	pop	{r7, pc}

080059bc <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	200b      	movs	r0, #11
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	1c0a      	adds	r2, r1, #0
 80059ce:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	183b      	adds	r3, r7, r0
 80059d4:	7819      	ldrb	r1, [r3, #0]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2304      	movs	r3, #4
 80059de:	f7fc f9b9 	bl	8001d54 <OD_get_value>
 80059e2:	0003      	movs	r3, r0
}
 80059e4:	0018      	movs	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b004      	add	sp, #16
 80059ea:	bd80      	pop	{r7, pc}

080059ec <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80059fa:	2113      	movs	r1, #19
 80059fc:	187b      	adds	r3, r7, r1
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	7912      	ldrb	r2, [r2, #4]
 8005a02:	701a      	strb	r2, [r3, #0]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	3305      	adds	r3, #5
 8005a08:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8005a0a:	187b      	adds	r3, r7, r1
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d108      	bne.n	8005a24 <CO_TIME_receive+0x38>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	68f9      	ldr	r1, [r7, #12]
 8005a16:	2206      	movs	r2, #6
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f00a f92a 	bl	800fc72 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2201      	movs	r2, #1
 8005a22:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8005a24:	46c0      	nop			@ (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b006      	add	sp, #24
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00c      	beq.n	8005a5a <OD_write_1012+0x2e>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	7d1b      	ldrb	r3, [r3, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d108      	bne.n	8005a5a <OD_write_1012+0x2e>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <OD_write_1012+0x2e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d102      	bne.n	8005a5a <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 8005a5a:	2309      	movs	r3, #9
 8005a5c:	e06a      	b.n	8005b34 <OD_write_1012+0x108>
    }

    CO_TIME_t* TIME = stream->object;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	0018      	movs	r0, r3
 8005a68:	f7ff ff77 	bl	800595a <CO_getUint32>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	61bb      	str	r3, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	2116      	movs	r1, #22
 8005a76:	187b      	adds	r3, r7, r1
 8005a78:	0552      	lsls	r2, r2, #21
 8005a7a:	0d52      	lsrs	r2, r2, #21
 8005a7c:	801a      	strh	r2, [r3, #0]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	4a2e      	ldr	r2, [pc, #184]	@ (8005b3c <OD_write_1012+0x110>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	d13d      	bne.n	8005b02 <OD_write_1012+0xd6>
 8005a86:	187b      	adds	r3, r7, r1
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a8c:	d939      	bls.n	8005b02 <OD_write_1012+0xd6>
 8005a8e:	187b      	adds	r3, r7, r1
 8005a90:	881a      	ldrh	r2, [r3, #0]
 8005a92:	2380      	movs	r3, #128	@ 0x80
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d905      	bls.n	8005aa6 <OD_write_1012+0x7a>
 8005a9a:	187b      	adds	r3, r7, r1
 8005a9c:	881a      	ldrh	r2, [r3, #0]
 8005a9e:	23c0      	movs	r3, #192	@ 0xc0
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d92d      	bls.n	8005b02 <OD_write_1012+0xd6>
 8005aa6:	2116      	movs	r1, #22
 8005aa8:	187b      	adds	r3, r7, r1
 8005aaa:	881a      	ldrh	r2, [r3, #0]
 8005aac:	23b0      	movs	r3, #176	@ 0xb0
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d905      	bls.n	8005ac0 <OD_write_1012+0x94>
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	881a      	ldrh	r2, [r3, #0]
 8005ab8:	23c0      	movs	r3, #192	@ 0xc0
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d320      	bcc.n	8005b02 <OD_write_1012+0xd6>
 8005ac0:	2116      	movs	r1, #22
 8005ac2:	187b      	adds	r3, r7, r1
 8005ac4:	881a      	ldrh	r2, [r3, #0]
 8005ac6:	23c0      	movs	r3, #192	@ 0xc0
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d905      	bls.n	8005ada <OD_write_1012+0xae>
 8005ace:	187b      	adds	r3, r7, r1
 8005ad0:	881a      	ldrh	r2, [r3, #0]
 8005ad2:	23d0      	movs	r3, #208	@ 0xd0
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d313      	bcc.n	8005b02 <OD_write_1012+0xd6>
 8005ada:	2116      	movs	r1, #22
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	881a      	ldrh	r2, [r3, #0]
 8005ae0:	23dc      	movs	r3, #220	@ 0xdc
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d305      	bcc.n	8005af4 <OD_write_1012+0xc8>
 8005ae8:	187b      	adds	r3, r7, r1
 8005aea:	881a      	ldrh	r2, [r3, #0]
 8005aec:	23e0      	movs	r3, #224	@ 0xe0
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d306      	bcc.n	8005b02 <OD_write_1012+0xd6>
 8005af4:	2316      	movs	r3, #22
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	881a      	ldrh	r2, [r3, #0]
 8005afa:	23e0      	movs	r3, #224	@ 0xe0
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d901      	bls.n	8005b06 <OD_write_1012+0xda>
        return ODR_INVALID_VALUE;
 8005b02:	230f      	movs	r3, #15
 8005b04:	e016      	b.n	8005b34 <OD_write_1012+0x108>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	0fdb      	lsrs	r3, r3, #31
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	001a      	movs	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	2380      	movs	r3, #128	@ 0x80
 8005b16:	05db      	lsls	r3, r3, #23
 8005b18:	4013      	ands	r3, r2
 8005b1a:	1e5a      	subs	r2, r3, #1
 8005b1c:	4193      	sbcs	r3, r2
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	001a      	movs	r2, r3
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7fb fecc 	bl	80018ca <OD_writeOriginal>
 8005b32:	0003      	movs	r3, r0
}
 8005b34:	0018      	movs	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b008      	add	sp, #32
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	3ffff800 	.word	0x3ffff800

08005b40 <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b42:	b08d      	sub	sp, #52	@ 0x34
 8005b44:	af04      	add	r7, sp, #16
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	001a      	movs	r2, r3
 8005b4e:	1cbb      	adds	r3, r7, #2
 8005b50:	801a      	strh	r2, [r3, #0]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <CO_TIME_init+0x24>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <CO_TIME_init+0x24>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d102      	bne.n	8005b6a <CO_TIME_init+0x2a>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005b64:	2301      	movs	r3, #1
 8005b66:	425b      	negs	r3, r3
 8005b68:	e06f      	b.n	8005c4a <CO_TIME_init+0x10a>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	222c      	movs	r2, #44	@ 0x2c
 8005b6e:	2100      	movs	r1, #0
 8005b70:	0018      	movs	r0, r3
 8005b72:	f009 ffe8 	bl	800fb46 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8005b76:	251f      	movs	r5, #31
 8005b78:	197c      	adds	r4, r7, r5
 8005b7a:	2314      	movs	r3, #20
 8005b7c:	18fa      	adds	r2, r7, r3
 8005b7e:	68b8      	ldr	r0, [r7, #8]
 8005b80:	2301      	movs	r3, #1
 8005b82:	2100      	movs	r1, #0
 8005b84:	f7ff ff1a 	bl	80059bc <OD_get_u32>
 8005b88:	0003      	movs	r3, r0
 8005b8a:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8005b8c:	197b      	adds	r3, r7, r5
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	b25b      	sxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00d      	beq.n	8005bb2 <CO_TIME_init+0x72>
        if (errInfo != NULL) {
 8005b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <CO_TIME_init+0x6c>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f7ff feeb 	bl	800597a <OD_getIndex>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005baa:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8005bac:	230c      	movs	r3, #12
 8005bae:	425b      	negs	r3, r3
 8005bb0:	e04b      	b.n	8005c4a <CO_TIME_init+0x10a>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4a26      	ldr	r2, [pc, #152]	@ (8005c54 <CO_TIME_init+0x114>)
 8005bbc:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4a25      	ldr	r2, [pc, #148]	@ (8005c58 <CO_TIME_init+0x118>)
 8005bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	331c      	adds	r3, #28
 8005bc8:	001a      	movs	r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	0011      	movs	r1, r2
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f7ff fee2 	bl	8005998 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	211c      	movs	r1, #28
 8005bda:	187b      	adds	r3, r7, r1
 8005bdc:	0552      	lsls	r2, r2, #21
 8005bde:	0d52      	lsrs	r2, r2, #21
 8005be0:	801a      	strh	r2, [r3, #0]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	0fdb      	lsrs	r3, r3, #31
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	001a      	movs	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	2380      	movs	r3, #128	@ 0x80
 8005bf2:	05db      	lsls	r3, r3, #23
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	1e5a      	subs	r2, r3, #1
 8005bf8:	4193      	sbcs	r3, r2
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	001a      	movs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01b      	beq.n	8005c48 <CO_TIME_init+0x108>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 8005c10:	261b      	movs	r6, #27
 8005c12:	19bc      	adds	r4, r7, r6
 8005c14:	4d11      	ldr	r5, [pc, #68]	@ (8005c5c <CO_TIME_init+0x11c>)
 8005c16:	187b      	adds	r3, r7, r1
 8005c18:	881a      	ldrh	r2, [r3, #0]
 8005c1a:	1cbb      	adds	r3, r7, #2
 8005c1c:	8819      	ldrh	r1, [r3, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4b0f      	ldr	r3, [pc, #60]	@ (8005c60 <CO_TIME_init+0x120>)
 8005c22:	9302      	str	r3, [sp, #8]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	002b      	movs	r3, r5
 8005c2e:	f002 f83b 	bl	8007ca8 <CO_CANrxBufferInit>
 8005c32:	0003      	movs	r3, r0
 8005c34:	7023      	strb	r3, [r4, #0]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 8005c36:	19bb      	adds	r3, r7, r6
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	b25b      	sxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <CO_TIME_init+0x108>
            return ret;
 8005c40:	19bb      	adds	r3, r7, r6
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	b25b      	sxtb	r3, r3
 8005c46:	e000      	b.n	8005c4a <CO_TIME_init+0x10a>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b009      	add	sp, #36	@ 0x24
 8005c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c52:	46c0      	nop			@ (mov r8, r8)
 8005c54:	0800180d 	.word	0x0800180d
 8005c58:	08005a2d 	.word	0x08005a2d
 8005c5c:	000007ff 	.word	0x000007ff
 8005c60:	080059ed 	.word	0x080059ed

08005c64 <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 8005c64:	b5b0      	push	{r4, r5, r7, lr}
 8005c66:	b08a      	sub	sp, #40	@ 0x28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005c70:	2300      	movs	r3, #0
 8005c72:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d028      	beq.n	8005ccc <CO_TIME_process+0x68>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d024      	beq.n	8005ccc <CO_TIME_process+0x68>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d023      	beq.n	8005cd2 <CO_TIME_process+0x6e>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7ff fe64 	bl	800595a <CO_getUint32>
 8005c92:	0003      	movs	r3, r0
 8005c94:	623b      	str	r3, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	251e      	movs	r5, #30
 8005c9c:	197c      	adds	r4, r7, r5
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f7ff fe4a 	bl	8005938 <CO_getUint16>
 8005ca4:	0003      	movs	r3, r0
 8005ca6:	8023      	strh	r3, [r4, #0]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	091a      	lsrs	r2, r3, #4
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	197a      	adds	r2, r7, r5
 8005cb6:	8812      	ldrh	r2, [r2, #0]
 8005cb8:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8005cca:	e002      	b.n	8005cd2 <CO_TIME_process+0x6e>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && (timeDifference_us > 0U)) {
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d131      	bne.n	8005d40 <CO_TIME_process+0xdc>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d02e      	beq.n	8005d40 <CO_TIME_process+0xdc>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	89db      	ldrh	r3, [r3, #14]
 8005ce6:	001a      	movs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	189b      	adds	r3, r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
        ms = us / 1000U;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	22fa      	movs	r2, #250	@ 0xfa
 8005cf2:	0091      	lsls	r1, r2, #2
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f7fa fa19 	bl	800012c <__udivsi3>
 8005cfa:	0003      	movs	r3, r0
 8005cfc:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = (uint16_t)(us % 1000U);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	22fa      	movs	r2, #250	@ 0xfa
 8005d02:	0091      	lsls	r1, r2, #2
 8005d04:	0018      	movs	r0, r3
 8005d06:	f7fa fa97 	bl	8000238 <__aeabi_uidivmod>
 8005d0a:	000b      	movs	r3, r1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	18d2      	adds	r2, r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	4a0a      	ldr	r2, [pc, #40]	@ (8005d4c <CO_TIME_process+0xe8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d90b      	bls.n	8005d40 <CO_TIME_process+0xdc>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	4a08      	ldr	r2, [pc, #32]	@ (8005d50 <CO_TIME_process+0xec>)
 8005d2e:	189a      	adds	r2, r3, r2
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	609a      	str	r2, [r3, #8]
            TIME->days += 1U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	899b      	ldrh	r3, [r3, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	819a      	strh	r2, [r3, #12]
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d42:	0018      	movs	r0, r3
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b00a      	add	sp, #40	@ 0x28
 8005d48:	bdb0      	pop	{r4, r5, r7, pc}
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	05265bff 	.word	0x05265bff
 8005d50:	fad9a400 	.word	0xfad9a400

08005d54 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs) {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005d5c:	230f      	movs	r3, #15
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]

    /* verify arguments */
    if (LEDs == NULL) {
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <CO_LEDs_init+0x1c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	425b      	negs	r3, r3
 8005d6e:	e009      	b.n	8005d84 <CO_LEDs_init+0x30>
    }

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	220c      	movs	r2, #12
 8005d74:	2100      	movs	r1, #0
 8005d76:	0018      	movs	r0, r3
 8005d78:	f009 fee5 	bl	800fb46 <memset>

    return ret;
 8005d7c:	230f      	movs	r3, #15
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b25b      	sxtb	r3, r3
}
 8005d84:	0018      	movs	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b004      	add	sp, #16
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <CO_LEDs_process>:

void
CO_LEDs_process(CO_LEDs_t* LEDs, uint32_t timeDifference_us, CO_NMT_internalState_t NMTstate, bool_t LSSconfig,
                bool_t ErrCANbusOff, bool_t ErrCANbusWarn, bool_t ErrRpdo, bool_t ErrSync, bool_t ErrHbCons,
                bool_t ErrOther, bool_t firmwareDownload, uint32_t* timerNext_us) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	1dfb      	adds	r3, r7, #7
 8005d9a:	701a      	strb	r2, [r3, #0]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8005d9c:	231f      	movs	r3, #31
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
    uint8_t gr = 0;
 8005da4:	231e      	movs	r3, #30
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]
    bool_t tick = false;
 8005dac:	2300      	movs	r3, #0
 8005dae:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	18d2      	adds	r2, r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8005dbc:	e121      	b.n	8006002 <CO_LEDs_process+0x276>
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	7a5b      	ldrb	r3, [r3, #9]
 8005dc2:	001a      	movs	r2, r3
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	425a      	negs	r2, r3
 8005dca:	4153      	adcs	r3, r2
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	613b      	str	r3, [r7, #16]

        tick = true;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4acd      	ldr	r2, [pc, #820]	@ (8006110 <CO_LEDs_process+0x384>)
 8005dda:	189a      	adds	r2, r3, r2
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	601a      	str	r2, [r3, #0]

        if (++LEDs->LEDtmr200ms > 3U) {
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	791b      	ldrb	r3, [r3, #4]
 8005de4:	3301      	adds	r3, #1
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	711a      	strb	r2, [r3, #4]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	791b      	ldrb	r3, [r3, #4]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d800      	bhi.n	8005df6 <CO_LEDs_process+0x6a>
 8005df4:	e0e3      	b.n	8005fbe <CO_LEDs_process+0x232>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	711a      	strb	r2, [r3, #4]
            rd = 0;
 8005dfc:	211f      	movs	r1, #31
 8005dfe:	187b      	adds	r3, r7, r1
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
            gr = 0;
 8005e04:	231e      	movs	r3, #30
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	2200      	movs	r2, #0
 8005e0a:	701a      	strb	r2, [r3, #0]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	7a5b      	ldrb	r3, [r3, #9]
 8005e10:	001a      	movs	r2, r3
 8005e12:	2302      	movs	r3, #2
 8005e14:	4013      	ands	r3, r2
 8005e16:	d106      	bne.n	8005e26 <CO_LEDs_process+0x9a>
                rd |= CO_LED_blink;
 8005e18:	187b      	adds	r3, r7, r1
 8005e1a:	187a      	adds	r2, r7, r1
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	2102      	movs	r1, #2
 8005e20:	430a      	orrs	r2, r1
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	e006      	b.n	8005e34 <CO_LEDs_process+0xa8>
            } else {
                gr |= CO_LED_blink;
 8005e26:	221e      	movs	r2, #30
 8005e28:	18bb      	adds	r3, r7, r2
 8005e2a:	18ba      	adds	r2, r7, r2
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	2102      	movs	r1, #2
 8005e30:	430a      	orrs	r2, r1
 8005e32:	701a      	strb	r2, [r3, #0]
            }

            switch (++LEDs->LEDtmrflash_1) {
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	795b      	ldrb	r3, [r3, #5]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	715a      	strb	r2, [r3, #5]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	795b      	ldrb	r3, [r3, #5]
 8005e44:	2b06      	cmp	r3, #6
 8005e46:	d015      	beq.n	8005e74 <CO_LEDs_process+0xe8>
 8005e48:	dc18      	bgt.n	8005e7c <CO_LEDs_process+0xf0>
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d002      	beq.n	8005e54 <CO_LEDs_process+0xc8>
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d008      	beq.n	8005e64 <CO_LEDs_process+0xd8>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 8005e52:	e013      	b.n	8005e7c <CO_LEDs_process+0xf0>
                case 1: rd |= CO_LED_flash_1; break;
 8005e54:	221f      	movs	r2, #31
 8005e56:	18bb      	adds	r3, r7, r2
 8005e58:	18ba      	adds	r2, r7, r2
 8005e5a:	7812      	ldrb	r2, [r2, #0]
 8005e5c:	2104      	movs	r1, #4
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	e00c      	b.n	8005e7e <CO_LEDs_process+0xf2>
                case 2: gr |= CO_LED_flash_1; break;
 8005e64:	221e      	movs	r2, #30
 8005e66:	18bb      	adds	r3, r7, r2
 8005e68:	18ba      	adds	r2, r7, r2
 8005e6a:	7812      	ldrb	r2, [r2, #0]
 8005e6c:	2104      	movs	r1, #4
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e004      	b.n	8005e7e <CO_LEDs_process+0xf2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	715a      	strb	r2, [r3, #5]
 8005e7a:	e000      	b.n	8005e7e <CO_LEDs_process+0xf2>
                default: /* none */ break;
 8005e7c:	46c0      	nop			@ (mov r8, r8)
            }
            switch (++LEDs->LEDtmrflash_2) {
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	799b      	ldrb	r3, [r3, #6]
 8005e82:	3301      	adds	r3, #1
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	719a      	strb	r2, [r3, #6]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	799b      	ldrb	r3, [r3, #6]
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d818      	bhi.n	8005ec4 <CO_LEDs_process+0x138>
 8005e92:	009a      	lsls	r2, r3, #2
 8005e94:	4b9f      	ldr	r3, [pc, #636]	@ (8006114 <CO_LEDs_process+0x388>)
 8005e96:	18d3      	adds	r3, r2, r3
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	469f      	mov	pc, r3
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 8005e9c:	221f      	movs	r2, #31
 8005e9e:	18bb      	adds	r3, r7, r2
 8005ea0:	18ba      	adds	r2, r7, r2
 8005ea2:	7812      	ldrb	r2, [r2, #0]
 8005ea4:	2108      	movs	r1, #8
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e00c      	b.n	8005ec6 <CO_LEDs_process+0x13a>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 8005eac:	221e      	movs	r2, #30
 8005eae:	18bb      	adds	r3, r7, r2
 8005eb0:	18ba      	adds	r2, r7, r2
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	2108      	movs	r1, #8
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e004      	b.n	8005ec6 <CO_LEDs_process+0x13a>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	719a      	strb	r2, [r3, #6]
 8005ec2:	e000      	b.n	8005ec6 <CO_LEDs_process+0x13a>
                default: /* none */ break;
 8005ec4:	46c0      	nop			@ (mov r8, r8)
            }
            switch (++LEDs->LEDtmrflash_3) {
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	79db      	ldrb	r3, [r3, #7]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	71da      	strb	r2, [r3, #7]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	79db      	ldrb	r3, [r3, #7]
 8005ed6:	220a      	movs	r2, #10
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	4192      	sbcs	r2, r2
 8005edc:	4252      	negs	r2, r2
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	2a00      	cmp	r2, #0
 8005ee2:	d12d      	bne.n	8005f40 <CO_LEDs_process+0x1b4>
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	0013      	movs	r3, r2
 8005eea:	2254      	movs	r2, #84	@ 0x54
 8005eec:	401a      	ands	r2, r3
 8005eee:	1e51      	subs	r1, r2, #1
 8005ef0:	418a      	sbcs	r2, r1
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	2a00      	cmp	r2, #0
 8005ef6:	d117      	bne.n	8005f28 <CO_LEDs_process+0x19c>
 8005ef8:	222a      	movs	r2, #42	@ 0x2a
 8005efa:	401a      	ands	r2, r3
 8005efc:	1e51      	subs	r1, r2, #1
 8005efe:	418a      	sbcs	r2, r1
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	2a00      	cmp	r2, #0
 8005f04:	d108      	bne.n	8005f18 <CO_LEDs_process+0x18c>
 8005f06:	2280      	movs	r2, #128	@ 0x80
 8005f08:	00d2      	lsls	r2, r2, #3
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	1e5a      	subs	r2, r3, #1
 8005f0e:	4193      	sbcs	r3, r2
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d110      	bne.n	8005f38 <CO_LEDs_process+0x1ac>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 8005f16:	e013      	b.n	8005f40 <CO_LEDs_process+0x1b4>
                case 5: rd |= CO_LED_flash_3; break;
 8005f18:	221f      	movs	r2, #31
 8005f1a:	18bb      	adds	r3, r7, r2
 8005f1c:	18ba      	adds	r2, r7, r2
 8005f1e:	7812      	ldrb	r2, [r2, #0]
 8005f20:	2110      	movs	r1, #16
 8005f22:	430a      	orrs	r2, r1
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	e00c      	b.n	8005f42 <CO_LEDs_process+0x1b6>
                case 6: gr |= CO_LED_flash_3; break;
 8005f28:	221e      	movs	r2, #30
 8005f2a:	18bb      	adds	r3, r7, r2
 8005f2c:	18ba      	adds	r2, r7, r2
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	2110      	movs	r1, #16
 8005f32:	430a      	orrs	r2, r1
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	e004      	b.n	8005f42 <CO_LEDs_process+0x1b6>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	71da      	strb	r2, [r3, #7]
 8005f3e:	e000      	b.n	8005f42 <CO_LEDs_process+0x1b6>
                default: /* none */ break;
 8005f40:	46c0      	nop			@ (mov r8, r8)
            }
            switch (++LEDs->LEDtmrflash_4) {
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	7a1b      	ldrb	r3, [r3, #8]
 8005f46:	3301      	adds	r3, #1
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	721a      	strb	r2, [r3, #8]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	7a1b      	ldrb	r3, [r3, #8]
 8005f52:	220c      	movs	r2, #12
 8005f54:	429a      	cmp	r2, r3
 8005f56:	4192      	sbcs	r2, r2
 8005f58:	4252      	negs	r2, r2
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	d13d      	bne.n	8005fdc <CO_LEDs_process+0x250>
 8005f60:	2201      	movs	r2, #1
 8005f62:	409a      	lsls	r2, r3
 8005f64:	0013      	movs	r3, r2
 8005f66:	22aa      	movs	r2, #170	@ 0xaa
 8005f68:	0052      	lsls	r2, r2, #1
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	1e51      	subs	r1, r2, #1
 8005f6e:	418a      	sbcs	r2, r1
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	2a00      	cmp	r2, #0
 8005f74:	d117      	bne.n	8005fa6 <CO_LEDs_process+0x21a>
 8005f76:	22aa      	movs	r2, #170	@ 0xaa
 8005f78:	401a      	ands	r2, r3
 8005f7a:	1e51      	subs	r1, r2, #1
 8005f7c:	418a      	sbcs	r2, r1
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	d108      	bne.n	8005f96 <CO_LEDs_process+0x20a>
 8005f84:	2280      	movs	r2, #128	@ 0x80
 8005f86:	0152      	lsls	r2, r2, #5
 8005f88:	4013      	ands	r3, r2
 8005f8a:	1e5a      	subs	r2, r3, #1
 8005f8c:	4193      	sbcs	r3, r2
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d110      	bne.n	8005fb6 <CO_LEDs_process+0x22a>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 8005f94:	e022      	b.n	8005fdc <CO_LEDs_process+0x250>
                case 7: rd |= CO_LED_flash_4; break;
 8005f96:	221f      	movs	r2, #31
 8005f98:	18bb      	adds	r3, r7, r2
 8005f9a:	18ba      	adds	r2, r7, r2
 8005f9c:	7812      	ldrb	r2, [r2, #0]
 8005f9e:	2120      	movs	r1, #32
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	701a      	strb	r2, [r3, #0]
 8005fa4:	e01b      	b.n	8005fde <CO_LEDs_process+0x252>
                case 8: gr |= CO_LED_flash_4; break;
 8005fa6:	221e      	movs	r2, #30
 8005fa8:	18bb      	adds	r3, r7, r2
 8005faa:	18ba      	adds	r2, r7, r2
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	2120      	movs	r1, #32
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	e013      	b.n	8005fde <CO_LEDs_process+0x252>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	721a      	strb	r2, [r3, #8]
 8005fbc:	e00f      	b.n	8005fde <CO_LEDs_process+0x252>
            }
        } else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	7a5a      	ldrb	r2, [r3, #9]
 8005fc2:	231f      	movs	r3, #31
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	217e      	movs	r1, #126	@ 0x7e
 8005fc8:	400a      	ands	r2, r1
 8005fca:	701a      	strb	r2, [r3, #0]
            gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	7a9a      	ldrb	r2, [r3, #10]
 8005fd0:	231e      	movs	r3, #30
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	217e      	movs	r1, #126	@ 0x7e
 8005fd6:	400a      	ands	r2, r1
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	e000      	b.n	8005fde <CO_LEDs_process+0x252>
                default: /* none */ break;
 8005fdc:	46c0      	nop			@ (mov r8, r8)
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) {
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <CO_LEDs_process+0x268>
            rd |= CO_LED_flicker;
 8005fe4:	221f      	movs	r2, #31
 8005fe6:	18bb      	adds	r3, r7, r2
 8005fe8:	18ba      	adds	r2, r7, r2
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	2101      	movs	r1, #1
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e006      	b.n	8006002 <CO_LEDs_process+0x276>
        } else {
            gr |= CO_LED_flicker;
 8005ff4:	221e      	movs	r2, #30
 8005ff6:	18bb      	adds	r3, r7, r2
 8005ff8:	18ba      	adds	r2, r7, r2
 8005ffa:	7812      	ldrb	r2, [r2, #0]
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	430a      	orrs	r2, r1
 8006000:	701a      	strb	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a44      	ldr	r2, [pc, #272]	@ (8006118 <CO_LEDs_process+0x38c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d900      	bls.n	800600e <CO_LEDs_process+0x282>
 800600c:	e6d7      	b.n	8005dbe <CO_LEDs_process+0x32>
        }

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d100      	bne.n	8006016 <CO_LEDs_process+0x28a>
 8006014:	e0c2      	b.n	800619c <CO_LEDs_process+0x410>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 8006016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006018:	2b00      	cmp	r3, #0
 800601a:	d004      	beq.n	8006026 <CO_LEDs_process+0x29a>
            rd_co = 1;
 800601c:	2317      	movs	r3, #23
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e04d      	b.n	80060c2 <CO_LEDs_process+0x336>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 8006026:	1dfb      	adds	r3, r7, #7
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	b25b      	sxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d108      	bne.n	8006042 <CO_LEDs_process+0x2b6>
            rd_co = rd & CO_LED_flicker;
 8006030:	2317      	movs	r3, #23
 8006032:	18fb      	adds	r3, r7, r3
 8006034:	221f      	movs	r2, #31
 8006036:	18ba      	adds	r2, r7, r2
 8006038:	7812      	ldrb	r2, [r2, #0]
 800603a:	2101      	movs	r1, #1
 800603c:	400a      	ands	r2, r1
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	e03f      	b.n	80060c2 <CO_LEDs_process+0x336>
        } else if (ErrRpdo) {
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <CO_LEDs_process+0x2ce>
            rd_co = rd & CO_LED_flash_4;
 8006048:	2317      	movs	r3, #23
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	221f      	movs	r2, #31
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	2120      	movs	r1, #32
 8006054:	400a      	ands	r2, r1
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e033      	b.n	80060c2 <CO_LEDs_process+0x336>
        } else if (ErrSync) {
 800605a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <CO_LEDs_process+0x2e6>
            rd_co = rd & CO_LED_flash_3;
 8006060:	2317      	movs	r3, #23
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	221f      	movs	r2, #31
 8006066:	18ba      	adds	r2, r7, r2
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	2110      	movs	r1, #16
 800606c:	400a      	ands	r2, r1
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	e027      	b.n	80060c2 <CO_LEDs_process+0x336>
        } else if (ErrHbCons) {
 8006072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <CO_LEDs_process+0x2fe>
            rd_co = rd & CO_LED_flash_2;
 8006078:	2317      	movs	r3, #23
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	221f      	movs	r2, #31
 800607e:	18ba      	adds	r2, r7, r2
 8006080:	7812      	ldrb	r2, [r2, #0]
 8006082:	2108      	movs	r1, #8
 8006084:	400a      	ands	r2, r1
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e01b      	b.n	80060c2 <CO_LEDs_process+0x336>
        } else if (ErrCANbusWarn) {
 800608a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <CO_LEDs_process+0x316>
            rd_co = rd & CO_LED_flash_1;
 8006090:	2317      	movs	r3, #23
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	221f      	movs	r2, #31
 8006096:	18ba      	adds	r2, r7, r2
 8006098:	7812      	ldrb	r2, [r2, #0]
 800609a:	2104      	movs	r1, #4
 800609c:	400a      	ands	r2, r1
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	e00f      	b.n	80060c2 <CO_LEDs_process+0x336>
        } else if (ErrOther) {
 80060a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <CO_LEDs_process+0x32e>
            rd_co = rd & CO_LED_blink;
 80060a8:	2317      	movs	r3, #23
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	221f      	movs	r2, #31
 80060ae:	18ba      	adds	r2, r7, r2
 80060b0:	7812      	ldrb	r2, [r2, #0]
 80060b2:	2102      	movs	r1, #2
 80060b4:	400a      	ands	r2, r1
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	e003      	b.n	80060c2 <CO_LEDs_process+0x336>
        } else {
            rd_co = 0;
 80060ba:	2317      	movs	r3, #23
 80060bc:	18fb      	adds	r3, r7, r3
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <CO_LEDs_process+0x34e>
            gr_co = gr & CO_LED_flicker;
 80060c8:	2316      	movs	r3, #22
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	221e      	movs	r2, #30
 80060ce:	18ba      	adds	r2, r7, r2
 80060d0:	7812      	ldrb	r2, [r2, #0]
 80060d2:	2101      	movs	r1, #1
 80060d4:	400a      	ands	r2, r1
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e03c      	b.n	8006154 <CO_LEDs_process+0x3c8>
        } else if (firmwareDownload) {
 80060da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d008      	beq.n	80060f2 <CO_LEDs_process+0x366>
            gr_co = gr & CO_LED_flash_3;
 80060e0:	2316      	movs	r3, #22
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	221e      	movs	r2, #30
 80060e6:	18ba      	adds	r2, r7, r2
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	2110      	movs	r1, #16
 80060ec:	400a      	ands	r2, r1
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e030      	b.n	8006154 <CO_LEDs_process+0x3c8>
        } else if (NMTstate == CO_NMT_STOPPED) {
 80060f2:	1dfb      	adds	r3, r7, #7
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b25b      	sxtb	r3, r3
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d10f      	bne.n	800611c <CO_LEDs_process+0x390>
            gr_co = gr & CO_LED_flash_1;
 80060fc:	2316      	movs	r3, #22
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	221e      	movs	r2, #30
 8006102:	18ba      	adds	r2, r7, r2
 8006104:	7812      	ldrb	r2, [r2, #0]
 8006106:	2104      	movs	r1, #4
 8006108:	400a      	ands	r2, r1
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e022      	b.n	8006154 <CO_LEDs_process+0x3c8>
 800610e:	46c0      	nop			@ (mov r8, r8)
 8006110:	ffff3cb0 	.word	0xffff3cb0
 8006114:	08010694 	.word	0x08010694
 8006118:	0000c34f 	.word	0x0000c34f
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 800611c:	1dfb      	adds	r3, r7, #7
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	b25b      	sxtb	r3, r3
 8006122:	2b7f      	cmp	r3, #127	@ 0x7f
 8006124:	d108      	bne.n	8006138 <CO_LEDs_process+0x3ac>
            gr_co = gr & CO_LED_blink;
 8006126:	2316      	movs	r3, #22
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	221e      	movs	r2, #30
 800612c:	18ba      	adds	r2, r7, r2
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	2102      	movs	r1, #2
 8006132:	400a      	ands	r2, r1
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e00d      	b.n	8006154 <CO_LEDs_process+0x3c8>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 8006138:	1dfb      	adds	r3, r7, #7
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	b25b      	sxtb	r3, r3
 800613e:	2b05      	cmp	r3, #5
 8006140:	d104      	bne.n	800614c <CO_LEDs_process+0x3c0>
            gr_co = 1;
 8006142:	2316      	movs	r3, #22
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	2201      	movs	r2, #1
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e003      	b.n	8006154 <CO_LEDs_process+0x3c8>
        } else {
            gr_co = 0;
 800614c:	2316      	movs	r3, #22
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
        }

        if (rd_co != 0U) {
 8006154:	2317      	movs	r3, #23
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <CO_LEDs_process+0x3e2>
            rd |= CO_LED_CANopen;
 800615e:	221f      	movs	r2, #31
 8006160:	18bb      	adds	r3, r7, r2
 8006162:	18ba      	adds	r2, r7, r2
 8006164:	7812      	ldrb	r2, [r2, #0]
 8006166:	2180      	movs	r1, #128	@ 0x80
 8006168:	4249      	negs	r1, r1
 800616a:	430a      	orrs	r2, r1
 800616c:	701a      	strb	r2, [r3, #0]
        }
        if (gr_co != 0U) {
 800616e:	2316      	movs	r3, #22
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <CO_LEDs_process+0x3fc>
            gr |= CO_LED_CANopen;
 8006178:	221e      	movs	r2, #30
 800617a:	18bb      	adds	r3, r7, r2
 800617c:	18ba      	adds	r2, r7, r2
 800617e:	7812      	ldrb	r2, [r2, #0]
 8006180:	2180      	movs	r1, #128	@ 0x80
 8006182:	4249      	negs	r1, r1
 8006184:	430a      	orrs	r2, r1
 8006186:	701a      	strb	r2, [r3, #0]
        }
        LEDs->LEDred = rd;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	221f      	movs	r2, #31
 800618c:	18ba      	adds	r2, r7, r2
 800618e:	7812      	ldrb	r2, [r2, #0]
 8006190:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	221e      	movs	r2, #30
 8006196:	18ba      	adds	r2, r7, r2
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 800619c:	46c0      	nop			@ (mov r8, r8)
 800619e:	46bd      	mov	sp, r7
 80061a0:	b008      	add	sp, #32
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 80061a4:	b5b0      	push	{r4, r5, r7, lr}
 80061a6:	b090      	sub	sp, #64	@ 0x40
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80061b2:	2133      	movs	r1, #51	@ 0x33
 80061b4:	187b      	adds	r3, r7, r1
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	7912      	ldrb	r2, [r2, #4]
 80061ba:	701a      	strb	r2, [r3, #0]

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 80061bc:	187b      	adds	r3, r7, r1
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d000      	beq.n	80061c6 <CO_LSSslave_receive+0x22>
 80061c4:	e154      	b.n	8006470 <CO_LSSslave_receive+0x2cc>
 80061c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d000      	beq.n	80061d0 <CO_LSSslave_receive+0x2c>
 80061ce:	e14f      	b.n	8006470 <CO_LSSslave_receive+0x2cc>
        bool_t request_LSSslave_process = false;
 80061d0:	2300      	movs	r3, #0
 80061d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	3305      	adds	r3, #5
 80061d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t cs = data[0];
 80061da:	212b      	movs	r1, #43	@ 0x2b
 80061dc:	187b      	adds	r3, r7, r1
 80061de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061e0:	7812      	ldrb	r2, [r2, #0]
 80061e2:	701a      	strb	r2, [r3, #0]

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 80061e4:	187b      	adds	r3, r7, r1
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d131      	bne.n	8006250 <CO_LSSslave_receive+0xac>
            uint8_t mode = data[1];
 80061ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	211f      	movs	r1, #31
 80061f2:	187b      	adds	r3, r7, r1
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	701a      	strb	r2, [r3, #0]

            switch (mode) {
 80061f8:	187b      	adds	r3, r7, r1
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <CO_LSSslave_receive+0x62>
 8006200:	2b01      	cmp	r3, #1
 8006202:	d021      	beq.n	8006248 <CO_LSSslave_receive+0xa4>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 8006204:	e12e      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 8006206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006208:	7c1b      	ldrb	r3, [r3, #16]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d111      	bne.n	8006232 <CO_LSSslave_receive+0x8e>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 800620e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006210:	2240      	movs	r2, #64	@ 0x40
 8006212:	5c9b      	ldrb	r3, [r3, r2]
 8006214:	2bff      	cmp	r3, #255	@ 0xff
 8006216:	d10c      	bne.n	8006232 <CO_LSSslave_receive+0x8e>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 8006218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2bff      	cmp	r3, #255	@ 0xff
 8006220:	d007      	beq.n	8006232 <CO_LSSslave_receive+0x8e>
                        LSSslave->service = cs;
 8006222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006224:	222b      	movs	r2, #43	@ 0x2b
 8006226:	18ba      	adds	r2, r7, r2
 8006228:	2148      	movs	r1, #72	@ 0x48
 800622a:	7812      	ldrb	r2, [r2, #0]
 800622c:	545a      	strb	r2, [r3, r1]
                        request_LSSslave_process = true;
 800622e:	2301      	movs	r3, #1
 8006230:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8006232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006234:	2200      	movs	r2, #0
 8006236:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 8006238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623a:	3314      	adds	r3, #20
 800623c:	2210      	movs	r2, #16
 800623e:	2100      	movs	r1, #0
 8006240:	0018      	movs	r0, r3
 8006242:	f009 fc80 	bl	800fb46 <memset>
                    break;
 8006246:	e10d      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 8006248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800624a:	2201      	movs	r2, #1
 800624c:	741a      	strb	r2, [r3, #16]
 800624e:	e109      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8006250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006252:	7c1b      	ldrb	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d000      	beq.n	800625a <CO_LSSslave_receive+0xb6>
 8006258:	e0ef      	b.n	800643a <CO_LSSslave_receive+0x296>
            switch (cs) {
 800625a:	232b      	movs	r3, #43	@ 0x2b
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	3b40      	subs	r3, #64	@ 0x40
 8006262:	2b11      	cmp	r3, #17
 8006264:	d900      	bls.n	8006268 <CO_LSSslave_receive+0xc4>
 8006266:	e0f8      	b.n	800645a <CO_LSSslave_receive+0x2b6>
 8006268:	009a      	lsls	r2, r3, #2
 800626a:	4b83      	ldr	r3, [pc, #524]	@ (8006478 <CO_LSSslave_receive+0x2d4>)
 800626c:	18d3      	adds	r3, r2, r3
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	469f      	mov	pc, r3
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8006272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006274:	1c59      	adds	r1, r3, #1
 8006276:	2318      	movs	r3, #24
 8006278:	18fb      	adds	r3, r7, r3
 800627a:	2204      	movs	r2, #4
 800627c:	0018      	movs	r0, r3
 800627e:	f009 fcf8 	bl	800fc72 <memcpy>
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006286:	615a      	str	r2, [r3, #20]
                    break;
 8006288:	e0ec      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628c:	1c59      	adds	r1, r3, #1
 800628e:	2314      	movs	r3, #20
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	2204      	movs	r2, #4
 8006294:	0018      	movs	r0, r3
 8006296:	f009 fcec 	bl	800fc72 <memcpy>
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629e:	619a      	str	r2, [r3, #24]
                    break;
 80062a0:	e0e0      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 80062a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a4:	1c59      	adds	r1, r3, #1
 80062a6:	2310      	movs	r3, #16
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	2204      	movs	r2, #4
 80062ac:	0018      	movs	r0, r3
 80062ae:	f009 fce0 	bl	800fc72 <memcpy>
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b6:	61da      	str	r2, [r3, #28]
                    break;
 80062b8:	e0d4      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 80062ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062bc:	1c59      	adds	r1, r3, #1
 80062be:	230c      	movs	r3, #12
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	2204      	movs	r2, #4
 80062c4:	0018      	movs	r0, r3
 80062c6:	f009 fcd4 	bl	800fc72 <memcpy>
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ce:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 80062d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d000      	beq.n	80062de <CO_LSSslave_receive+0x13a>
 80062dc:	e0bf      	b.n	800645e <CO_LSSslave_receive+0x2ba>
 80062de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d000      	beq.n	80062ec <CO_LSSslave_receive+0x148>
 80062ea:	e0b8      	b.n	800645e <CO_LSSslave_receive+0x2ba>
 80062ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d000      	beq.n	80062fa <CO_LSSslave_receive+0x156>
 80062f8:	e0b1      	b.n	800645e <CO_LSSslave_receive+0x2ba>
 80062fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	429a      	cmp	r2, r3
 8006304:	d000      	beq.n	8006308 <CO_LSSslave_receive+0x164>
 8006306:	e0aa      	b.n	800645e <CO_LSSslave_receive+0x2ba>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8006308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630a:	2201      	movs	r2, #1
 800630c:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 800630e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006310:	222b      	movs	r2, #43	@ 0x2b
 8006312:	18ba      	adds	r2, r7, r2
 8006314:	2148      	movs	r1, #72	@ 0x48
 8006316:	7812      	ldrb	r2, [r2, #0]
 8006318:	545a      	strb	r2, [r3, r1]
                        request_LSSslave_process = true;
 800631a:	2301      	movs	r3, #1
 800631c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    }
                    break;
 800631e:	e09e      	b.n	800645e <CO_LSSslave_receive+0x2ba>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8006320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2bff      	cmp	r3, #255	@ 0xff
 8006328:	d000      	beq.n	800632c <CO_LSSslave_receive+0x188>
 800632a:	e09a      	b.n	8006462 <CO_LSSslave_receive+0x2be>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 800632c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632e:	2240      	movs	r2, #64	@ 0x40
 8006330:	5c9b      	ldrb	r3, [r3, r2]
 8006332:	2bff      	cmp	r3, #255	@ 0xff
 8006334:	d000      	beq.n	8006338 <CO_LSSslave_receive+0x194>
 8006336:	e094      	b.n	8006462 <CO_LSSslave_receive+0x2be>
                        uint8_t bitCheck = data[5];
 8006338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633a:	1d5a      	adds	r2, r3, #5
 800633c:	212a      	movs	r1, #42	@ 0x2a
 800633e:	187b      	adds	r3, r7, r1
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	701a      	strb	r2, [r3, #0]
                        uint8_t lssSub = data[6];
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006346:	1d9a      	adds	r2, r3, #6
 8006348:	2329      	movs	r3, #41	@ 0x29
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	7812      	ldrb	r2, [r2, #0]
 800634e:	701a      	strb	r2, [r3, #0]
                        uint8_t lssNext = data[7];
 8006350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006352:	1dda      	adds	r2, r3, #7
 8006354:	2328      	movs	r3, #40	@ 0x28
 8006356:	18fb      	adds	r3, r7, r3
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	701a      	strb	r2, [r3, #0]
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 800635c:	187b      	adds	r3, r7, r1
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b1f      	cmp	r3, #31
 8006362:	d904      	bls.n	800636e <CO_LSSslave_receive+0x1ca>
 8006364:	187b      	adds	r3, r7, r1
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b80      	cmp	r3, #128	@ 0x80
 800636a:	d000      	beq.n	800636e <CO_LSSslave_receive+0x1ca>
 800636c:	e07a      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
 800636e:	2329      	movs	r3, #41	@ 0x29
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b03      	cmp	r3, #3
 8006376:	d900      	bls.n	800637a <CO_LSSslave_receive+0x1d6>
 8006378:	e074      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 800637a:	2328      	movs	r3, #40	@ 0x28
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d900      	bls.n	8006386 <CO_LSSslave_receive+0x1e2>
 8006384:	e06e      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8006386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	2308      	movs	r3, #8
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	2204      	movs	r2, #4
 8006390:	0018      	movs	r0, r3
 8006392:	f009 fc6e 	bl	800fc72 <memcpy>
                        idNumber = CO_SWAP_32(valSw);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
                        ack = false;
 800639a:	2300      	movs	r3, #0
 800639c:	63bb      	str	r3, [r7, #56]	@ 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 800639e:	232a      	movs	r3, #42	@ 0x2a
 80063a0:	18fb      	adds	r3, r7, r3
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b80      	cmp	r3, #128	@ 0x80
 80063a6:	d10d      	bne.n	80063c4 <CO_LSSslave_receive+0x220>
                            /* Confirm, Reset */
                            ack = true;
 80063a8:	2301      	movs	r3, #1
 80063aa:	63bb      	str	r3, [r7, #56]	@ 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 80063ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ae:	2234      	movs	r2, #52	@ 0x34
 80063b0:	2100      	movs	r1, #0
 80063b2:	5499      	strb	r1, [r3, r2]
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 80063b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b6:	3324      	adds	r3, #36	@ 0x24
 80063b8:	2210      	movs	r2, #16
 80063ba:	2100      	movs	r1, #0
 80063bc:	0018      	movs	r0, r3
 80063be:	f009 fbc2 	bl	800fb46 <memset>
 80063c2:	e02e      	b.n	8006422 <CO_LSSslave_receive+0x27e>
                        } else if (LSSslave->fastscanPos == lssSub) {
 80063c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c6:	2234      	movs	r2, #52	@ 0x34
 80063c8:	5c9b      	ldrb	r3, [r3, r2]
 80063ca:	2029      	movs	r0, #41	@ 0x29
 80063cc:	183a      	adds	r2, r7, r0
 80063ce:	7812      	ldrb	r2, [r2, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d126      	bne.n	8006422 <CO_LSSslave_receive+0x27e>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 80063d4:	242a      	movs	r4, #42	@ 0x2a
 80063d6:	193b      	adds	r3, r7, r4
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2201      	movs	r2, #1
 80063dc:	4252      	negs	r2, r2
 80063de:	409a      	lsls	r2, r3
 80063e0:	0013      	movs	r3, r2
 80063e2:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 80063e4:	183b      	adds	r3, r7, r0
 80063e6:	781a      	ldrb	r2, [r3, #0]
 80063e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ea:	0092      	lsls	r2, r2, #2
 80063ec:	58d2      	ldr	r2, [r2, r3]
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	4053      	eors	r3, r2
 80063f2:	6a3a      	ldr	r2, [r7, #32]
 80063f4:	4013      	ands	r3, r2
 80063f6:	d114      	bne.n	8006422 <CO_LSSslave_receive+0x27e>
                                /* all requested bits match */
                                ack = true;
 80063f8:	2301      	movs	r3, #1
 80063fa:	63bb      	str	r3, [r7, #56]	@ 0x38
                                LSSslave->fastscanPos = lssNext;
 80063fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fe:	2528      	movs	r5, #40	@ 0x28
 8006400:	197a      	adds	r2, r7, r5
 8006402:	2134      	movs	r1, #52	@ 0x34
 8006404:	7812      	ldrb	r2, [r2, #0]
 8006406:	545a      	strb	r2, [r3, r1]

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 8006408:	193b      	adds	r3, r7, r4
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d108      	bne.n	8006422 <CO_LSSslave_receive+0x27e>
 8006410:	197a      	adds	r2, r7, r5
 8006412:	183b      	adds	r3, r7, r0
 8006414:	7812      	ldrb	r2, [r2, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d202      	bcs.n	8006422 <CO_LSSslave_receive+0x27e>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800641c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800641e:	2201      	movs	r2, #1
 8006420:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 8006422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01c      	beq.n	8006462 <CO_LSSslave_receive+0x2be>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 8006428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800642a:	222b      	movs	r2, #43	@ 0x2b
 800642c:	18ba      	adds	r2, r7, r2
 800642e:	2148      	movs	r1, #72	@ 0x48
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	545a      	strb	r2, [r3, r1]
                            request_LSSslave_process = true;
 8006434:	2301      	movs	r3, #1
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
                        }
                    }
                    break;
 8006438:	e013      	b.n	8006462 <CO_LSSslave_receive+0x2be>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 800643a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643c:	3349      	adds	r3, #73	@ 0x49
 800643e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006440:	2208      	movs	r2, #8
 8006442:	0018      	movs	r0, r3
 8006444:	f009 fc15 	bl	800fc72 <memcpy>
            LSSslave->service = cs;
 8006448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644a:	222b      	movs	r2, #43	@ 0x2b
 800644c:	18ba      	adds	r2, r7, r2
 800644e:	2148      	movs	r1, #72	@ 0x48
 8006450:	7812      	ldrb	r2, [r2, #0]
 8006452:	545a      	strb	r2, [r3, r1]
            request_LSSslave_process = true;
 8006454:	2301      	movs	r3, #1
 8006456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006458:	e004      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
                    break;
 800645a:	46c0      	nop			@ (mov r8, r8)
 800645c:	e002      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
                    break;
 800645e:	46c0      	nop			@ (mov r8, r8)
 8006460:	e000      	b.n	8006464 <CO_LSSslave_receive+0x2c0>
                    break;
 8006462:	46c0      	nop			@ (mov r8, r8)
        }

        if (request_LSSslave_process) {
 8006464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <CO_LSSslave_receive+0x2cc>
            CO_FLAG_SET(LSSslave->sendResponse);
 800646a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646c:	2201      	movs	r2, #1
 800646e:	645a      	str	r2, [r3, #68]	@ 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8006470:	46c0      	nop			@ (mov r8, r8)
 8006472:	46bd      	mov	sp, r7
 8006474:	b010      	add	sp, #64	@ 0x40
 8006476:	bdb0      	pop	{r4, r5, r7, pc}
 8006478:	080106cc 	.word	0x080106cc

0800647c <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 800647c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647e:	b08b      	sub	sp, #44	@ 0x2c
 8006480:	af04      	add	r7, sp, #16
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800648a:	2317      	movs	r3, #23
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	2200      	movs	r2, #0
 8006490:	701a      	strb	r2, [r3, #0]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d018      	beq.n	80064ca <CO_LSSslave_init+0x4e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d015      	beq.n	80064ca <CO_LSSslave_init+0x4e>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d012      	beq.n	80064ca <CO_LSSslave_init+0x4e>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00f      	beq.n	80064ca <CO_LSSslave_init+0x4e>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 80064aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00c      	beq.n	80064ca <CO_LSSslave_init+0x4e>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <CO_LSSslave_init+0x46>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	b25b      	sxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da06      	bge.n	80064d0 <CO_LSSslave_init+0x54>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2bff      	cmp	r3, #255	@ 0xff
 80064c8:	d002      	beq.n	80064d0 <CO_LSSslave_init+0x54>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80064ca:	2301      	movs	r3, #1
 80064cc:	425b      	negs	r3, r3
 80064ce:	e05a      	b.n	8006586 <CO_LSSslave_init+0x10a>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2274      	movs	r2, #116	@ 0x74
 80064d4:	2100      	movs	r1, #0
 80064d6:	0018      	movs	r0, r3
 80064d8:	f009 fb35 	bl	800fb46 <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68b9      	ldr	r1, [r7, #8]
 80064e0:	2210      	movs	r2, #16
 80064e2:	0018      	movs	r0, r3
 80064e4:	f009 fbc5 	bl	800fc72 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2234      	movs	r2, #52	@ 0x34
 80064f2:	2100      	movs	r1, #0
 80064f4:	5499      	strb	r1, [r3, r2]

    LSSslave->pendingBitRate = pendingBitRate;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	639a      	str	r2, [r3, #56]	@ 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	63da      	str	r2, [r3, #60]	@ 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	7819      	ldrb	r1, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2240      	movs	r2, #64	@ 0x40
 800650a:	5499      	strb	r1, [r3, r2]
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	645a      	str	r2, [r3, #68]	@ 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 8006512:	2617      	movs	r6, #23
 8006514:	19bc      	adds	r4, r7, r6
 8006516:	4d1e      	ldr	r5, [pc, #120]	@ (8006590 <CO_LSSslave_init+0x114>)
 8006518:	2330      	movs	r3, #48	@ 0x30
 800651a:	2108      	movs	r1, #8
 800651c:	185b      	adds	r3, r3, r1
 800651e:	19db      	adds	r3, r3, r7
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	232c      	movs	r3, #44	@ 0x2c
 8006524:	185b      	adds	r3, r3, r1
 8006526:	19db      	adds	r3, r3, r7
 8006528:	8819      	ldrh	r1, [r3, #0]
 800652a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800652c:	4b19      	ldr	r3, [pc, #100]	@ (8006594 <CO_LSSslave_init+0x118>)
 800652e:	9302      	str	r3, [sp, #8]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	2300      	movs	r3, #0
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	002b      	movs	r3, r5
 800653a:	f001 fbb5 	bl	8007ca8 <CO_CANrxBufferInit>
 800653e:	0003      	movs	r3, r0
 8006540:	7023      	strb	r3, [r4, #0]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006546:	66da      	str	r2, [r3, #108]	@ 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 8006548:	233c      	movs	r3, #60	@ 0x3c
 800654a:	2108      	movs	r1, #8
 800654c:	185b      	adds	r3, r3, r1
 800654e:	19db      	adds	r3, r3, r7
 8006550:	881a      	ldrh	r2, [r3, #0]
 8006552:	2338      	movs	r3, #56	@ 0x38
 8006554:	185b      	adds	r3, r3, r1
 8006556:	19db      	adds	r3, r3, r7
 8006558:	8819      	ldrh	r1, [r3, #0]
 800655a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800655c:	2300      	movs	r3, #0
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	2308      	movs	r3, #8
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	2300      	movs	r3, #0
 8006566:	f001 fc07 	bl	8007d78 <CO_CANtxBufferInit>
 800656a:	0002      	movs	r2, r0
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	671a      	str	r2, [r3, #112]	@ 0x70

    if (LSSslave->TXbuff == NULL) {
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <CO_LSSslave_init+0x102>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8006578:	19bb      	adds	r3, r7, r6
 800657a:	22ff      	movs	r2, #255	@ 0xff
 800657c:	701a      	strb	r2, [r3, #0]
    }

    return ret;
 800657e:	2317      	movs	r3, #23
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	b25b      	sxtb	r3, r3
}
 8006586:	0018      	movs	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	b007      	add	sp, #28
 800658c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800658e:	46c0      	nop			@ (mov r8, r8)
 8006590:	000007ff 	.word	0x000007ff
 8006594:	080061a5 	.word	0x080061a5

08006598 <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 8006598:	b590      	push	{r4, r7, lr}
 800659a:	b08d      	sub	sp, #52	@ 0x34
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 80065a0:	2300      	movs	r3, #0
 80065a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d100      	bne.n	80065ae <CO_LSSslave_process+0x16>
 80065ac:	e186      	b.n	80068bc <CO_LSSslave_process+0x324>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 80065ae:	2300      	movs	r3, #0
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b6:	3305      	adds	r3, #5
 80065b8:	2208      	movs	r2, #8
 80065ba:	2100      	movs	r1, #0
 80065bc:	0018      	movs	r0, r3
 80065be:	f009 fac2 	bl	800fb46 <memset>

        switch (LSSslave->service) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2248      	movs	r2, #72	@ 0x48
 80065c6:	5c9b      	ldrb	r3, [r3, r2]
 80065c8:	3b04      	subs	r3, #4
 80065ca:	2b5a      	cmp	r3, #90	@ 0x5a
 80065cc:	d900      	bls.n	80065d0 <CO_LSSslave_process+0x38>
 80065ce:	e160      	b.n	8006892 <CO_LSSslave_process+0x2fa>
 80065d0:	009a      	lsls	r2, r3, #2
 80065d2:	4bbd      	ldr	r3, [pc, #756]	@ (80068c8 <CO_LSSslave_process+0x330>)
 80065d4:	18d3      	adds	r3, r2, r3
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	469f      	mov	pc, r3
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 80065da:	2301      	movs	r3, #1
 80065dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 80065de:	e15f      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e4:	2244      	movs	r2, #68	@ 0x44
 80065e6:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 80065e8:	2301      	movs	r3, #1
 80065ea:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80065ec:	e158      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 80065ee:	2013      	movs	r0, #19
 80065f0:	183b      	adds	r3, r7, r0
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	214a      	movs	r1, #74	@ 0x4a
 80065f6:	5c52      	ldrb	r2, [r2, r1]
 80065f8:	701a      	strb	r2, [r3, #0]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 80065fa:	232b      	movs	r3, #43	@ 0x2b
 80065fc:	18fb      	adds	r3, r7, r3
 80065fe:	2200      	movs	r2, #0
 8006600:	701a      	strb	r2, [r3, #0]

                if (CO_LSS_NODE_ID_VALID(nid)) {
 8006602:	183b      	adds	r3, r7, r0
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d004      	beq.n	8006614 <CO_LSSslave_process+0x7c>
 800660a:	183b      	adds	r3, r7, r0
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	b25b      	sxtb	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	da04      	bge.n	800661e <CO_LSSslave_process+0x86>
 8006614:	2313      	movs	r3, #19
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2bff      	cmp	r3, #255	@ 0xff
 800661c:	d106      	bne.n	800662c <CO_LSSslave_process+0x94>
                    *LSSslave->pendingNodeID = nid;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006622:	2213      	movs	r2, #19
 8006624:	18ba      	adds	r2, r7, r2
 8006626:	7812      	ldrb	r2, [r2, #0]
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e003      	b.n	8006634 <CO_LSSslave_process+0x9c>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 800662c:	232b      	movs	r3, #43	@ 0x2b
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	2201      	movs	r2, #1
 8006632:	701a      	strb	r2, [r3, #0]
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	2148      	movs	r1, #72	@ 0x48
 800663c:	5c52      	ldrb	r2, [r2, r1]
 800663e:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006644:	222b      	movs	r2, #43	@ 0x2b
 8006646:	18ba      	adds	r2, r7, r2
 8006648:	7812      	ldrb	r2, [r2, #0]
 800664a:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 800664c:	2301      	movs	r3, #1
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006650:	e126      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006656:	2b00      	cmp	r3, #0
 8006658:	d100      	bne.n	800665c <CO_LSSslave_process+0xc4>
 800665a:	e11c      	b.n	8006896 <CO_LSSslave_process+0x2fe>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 800665c:	241d      	movs	r4, #29
 800665e:	193b      	adds	r3, r7, r4
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	214a      	movs	r1, #74	@ 0x4a
 8006664:	5c52      	ldrb	r2, [r2, r1]
 8006666:	701a      	strb	r2, [r3, #0]
                tableIndex = LSSslave->CANdata[2];
 8006668:	201c      	movs	r0, #28
 800666a:	183b      	adds	r3, r7, r0
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	214b      	movs	r1, #75	@ 0x4b
 8006670:	5c52      	ldrb	r2, [r2, r1]
 8006672:	701a      	strb	r2, [r3, #0]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8006674:	232b      	movs	r3, #43	@ 0x2b
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 800667c:	232a      	movs	r3, #42	@ 0x2a
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006684:	193b      	adds	r3, r7, r4
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d12b      	bne.n	80066e4 <CO_LSSslave_process+0x14c>
 800668c:	183b      	adds	r3, r7, r0
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b05      	cmp	r3, #5
 8006692:	d027      	beq.n	80066e4 <CO_LSSslave_process+0x14c>
 8006694:	183b      	adds	r3, r7, r0
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b09      	cmp	r3, #9
 800669a:	d823      	bhi.n	80066e4 <CO_LSSslave_process+0x14c>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 800669c:	183b      	adds	r3, r7, r0
 800669e:	7819      	ldrb	r1, [r3, #0]
 80066a0:	241a      	movs	r4, #26
 80066a2:	193b      	adds	r3, r7, r4
 80066a4:	4a89      	ldr	r2, [pc, #548]	@ (80068cc <CO_LSSslave_process+0x334>)
 80066a6:	0049      	lsls	r1, r1, #1
 80066a8:	5a8a      	ldrh	r2, [r1, r2]
 80066aa:	801a      	strh	r2, [r3, #0]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80066b4:	193b      	adds	r3, r7, r4
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	0019      	movs	r1, r3
 80066ba:	4790      	blx	r2
 80066bc:	0003      	movs	r3, r0
 80066be:	617b      	str	r3, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <CO_LSSslave_process+0x13a>
                        *LSSslave->pendingBitRate = bit;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	193a      	adds	r2, r7, r4
 80066cc:	8812      	ldrh	r2, [r2, #0]
 80066ce:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80066d0:	e00c      	b.n	80066ec <CO_LSSslave_process+0x154>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 80066d2:	232b      	movs	r3, #43	@ 0x2b
 80066d4:	18fb      	adds	r3, r7, r3
 80066d6:	22ff      	movs	r2, #255	@ 0xff
 80066d8:	701a      	strb	r2, [r3, #0]
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80066da:	232a      	movs	r3, #42	@ 0x2a
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	2201      	movs	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80066e2:	e003      	b.n	80066ec <CO_LSSslave_process+0x154>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80066e4:	232b      	movs	r3, #43	@ 0x2b
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	2201      	movs	r2, #1
 80066ea:	701a      	strb	r2, [r3, #0]
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	2148      	movs	r1, #72	@ 0x48
 80066f4:	5c52      	ldrb	r2, [r2, r1]
 80066f6:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fc:	222b      	movs	r2, #43	@ 0x2b
 80066fe:	18ba      	adds	r2, r7, r2
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006708:	222a      	movs	r2, #42	@ 0x2a
 800670a:	18ba      	adds	r2, r7, r2
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 8006710:	2301      	movs	r3, #1
 8006712:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006714:	e0c4      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671a:	2b00      	cmp	r3, #0
 800671c:	d100      	bne.n	8006720 <CO_LSSslave_process+0x188>
 800671e:	e0bc      	b.n	800689a <CO_LSSslave_process+0x302>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d100      	bne.n	800672a <CO_LSSslave_process+0x192>
 8006728:	e0b9      	b.n	800689e <CO_LSSslave_process+0x306>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	224b      	movs	r2, #75	@ 0x4b
 800672e:	5c9b      	ldrb	r3, [r3, r2]
 8006730:	001a      	movs	r2, r3
 8006732:	241e      	movs	r4, #30
 8006734:	193b      	adds	r3, r7, r4
 8006736:	0212      	lsls	r2, r2, #8
 8006738:	801a      	strh	r2, [r3, #0]
                    delay |= LSSslave->CANdata[1];
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	224a      	movs	r2, #74	@ 0x4a
 800673e:	5c9b      	ldrb	r3, [r3, r2]
 8006740:	0019      	movs	r1, r3
 8006742:	193b      	adds	r3, r7, r4
 8006744:	193a      	adds	r2, r7, r4
 8006746:	8812      	ldrh	r2, [r2, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	801a      	strh	r2, [r3, #0]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8006754:	193b      	adds	r3, r7, r4
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	0019      	movs	r1, r3
 800675a:	4790      	blx	r2
                }
                break;
 800675c:	e09f      	b.n	800689e <CO_LSSslave_process+0x306>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 800675e:	212b      	movs	r1, #43	@ 0x2b
 8006760:	187b      	adds	r3, r7, r1
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]

                if (LSSslave->pFunctLSScfgStore == NULL) {
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800676a:	2b00      	cmp	r3, #0
 800676c:	d103      	bne.n	8006776 <CO_LSSslave_process+0x1de>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 800676e:	187b      	adds	r3, r7, r1
 8006770:	2201      	movs	r2, #1
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	e014      	b.n	80067a0 <CO_LSSslave_process+0x208>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006782:	7819      	ldrb	r1, [r3, #0]
                                                         *LSSslave->pendingBitRate);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	001a      	movs	r2, r3
 800678c:	47a0      	blx	r4
 800678e:	0003      	movs	r3, r0
 8006790:	623b      	str	r3, [r7, #32]
                    if (!result) {
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d103      	bne.n	80067a0 <CO_LSSslave_process+0x208>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 8006798:	232b      	movs	r3, #43	@ 0x2b
 800679a:	18fb      	adds	r3, r7, r3
 800679c:	2202      	movs	r2, #2
 800679e:	701a      	strb	r2, [r3, #0]
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	2148      	movs	r1, #72	@ 0x48
 80067a8:	5c52      	ldrb	r2, [r2, r1]
 80067aa:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b0:	222b      	movs	r2, #43	@ 0x2b
 80067b2:	18ba      	adds	r2, r7, r2
 80067b4:	7812      	ldrb	r2, [r2, #0]
 80067b6:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 80067b8:	2301      	movs	r3, #1
 80067ba:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80067bc:	e070      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	2148      	movs	r1, #72	@ 0x48
 80067c6:	5c52      	ldrb	r2, [r2, r1]
 80067c8:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d4:	3306      	adds	r3, #6
 80067d6:	220c      	movs	r2, #12
 80067d8:	18b9      	adds	r1, r7, r2
 80067da:	2204      	movs	r2, #4
 80067dc:	0018      	movs	r0, r3
 80067de:	f009 fa48 	bl	800fc72 <memcpy>
                CANsend = true;
 80067e2:	2301      	movs	r3, #1
 80067e4:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80067e6:	e05b      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	2148      	movs	r1, #72	@ 0x48
 80067f0:	5c52      	ldrb	r2, [r2, r1]
 80067f2:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fe:	3306      	adds	r3, #6
 8006800:	220c      	movs	r2, #12
 8006802:	18b9      	adds	r1, r7, r2
 8006804:	2204      	movs	r2, #4
 8006806:	0018      	movs	r0, r3
 8006808:	f009 fa33 	bl	800fc72 <memcpy>
                CANsend = true;
 800680c:	2301      	movs	r3, #1
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006810:	e046      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	2148      	movs	r1, #72	@ 0x48
 800681a:	5c52      	ldrb	r2, [r2, r1]
 800681c:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006828:	3306      	adds	r3, #6
 800682a:	220c      	movs	r2, #12
 800682c:	18b9      	adds	r1, r7, r2
 800682e:	2204      	movs	r2, #4
 8006830:	0018      	movs	r0, r3
 8006832:	f009 fa1e 	bl	800fc72 <memcpy>
                CANsend = true;
 8006836:	2301      	movs	r3, #1
 8006838:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800683a:	e031      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	2148      	movs	r1, #72	@ 0x48
 8006844:	5c52      	ldrb	r2, [r2, r1]
 8006846:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006852:	3306      	adds	r3, #6
 8006854:	220c      	movs	r2, #12
 8006856:	18b9      	adds	r1, r7, r2
 8006858:	2204      	movs	r2, #4
 800685a:	0018      	movs	r0, r3
 800685c:	f009 fa09 	bl	800fc72 <memcpy>
                CANsend = true;
 8006860:	2301      	movs	r3, #1
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006864:	e01c      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	2148      	movs	r1, #72	@ 0x48
 800686e:	5c52      	ldrb	r2, [r2, r1]
 8006870:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	2140      	movs	r1, #64	@ 0x40
 800687a:	5c52      	ldrb	r2, [r2, r1]
 800687c:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 800687e:	2301      	movs	r3, #1
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006882:	e00d      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006888:	224f      	movs	r2, #79	@ 0x4f
 800688a:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 800688c:	2301      	movs	r3, #1
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006890:	e006      	b.n	80068a0 <CO_LSSslave_process+0x308>
            }
            default: {
                /* none */
                break;
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	e004      	b.n	80068a0 <CO_LSSslave_process+0x308>
                    break;
 8006896:	46c0      	nop			@ (mov r8, r8)
 8006898:	e002      	b.n	80068a0 <CO_LSSslave_process+0x308>
                    break;
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	e000      	b.n	80068a0 <CO_LSSslave_process+0x308>
                break;
 800689e:	46c0      	nop			@ (mov r8, r8)
            }
        }

        if (CANsend) {
 80068a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <CO_LSSslave_process+0x31e>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ae:	0019      	movs	r1, r3
 80068b0:	0010      	movs	r0, r2
 80068b2:	f001 fb1f 	bl	8007ef4 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    return resetCommunication;
 80068bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80068be:	0018      	movs	r0, r3
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b00d      	add	sp, #52	@ 0x34
 80068c4:	bd90      	pop	{r4, r7, pc}
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	08010714 	.word	0x08010714
 80068cc:	080106b8 	.word	0x080106b8

080068d0 <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	000a      	movs	r2, r1
 80068da:	1cfb      	adds	r3, r7, #3
 80068dc:	701a      	strb	r2, [r3, #0]
    uint8_t index = errorBit >> 3;
 80068de:	210f      	movs	r1, #15
 80068e0:	187b      	adds	r3, r7, r1
 80068e2:	1cfa      	adds	r2, r7, #3
 80068e4:	7812      	ldrb	r2, [r2, #0]
 80068e6:	08d2      	lsrs	r2, r2, #3
 80068e8:	701a      	strb	r2, [r3, #0]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80068ea:	1cfb      	adds	r3, r7, #3
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2207      	movs	r2, #7
 80068f0:	4013      	ands	r3, r2
 80068f2:	2201      	movs	r2, #1
 80068f4:	409a      	lsls	r2, r3
 80068f6:	200e      	movs	r0, #14
 80068f8:	183b      	adds	r3, r7, r0
 80068fa:	701a      	strb	r2, [r3, #0]
               : false;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00d      	beq.n	800691e <CO_isError+0x4e>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8006902:	187b      	adds	r3, r7, r1
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b09      	cmp	r3, #9
 8006908:	d809      	bhi.n	800691e <CO_isError+0x4e>
            || (em->errorStatusBits[index] & bitmask) != 0)
 800690a:	187b      	adds	r3, r7, r1
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	5cd3      	ldrb	r3, [r2, r3]
 8006912:	183a      	adds	r2, r7, r0
 8006914:	7812      	ldrb	r2, [r2, #0]
 8006916:	4013      	ands	r3, r2
 8006918:	b2db      	uxtb	r3, r3
               : false;
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <CO_isError+0x52>
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <CO_isError+0x54>
 8006922:	2300      	movs	r3, #0
}
 8006924:	0018      	movs	r0, r3
 8006926:	46bd      	mov	sp, r7
 8006928:	b004      	add	sp, #16
 800692a:	bd80      	pop	{r7, pc}

0800692c <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d007      	beq.n	800694a <CO_getErrorRegister+0x1e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <CO_getErrorRegister+0x1e>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	e000      	b.n	800694c <CO_getErrorRegister+0x20>
 800694a:	2300      	movs	r3, #0
}
 800694c:	0018      	movs	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	b002      	add	sp, #8
 8006952:	bd80      	pop	{r7, pc}

08006954 <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <CO_NMT_getInternalState+0x16>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	b25b      	sxtb	r3, r3
 8006968:	e000      	b.n	800696c <CO_NMT_getInternalState+0x18>
 800696a:	2300      	movs	r3, #0
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b002      	add	sp, #8
 8006972:	bd80      	pop	{r7, pc}

08006974 <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <CO_LSSslave_getState+0x14>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	7c1b      	ldrb	r3, [r3, #16]
 8006986:	e000      	b.n	800698a <CO_LSSslave_getState+0x16>
 8006988:	2300      	movs	r3, #0
}
 800698a:	0018      	movs	r0, r3
 800698c:	46bd      	mov	sp, r7
 800698e:	b002      	add	sp, #8
 8006990:	bd80      	pop	{r7, pc}

08006992 <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 8006992:	b590      	push	{r4, r7, lr}
 8006994:	b087      	sub	sp, #28
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 80069a8:	2140      	movs	r1, #64	@ 0x40
 80069aa:	2001      	movs	r0, #1
 80069ac:	f008 fcda 	bl	800f364 <calloc>
 80069b0:	0003      	movs	r3, r0
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d100      	bne.n	80069bc <CO_new+0x2a>
 80069ba:	e10e      	b.n	8006bda <CO_new+0x248>
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	3340      	adds	r3, #64	@ 0x40
 80069c0:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80069c2:	212c      	movs	r1, #44	@ 0x2c
 80069c4:	2001      	movs	r0, #1
 80069c6:	f008 fccd 	bl	800f364 <calloc>
 80069ca:	0003      	movs	r3, r0
 80069cc:	001a      	movs	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	611a      	str	r2, [r3, #16]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d100      	bne.n	80069dc <CO_new+0x4a>
 80069da:	e0fe      	b.n	8006bda <CO_new+0x248>
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	332c      	adds	r3, #44	@ 0x2c
 80069e0:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 80069e2:	240b      	movs	r4, #11
 80069e4:	193b      	adds	r3, r7, r4
 80069e6:	2208      	movs	r2, #8
 80069e8:	701a      	strb	r2, [r3, #0]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80069ea:	2130      	movs	r1, #48	@ 0x30
 80069ec:	2001      	movs	r0, #1
 80069ee:	f008 fcb9 	bl	800f364 <calloc>
 80069f2:	0003      	movs	r3, r0
 80069f4:	001a      	movs	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	615a      	str	r2, [r3, #20]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d100      	bne.n	8006a04 <CO_new+0x72>
 8006a02:	e0ea      	b.n	8006bda <CO_new+0x248>
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	3330      	adds	r3, #48	@ 0x30
 8006a08:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006a0a:	193b      	adds	r3, r7, r4
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2110      	movs	r1, #16
 8006a10:	0018      	movs	r0, r3
 8006a12:	f008 fca7 	bl	800f364 <calloc>
 8006a16:	0003      	movs	r3, r0
 8006a18:	001a      	movs	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	619a      	str	r2, [r3, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d100      	bne.n	8006a28 <CO_new+0x96>
 8006a26:	e0d8      	b.n	8006bda <CO_new+0x248>
 8006a28:	193b      	adds	r3, r7, r4
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	18d3      	adds	r3, r2, r3
 8006a32:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8006a34:	2150      	movs	r1, #80	@ 0x50
 8006a36:	2001      	movs	r0, #1
 8006a38:	f008 fc94 	bl	800f364 <calloc>
 8006a3c:	0003      	movs	r3, r0
 8006a3e:	001a      	movs	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	61da      	str	r2, [r3, #28]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d100      	bne.n	8006a4e <CO_new+0xbc>
 8006a4c:	e0c5      	b.n	8006bda <CO_new+0x248>
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	3350      	adds	r3, #80	@ 0x50
 8006a52:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 8006a54:	240a      	movs	r4, #10
 8006a56:	193b      	adds	r3, r7, r4
 8006a58:	2211      	movs	r2, #17
 8006a5a:	701a      	strb	r2, [r3, #0]
            if (fifoSize >= 2U) {
 8006a5c:	193b      	adds	r3, r7, r4
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d914      	bls.n	8006a8e <CO_new+0xfc>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006a64:	193b      	adds	r3, r7, r4
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2108      	movs	r1, #8
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f008 fc7a 	bl	800f364 <calloc>
 8006a70:	0003      	movs	r3, r0
 8006a72:	001a      	movs	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	621a      	str	r2, [r3, #32]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d100      	bne.n	8006a82 <CO_new+0xf0>
 8006a80:	e0ab      	b.n	8006bda <CO_new+0x248>
 8006a82:	193b      	adds	r3, r7, r4
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	18d3      	adds	r3, r2, r3
 8006a8c:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8006a8e:	21ac      	movs	r1, #172	@ 0xac
 8006a90:	2001      	movs	r0, #1
 8006a92:	f008 fc67 	bl	800f364 <calloc>
 8006a96:	0003      	movs	r3, r0
 8006a98:	001a      	movs	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d100      	bne.n	8006aa8 <CO_new+0x116>
 8006aa6:	e098      	b.n	8006bda <CO_new+0x248>
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	33ac      	adds	r3, #172	@ 0xac
 8006aac:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8006aae:	212c      	movs	r1, #44	@ 0x2c
 8006ab0:	2001      	movs	r0, #1
 8006ab2:	f008 fc57 	bl	800f364 <calloc>
 8006ab6:	0003      	movs	r3, r0
 8006ab8:	001a      	movs	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	629a      	str	r2, [r3, #40]	@ 0x28
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d100      	bne.n	8006ac8 <CO_new+0x136>
 8006ac6:	e088      	b.n	8006bda <CO_new+0x248>
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	332c      	adds	r3, #44	@ 0x2c
 8006acc:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8006ace:	215c      	movs	r1, #92	@ 0x5c
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	f008 fc47 	bl	800f364 <calloc>
 8006ad6:	0003      	movs	r3, r0
 8006ad8:	001a      	movs	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d100      	bne.n	8006ae8 <CO_new+0x156>
 8006ae6:	e078      	b.n	8006bda <CO_new+0x248>
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	335c      	adds	r3, #92	@ 0x5c
 8006aec:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0U) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8006aee:	23ca      	movs	r3, #202	@ 0xca
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	0019      	movs	r1, r3
 8006af4:	2001      	movs	r0, #1
 8006af6:	f008 fc35 	bl	800f364 <calloc>
 8006afa:	0003      	movs	r3, r0
 8006afc:	001a      	movs	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d067      	beq.n	8006bda <CO_new+0x248>
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3395      	adds	r3, #149	@ 0x95
 8006b0e:	33ff      	adds	r3, #255	@ 0xff
 8006b10:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8006b12:	23c6      	movs	r3, #198	@ 0xc6
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	0019      	movs	r1, r3
 8006b18:	2002      	movs	r0, #2
 8006b1a:	f008 fc23 	bl	800f364 <calloc>
 8006b1e:	0003      	movs	r3, r0
 8006b20:	001a      	movs	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d055      	beq.n	8006bda <CO_new+0x248>
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	22c6      	movs	r2, #198	@ 0xc6
 8006b32:	0092      	lsls	r2, r2, #2
 8006b34:	4694      	mov	ip, r2
 8006b36:	4463      	add	r3, ip
 8006b38:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8006b3a:	210c      	movs	r1, #12
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	f008 fc11 	bl	800f364 <calloc>
 8006b42:	0003      	movs	r3, r0
 8006b44:	001a      	movs	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d043      	beq.n	8006bda <CO_new+0x248>
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	330c      	adds	r3, #12
 8006b56:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8006b58:	2174      	movs	r1, #116	@ 0x74
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	f008 fc02 	bl	800f364 <calloc>
 8006b60:	0003      	movs	r3, r0
 8006b62:	001a      	movs	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d034      	beq.n	8006bda <CO_new+0x248>
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	3374      	adds	r3, #116	@ 0x74
 8006b74:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 8006b76:	2138      	movs	r1, #56	@ 0x38
 8006b78:	2001      	movs	r0, #1
 8006b7a:	f008 fbf3 	bl	800f364 <calloc>
 8006b7e:	0003      	movs	r3, r0
 8006b80:	001a      	movs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	605a      	str	r2, [r3, #4]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d025      	beq.n	8006bda <CO_new+0x248>
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3338      	adds	r3, #56	@ 0x38
 8006b92:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006b94:	210c      	movs	r1, #12
 8006b96:	200e      	movs	r0, #14
 8006b98:	f008 fbe4 	bl	800f364 <calloc>
 8006b9c:	0003      	movs	r3, r0
 8006b9e:	001a      	movs	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d016      	beq.n	8006bda <CO_new+0x248>
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	33a8      	adds	r3, #168	@ 0xa8
 8006bb0:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006bb2:	2118      	movs	r1, #24
 8006bb4:	2007      	movs	r0, #7
 8006bb6:	f008 fbd5 	bl	800f364 <calloc>
 8006bba:	0003      	movs	r3, r0
 8006bbc:	001a      	movs	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	60da      	str	r2, [r3, #12]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <CO_new+0x248>
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	33a8      	adds	r3, #168	@ 0xa8
 8006bce:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <CO_new+0x256>
        CO_delete(co);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	0018      	movs	r0, r3
 8006be4:	f000 f80b 	bl	8006bfe <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <CO_new+0x262>
        *heapMemoryUsed = mem;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006bf4:	697b      	ldr	r3, [r7, #20]
}
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b007      	add	sp, #28
 8006bfc:	bd90      	pop	{r4, r7, pc}

08006bfe <CO_delete>:

void
CO_delete(CO_t* co) {
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d054      	beq.n	8006cb6 <CO_delete+0xb8>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	0018      	movs	r0, r3
 8006c12:	f001 f833 	bl	8007c7c <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f008 fbda 	bl	800f3d4 <free>
    CO_free(co->CANrx);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	0018      	movs	r0, r3
 8006c26:	f008 fbd5 	bl	800f3d4 <free>
    CO_free(co->CANmodule);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f008 fbd0 	bl	800f3d4 <free>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f008 fbcb 	bl	800f3d4 <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c42:	0018      	movs	r0, r3
 8006c44:	f008 fbc6 	bl	800f3d4 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f008 fbc1 	bl	800f3d4 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c56:	0018      	movs	r0, r3
 8006c58:	f008 fbbc 	bl	800f3d4 <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c60:	0018      	movs	r0, r3
 8006c62:	f008 fbb7 	bl	800f3d4 <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f008 fbb2 	bl	800f3d4 <free>
#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c74:	0018      	movs	r0, r3
 8006c76:	f008 fbad 	bl	800f3d4 <free>

    /* Emergency */
    CO_free(co->em);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f008 fba8 	bl	800f3d4 <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f008 fba3 	bl	800f3d4 <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f008 fb9e 	bl	800f3d4 <free>
    CO_free(co->HBcons);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f008 fb99 	bl	800f3d4 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f008 fb94 	bl	800f3d4 <free>

    /* CANopen object */
    CO_free(co);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f008 fb90 	bl	800f3d4 <free>
 8006cb4:	e000      	b.n	8006cb8 <CO_delete+0xba>
        return;
 8006cb6:	46c0      	nop			@ (mov r8, r8)
}
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	b002      	add	sp, #8
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 8006cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc0:	b08b      	sub	sp, #44	@ 0x2c
 8006cc2:	af04      	add	r7, sp, #16
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	1dbb      	adds	r3, r7, #6
 8006cca:	801a      	strh	r2, [r3, #0]
    CO_ReturnError_t err;

    if (co == NULL) {
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	425b      	negs	r3, r3
 8006cd6:	e01f      	b.n	8006d18 <CO_CANinit+0x5a>
    }

    co->CANmodule->CANnormal = false;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f000 fede 	bl	8007aa4 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6858      	ldr	r0, [r3, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689d      	ldr	r5, [r3, #8]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	2617      	movs	r6, #23
 8006cf6:	19bc      	adds	r4, r7, r6
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	1dba      	adds	r2, r7, #6
 8006cfc:	8812      	ldrh	r2, [r2, #0]
 8006cfe:	9202      	str	r2, [sp, #8]
 8006d00:	2207      	movs	r2, #7
 8006d02:	9201      	str	r2, [sp, #4]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	230e      	movs	r3, #14
 8006d08:	002a      	movs	r2, r5
 8006d0a:	f000 fef3 	bl	8007af4 <CO_CANmodule_init>
 8006d0e:	0003      	movs	r3, r0
 8006d10:	7023      	strb	r3, [r4, #0]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 8006d12:	19bb      	adds	r3, r7, r6
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b25b      	sxtb	r3, r3
}
 8006d18:	0018      	movs	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b007      	add	sp, #28
 8006d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d20 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 8006d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d22:	46c6      	mov	lr, r8
 8006d24:	b500      	push	{lr}
 8006d26:	b08c      	sub	sp, #48	@ 0x30
 8006d28:	af06      	add	r7, sp, #24
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <CO_LSSinit+0x1e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	425b      	negs	r3, r3
 8006d3c:	e024      	b.n	8006d88 <CO_LSSinit+0x68>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4698      	mov	r8, r3
 8006d4c:	2117      	movs	r1, #23
 8006d4e:	187c      	adds	r4, r7, r1
 8006d50:	687e      	ldr	r6, [r7, #4]
 8006d52:	683d      	ldr	r5, [r7, #0]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	4b0f      	ldr	r3, [pc, #60]	@ (8006d94 <CO_LSSinit+0x74>)
 8006d58:	469c      	mov	ip, r3
 8006d5a:	4663      	mov	r3, ip
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	2306      	movs	r3, #6
 8006d60:	469c      	mov	ip, r3
 8006d62:	4663      	mov	r3, ip
 8006d64:	9304      	str	r3, [sp, #16]
 8006d66:	4643      	mov	r3, r8
 8006d68:	9303      	str	r3, [sp, #12]
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d98 <CO_LSSinit+0x78>)
 8006d6c:	9302      	str	r3, [sp, #8]
 8006d6e:	230d      	movs	r3, #13
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	9200      	str	r2, [sp, #0]
 8006d74:	0033      	movs	r3, r6
 8006d76:	002a      	movs	r2, r5
 8006d78:	f7ff fb80 	bl	800647c <CO_LSSslave_init>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	7023      	strb	r3, [r4, #0]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8006d80:	2117      	movs	r1, #23
 8006d82:	187b      	adds	r3, r7, r1
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	b25b      	sxtb	r3, r3
}
 8006d88:	0018      	movs	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b006      	add	sp, #24
 8006d8e:	bc80      	pop	{r7}
 8006d90:	46b8      	mov	r8, r7
 8006d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d94:	000007e4 	.word	0x000007e4
 8006d98:	000007e5 	.word	0x000007e5

08006d9c <CO_CANopenInit>:
#endif /* (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE */

CO_ReturnError_t
CO_CANopenInit(CO_t* co, CO_NMT_t* NMT, CO_EM_t* em, OD_t* od, OD_entry_t* OD_statusBits, uint16_t NMTcontrol,
               uint16_t firstHBTime_ms, uint16_t SDOserverTimeoutTime_ms, uint16_t SDOclientTimeoutTime_ms,
               bool_t SDOclientBlockTransfer, uint8_t nodeId, uint32_t* errInfo) {
 8006d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d9e:	46ce      	mov	lr, r9
 8006da0:	4647      	mov	r7, r8
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b091      	sub	sp, #68	@ 0x44
 8006da6:	af0a      	add	r7, sp, #40	@ 0x28
 8006da8:	60f8      	str	r0, [r7, #12]
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	607a      	str	r2, [r7, #4]
 8006dae:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL))) {
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d102      	bne.n	8006dbc <CO_CANopenInit+0x20>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006db6:	2301      	movs	r3, #1
 8006db8:	425b      	negs	r3, r3
 8006dba:	e178      	b.n	80070ae <CO_CANopenInit+0x312>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d102      	bne.n	8006dc8 <CO_CANopenInit+0x2c>
        em = co->em;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8006dce:	2350      	movs	r3, #80	@ 0x50
 8006dd0:	18fb      	adds	r3, r7, r3
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2bff      	cmp	r3, #255	@ 0xff
 8006dd6:	d103      	bne.n	8006de0 <CO_CANopenInit+0x44>
        co->nodeIdUnconfigured = true;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e00c      	b.n	8006dfa <CO_CANopenInit+0x5e>
    } else
#endif
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8006de0:	2250      	movs	r2, #80	@ 0x50
 8006de2:	18bb      	adds	r3, r7, r2
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d004      	beq.n	8006df4 <CO_CANopenInit+0x58>
 8006dea:	18bb      	adds	r3, r7, r2
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	b25b      	sxtb	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	da02      	bge.n	8006dfa <CO_CANopenInit+0x5e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006df4:	2301      	movs	r3, #1
 8006df6:	425b      	negs	r3, r3
 8006df8:	e159      	b.n	80070ae <CO_CANopenInit+0x312>
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    if (CO_GET_CNT(LEDS) == 1U) {
        err = CO_LEDs_init(co->LEDs);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfe:	2511      	movs	r5, #17
 8006e00:	197c      	adds	r4, r7, r5
 8006e02:	0018      	movs	r0, r3
 8006e04:	f7fe ffa6 	bl	8005d54 <CO_LEDs_init>
 8006e08:	0003      	movs	r3, r0
 8006e0a:	7023      	strb	r3, [r4, #0]
        if (err != CO_ERROR_NO) {
 8006e0c:	197b      	adds	r3, r7, r5
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	b25b      	sxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <CO_CANopenInit+0x82>
            return err;
 8006e16:	197b      	adds	r3, r7, r5
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	b25b      	sxtb	r3, r3
 8006e1c:	e147      	b.n	80070ae <CO_CANopenInit+0x312>
        }
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <CO_CANopenInit+0x90>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8006e26:	2313      	movs	r3, #19
 8006e28:	425b      	negs	r3, r3
 8006e2a:	e140      	b.n	80070ae <CO_CANopenInit+0x312>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	69d8      	ldr	r0, [r3, #28]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685d      	ldr	r5, [r3, #4]
 8006e34:	4ba1      	ldr	r3, [pc, #644]	@ (80070bc <CO_CANopenInit+0x320>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	330c      	adds	r3, #12
 8006e3c:	001e      	movs	r6, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	469c      	mov	ip, r3
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
                         co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY), CO_GET_CO(TX_IDX_EM_PROD),
 8006e44:	4b9d      	ldr	r3, [pc, #628]	@ (80070bc <CO_CANopenInit+0x320>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006e4a:	336c      	adds	r3, #108	@ 0x6c
 8006e4c:	001a      	movs	r2, r3
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) != 0
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
#endif
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8006e4e:	4b9b      	ldr	r3, [pc, #620]	@ (80070bc <CO_CANopenInit+0x320>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006e54:	3318      	adds	r3, #24
 8006e56:	2111      	movs	r1, #17
 8006e58:	187c      	adds	r4, r7, r1
 8006e5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e5c:	9105      	str	r1, [sp, #20]
 8006e5e:	2150      	movs	r1, #80	@ 0x50
 8006e60:	1879      	adds	r1, r7, r1
 8006e62:	7809      	ldrb	r1, [r1, #0]
 8006e64:	9104      	str	r1, [sp, #16]
 8006e66:	9303      	str	r3, [sp, #12]
 8006e68:	2301      	movs	r3, #1
 8006e6a:	9302      	str	r3, [sp, #8]
 8006e6c:	9201      	str	r2, [sp, #4]
 8006e6e:	2311      	movs	r3, #17
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	4663      	mov	r3, ip
 8006e74:	0032      	movs	r2, r6
 8006e76:	0029      	movs	r1, r5
 8006e78:	f7f9 fb2e 	bl	80004d8 <CO_EM_init>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	7023      	strb	r3, [r4, #0]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
                         co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
                         nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8006e80:	2211      	movs	r2, #17
 8006e82:	18bb      	adds	r3, r7, r2
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	b25b      	sxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <CO_CANopenInit+0xf8>
            return err;
 8006e8c:	18bb      	adds	r3, r7, r2
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	b25b      	sxtb	r3, r3
 8006e92:	e10c      	b.n	80070ae <CO_CANopenInit+0x312>
        }
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        err = CO_NMT_init(co->NMT, OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME), em, nodeId, NMTcontrol, firstHBTime_ms,
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	691d      	ldr	r5, [r3, #16]
 8006e98:	4b88      	ldr	r3, [pc, #544]	@ (80070bc <CO_CANopenInit+0x320>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	3390      	adds	r3, #144	@ 0x90
 8006ea0:	001e      	movs	r6, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2150      	movs	r1, #80	@ 0x50
 8006eac:	1879      	adds	r1, r7, r1
 8006eae:	7809      	ldrb	r1, [r1, #0]
 8006eb0:	b289      	uxth	r1, r1
 8006eb2:	24e0      	movs	r4, #224	@ 0xe0
 8006eb4:	00e4      	lsls	r4, r4, #3
 8006eb6:	46a4      	mov	ip, r4
 8006eb8:	4461      	add	r1, ip
 8006eba:	b289      	uxth	r1, r1
 8006ebc:	2011      	movs	r0, #17
 8006ebe:	183c      	adds	r4, r7, r0
 8006ec0:	2050      	movs	r0, #80	@ 0x50
 8006ec2:	1838      	adds	r0, r7, r0
 8006ec4:	7800      	ldrb	r0, [r0, #0]
 8006ec6:	4680      	mov	r8, r0
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4684      	mov	ip, r0
 8006ecc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006ece:	9008      	str	r0, [sp, #32]
 8006ed0:	9107      	str	r1, [sp, #28]
 8006ed2:	2105      	movs	r1, #5
 8006ed4:	9106      	str	r1, [sp, #24]
 8006ed6:	9305      	str	r3, [sp, #20]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	2300      	movs	r3, #0
 8006ede:	9303      	str	r3, [sp, #12]
 8006ee0:	9202      	str	r2, [sp, #8]
 8006ee2:	2340      	movs	r3, #64	@ 0x40
 8006ee4:	18fb      	adds	r3, r7, r3
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	233c      	movs	r3, #60	@ 0x3c
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4643      	mov	r3, r8
 8006ef4:	4662      	mov	r2, ip
 8006ef6:	0031      	movs	r1, r6
 8006ef8:	0028      	movs	r0, r5
 8006efa:	f7fa fa75 	bl	80013e8 <CO_NMT_init>
 8006efe:	0003      	movs	r3, r0
 8006f00:	7023      	strb	r3, [r4, #0]
                          co->CANmodule, CO_GET_CO(RX_IDX_NMT_SLV), CO_CAN_ID_NMT_SERVICE,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
                          co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
                          co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8006f02:	2211      	movs	r2, #17
 8006f04:	18bb      	adds	r3, r7, r2
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	b25b      	sxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <CO_CANopenInit+0x17a>
            return err;
 8006f0e:	18bb      	adds	r3, r7, r2
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	b25b      	sxtb	r3, r3
 8006f14:	e0cb      	b.n	80070ae <CO_CANopenInit+0x312>
        }
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6958      	ldr	r0, [r3, #20]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	699e      	ldr	r6, [r3, #24]
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME), co->CANmodule, CO_GET_CO(RX_IDX_HB_CONS),
 8006f1e:	4b67      	ldr	r3, [pc, #412]	@ (80070bc <CO_CANopenInit+0x320>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8006f24:	3384      	adds	r3, #132	@ 0x84
 8006f26:	001a      	movs	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2111      	movs	r1, #17
 8006f2e:	187c      	adds	r4, r7, r1
 8006f30:	687d      	ldr	r5, [r7, #4]
 8006f32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f34:	9103      	str	r1, [sp, #12]
 8006f36:	2105      	movs	r1, #5
 8006f38:	9102      	str	r1, [sp, #8]
 8006f3a:	9301      	str	r3, [sp, #4]
 8006f3c:	9200      	str	r2, [sp, #0]
 8006f3e:	2308      	movs	r3, #8
 8006f40:	0032      	movs	r2, r6
 8006f42:	0029      	movs	r1, r5
 8006f44:	f7f9 fed4 	bl	8000cf0 <CO_HBconsumer_init>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	7023      	strb	r3, [r4, #0]
                                 errInfo);
        if (err != CO_ERROR_NO) {
 8006f4c:	2211      	movs	r2, #17
 8006f4e:	18bb      	adds	r3, r7, r2
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	b25b      	sxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <CO_CANopenInit+0x1c4>
            return err;
 8006f58:	18bb      	adds	r3, r7, r2
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b25b      	sxtb	r3, r3
 8006f5e:	e0a6      	b.n	80070ae <CO_CANopenInit+0x312>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U) {
        OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8006f60:	2300      	movs	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006f64:	2312      	movs	r3, #18
 8006f66:	18fb      	adds	r3, r7, r3
 8006f68:	2200      	movs	r2, #0
 8006f6a:	801a      	strh	r2, [r3, #0]
 8006f6c:	e042      	b.n	8006ff4 <CO_CANopenInit+0x258>
            err = CO_SDOserver_init(&co->SDOserver[i], od, SDOsrvPar, nodeId, SDOserverTimeoutTime_ms, co->CANmodule,
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f72:	2012      	movs	r0, #18
 8006f74:	183b      	adds	r3, r7, r0
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	21ac      	movs	r1, #172	@ 0xac
 8006f7a:	434b      	muls	r3, r1
 8006f7c:	18d6      	adds	r6, r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	183b      	adds	r3, r7, r0
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	3304      	adds	r3, #4
 8006f88:	b299      	uxth	r1, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	1838      	adds	r0, r7, r0
 8006f90:	8800      	ldrh	r0, [r0, #0]
 8006f92:	3004      	adds	r0, #4
 8006f94:	b280      	uxth	r0, r0
 8006f96:	2411      	movs	r4, #17
 8006f98:	193c      	adds	r4, r7, r4
 8006f9a:	2550      	movs	r5, #80	@ 0x50
 8006f9c:	197d      	adds	r5, r7, r5
 8006f9e:	782d      	ldrb	r5, [r5, #0]
 8006fa0:	46a9      	mov	r9, r5
 8006fa2:	697d      	ldr	r5, [r7, #20]
 8006fa4:	46a8      	mov	r8, r5
 8006fa6:	683d      	ldr	r5, [r7, #0]
 8006fa8:	46ac      	mov	ip, r5
 8006faa:	6d7d      	ldr	r5, [r7, #84]	@ 0x54
 8006fac:	9505      	str	r5, [sp, #20]
 8006fae:	9004      	str	r0, [sp, #16]
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	9102      	str	r1, [sp, #8]
 8006fb4:	9201      	str	r2, [sp, #4]
 8006fb6:	2344      	movs	r3, #68	@ 0x44
 8006fb8:	18fb      	adds	r3, r7, r3
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	4661      	mov	r1, ip
 8006fc4:	0030      	movs	r0, r6
 8006fc6:	f7fd f807 	bl	8003fd8 <CO_SDOserver_init>
 8006fca:	0003      	movs	r3, r0
 8006fcc:	7023      	strb	r3, [r4, #0]
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err != CO_ERROR_NO) {
 8006fce:	2211      	movs	r2, #17
 8006fd0:	18bb      	adds	r3, r7, r2
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	b25b      	sxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <CO_CANopenInit+0x246>
                return err;
 8006fda:	18bb      	adds	r3, r7, r2
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	b25b      	sxtb	r3, r3
 8006fe0:	e065      	b.n	80070ae <CO_CANopenInit+0x312>
            }
            SDOsrvPar++;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006fe8:	2112      	movs	r1, #18
 8006fea:	187b      	adds	r3, r7, r1
 8006fec:	881a      	ldrh	r2, [r3, #0]
 8006fee:	187b      	adds	r3, r7, r1
 8006ff0:	3201      	adds	r2, #1
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	2312      	movs	r3, #18
 8006ff6:	18fb      	adds	r3, r7, r3
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0b7      	beq.n	8006f6e <CO_CANopenInit+0x1d2>
    }
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        err = CO_TIME_init(co->TIME, OD_GET(H1012, OD_H1012_COBID_TIME), co->CANmodule, CO_GET_CO(RX_IDX_TIME),
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007002:	4b2e      	ldr	r3, [pc, #184]	@ (80070bc <CO_CANopenInit+0x320>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	3360      	adds	r3, #96	@ 0x60
 800700a:	0019      	movs	r1, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	2511      	movs	r5, #17
 8007012:	197c      	adds	r4, r7, r5
 8007014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	2302      	movs	r3, #2
 800701a:	f7fe fd91 	bl	8005b40 <CO_TIME_init>
 800701e:	0003      	movs	r3, r0
 8007020:	7023      	strb	r3, [r4, #0]
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8007022:	197b      	adds	r3, r7, r5
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	b25b      	sxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <CO_CANopenInit+0x298>
            return err;
 800702c:	197b      	adds	r3, r7, r5
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	b25b      	sxtb	r3, r3
 8007032:	e03c      	b.n	80070ae <CO_CANopenInit+0x312>
    }
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    if (CO_GET_CNT(SYNC) == 1U) {
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8007038:	4b20      	ldr	r3, [pc, #128]	@ (80070bc <CO_CANopenInit+0x320>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2224      	movs	r2, #36	@ 0x24
 8007040:	4690      	mov	r8, r2
 8007042:	4498      	add	r8, r3
 8007044:	4b1d      	ldr	r3, [pc, #116]	@ (80070bc <CO_CANopenInit+0x320>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2230      	movs	r2, #48	@ 0x30
 800704c:	4691      	mov	r9, r2
 800704e:	4499      	add	r9, r3
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8007050:	4b1a      	ldr	r3, [pc, #104]	@ (80070bc <CO_CANopenInit+0x320>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8007056:	333c      	adds	r3, #60	@ 0x3c
 8007058:	001a      	movs	r2, r3
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 800705a:	4b18      	ldr	r3, [pc, #96]	@ (80070bc <CO_CANopenInit+0x320>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8007060:	33a8      	adds	r3, #168	@ 0xa8
 8007062:	0019      	movs	r1, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6858      	ldr	r0, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2411      	movs	r4, #17
 800706e:	193c      	adds	r4, r7, r4
 8007070:	687d      	ldr	r5, [r7, #4]
 8007072:	46ac      	mov	ip, r5
 8007074:	6d7d      	ldr	r5, [r7, #84]	@ 0x54
 8007076:	9506      	str	r5, [sp, #24]
 8007078:	2500      	movs	r5, #0
 800707a:	9505      	str	r5, [sp, #20]
 800707c:	9304      	str	r3, [sp, #16]
 800707e:	2301      	movs	r3, #1
 8007080:	9303      	str	r3, [sp, #12]
 8007082:	9002      	str	r0, [sp, #8]
 8007084:	9101      	str	r1, [sp, #4]
 8007086:	9200      	str	r2, [sp, #0]
 8007088:	464b      	mov	r3, r9
 800708a:	4642      	mov	r2, r8
 800708c:	4661      	mov	r1, ip
 800708e:	0030      	movs	r0, r6
 8007090:	f7fe fa34 	bl	80054fc <CO_SYNC_init>
 8007094:	0003      	movs	r3, r0
 8007096:	7023      	strb	r3, [r4, #0]
                           co->CANmodule, CO_GET_CO(RX_IDX_SYNC),
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8007098:	2211      	movs	r2, #17
 800709a:	18bb      	adds	r3, r7, r2
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b25b      	sxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <CO_CANopenInit+0x310>
            return err;
 80070a4:	18bb      	adds	r3, r7, r2
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	b25b      	sxtb	r3, r3
 80070aa:	e000      	b.n	80070ae <CO_CANopenInit+0x312>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	0018      	movs	r0, r3
 80070b0:	46bd      	mov	sp, r7
 80070b2:	b007      	add	sp, #28
 80070b4:	bcc0      	pop	{r6, r7}
 80070b6:	46b9      	mov	r9, r7
 80070b8:	46b0      	mov	r8, r6
 80070ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070bc:	20000294 	.word	0x20000294

080070c0 <CO_CANopenInitPDO>:

CO_ReturnError_t
CO_CANopenInitPDO(CO_t* co, CO_EM_t* em, OD_t* od, uint8_t nodeId, uint32_t* errInfo) {
 80070c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070c2:	b093      	sub	sp, #76	@ 0x4c
 80070c4:	af06      	add	r7, sp, #24
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	001a      	movs	r2, r3
 80070ce:	1cfb      	adds	r3, r7, #3
 80070d0:	701a      	strb	r2, [r3, #0]
    if (co == NULL) {
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <CO_CANopenInitPDO+0x1e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80070d8:	2301      	movs	r3, #1
 80070da:	425b      	negs	r3, r3
 80070dc:	e0eb      	b.n	80072b6 <CO_CANopenInitPDO+0x1f6>
    }
    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured) {
 80070de:	1cfb      	adds	r3, r7, #3
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d008      	beq.n	80070f8 <CO_CANopenInitPDO+0x38>
 80070e6:	1cfb      	adds	r3, r7, #3
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b25b      	sxtb	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	db03      	blt.n	80070f8 <CO_CANopenInitPDO+0x38>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <CO_CANopenInitPDO+0x4c>
        return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <CO_CANopenInitPDO+0x46>
 8007100:	2313      	movs	r3, #19
 8007102:	425b      	negs	r3, r3
 8007104:	e0d7      	b.n	80072b6 <CO_CANopenInitPDO+0x1f6>
 8007106:	2301      	movs	r3, #1
 8007108:	425b      	negs	r3, r3
 800710a:	e0d4      	b.n	80072b6 <CO_CANopenInitPDO+0x1f6>
    }

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    if (CO_GET_CNT(RPDO) > 0U) {
        OD_entry_t* RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 800710c:	4b6c      	ldr	r3, [pc, #432]	@ (80072c0 <CO_CANopenInitPDO+0x200>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	33b4      	adds	r3, #180	@ 0xb4
 8007114:	62fb      	str	r3, [r7, #44]	@ 0x2c
        OD_entry_t* RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8007116:	4b6a      	ldr	r3, [pc, #424]	@ (80072c0 <CO_CANopenInitPDO+0x200>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	33c0      	adds	r3, #192	@ 0xc0
 800711e:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007120:	2326      	movs	r3, #38	@ 0x26
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	2200      	movs	r2, #0
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	e053      	b.n	80071d2 <CO_CANopenInitPDO+0x112>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800712a:	2024      	movs	r0, #36	@ 0x24
 800712c:	183b      	adds	r3, r7, r0
 800712e:	2200      	movs	r2, #0
 8007130:	801a      	strh	r2, [r3, #0]
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 8007132:	2226      	movs	r2, #38	@ 0x26
 8007134:	18bb      	adds	r3, r7, r2
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	2b03      	cmp	r3, #3
 800713a:	d80b      	bhi.n	8007154 <CO_CANopenInitPDO+0x94>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_RPDO_1 + (i * 0x100U)) + nodeId);
 800713c:	18bb      	adds	r3, r7, r2
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	3302      	adds	r3, #2
 8007142:	b29b      	uxth	r3, r3
 8007144:	021b      	lsls	r3, r3, #8
 8007146:	b299      	uxth	r1, r3
 8007148:	1cfb      	adds	r3, r7, #3
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	b29a      	uxth	r2, r3
 800714e:	183b      	adds	r3, r7, r0
 8007150:	188a      	adds	r2, r1, r2
 8007152:	801a      	strh	r2, [r3, #0]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i], od, em,
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007158:	2426      	movs	r4, #38	@ 0x26
 800715a:	193b      	adds	r3, r7, r4
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	21ca      	movs	r1, #202	@ 0xca
 8007160:	0049      	lsls	r1, r1, #1
 8007162:	434b      	muls	r3, r1
 8007164:	18d0      	adds	r0, r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716a:	469c      	mov	ip, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	193a      	adds	r2, r7, r4
 8007172:	8812      	ldrh	r2, [r2, #0]
 8007174:	3203      	adds	r2, #3
 8007176:	b292      	uxth	r2, r2
 8007178:	2116      	movs	r1, #22
 800717a:	187c      	adds	r4, r7, r1
 800717c:	68be      	ldr	r6, [r7, #8]
 800717e:	687d      	ldr	r5, [r7, #4]
 8007180:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007182:	9105      	str	r1, [sp, #20]
 8007184:	9204      	str	r2, [sp, #16]
 8007186:	9303      	str	r3, [sp, #12]
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	9302      	str	r3, [sp, #8]
 800718c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	2324      	movs	r3, #36	@ 0x24
 8007192:	18fb      	adds	r3, r7, r3
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	4663      	mov	r3, ip
 800719a:	0032      	movs	r2, r6
 800719c:	0029      	movs	r1, r5
 800719e:	f7fb fc1f 	bl	80029e0 <CO_RPDO_init>
 80071a2:	0003      	movs	r3, r0
 80071a4:	7023      	strb	r3, [r4, #0]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, RPDOcomm, RPDOmap, co->CANmodule, CO_GET_CO(RX_IDX_RPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 80071a6:	2216      	movs	r2, #22
 80071a8:	18bb      	adds	r3, r7, r2
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b25b      	sxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <CO_CANopenInitPDO+0xfa>
                return err;
 80071b2:	18bb      	adds	r3, r7, r2
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	b25b      	sxtb	r3, r3
 80071b8:	e07d      	b.n	80072b6 <CO_CANopenInitPDO+0x1f6>
            }
            RPDOcomm++;
 80071ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071bc:	330c      	adds	r3, #12
 80071be:	62fb      	str	r3, [r7, #44]	@ 0x2c
            RPDOmap++;
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	330c      	adds	r3, #12
 80071c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80071c6:	2126      	movs	r1, #38	@ 0x26
 80071c8:	187b      	adds	r3, r7, r1
 80071ca:	881a      	ldrh	r2, [r3, #0]
 80071cc:	187b      	adds	r3, r7, r1
 80071ce:	3201      	adds	r2, #1
 80071d0:	801a      	strh	r2, [r3, #0]
 80071d2:	2326      	movs	r3, #38	@ 0x26
 80071d4:	18fb      	adds	r3, r7, r3
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0a6      	beq.n	800712a <CO_CANopenInitPDO+0x6a>
    }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U) {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 80071dc:	4b38      	ldr	r3, [pc, #224]	@ (80072c0 <CO_CANopenInitPDO+0x200>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	33cc      	adds	r3, #204	@ 0xcc
 80071e4:	623b      	str	r3, [r7, #32]
        OD_entry_t* TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 80071e6:	4b36      	ldr	r3, [pc, #216]	@ (80072c0 <CO_CANopenInitPDO+0x200>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	33e4      	adds	r3, #228	@ 0xe4
 80071ee:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80071f0:	231a      	movs	r3, #26
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	2200      	movs	r2, #0
 80071f6:	801a      	strh	r2, [r3, #0]
 80071f8:	e057      	b.n	80072aa <CO_CANopenInitPDO+0x1ea>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 80071fa:	2118      	movs	r1, #24
 80071fc:	187b      	adds	r3, r7, r1
 80071fe:	2200      	movs	r2, #0
 8007200:	801a      	strh	r2, [r3, #0]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8007202:	221a      	movs	r2, #26
 8007204:	18bb      	adds	r3, r7, r2
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d80c      	bhi.n	8007226 <CO_CANopenInitPDO+0x166>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 800720c:	18bb      	adds	r3, r7, r2
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	b29a      	uxth	r2, r3
 8007214:	1cfb      	adds	r3, r7, #3
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	18d3      	adds	r3, r2, r3
 800721c:	b29a      	uxth	r2, r3
 800721e:	187b      	adds	r3, r7, r1
 8007220:	3281      	adds	r2, #129	@ 0x81
 8007222:	32ff      	adds	r2, #255	@ 0xff
 8007224:	801a      	strh	r2, [r3, #0]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i], od, em,
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800722a:	241a      	movs	r4, #26
 800722c:	193b      	adds	r3, r7, r4
 800722e:	881a      	ldrh	r2, [r3, #0]
 8007230:	0013      	movs	r3, r2
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	189b      	adds	r3, r3, r2
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	189b      	adds	r3, r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	18c8      	adds	r0, r1, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007242:	469c      	mov	ip, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	193a      	adds	r2, r7, r4
 800724a:	8812      	ldrh	r2, [r2, #0]
 800724c:	3202      	adds	r2, #2
 800724e:	b292      	uxth	r2, r2
 8007250:	2117      	movs	r1, #23
 8007252:	187c      	adds	r4, r7, r1
 8007254:	68be      	ldr	r6, [r7, #8]
 8007256:	687d      	ldr	r5, [r7, #4]
 8007258:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800725a:	9105      	str	r1, [sp, #20]
 800725c:	9204      	str	r2, [sp, #16]
 800725e:	9303      	str	r3, [sp, #12]
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	9302      	str	r3, [sp, #8]
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	9301      	str	r3, [sp, #4]
 8007268:	2318      	movs	r3, #24
 800726a:	18fb      	adds	r3, r7, r3
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	4663      	mov	r3, ip
 8007272:	0032      	movs	r2, r6
 8007274:	0029      	movs	r1, r5
 8007276:	f7fc f849 	bl	800330c <CO_TPDO_init>
 800727a:	0003      	movs	r3, r0
 800727c:	7023      	strb	r3, [r4, #0]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, TPDOcomm, TPDOmap, co->CANmodule, CO_GET_CO(TX_IDX_TPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 800727e:	2217      	movs	r2, #23
 8007280:	18bb      	adds	r3, r7, r2
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b25b      	sxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <CO_CANopenInitPDO+0x1d2>
                return err;
 800728a:	18bb      	adds	r3, r7, r2
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	b25b      	sxtb	r3, r3
 8007290:	e011      	b.n	80072b6 <CO_CANopenInitPDO+0x1f6>
            }
            TPDOcomm++;
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	330c      	adds	r3, #12
 8007296:	623b      	str	r3, [r7, #32]
            TPDOmap++;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	330c      	adds	r3, #12
 800729c:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 800729e:	211a      	movs	r1, #26
 80072a0:	187b      	adds	r3, r7, r1
 80072a2:	881a      	ldrh	r2, [r3, #0]
 80072a4:	187b      	adds	r3, r7, r1
 80072a6:	3201      	adds	r2, #1
 80072a8:	801a      	strh	r2, [r3, #0]
 80072aa:	231a      	movs	r3, #26
 80072ac:	18fb      	adds	r3, r7, r3
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d9a2      	bls.n	80071fa <CO_CANopenInitPDO+0x13a>
        }
    }
#endif

    return CO_ERROR_NO;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	0018      	movs	r0, r3
 80072b8:	46bd      	mov	sp, r7
 80072ba:	b00d      	add	sp, #52	@ 0x34
 80072bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072be:	46c0      	nop			@ (mov r8, r8)
 80072c0:	20000294 	.word	0x20000294

080072c4 <CO_process>:
    return CO_ERROR_NO;
}
#endif

CO_NMT_reset_cmd_t
CO_process(CO_t* co, bool_t enableGateway, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80072c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c6:	46d6      	mov	lr, sl
 80072c8:	464f      	mov	r7, r9
 80072ca:	4646      	mov	r6, r8
 80072cc:	b5c0      	push	{r6, r7, lr}
 80072ce:	b096      	sub	sp, #88	@ 0x58
 80072d0:	af08      	add	r7, sp, #32
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80072da:	2337      	movs	r3, #55	@ 0x37
 80072dc:	18fb      	adds	r3, r7, r3
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f7ff fb34 	bl	8006954 <CO_NMT_getInternalState>
 80072ec:	0003      	movs	r3, r0
 80072ee:	001a      	movs	r2, r3
 80072f0:	2113      	movs	r1, #19
 80072f2:	187b      	adds	r3, r7, r1
 80072f4:	701a      	strb	r2, [r3, #0]
    bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 80072f6:	000a      	movs	r2, r1
 80072f8:	18bb      	adds	r3, r7, r2
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b25b      	sxtb	r3, r3
 80072fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007300:	d004      	beq.n	800730c <CO_process+0x48>
 8007302:	18bb      	adds	r3, r7, r2
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	b25b      	sxtb	r3, r3
 8007308:	2b05      	cmp	r3, #5
 800730a:	d101      	bne.n	8007310 <CO_process+0x4c>
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <CO_process+0x4e>
 8007310:	2300      	movs	r3, #0
 8007312:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	0018      	movs	r0, r3
 800731a:	f000 fea5 	bl	8008068 <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_process(co->LSSslave)) {
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007322:	0018      	movs	r0, r3
 8007324:	f7ff f938 	bl	8006598 <CO_LSSslave_process>
 8007328:	1e03      	subs	r3, r0, #0
 800732a:	d003      	beq.n	8007334 <CO_process+0x70>
            reset = CO_RESET_COMM;
 800732c:	2337      	movs	r3, #55	@ 0x37
 800732e:	18fb      	adds	r3, r7, r3
 8007330:	2201      	movs	r2, #1
 8007332:	701a      	strb	r2, [r3, #0]
        }
    }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    bool_t unc = co->nodeIdUnconfigured;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	2322      	movs	r3, #34	@ 0x22
 8007340:	18fb      	adds	r3, r7, r3
 8007342:	8a52      	ldrh	r2, [r2, #18]
 8007344:	801a      	strh	r2, [r3, #0]
    bool_t LSSslave_configuration = false;
 8007346:	2300      	movs	r3, #0
 8007348:	633b      	str	r3, [r7, #48]	@ 0x30
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734e:	0018      	movs	r0, r3
 8007350:	f7ff fb10 	bl	8006974 <CO_LSSslave_getState>
 8007354:	0003      	movs	r3, r0
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <CO_process+0x9a>
            LSSslave_configuration = true;
 800735a:	2301      	movs	r3, #1
 800735c:	633b      	str	r3, [r7, #48]	@ 0x30
#ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
#endif

    if (CO_GET_CNT(LEDS) == 1U) {
        bool_t ErrSync = CO_isError(co->em, CO_EM_SYNC_TIME_OUT);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	2118      	movs	r1, #24
 8007364:	0018      	movs	r0, r3
 8007366:	f7ff fab3 	bl	80068d0 <CO_isError>
 800736a:	0003      	movs	r3, r0
 800736c:	61fb      	str	r3, [r7, #28]
        bool_t ErrHbCons = CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	211b      	movs	r1, #27
 8007374:	0018      	movs	r0, r3
 8007376:	f7ff faab 	bl	80068d0 <CO_isError>
 800737a:	0003      	movs	r3, r0
 800737c:	61bb      	str	r3, [r7, #24]
        bool_t ErrHbConsRemote = CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	211c      	movs	r1, #28
 8007384:	0018      	movs	r0, r3
 8007386:	f7ff faa3 	bl	80068d0 <CO_isError>
 800738a:	0003      	movs	r3, r0
 800738c:	617b      	str	r3, [r7, #20]
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <CO_process+0xde>
 8007398:	2313      	movs	r3, #19
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	2500      	movs	r5, #0
 800739e:	575d      	ldrsb	r5, [r3, r5]
 80073a0:	e000      	b.n	80073a4 <CO_process+0xe0>
 80073a2:	2500      	movs	r5, #0
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 80073a4:	2122      	movs	r1, #34	@ 0x22
 80073a6:	187b      	adds	r3, r7, r1
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	2204      	movs	r2, #4
 80073ac:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 80073ae:	1e5a      	subs	r2, r3, #1
 80073b0:	4193      	sbcs	r3, r2
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	4698      	mov	r8, r3
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 80073b6:	187b      	adds	r3, r7, r1
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	4a4b      	ldr	r2, [pc, #300]	@ (80074e8 <CO_process+0x224>)
 80073bc:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 80073be:	1e5a      	subs	r2, r3, #1
 80073c0:	4193      	sbcs	r3, r2
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	4699      	mov	r9, r3
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <CO_process+0x10c>
 80073cc:	69fc      	ldr	r4, [r7, #28]
 80073ce:	e000      	b.n	80073d2 <CO_process+0x10e>
 80073d0:	2400      	movs	r4, #0
                        false, /* RPDO event timer timeout */
                        unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d107      	bne.n	80073e8 <CO_process+0x124>
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d102      	bne.n	80073e4 <CO_process+0x120>
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <CO_process+0x124>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e000      	b.n	80073ea <CO_process+0x126>
 80073e8:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 80073ea:	469a      	mov	sl, r3
                        CO_getErrorRegister(co->em) != 0U, CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS, timerNext_us);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	0018      	movs	r0, r3
 80073f2:	f7ff fa9b 	bl	800692c <CO_getErrorRegister>
 80073f6:	0003      	movs	r3, r0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 80073f8:	1e5a      	subs	r2, r3, #1
 80073fa:	4193      	sbcs	r3, r2
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	0018      	movs	r0, r3
 8007400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	9307      	str	r3, [sp, #28]
 8007408:	2300      	movs	r3, #0
 800740a:	9306      	str	r3, [sp, #24]
 800740c:	9005      	str	r0, [sp, #20]
 800740e:	4653      	mov	r3, sl
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	9403      	str	r4, [sp, #12]
 8007414:	2300      	movs	r3, #0
 8007416:	9302      	str	r3, [sp, #8]
 8007418:	464b      	mov	r3, r9
 800741a:	9301      	str	r3, [sp, #4]
 800741c:	4643      	mov	r3, r8
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	0013      	movs	r3, r2
 8007422:	002a      	movs	r2, r5
 8007424:	0030      	movs	r0, r6
 8007426:	f7fe fcb1 	bl	8005d8c <CO_LEDs_process>
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <CO_process+0x176>
        return reset;
 8007432:	2337      	movs	r3, #55	@ 0x37
 8007434:	18fb      	adds	r3, r7, r3
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	e04d      	b.n	80074d6 <CO_process+0x212>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	69d8      	ldr	r0, [r3, #28]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007444:	f7f9 f948 	bl	80006d8 <CO_EM_process>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6918      	ldr	r0, [r3, #16]
 800744c:	2337      	movs	r3, #55	@ 0x37
 800744e:	18fc      	adds	r4, r7, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	2513      	movs	r5, #19
 8007456:	1979      	adds	r1, r7, r5
 8007458:	f7fa f8b8 	bl	80015cc <CO_NMT_process>
 800745c:	0003      	movs	r3, r0
 800745e:	7023      	strb	r3, [r4, #0]
    }
    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8007460:	197b      	adds	r3, r7, r5
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b25b      	sxtb	r3, r3
 8007466:	2b7f      	cmp	r3, #127	@ 0x7f
 8007468:	d004      	beq.n	8007474 <CO_process+0x1b0>
 800746a:	197b      	adds	r3, r7, r5
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b25b      	sxtb	r3, r3
 8007470:	2b05      	cmp	r3, #5
 8007472:	d101      	bne.n	8007478 <CO_process+0x1b4>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <CO_process+0x1b6>
 8007478:	2300      	movs	r3, #0
 800747a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800747c:	232f      	movs	r3, #47	@ 0x2f
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	e011      	b.n	80074aa <CO_process+0x1e6>
        (void)CO_SDOserver_process(&co->SDOserver[i], NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800748a:	242f      	movs	r4, #47	@ 0x2f
 800748c:	193b      	adds	r3, r7, r4
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	21ac      	movs	r1, #172	@ 0xac
 8007492:	434b      	muls	r3, r1
 8007494:	18d0      	adds	r0, r2, r3
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800749c:	f7fd f8ec 	bl	8004678 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80074a0:	193b      	adds	r3, r7, r4
 80074a2:	781a      	ldrb	r2, [r3, #0]
 80074a4:	193b      	adds	r3, r7, r4
 80074a6:	3201      	adds	r2, #1
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	232f      	movs	r3, #47	@ 0x2f
 80074ac:	18fb      	adds	r3, r7, r3
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0e8      	beq.n	8007486 <CO_process+0x1c2>
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6958      	ldr	r0, [r3, #20]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074be:	f7f9 fdb5 	bl	800102c <CO_HBconsumer_process>
    CO_nodeGuardingMaster_process(co->NGmaster, timeDifference_us, timerNext_us);
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ca:	0018      	movs	r0, r3
 80074cc:	f7fe fbca 	bl	8005c64 <CO_TIME_process>
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
    }
#endif

    return reset;
 80074d0:	2337      	movs	r3, #55	@ 0x37
 80074d2:	18fb      	adds	r3, r7, r3
 80074d4:	781b      	ldrb	r3, [r3, #0]
}
 80074d6:	0018      	movs	r0, r3
 80074d8:	46bd      	mov	sp, r7
 80074da:	b00e      	add	sp, #56	@ 0x38
 80074dc:	bce0      	pop	{r5, r6, r7}
 80074de:	46ba      	mov	sl, r7
 80074e0:	46b1      	mov	r9, r6
 80074e2:	46a8      	mov	r8, r5
 80074e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074e6:	46c0      	nop			@ (mov r8, r8)
 80074e8:	00000303 	.word	0x00000303

080074ec <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80074ec:	b5b0      	push	{r4, r5, r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80074f8:	2300      	movs	r3, #0
 80074fa:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d137      	bne.n	8007574 <CO_process_SYNC+0x88>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	251b      	movs	r5, #27
 800750a:	197c      	adds	r4, r7, r5
 800750c:	0018      	movs	r0, r3
 800750e:	f7ff fa21 	bl	8006954 <CO_NMT_getInternalState>
 8007512:	0003      	movs	r3, r0
 8007514:	7023      	strb	r3, [r4, #0]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8007516:	197b      	adds	r3, r7, r5
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	b25b      	sxtb	r3, r3
 800751c:	2b7f      	cmp	r3, #127	@ 0x7f
 800751e:	d004      	beq.n	800752a <CO_process_SYNC+0x3e>
 8007520:	197b      	adds	r3, r7, r5
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	b25b      	sxtb	r3, r3
 8007526:	2b05      	cmp	r3, #5
 8007528:	d101      	bne.n	800752e <CO_process_SYNC+0x42>
 800752a:	2301      	movs	r3, #1
 800752c:	e000      	b.n	8007530 <CO_process_SYNC+0x44>
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007536:	2513      	movs	r5, #19
 8007538:	197c      	adds	r4, r7, r5
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	6979      	ldr	r1, [r7, #20]
 8007540:	f7fe f930 	bl	80057a4 <CO_SYNC_process>
 8007544:	0003      	movs	r3, r0
 8007546:	7023      	strb	r3, [r4, #0]
                                                        timerNext_us);

        switch (sync_process) {
 8007548:	197b      	adds	r3, r7, r5
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d008      	beq.n	8007562 <CO_process_SYNC+0x76>
 8007550:	dc0d      	bgt.n	800756e <CO_process_SYNC+0x82>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00d      	beq.n	8007572 <CO_process_SYNC+0x86>
 8007556:	2b01      	cmp	r3, #1
 8007558:	d000      	beq.n	800755c <CO_process_SYNC+0x70>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 800755a:	e008      	b.n	800756e <CO_process_SYNC+0x82>
            case CO_SYNC_RX_TX: syncWas = true; break;
 800755c:	2301      	movs	r3, #1
 800755e:	61fb      	str	r3, [r7, #28]
 8007560:	e008      	b.n	8007574 <CO_process_SYNC+0x88>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	0018      	movs	r0, r3
 8007568:	f000 fd0e 	bl	8007f88 <CO_CANclearPendingSyncPDOs>
 800756c:	e002      	b.n	8007574 <CO_process_SYNC+0x88>
                break;
 800756e:	46c0      	nop			@ (mov r8, r8)
 8007570:	e000      	b.n	8007574 <CO_process_SYNC+0x88>
            case CO_SYNC_NONE: break;
 8007572:	46c0      	nop			@ (mov r8, r8)
        }
    }

    return syncWas;
 8007574:	69fb      	ldr	r3, [r7, #28]
}
 8007576:	0018      	movs	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	b008      	add	sp, #32
 800757c:	bdb0      	pop	{r4, r5, r7, pc}

0800757e <CO_process_RPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
void
CO_process_RPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 800757e:	b5b0      	push	{r4, r5, r7, lr}
 8007580:	b088      	sub	sp, #32
 8007582:	af02      	add	r7, sp, #8
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
 800758a:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d12b      	bne.n	80075ec <CO_process_RPDO+0x6e>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	0018      	movs	r0, r3
 800759a:	f7ff f9db 	bl	8006954 <CO_NMT_getInternalState>
 800759e:	0003      	movs	r3, r0
 80075a0:	3b05      	subs	r3, #5
 80075a2:	425a      	negs	r2, r3
 80075a4:	4153      	adcs	r3, r2
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80075aa:	2316      	movs	r3, #22
 80075ac:	18fb      	adds	r3, r7, r3
 80075ae:	2200      	movs	r2, #0
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	e015      	b.n	80075e0 <CO_process_RPDO+0x62>
        CO_RPDO_process(&co->RPDO[i],
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075b8:	2516      	movs	r5, #22
 80075ba:	197b      	adds	r3, r7, r5
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	21ca      	movs	r1, #202	@ 0xca
 80075c0:	0049      	lsls	r1, r1, #1
 80075c2:	434b      	muls	r3, r1
 80075c4:	18d0      	adds	r0, r2, r3
 80075c6:	693c      	ldr	r4, [r7, #16]
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	0023      	movs	r3, r4
 80075d2:	f7fb fb8f 	bl	8002cf4 <CO_RPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80075d6:	197b      	adds	r3, r7, r5
 80075d8:	881a      	ldrh	r2, [r3, #0]
 80075da:	197b      	adds	r3, r7, r5
 80075dc:	3201      	adds	r2, #1
 80075de:	801a      	strh	r2, [r3, #0]
 80075e0:	2316      	movs	r3, #22
 80075e2:	18fb      	adds	r3, r7, r3
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0e4      	beq.n	80075b4 <CO_process_RPDO+0x36>
 80075ea:	e000      	b.n	80075ee <CO_process_RPDO+0x70>
        return;
 80075ec:	46c0      	nop			@ (mov r8, r8)
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 80075ee:	46bd      	mov	sp, r7
 80075f0:	b006      	add	sp, #24
 80075f2:	bdb0      	pop	{r4, r5, r7, pc}

080075f4 <CO_process_TPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80075f4:	b5b0      	push	{r4, r5, r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d12e      	bne.n	8007668 <CO_process_TPDO+0x74>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	0018      	movs	r0, r3
 8007610:	f7ff f9a0 	bl	8006954 <CO_NMT_getInternalState>
 8007614:	0003      	movs	r3, r0
 8007616:	3b05      	subs	r3, #5
 8007618:	425a      	negs	r2, r3
 800761a:	4153      	adcs	r3, r2
 800761c:	b2db      	uxtb	r3, r3
 800761e:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007620:	2316      	movs	r3, #22
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	2200      	movs	r2, #0
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	e018      	b.n	800765c <CO_process_TPDO+0x68>
        CO_TPDO_process(&co->TPDO[i],
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800762e:	2516      	movs	r5, #22
 8007630:	197b      	adds	r3, r7, r5
 8007632:	881a      	ldrh	r2, [r3, #0]
 8007634:	0013      	movs	r3, r2
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	189b      	adds	r3, r3, r2
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	189b      	adds	r3, r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	18c8      	adds	r0, r1, r3
 8007642:	693c      	ldr	r4, [r7, #16]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	0023      	movs	r3, r4
 800764e:	f7fc f8f6 	bl	800383e <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007652:	197b      	adds	r3, r7, r5
 8007654:	881a      	ldrh	r2, [r3, #0]
 8007656:	197b      	adds	r3, r7, r5
 8007658:	3201      	adds	r2, #1
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	2316      	movs	r3, #22
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d9e1      	bls.n	800762a <CO_process_TPDO+0x36>
 8007666:	e000      	b.n	800766a <CO_process_TPDO+0x76>
        return;
 8007668:	46c0      	nop			@ (mov r8, r8)
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 800766a:	46bd      	mov	sp, r7
 800766c:	b006      	add	sp, #24
 800766e:	bdb0      	pop	{r4, r5, r7, pc}

08007670 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8007678:	4b15      	ldr	r3, [pc, #84]	@ (80076d0 <canopen_app_init+0x60>)
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	601a      	str	r2, [r3, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8007682:	2308      	movs	r3, #8
 8007684:	18fa      	adds	r2, r7, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	0011      	movs	r1, r2
 800768a:	0018      	movs	r0, r3
 800768c:	f7ff f981 	bl	8006992 <CO_new>
 8007690:	0002      	movs	r2, r0
 8007692:	4b10      	ldr	r3, [pc, #64]	@ (80076d4 <canopen_app_init+0x64>)
 8007694:	601a      	str	r2, [r3, #0]
    if (CO == NULL) {
 8007696:	4b0f      	ldr	r3, [pc, #60]	@ (80076d4 <canopen_app_init+0x64>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d105      	bne.n	80076aa <canopen_app_init+0x3a>
        log_printf("Error: Can't allocate memory\n");
 800769e:	4b0e      	ldr	r3, [pc, #56]	@ (80076d8 <canopen_app_init+0x68>)
 80076a0:	0018      	movs	r0, r3
 80076a2:	f008 f947 	bl	800f934 <puts>
        return 1;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e00d      	b.n	80076c6 <canopen_app_init+0x56>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4b0b      	ldr	r3, [pc, #44]	@ (80076dc <canopen_app_init+0x6c>)
 80076ae:	0011      	movs	r1, r2
 80076b0:	0018      	movs	r0, r3
 80076b2:	f008 f8d9 	bl	800f868 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 80076b6:	4b06      	ldr	r3, [pc, #24]	@ (80076d0 <canopen_app_init+0x60>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a06      	ldr	r2, [pc, #24]	@ (80076d4 <canopen_app_init+0x64>)
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 80076c0:	f000 f80e 	bl	80076e0 <canopen_app_resetCommunication>
    return 0;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	0018      	movs	r0, r3
 80076c8:	46bd      	mov	sp, r7
 80076ca:	b004      	add	sp, #16
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	46c0      	nop			@ (mov r8, r8)
 80076d0:	20000498 	.word	0x20000498
 80076d4:	2000049c 	.word	0x2000049c
 80076d8:	08010400 	.word	0x08010400
 80076dc:	08010420 	.word	0x08010420

080076e0 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 80076e0:	b590      	push	{r4, r7, lr}
 80076e2:	b08f      	sub	sp, #60	@ 0x3c
 80076e4:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 80076e6:	4b83      	ldr	r3, [pc, #524]	@ (80078f4 <canopen_app_resetCommunication+0x214>)
 80076e8:	0018      	movs	r0, r3
 80076ea:	f008 f923 	bl	800f934 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 80076ee:	4b82      	ldr	r3, [pc, #520]	@ (80078f8 <canopen_app_resetCommunication+0x218>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80076f8:	4b80      	ldr	r3, [pc, #512]	@ (80078fc <canopen_app_resetCommunication+0x21c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	0018      	movs	r0, r3
 80076fe:	f000 f9d1 	bl	8007aa4 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8007702:	4b7d      	ldr	r3, [pc, #500]	@ (80078f8 <canopen_app_resetCommunication+0x218>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	0018      	movs	r0, r3
 800770a:	f000 fab7 	bl	8007c7c <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 800770e:	4b7a      	ldr	r3, [pc, #488]	@ (80078f8 <canopen_app_resetCommunication+0x218>)
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	4b7a      	ldr	r3, [pc, #488]	@ (80078fc <canopen_app_resetCommunication+0x21c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2200      	movs	r2, #0
 8007718:	0019      	movs	r1, r3
 800771a:	f7ff fad0 	bl	8006cbe <CO_CANinit>
 800771e:	0003      	movs	r3, r0
 8007720:	001a      	movs	r2, r3
 8007722:	4b77      	ldr	r3, [pc, #476]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007724:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007726:	4b76      	ldr	r3, [pc, #472]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	b25b      	sxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00a      	beq.n	8007746 <canopen_app_resetCommunication+0x66>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8007730:	4b73      	ldr	r3, [pc, #460]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	b25b      	sxtb	r3, r3
 8007736:	001a      	movs	r2, r3
 8007738:	4b72      	ldr	r3, [pc, #456]	@ (8007904 <canopen_app_resetCommunication+0x224>)
 800773a:	0011      	movs	r1, r2
 800773c:	0018      	movs	r0, r3
 800773e:	f008 f893 	bl	800f868 <iprintf>
        return 1;
 8007742:	2301      	movs	r3, #1
 8007744:	e0d2      	b.n	80078ec <canopen_app_resetCommunication+0x20c>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007746:	4b70      	ldr	r3, [pc, #448]	@ (8007908 <canopen_app_resetCommunication+0x228>)
 8007748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800774a:	2108      	movs	r1, #8
 800774c:	187b      	adds	r3, r7, r1
 800774e:	601a      	str	r2, [r3, #0]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8007750:	4b6d      	ldr	r3, [pc, #436]	@ (8007908 <canopen_app_resetCommunication+0x228>)
 8007752:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007754:	187b      	adds	r3, r7, r1
 8007756:	605a      	str	r2, [r3, #4]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8007758:	4b6b      	ldr	r3, [pc, #428]	@ (8007908 <canopen_app_resetCommunication+0x228>)
 800775a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800775c:	187b      	adds	r3, r7, r1
 800775e:	609a      	str	r2, [r3, #8]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8007760:	4b69      	ldr	r3, [pc, #420]	@ (8007908 <canopen_app_resetCommunication+0x228>)
 8007762:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007764:	187b      	adds	r3, r7, r1
 8007766:	60da      	str	r2, [r3, #12]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8007768:	4b63      	ldr	r3, [pc, #396]	@ (80078f8 <canopen_app_resetCommunication+0x218>)
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	4b63      	ldr	r3, [pc, #396]	@ (80078fc <canopen_app_resetCommunication+0x21c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	001a      	movs	r2, r3
 8007772:	4b62      	ldr	r3, [pc, #392]	@ (80078fc <canopen_app_resetCommunication+0x21c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3302      	adds	r3, #2
 8007778:	1879      	adds	r1, r7, r1
 800777a:	f7ff fad1 	bl	8006d20 <CO_LSSinit>
 800777e:	0003      	movs	r3, r0
 8007780:	001a      	movs	r2, r3
 8007782:	4b5f      	ldr	r3, [pc, #380]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007784:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007786:	4b5e      	ldr	r3, [pc, #376]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b25b      	sxtb	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00a      	beq.n	80077a6 <canopen_app_resetCommunication+0xc6>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8007790:	4b5b      	ldr	r3, [pc, #364]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b25b      	sxtb	r3, r3
 8007796:	001a      	movs	r2, r3
 8007798:	4b5c      	ldr	r3, [pc, #368]	@ (800790c <canopen_app_resetCommunication+0x22c>)
 800779a:	0011      	movs	r1, r2
 800779c:	0018      	movs	r0, r3
 800779e:	f008 f863 	bl	800f868 <iprintf>
        return 2;
 80077a2:	2302      	movs	r3, #2
 80077a4:	e0a2      	b.n	80078ec <canopen_app_resetCommunication+0x20c>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 80077a6:	4b55      	ldr	r3, [pc, #340]	@ (80078fc <canopen_app_resetCommunication+0x21c>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b54      	ldr	r3, [pc, #336]	@ (80078fc <canopen_app_resetCommunication+0x21c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	7812      	ldrb	r2, [r2, #0]
 80077b0:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 80077b6:	4b50      	ldr	r3, [pc, #320]	@ (80078f8 <canopen_app_resetCommunication+0x218>)
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	4b55      	ldr	r3, [pc, #340]	@ (8007910 <canopen_app_resetCommunication+0x230>)
 80077bc:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 80077be:	4b4f      	ldr	r3, [pc, #316]	@ (80078fc <canopen_app_resetCommunication+0x21c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	1d3a      	adds	r2, r7, #4
 80077c6:	9207      	str	r2, [sp, #28]
 80077c8:	9306      	str	r3, [sp, #24]
 80077ca:	2300      	movs	r3, #0
 80077cc:	9305      	str	r3, [sp, #20]
 80077ce:	23fa      	movs	r3, #250	@ 0xfa
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	23fa      	movs	r3, #250	@ 0xfa
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	9303      	str	r3, [sp, #12]
 80077da:	23fa      	movs	r3, #250	@ 0xfa
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	9302      	str	r3, [sp, #8]
 80077e0:	4b4c      	ldr	r3, [pc, #304]	@ (8007914 <canopen_app_resetCommunication+0x234>)
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	2300      	movs	r3, #0
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	000b      	movs	r3, r1
 80077ea:	2200      	movs	r2, #0
 80077ec:	2100      	movs	r1, #0
 80077ee:	f7ff fad5 	bl	8006d9c <CO_CANopenInit>
 80077f2:	0003      	movs	r3, r0
 80077f4:	001a      	movs	r2, r3
 80077f6:	4b42      	ldr	r3, [pc, #264]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 80077f8:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 80077fa:	4b41      	ldr	r3, [pc, #260]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	b25b      	sxtb	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01b      	beq.n	800783c <canopen_app_resetCommunication+0x15c>
 8007804:	4b3e      	ldr	r3, [pc, #248]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	b25b      	sxtb	r3, r3
 800780a:	3313      	adds	r3, #19
 800780c:	d016      	beq.n	800783c <canopen_app_resetCommunication+0x15c>
        if (err == CO_ERROR_OD_PARAMETERS) {
 800780e:	4b3c      	ldr	r3, [pc, #240]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	b25b      	sxtb	r3, r3
 8007814:	330c      	adds	r3, #12
 8007816:	d106      	bne.n	8007826 <canopen_app_resetCommunication+0x146>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	4b3f      	ldr	r3, [pc, #252]	@ (8007918 <canopen_app_resetCommunication+0x238>)
 800781c:	0011      	movs	r1, r2
 800781e:	0018      	movs	r0, r3
 8007820:	f008 f822 	bl	800f868 <iprintf>
 8007824:	e008      	b.n	8007838 <canopen_app_resetCommunication+0x158>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8007826:	4b36      	ldr	r3, [pc, #216]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	b25b      	sxtb	r3, r3
 800782c:	001a      	movs	r2, r3
 800782e:	4b3b      	ldr	r3, [pc, #236]	@ (800791c <canopen_app_resetCommunication+0x23c>)
 8007830:	0011      	movs	r1, r2
 8007832:	0018      	movs	r0, r3
 8007834:	f008 f818 	bl	800f868 <iprintf>
        }
        return 3;
 8007838:	2303      	movs	r3, #3
 800783a:	e057      	b.n	80078ec <canopen_app_resetCommunication+0x20c>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 800783c:	4b2e      	ldr	r3, [pc, #184]	@ (80078f8 <canopen_app_resetCommunication+0x218>)
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	4b2d      	ldr	r3, [pc, #180]	@ (80078f8 <canopen_app_resetCommunication+0x218>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69d9      	ldr	r1, [r3, #28]
 8007846:	4b32      	ldr	r3, [pc, #200]	@ (8007910 <canopen_app_resetCommunication+0x230>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	4b2c      	ldr	r3, [pc, #176]	@ (80078fc <canopen_app_resetCommunication+0x21c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	785c      	ldrb	r4, [r3, #1]
 8007850:	1d3b      	adds	r3, r7, #4
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	0023      	movs	r3, r4
 8007856:	f7ff fc33 	bl	80070c0 <CO_CANopenInitPDO>
 800785a:	0003      	movs	r3, r0
 800785c:	001a      	movs	r2, r3
 800785e:	4b28      	ldr	r3, [pc, #160]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007860:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007862:	4b27      	ldr	r3, [pc, #156]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	b25b      	sxtb	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d016      	beq.n	800789a <canopen_app_resetCommunication+0x1ba>
        if (err == CO_ERROR_OD_PARAMETERS) {
 800786c:	4b24      	ldr	r3, [pc, #144]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	b25b      	sxtb	r3, r3
 8007872:	330c      	adds	r3, #12
 8007874:	d106      	bne.n	8007884 <canopen_app_resetCommunication+0x1a4>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	4b27      	ldr	r3, [pc, #156]	@ (8007918 <canopen_app_resetCommunication+0x238>)
 800787a:	0011      	movs	r1, r2
 800787c:	0018      	movs	r0, r3
 800787e:	f007 fff3 	bl	800f868 <iprintf>
 8007882:	e008      	b.n	8007896 <canopen_app_resetCommunication+0x1b6>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8007884:	4b1e      	ldr	r3, [pc, #120]	@ (8007900 <canopen_app_resetCommunication+0x220>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	b25b      	sxtb	r3, r3
 800788a:	001a      	movs	r2, r3
 800788c:	4b24      	ldr	r3, [pc, #144]	@ (8007920 <canopen_app_resetCommunication+0x240>)
 800788e:	0011      	movs	r1, r2
 8007890:	0018      	movs	r0, r3
 8007892:	f007 ffe9 	bl	800f868 <iprintf>
        }
        return 4;
 8007896:	2304      	movs	r3, #4
 8007898:	e028      	b.n	80078ec <canopen_app_resetCommunication+0x20c>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 800789a:	4b18      	ldr	r3, [pc, #96]	@ (80078fc <canopen_app_resetCommunication+0x21c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f004 f9bd 	bl	800bc20 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 80078a6:	4b14      	ldr	r3, [pc, #80]	@ (80078f8 <canopen_app_resetCommunication+0x218>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <canopen_app_resetCommunication+0x1d8>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 80078b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007924 <canopen_app_resetCommunication+0x244>)
 80078b2:	0018      	movs	r0, r3
 80078b4:	f008 f83e 	bl	800f934 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 80078b8:	4b0f      	ldr	r3, [pc, #60]	@ (80078f8 <canopen_app_resetCommunication+0x218>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	0018      	movs	r0, r3
 80078c0:	f000 f900 	bl	8007ac4 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 80078c4:	4b18      	ldr	r3, [pc, #96]	@ (8007928 <canopen_app_resetCommunication+0x248>)
 80078c6:	0018      	movs	r0, r3
 80078c8:	f008 f834 	bl	800f934 <puts>
    fflush(stdout);
 80078cc:	4b17      	ldr	r3, [pc, #92]	@ (800792c <canopen_app_resetCommunication+0x24c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	0018      	movs	r0, r3
 80078d4:	f007 feec 	bl	800f6b0 <fflush>
    time_old = time_current = HAL_GetTick();
 80078d8:	f001 fb5c 	bl	8008f94 <HAL_GetTick>
 80078dc:	0002      	movs	r2, r0
 80078de:	4b14      	ldr	r3, [pc, #80]	@ (8007930 <canopen_app_resetCommunication+0x250>)
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	4b13      	ldr	r3, [pc, #76]	@ (8007930 <canopen_app_resetCommunication+0x250>)
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b13      	ldr	r3, [pc, #76]	@ (8007934 <canopen_app_resetCommunication+0x254>)
 80078e8:	601a      	str	r2, [r3, #0]
    return 0;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	0018      	movs	r0, r3
 80078ee:	46bd      	mov	sp, r7
 80078f0:	b007      	add	sp, #28
 80078f2:	bd90      	pop	{r4, r7, pc}
 80078f4:	08010448 	.word	0x08010448
 80078f8:	2000049c 	.word	0x2000049c
 80078fc:	20000498 	.word	0x20000498
 8007900:	200004a8 	.word	0x200004a8
 8007904:	08010470 	.word	0x08010470
 8007908:	20000000 	.word	0x20000000
 800790c:	08010498 	.word	0x08010498
 8007910:	20000294 	.word	0x20000294
 8007914:	00002011 	.word	0x00002011
 8007918:	080104c4 	.word	0x080104c4
 800791c:	080104ec 	.word	0x080104ec
 8007920:	08010518 	.word	0x08010518
 8007924:	08010540 	.word	0x08010540
 8007928:	08010568 	.word	0x08010568
 800792c:	200003a4 	.word	0x200003a4
 8007930:	200004a4 	.word	0x200004a4
 8007934:	200004a0 	.word	0x200004a0

08007938 <canopen_app_process>:

void
canopen_app_process() {
 8007938:	b590      	push	{r4, r7, lr}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 800793e:	f001 fb29 	bl	8008f94 <HAL_GetTick>
 8007942:	0002      	movs	r2, r0
 8007944:	4b2f      	ldr	r3, [pc, #188]	@ (8007a04 <canopen_app_process+0xcc>)
 8007946:	601a      	str	r2, [r3, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8007948:	4b2e      	ldr	r3, [pc, #184]	@ (8007a04 <canopen_app_process+0xcc>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	4b2e      	ldr	r3, [pc, #184]	@ (8007a08 <canopen_app_process+0xd0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	429a      	cmp	r2, r3
 8007952:	d053      	beq.n	80079fc <canopen_app_process+0xc4>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8007954:	4b2b      	ldr	r3, [pc, #172]	@ (8007a04 <canopen_app_process+0xcc>)
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	4b2b      	ldr	r3, [pc, #172]	@ (8007a08 <canopen_app_process+0xd0>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	1ad2      	subs	r2, r2, r3
 800795e:	0013      	movs	r3, r2
 8007960:	015b      	lsls	r3, r3, #5
 8007962:	1a9b      	subs	r3, r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	189b      	adds	r3, r3, r2
 8007968:	00db      	lsls	r3, r3, #3
 800796a:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 800796c:	4b25      	ldr	r3, [pc, #148]	@ (8007a04 <canopen_app_process+0xcc>)
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	4b25      	ldr	r3, [pc, #148]	@ (8007a08 <canopen_app_process+0xd0>)
 8007972:	601a      	str	r2, [r3, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8007974:	4b25      	ldr	r3, [pc, #148]	@ (8007a0c <canopen_app_process+0xd4>)
 8007976:	6818      	ldr	r0, [r3, #0]
 8007978:	1cfc      	adds	r4, r7, #3
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	2300      	movs	r3, #0
 800797e:	2100      	movs	r1, #0
 8007980:	f7ff fca0 	bl	80072c4 <CO_process>
 8007984:	0003      	movs	r3, r0
 8007986:	7023      	strb	r3, [r4, #0]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8007988:	4b20      	ldr	r3, [pc, #128]	@ (8007a0c <canopen_app_process+0xd4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	7a5a      	ldrb	r2, [r3, #9]
 8007990:	4b1f      	ldr	r3, [pc, #124]	@ (8007a10 <canopen_app_process+0xd8>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	09d2      	lsrs	r2, r2, #7
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 800799a:	4b1c      	ldr	r3, [pc, #112]	@ (8007a0c <canopen_app_process+0xd4>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a0:	7a9a      	ldrb	r2, [r3, #10]
 80079a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a10 <canopen_app_process+0xd8>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	09d2      	lsrs	r2, r2, #7
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 80079ac:	1cfb      	adds	r3, r7, #3
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d119      	bne.n	80079e8 <canopen_app_process+0xb0>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 80079b4:	4b16      	ldr	r3, [pc, #88]	@ (8007a10 <canopen_app_process+0xd8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	0018      	movs	r0, r3
 80079bc:	f004 f992 	bl	800bce4 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80079c0:	4b13      	ldr	r3, [pc, #76]	@ (8007a10 <canopen_app_process+0xd8>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	0018      	movs	r0, r3
 80079c6:	f000 f86d 	bl	8007aa4 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 80079ca:	4b10      	ldr	r3, [pc, #64]	@ (8007a0c <canopen_app_process+0xd4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	0018      	movs	r0, r3
 80079d0:	f7ff f915 	bl	8006bfe <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 80079d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007a14 <canopen_app_process+0xdc>)
 80079d6:	0018      	movs	r0, r3
 80079d8:	f007 ffac 	bl	800f934 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 80079dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007a10 <canopen_app_process+0xd8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	0018      	movs	r0, r3
 80079e2:	f7ff fe45 	bl	8007670 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 80079e6:	e009      	b.n	80079fc <canopen_app_process+0xc4>
        } else if (reset_status == CO_RESET_APP) {
 80079e8:	1cfb      	adds	r3, r7, #3
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d105      	bne.n	80079fc <canopen_app_process+0xc4>
            log_printf("CANopenNode Device Reset\n");
 80079f0:	4b09      	ldr	r3, [pc, #36]	@ (8007a18 <canopen_app_process+0xe0>)
 80079f2:	0018      	movs	r0, r3
 80079f4:	f007 ff9e 	bl	800f934 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 80079f8:	f001 fbcf 	bl	800919a <HAL_NVIC_SystemReset>
}
 80079fc:	46c0      	nop			@ (mov r8, r8)
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b003      	add	sp, #12
 8007a02:	bd90      	pop	{r4, r7, pc}
 8007a04:	200004a4 	.word	0x200004a4
 8007a08:	200004a0 	.word	0x200004a0
 8007a0c:	2000049c 	.word	0x2000049c
 8007a10:	20000498 	.word	0x20000498
 8007a14:	08010584 	.word	0x08010584
 8007a18:	080105ac 	.word	0x080105ac

08007a1c <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8007a22:	4b1f      	ldr	r3, [pc, #124]	@ (8007aa0 <canopen_app_interrupt+0x84>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a28:	f3ef 8210 	mrs	r2, PRIMASK
 8007a2c:	607a      	str	r2, [r7, #4]
  return(result);
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007a32:	b672      	cpsid	i
}
 8007a34:	46c0      	nop			@ (mov r8, r8)
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8007a36:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa0 <canopen_app_interrupt+0x84>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d121      	bne.n	8007a84 <canopen_app_interrupt+0x68>
 8007a40:	4b17      	ldr	r3, [pc, #92]	@ (8007aa0 <canopen_app_interrupt+0x84>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01b      	beq.n	8007a84 <canopen_app_interrupt+0x68>
        bool_t syncWas = false;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8007a50:	23fa      	movs	r3, #250	@ 0xfa
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8007a56:	4b12      	ldr	r3, [pc, #72]	@ (8007aa0 <canopen_app_interrupt+0x84>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68b9      	ldr	r1, [r7, #8]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f7ff fd44 	bl	80074ec <CO_process_SYNC>
 8007a64:	0003      	movs	r3, r0
 8007a66:	60fb      	str	r3, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8007a68:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa0 <canopen_app_interrupt+0x84>)
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	2300      	movs	r3, #0
 8007a72:	f7ff fd84 	bl	800757e <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8007a76:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa0 <canopen_app_interrupt+0x84>)
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	68f9      	ldr	r1, [r7, #12]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f7ff fdb8 	bl	80075f4 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8007a84:	4b06      	ldr	r3, [pc, #24]	@ (8007aa0 <canopen_app_interrupt+0x84>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a8c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	f383 8810 	msr	PRIMASK, r3
}
 8007a94:	46c0      	nop			@ (mov r8, r8)
}
 8007a96:	46c0      	nop			@ (mov r8, r8)
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b004      	add	sp, #16
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	46c0      	nop			@ (mov r8, r8)
 8007aa0:	2000049c 	.word	0x2000049c

08007aa4 <CO_CANsetConfigurationMode>:
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */
bool msg_701_HB  = false;

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d004      	beq.n	8007abc <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	f001 fd3c 	bl	8009534 <HAL_FDCAN_Stop>
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#endif
    }
}
 8007abc:	46c0      	nop			@ (mov r8, r8)
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	b002      	add	sp, #8
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <CO_CANsetNormalMode+0x26>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	0018      	movs	r0, r3
 8007adc:	f001 fd04 	bl	80094e8 <HAL_FDCAN_Start>
 8007ae0:	1e03      	subs	r3, r0, #0
 8007ae2:	d102      	bne.n	8007aea <CO_CANsetNormalMode+0x26>
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#endif
        {
            CANmodule->CANnormal = true;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	615a      	str	r2, [r3, #20]
        }
    }
}
 8007aea:	46c0      	nop			@ (mov r8, r8)
 8007aec:	46bd      	mov	sp, r7
 8007aee:	b002      	add	sp, #8
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	001a      	movs	r2, r3
 8007b02:	1cbb      	adds	r3, r7, #2
 8007b04:	801a      	strh	r2, [r3, #0]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <CO_CANmodule_init+0x24>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <CO_CANmodule_init+0x24>
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d102      	bne.n	8007b1e <CO_CANmodule_init+0x2a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	425b      	negs	r3, r3
 8007b1c:	e0a5      	b.n	8007c6a <CO_CANmodule_init+0x176>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8007b24:	4b53      	ldr	r3, [pc, #332]	@ (8007c74 <CO_CANmodule_init+0x180>)
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	601a      	str	r2, [r3, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	1cba      	adds	r2, r7, #2
 8007b34:	8812      	ldrh	r2, [r2, #0]
 8007b36:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a3a      	ldr	r2, [r7, #32]
 8007b3c:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2224      	movs	r2, #36	@ 0x24
 8007b42:	18ba      	adds	r2, r7, r2
 8007b44:	8812      	ldrh	r2, [r2, #0]
 8007b46:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2201      	movs	r2, #1
 8007b64:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	849a      	strh	r2, [r3, #36]	@ 0x24
    CANmodule->errOld = 0U;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007b72:	2316      	movs	r3, #22
 8007b74:	18fb      	adds	r3, r7, r3
 8007b76:	2200      	movs	r2, #0
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	e032      	b.n	8007be2 <CO_CANmodule_init+0xee>
        rxArray[i].ident = 0U;
 8007b7c:	2116      	movs	r1, #22
 8007b7e:	187b      	adds	r3, r7, r1
 8007b80:	881a      	ldrh	r2, [r3, #0]
 8007b82:	0013      	movs	r3, r2
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	189b      	adds	r3, r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	001a      	movs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	189b      	adds	r3, r3, r2
 8007b90:	2200      	movs	r2, #0
 8007b92:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8007b94:	187b      	adds	r3, r7, r1
 8007b96:	881a      	ldrh	r2, [r3, #0]
 8007b98:	0013      	movs	r3, r2
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	189b      	adds	r3, r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	001a      	movs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	189b      	adds	r3, r3, r2
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4252      	negs	r2, r2
 8007baa:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8007bac:	187b      	adds	r3, r7, r1
 8007bae:	881a      	ldrh	r2, [r3, #0]
 8007bb0:	0013      	movs	r3, r2
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	189b      	adds	r3, r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	001a      	movs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	189b      	adds	r3, r3, r2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8007bc2:	187b      	adds	r3, r7, r1
 8007bc4:	881a      	ldrh	r2, [r3, #0]
 8007bc6:	0013      	movs	r3, r2
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	189b      	adds	r3, r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	001a      	movs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	189b      	adds	r3, r3, r2
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007bd8:	187b      	adds	r3, r7, r1
 8007bda:	881a      	ldrh	r2, [r3, #0]
 8007bdc:	187b      	adds	r3, r7, r1
 8007bde:	3201      	adds	r2, #1
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	2316      	movs	r3, #22
 8007be4:	18fa      	adds	r2, r7, r3
 8007be6:	1cbb      	adds	r3, r7, #2
 8007be8:	8812      	ldrh	r2, [r2, #0]
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d3c5      	bcc.n	8007b7c <CO_CANmodule_init+0x88>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8007bf0:	2314      	movs	r3, #20
 8007bf2:	18fb      	adds	r3, r7, r3
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	801a      	strh	r2, [r3, #0]
 8007bf8:	e010      	b.n	8007c1c <CO_CANmodule_init+0x128>
        txArray[i].bufferFull = false;
 8007bfa:	2114      	movs	r1, #20
 8007bfc:	187b      	adds	r3, r7, r1
 8007bfe:	881a      	ldrh	r2, [r3, #0]
 8007c00:	0013      	movs	r3, r2
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	189b      	adds	r3, r3, r2
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	001a      	movs	r2, r3
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	189b      	adds	r3, r3, r2
 8007c0e:	2200      	movs	r2, #0
 8007c10:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8007c12:	187b      	adds	r3, r7, r1
 8007c14:	881a      	ldrh	r2, [r3, #0]
 8007c16:	187b      	adds	r3, r7, r1
 8007c18:	3201      	adds	r2, #1
 8007c1a:	801a      	strh	r2, [r3, #0]
 8007c1c:	2314      	movs	r3, #20
 8007c1e:	18fa      	adds	r2, r7, r3
 8007c20:	2324      	movs	r3, #36	@ 0x24
 8007c22:	18fb      	adds	r3, r7, r3
 8007c24:	8812      	ldrh	r2, [r2, #0]
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d3e6      	bcc.n	8007bfa <CO_CANmodule_init+0x106>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	4798      	blx	r3
     * Accept non-matching standard ID messages
     * Reject non-matching extended ID messages
     */

#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ConfigGlobalFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT,
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6898      	ldr	r0, [r3, #8]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	2100      	movs	r1, #0
 8007c40:	f001 fc22 	bl	8009488 <HAL_FDCAN_ConfigGlobalFilter>
 8007c44:	1e03      	subs	r3, r0, #0
 8007c46:	d002      	beq.n	8007c4e <CO_CANmodule_init+0x15a>
                                     FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	425b      	negs	r3, r3
 8007c4c:	e00d      	b.n	8007c6a <CO_CANmodule_init+0x176>
    }
#endif
    /* Enable notifications */
    /* Activate the CAN notification interrupts */
#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle,
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2201      	movs	r2, #1
 8007c54:	4252      	negs	r2, r2
 8007c56:	4908      	ldr	r1, [pc, #32]	@ (8007c78 <CO_CANmodule_init+0x184>)
 8007c58:	0018      	movs	r0, r3
 8007c5a:	f001 fe3b 	bl	80098d4 <HAL_FDCAN_ActivateNotification>
 8007c5e:	1e03      	subs	r3, r0, #0
 8007c60:	d002      	beq.n	8007c68 <CO_CANmodule_init+0x174>
                                           | FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_FIFO_EMPTY | FDCAN_IT_BUS_OFF
                                           | FDCAN_IT_ARB_PROTOCOL_ERROR | FDCAN_IT_DATA_PROTOCOL_ERROR
                                           | FDCAN_IT_ERROR_PASSIVE | FDCAN_IT_ERROR_WARNING,
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007c62:	2301      	movs	r3, #1
 8007c64:	425b      	negs	r3, r3
 8007c66:	e000      	b.n	8007c6a <CO_CANmodule_init+0x176>
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	b006      	add	sp, #24
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	46c0      	nop			@ (mov r8, r8)
 8007c74:	200004ac 	.word	0x200004ac
 8007c78:	006e0289 	.word	0x006e0289

08007c7c <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <CO_CANmodule_disable+0x22>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d005      	beq.n	8007c9e <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f001 fc4b 	bl	8009534 <HAL_FDCAN_Stop>

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
#endif
    }
}
 8007c9e:	46c0      	nop			@ (mov r8, r8)
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	b002      	add	sp, #8
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8007ca8:	b5b0      	push	{r4, r5, r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	000c      	movs	r4, r1
 8007cb2:	0010      	movs	r0, r2
 8007cb4:	0019      	movs	r1, r3
 8007cb6:	250a      	movs	r5, #10
 8007cb8:	197b      	adds	r3, r7, r5
 8007cba:	1c22      	adds	r2, r4, #0
 8007cbc:	801a      	strh	r2, [r3, #0]
 8007cbe:	2408      	movs	r4, #8
 8007cc0:	193b      	adds	r3, r7, r4
 8007cc2:	1c02      	adds	r2, r0, #0
 8007cc4:	801a      	strh	r2, [r3, #0]
 8007cc6:	1dbb      	adds	r3, r7, #6
 8007cc8:	1c0a      	adds	r2, r1, #0
 8007cca:	801a      	strh	r2, [r3, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8007ccc:	2317      	movs	r3, #23
 8007cce:	18fb      	adds	r3, r7, r3
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d03e      	beq.n	8007d58 <CO_CANrxBufferInit+0xb0>
 8007cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d03b      	beq.n	8007d58 <CO_CANrxBufferInit+0xb0>
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d038      	beq.n	8007d58 <CO_CANrxBufferInit+0xb0>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	891b      	ldrh	r3, [r3, #8]
 8007cea:	197a      	adds	r2, r7, r5
 8007cec:	8812      	ldrh	r2, [r2, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d232      	bcs.n	8007d58 <CO_CANrxBufferInit+0xb0>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6859      	ldr	r1, [r3, #4]
 8007cf6:	197b      	adds	r3, r7, r5
 8007cf8:	881a      	ldrh	r2, [r3, #0]
 8007cfa:	0013      	movs	r3, r2
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	189b      	adds	r3, r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	18cb      	adds	r3, r1, r3
 8007d04:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d0a:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d10:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8007d12:	193b      	adds	r3, r7, r4
 8007d14:	2200      	movs	r2, #0
 8007d16:	5e9b      	ldrsh	r3, [r3, r2]
 8007d18:	055b      	lsls	r3, r3, #21
 8007d1a:	0d5b      	lsrs	r3, r3, #21
 8007d1c:	b21a      	sxth	r2, r3
 8007d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <CO_CANrxBufferInit+0x80>
 8007d24:	4b13      	ldr	r3, [pc, #76]	@ (8007d74 <CO_CANrxBufferInit+0xcc>)
 8007d26:	e000      	b.n	8007d2a <CO_CANrxBufferInit+0x82>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	b21b      	sxth	r3, r3
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8007d34:	1dbb      	adds	r3, r7, #6
 8007d36:	2200      	movs	r2, #0
 8007d38:	5e9b      	ldrsh	r3, [r3, r2]
 8007d3a:	055b      	lsls	r3, r3, #21
 8007d3c:	0d5b      	lsrs	r3, r3, #21
 8007d3e:	b21b      	sxth	r3, r3
 8007d40:	4a0c      	ldr	r2, [pc, #48]	@ (8007d74 <CO_CANrxBufferInit+0xcc>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	b21b      	sxth	r3, r3
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d006      	beq.n	8007d62 <CO_CANrxBufferInit+0xba>
            __NOP();
 8007d54:	46c0      	nop			@ (mov r8, r8)
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007d56:	e004      	b.n	8007d62 <CO_CANrxBufferInit+0xba>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007d58:	2317      	movs	r3, #23
 8007d5a:	18fb      	adds	r3, r7, r3
 8007d5c:	22ff      	movs	r2, #255	@ 0xff
 8007d5e:	701a      	strb	r2, [r3, #0]
 8007d60:	e000      	b.n	8007d64 <CO_CANrxBufferInit+0xbc>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007d62:	46c0      	nop			@ (mov r8, r8)
    }

    return ret;
 8007d64:	2317      	movs	r3, #23
 8007d66:	18fb      	adds	r3, r7, r3
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b25b      	sxtb	r3, r3
}
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	b006      	add	sp, #24
 8007d72:	bdb0      	pop	{r4, r5, r7, pc}
 8007d74:	ffff8000 	.word	0xffff8000

08007d78 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8007d78:	b590      	push	{r4, r7, lr}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	0008      	movs	r0, r1
 8007d82:	0011      	movs	r1, r2
 8007d84:	607b      	str	r3, [r7, #4]
 8007d86:	240a      	movs	r4, #10
 8007d88:	193b      	adds	r3, r7, r4
 8007d8a:	1c02      	adds	r2, r0, #0
 8007d8c:	801a      	strh	r2, [r3, #0]
 8007d8e:	2008      	movs	r0, #8
 8007d90:	183b      	adds	r3, r7, r0
 8007d92:	1c0a      	adds	r2, r1, #0
 8007d94:	801a      	strh	r2, [r3, #0]
    CO_CANtx_t* buffer = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d02a      	beq.n	8007df6 <CO_CANtxBufferInit+0x7e>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8a1b      	ldrh	r3, [r3, #16]
 8007da4:	193a      	adds	r2, r7, r4
 8007da6:	8812      	ldrh	r2, [r2, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d224      	bcs.n	8007df6 <CO_CANtxBufferInit+0x7e>
        buffer = &CANmodule->txArray[index];
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	68d9      	ldr	r1, [r3, #12]
 8007db0:	193b      	adds	r3, r7, r4
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	0013      	movs	r3, r2
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	189b      	adds	r3, r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	18cb      	adds	r3, r1, r3
 8007dbe:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8007dc0:	183b      	adds	r3, r7, r0
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	055b      	lsls	r3, r3, #21
 8007dc6:	0d5a      	lsrs	r2, r3, #21
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <CO_CANtxBufferInit+0x5c>
 8007dce:	2380      	movs	r3, #128	@ 0x80
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	e000      	b.n	8007dd6 <CO_CANtxBufferInit+0x5e>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	2320      	movs	r3, #32
 8007de0:	2108      	movs	r1, #8
 8007de2:	185b      	adds	r3, r3, r1
 8007de4:	19db      	adds	r3, r3, r7
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	7113      	strb	r3, [r2, #4]
        buffer->bufferFull = false;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2200      	movs	r2, #0
 8007dee:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007df4:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8007df6:	697b      	ldr	r3, [r7, #20]
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b007      	add	sp, #28
 8007dfe:	bd90      	pop	{r4, r7, pc}

08007e00 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8007e0a:	230f      	movs	r3, #15
 8007e0c:	18fb      	adds	r3, r7, r3
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]

    /* Check if TX FIFO is ready to accept more messages */
#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_TxHeaderTypeDef tx_hdr;
    if (HAL_FDCAN_GetTxFifoFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f001 fd4b 	bl	80098b4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8007e1e:	1e03      	subs	r3, r0, #0
 8007e20:	d05d      	beq.n	8007ede <prv_send_can_message+0xde>
        /*
         * RTR flag is part of identifier value
         * hence it needs to be properly decoded
         */
        tx_hdr.Identifier = buffer->ident & CANID_MASK;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	055b      	lsls	r3, r3, #21
 8007e28:	0d5a      	lsrs	r2, r3, #21
 8007e2a:	4b30      	ldr	r3, [pc, #192]	@ (8007eec <prv_send_can_message+0xec>)
 8007e2c:	601a      	str	r2, [r3, #0]
        tx_hdr.TxFrameType = (buffer->ident & FLAG_RTR) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	039a      	lsls	r2, r3, #14
 8007e34:	2380      	movs	r3, #128	@ 0x80
 8007e36:	059b      	lsls	r3, r3, #22
 8007e38:	401a      	ands	r2, r3
 8007e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8007eec <prv_send_can_message+0xec>)
 8007e3c:	609a      	str	r2, [r3, #8]
        tx_hdr.IdType = FDCAN_STANDARD_ID;
 8007e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8007eec <prv_send_can_message+0xec>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	605a      	str	r2, [r3, #4]
        tx_hdr.FDFormat = FDCAN_CLASSIC_CAN;
 8007e44:	4b29      	ldr	r3, [pc, #164]	@ (8007eec <prv_send_can_message+0xec>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	619a      	str	r2, [r3, #24]
        tx_hdr.BitRateSwitch = FDCAN_BRS_OFF;
 8007e4a:	4b28      	ldr	r3, [pc, #160]	@ (8007eec <prv_send_can_message+0xec>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	615a      	str	r2, [r3, #20]
        tx_hdr.MessageMarker = 0;
 8007e50:	4b26      	ldr	r3, [pc, #152]	@ (8007eec <prv_send_can_message+0xec>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	621a      	str	r2, [r3, #32]
        tx_hdr.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007e56:	4b25      	ldr	r3, [pc, #148]	@ (8007eec <prv_send_can_message+0xec>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	611a      	str	r2, [r3, #16]
        tx_hdr.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007e5c:	4b23      	ldr	r3, [pc, #140]	@ (8007eec <prv_send_can_message+0xec>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	61da      	str	r2, [r3, #28]

        switch (buffer->DLC) {
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	791b      	ldrb	r3, [r3, #4]
 8007e66:	2b08      	cmp	r3, #8
 8007e68:	d828      	bhi.n	8007ebc <prv_send_can_message+0xbc>
 8007e6a:	009a      	lsls	r2, r3, #2
 8007e6c:	4b20      	ldr	r3, [pc, #128]	@ (8007ef0 <prv_send_can_message+0xf0>)
 8007e6e:	18d3      	adds	r3, r2, r3
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	469f      	mov	pc, r3
            case 0:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_0;
 8007e74:	4b1d      	ldr	r3, [pc, #116]	@ (8007eec <prv_send_can_message+0xec>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	60da      	str	r2, [r3, #12]
                break;
 8007e7a:	e020      	b.n	8007ebe <prv_send_can_message+0xbe>
            case 1:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_1;
 8007e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8007eec <prv_send_can_message+0xec>)
 8007e7e:	2201      	movs	r2, #1
 8007e80:	60da      	str	r2, [r3, #12]
                break;
 8007e82:	e01c      	b.n	8007ebe <prv_send_can_message+0xbe>
            case 2:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_2;
 8007e84:	4b19      	ldr	r3, [pc, #100]	@ (8007eec <prv_send_can_message+0xec>)
 8007e86:	2202      	movs	r2, #2
 8007e88:	60da      	str	r2, [r3, #12]
                break;
 8007e8a:	e018      	b.n	8007ebe <prv_send_can_message+0xbe>
            case 3:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_3;
 8007e8c:	4b17      	ldr	r3, [pc, #92]	@ (8007eec <prv_send_can_message+0xec>)
 8007e8e:	2203      	movs	r2, #3
 8007e90:	60da      	str	r2, [r3, #12]
                break;
 8007e92:	e014      	b.n	8007ebe <prv_send_can_message+0xbe>
            case 4:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_4;
 8007e94:	4b15      	ldr	r3, [pc, #84]	@ (8007eec <prv_send_can_message+0xec>)
 8007e96:	2204      	movs	r2, #4
 8007e98:	60da      	str	r2, [r3, #12]
                break;
 8007e9a:	e010      	b.n	8007ebe <prv_send_can_message+0xbe>
            case 5:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_5;
 8007e9c:	4b13      	ldr	r3, [pc, #76]	@ (8007eec <prv_send_can_message+0xec>)
 8007e9e:	2205      	movs	r2, #5
 8007ea0:	60da      	str	r2, [r3, #12]
                break;
 8007ea2:	e00c      	b.n	8007ebe <prv_send_can_message+0xbe>
            case 6:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_6;
 8007ea4:	4b11      	ldr	r3, [pc, #68]	@ (8007eec <prv_send_can_message+0xec>)
 8007ea6:	2206      	movs	r2, #6
 8007ea8:	60da      	str	r2, [r3, #12]
                break;
 8007eaa:	e008      	b.n	8007ebe <prv_send_can_message+0xbe>
            case 7:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_7;
 8007eac:	4b0f      	ldr	r3, [pc, #60]	@ (8007eec <prv_send_can_message+0xec>)
 8007eae:	2207      	movs	r2, #7
 8007eb0:	60da      	str	r2, [r3, #12]
                break;
 8007eb2:	e004      	b.n	8007ebe <prv_send_can_message+0xbe>
            case 8:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_8;
 8007eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8007eec <prv_send_can_message+0xec>)
 8007eb6:	2208      	movs	r2, #8
 8007eb8:	60da      	str	r2, [r3, #12]
                break;
 8007eba:	e000      	b.n	8007ebe <prv_send_can_message+0xbe>
            default: /* Hard error... */
                break;
 8007ebc:	46c0      	nop			@ (mov r8, r8)
        }

        /* Now add message to FIFO. Should not fail */
        success =
            HAL_FDCAN_AddMessageToTxFifoQ(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6898      	ldr	r0, [r3, #8]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	1d5a      	adds	r2, r3, #5
 8007ec8:	4b08      	ldr	r3, [pc, #32]	@ (8007eec <prv_send_can_message+0xec>)
 8007eca:	0019      	movs	r1, r3
 8007ecc:	f001 fb9f 	bl	800960e <HAL_FDCAN_AddMessageToTxFifoQ>
 8007ed0:	0003      	movs	r3, r0
            == HAL_OK;
 8007ed2:	425a      	negs	r2, r3
 8007ed4:	4153      	adcs	r3, r2
 8007ed6:	b2da      	uxtb	r2, r3
        success =
 8007ed8:	230f      	movs	r3, #15
 8007eda:	18fb      	adds	r3, r7, r3
 8007edc:	701a      	strb	r2, [r3, #0]
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
                                       &TxMailboxNum)
                  == HAL_OK;
    }
#endif
    return success;
 8007ede:	230f      	movs	r3, #15
 8007ee0:	18fb      	adds	r3, r7, r3
 8007ee2:	781b      	ldrb	r3, [r3, #0]
}
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	b004      	add	sp, #16
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	200004b4 	.word	0x200004b4
 8007ef0:	08010880 	.word	0x08010880

08007ef4 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8007efe:	2317      	movs	r3, #23
 8007f00:	18fb      	adds	r3, r7, r3
 8007f02:	2200      	movs	r2, #0
 8007f04:	701a      	strb	r2, [r3, #0]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00e      	beq.n	8007f2c <CO_CANsend+0x38>
        if (!CANmodule->firstCANtxMessage) {
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <CO_CANsend+0x30>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	8a5b      	ldrh	r3, [r3, #18]
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8007f24:	2317      	movs	r3, #23
 8007f26:	18fb      	adds	r3, r7, r3
 8007f28:	22f7      	movs	r2, #247	@ 0xf7
 8007f2a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f30:	613b      	str	r3, [r7, #16]
  return(result);
 8007f32:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007f38:	b672      	cpsid	i
}
 8007f3a:	46c0      	nop			@ (mov r8, r8)
    if (prv_send_can_message(CANmodule, buffer)) {
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	0011      	movs	r1, r2
 8007f42:	0018      	movs	r0, r3
 8007f44:	f7ff ff5c 	bl	8007e00 <prv_send_can_message>
 8007f48:	1e03      	subs	r3, r0, #0
 8007f4a:	d004      	beq.n	8007f56 <CO_CANsend+0x62>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	695a      	ldr	r2, [r3, #20]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	61da      	str	r2, [r3, #28]
 8007f54:	e009      	b.n	8007f6a <CO_CANsend+0x76>
    } else {
        buffer->bufferFull = true;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	3301      	adds	r3, #1
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f383 8810 	msr	PRIMASK, r3
}
 8007f76:	46c0      	nop			@ (mov r8, r8)

    return err;
 8007f78:	2317      	movs	r3, #23
 8007f7a:	18fb      	adds	r3, r7, r3
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	b25b      	sxtb	r3, r3
}
 8007f80:	0018      	movs	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b006      	add	sp, #24
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f94:	f3ef 8310 	mrs	r3, PRIMASK
 8007f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f9a:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007fa0:	b672      	cpsid	i
}
 8007fa2:	46c0      	nop			@ (mov r8, r8)
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d03d      	beq.n	800803c <CO_CANclearPendingSyncPDOs+0xb4>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007fc0:	2312      	movs	r3, #18
 8007fc2:	18fb      	adds	r3, r7, r3
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	8a12      	ldrh	r2, [r2, #16]
 8007fc8:	801a      	strh	r2, [r3, #0]
 8007fca:	e032      	b.n	8008032 <CO_CANclearPendingSyncPDOs+0xaa>
            if (CANmodule->txArray[i].bufferFull) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68d9      	ldr	r1, [r3, #12]
 8007fd0:	2012      	movs	r0, #18
 8007fd2:	183b      	adds	r3, r7, r0
 8007fd4:	881a      	ldrh	r2, [r3, #0]
 8007fd6:	0013      	movs	r3, r2
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	189b      	adds	r3, r3, r2
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	18cb      	adds	r3, r1, r3
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d01f      	beq.n	8008026 <CO_CANclearPendingSyncPDOs+0x9e>
                if (CANmodule->txArray[i].syncFlag) {
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68d9      	ldr	r1, [r3, #12]
 8007fea:	183b      	adds	r3, r7, r0
 8007fec:	881a      	ldrh	r2, [r3, #0]
 8007fee:	0013      	movs	r3, r2
 8007ff0:	005b      	lsls	r3, r3, #1
 8007ff2:	189b      	adds	r3, r3, r2
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	18cb      	adds	r3, r1, r3
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d013      	beq.n	8008026 <CO_CANclearPendingSyncPDOs+0x9e>
                    CANmodule->txArray[i].bufferFull = false;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68d9      	ldr	r1, [r3, #12]
 8008002:	183b      	adds	r3, r7, r0
 8008004:	881a      	ldrh	r2, [r3, #0]
 8008006:	0013      	movs	r3, r2
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	189b      	adds	r3, r3, r2
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	18cb      	adds	r3, r1, r3
 8008010:	2200      	movs	r2, #0
 8008012:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	849a      	strh	r2, [r3, #36]	@ 0x24
                    tpdoDeleted = 2U;
 8008022:	2302      	movs	r3, #2
 8008024:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8008026:	2212      	movs	r2, #18
 8008028:	18bb      	adds	r3, r7, r2
 800802a:	18ba      	adds	r2, r7, r2
 800802c:	8812      	ldrh	r2, [r2, #0]
 800802e:	3a01      	subs	r2, #1
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	2312      	movs	r3, #18
 8008034:	18fb      	adds	r3, r7, r3
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1c7      	bne.n	8007fcc <CO_CANclearPendingSyncPDOs+0x44>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008040:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f383 8810 	msr	PRIMASK, r3
}
 8008048:	46c0      	nop			@ (mov r8, r8)
    if (tpdoDeleted) {
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d006      	beq.n	800805e <CO_CANclearPendingSyncPDOs+0xd6>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8a5b      	ldrh	r3, [r3, #18]
 8008054:	2280      	movs	r2, #128	@ 0x80
 8008056:	4313      	orrs	r3, r2
 8008058:	b29a      	uxth	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	825a      	strh	r2, [r3, #18]
    }
}
 800805e:	46c0      	nop			@ (mov r8, r8)
 8008060:	46bd      	mov	sp, r7
 8008062:	b006      	add	sp, #24
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	60bb      	str	r3, [r7, #8]
    // CANOpen just care about Bus_off, Warning, Passive and Overflow
    // I didn't find overflow error register in STM32, if you find it please let me know

#ifdef CO_STM32_FDCAN_Driver

    err = ((FDCAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->PSR
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807e:	22e0      	movs	r2, #224	@ 0xe0
 8008080:	4013      	ands	r3, r2
 8008082:	60bb      	str	r3, [r7, #8]
          & (FDCAN_PSR_BO | FDCAN_PSR_EW | FDCAN_PSR_EP);

    if (CANmodule->errOld != err) {
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	429a      	cmp	r2, r3
 800808c:	d034      	beq.n	80080f8 <CO_CANmodule_process+0x90>

        uint16_t status = CANmodule->CANerrorStatus;
 800808e:	210e      	movs	r1, #14
 8008090:	187b      	adds	r3, r7, r1
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	8a52      	ldrh	r2, [r2, #18]
 8008096:	801a      	strh	r2, [r3, #0]

        CANmodule->errOld = err;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (err & FDCAN_PSR_BO) {
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2280      	movs	r2, #128	@ 0x80
 80080a2:	4013      	ands	r3, r2
 80080a4:	d006      	beq.n	80080b4 <CO_CANmodule_process+0x4c>
            status |= CO_CAN_ERRTX_BUS_OFF;
 80080a6:	187b      	adds	r3, r7, r1
 80080a8:	187a      	adds	r2, r7, r1
 80080aa:	8812      	ldrh	r2, [r2, #0]
 80080ac:	2104      	movs	r1, #4
 80080ae:	430a      	orrs	r2, r1
 80080b0:	801a      	strh	r2, [r3, #0]
 80080b2:	e01c      	b.n	80080ee <CO_CANmodule_process+0x86>
            // In this driver we expect that the controller is automatically handling the protocol exceptions.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 80080b4:	200e      	movs	r0, #14
 80080b6:	183b      	adds	r3, r7, r0
 80080b8:	183a      	adds	r2, r7, r0
 80080ba:	8812      	ldrh	r2, [r2, #0]
 80080bc:	4910      	ldr	r1, [pc, #64]	@ (8008100 <CO_CANmodule_process+0x98>)
 80080be:	400a      	ands	r2, r1
 80080c0:	801a      	strh	r2, [r3, #0]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & FDCAN_PSR_EW) {
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2240      	movs	r2, #64	@ 0x40
 80080c6:	4013      	ands	r3, r2
 80080c8:	d006      	beq.n	80080d8 <CO_CANmodule_process+0x70>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 80080ca:	183b      	adds	r3, r7, r0
 80080cc:	183a      	adds	r2, r7, r0
 80080ce:	8812      	ldrh	r2, [r2, #0]
 80080d0:	2102      	movs	r1, #2
 80080d2:	31ff      	adds	r1, #255	@ 0xff
 80080d4:	430a      	orrs	r2, r1
 80080d6:	801a      	strh	r2, [r3, #0]
            }

            if (err & FDCAN_PSR_EP) {
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2220      	movs	r2, #32
 80080dc:	4013      	ands	r3, r2
 80080de:	d006      	beq.n	80080ee <CO_CANmodule_process+0x86>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 80080e0:	220e      	movs	r2, #14
 80080e2:	18bb      	adds	r3, r7, r2
 80080e4:	18ba      	adds	r2, r7, r2
 80080e6:	8812      	ldrh	r2, [r2, #0]
 80080e8:	4906      	ldr	r1, [pc, #24]	@ (8008104 <CO_CANmodule_process+0x9c>)
 80080ea:	430a      	orrs	r2, r1
 80080ec:	801a      	strh	r2, [r3, #0]
            }
        }

        CANmodule->CANerrorStatus = status;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	220e      	movs	r2, #14
 80080f2:	18ba      	adds	r2, r7, r2
 80080f4:	8812      	ldrh	r2, [r2, #0]
 80080f6:	825a      	strh	r2, [r3, #18]

        CANmodule->CANerrorStatus = status;
    }

#endif
}
 80080f8:	46c0      	nop			@ (mov r8, r8)
 80080fa:	46bd      	mov	sp, r7
 80080fc:	b004      	add	sp, #16
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	fffffcf8 	.word	0xfffffcf8
 8008104:	00000202 	.word	0x00000202

08008108 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b08c      	sub	sp, #48	@ 0x30
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8008114:	2300      	movs	r3, #0
 8008116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 8008118:	2329      	movs	r3, #41	@ 0x29
 800811a:	18fb      	adds	r3, r7, r3
 800811c:	2200      	movs	r2, #0
 800811e:	701a      	strb	r2, [r3, #0]

#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_FDCAN_GetRxMessage(hfdcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8008120:	2314      	movs	r3, #20
 8008122:	18fb      	adds	r3, r7, r3
 8008124:	3305      	adds	r3, #5
 8008126:	4a67      	ldr	r2, [pc, #412]	@ (80082c4 <prv_read_can_received_msg+0x1bc>)
 8008128:	68b9      	ldr	r1, [r7, #8]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f001 fab4 	bl	8009698 <HAL_FDCAN_GetRxMessage>
 8008130:	1e03      	subs	r3, r0, #0
 8008132:	d000      	beq.n	8008136 <prv_read_can_received_msg+0x2e>
 8008134:	e0c2      	b.n	80082bc <prv_read_can_received_msg+0x1b4>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.Identifier | (rx_hdr.RxFrameType == FDCAN_REMOTE_FRAME ? FLAG_RTR : 0x00);
 8008136:	4b63      	ldr	r3, [pc, #396]	@ (80082c4 <prv_read_can_received_msg+0x1bc>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b62      	ldr	r3, [pc, #392]	@ (80082c4 <prv_read_can_received_msg+0x1bc>)
 800813c:	6899      	ldr	r1, [r3, #8]
 800813e:	2380      	movs	r3, #128	@ 0x80
 8008140:	059b      	lsls	r3, r3, #22
 8008142:	4299      	cmp	r1, r3
 8008144:	d102      	bne.n	800814c <prv_read_can_received_msg+0x44>
 8008146:	2380      	movs	r3, #128	@ 0x80
 8008148:	021b      	lsls	r3, r3, #8
 800814a:	e000      	b.n	800814e <prv_read_can_received_msg+0x46>
 800814c:	2300      	movs	r3, #0
 800814e:	431a      	orrs	r2, r3
 8008150:	2314      	movs	r3, #20
 8008152:	18fb      	adds	r3, r7, r3
 8008154:	601a      	str	r2, [r3, #0]
    switch (rx_hdr.DataLength) {
 8008156:	4b5b      	ldr	r3, [pc, #364]	@ (80082c4 <prv_read_can_received_msg+0x1bc>)
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	2b08      	cmp	r3, #8
 800815c:	d831      	bhi.n	80081c2 <prv_read_can_received_msg+0xba>
 800815e:	009a      	lsls	r2, r3, #2
 8008160:	4b59      	ldr	r3, [pc, #356]	@ (80082c8 <prv_read_can_received_msg+0x1c0>)
 8008162:	18d3      	adds	r3, r2, r3
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	469f      	mov	pc, r3
        case FDCAN_DLC_BYTES_0:
            rcvMsg.dlc = 0;
 8008168:	2314      	movs	r3, #20
 800816a:	18fb      	adds	r3, r7, r3
 800816c:	2200      	movs	r2, #0
 800816e:	711a      	strb	r2, [r3, #4]
            break;
 8008170:	e02c      	b.n	80081cc <prv_read_can_received_msg+0xc4>
        case FDCAN_DLC_BYTES_1:
            rcvMsg.dlc = 1;
 8008172:	2314      	movs	r3, #20
 8008174:	18fb      	adds	r3, r7, r3
 8008176:	2201      	movs	r2, #1
 8008178:	711a      	strb	r2, [r3, #4]
            break;
 800817a:	e027      	b.n	80081cc <prv_read_can_received_msg+0xc4>
        case FDCAN_DLC_BYTES_2:
            rcvMsg.dlc = 2;
 800817c:	2314      	movs	r3, #20
 800817e:	18fb      	adds	r3, r7, r3
 8008180:	2202      	movs	r2, #2
 8008182:	711a      	strb	r2, [r3, #4]
            break;
 8008184:	e022      	b.n	80081cc <prv_read_can_received_msg+0xc4>
        case FDCAN_DLC_BYTES_3:
            rcvMsg.dlc = 3;
 8008186:	2314      	movs	r3, #20
 8008188:	18fb      	adds	r3, r7, r3
 800818a:	2203      	movs	r2, #3
 800818c:	711a      	strb	r2, [r3, #4]
            break;
 800818e:	e01d      	b.n	80081cc <prv_read_can_received_msg+0xc4>
        case FDCAN_DLC_BYTES_4:
            rcvMsg.dlc = 4;
 8008190:	2314      	movs	r3, #20
 8008192:	18fb      	adds	r3, r7, r3
 8008194:	2204      	movs	r2, #4
 8008196:	711a      	strb	r2, [r3, #4]
            break;
 8008198:	e018      	b.n	80081cc <prv_read_can_received_msg+0xc4>
        case FDCAN_DLC_BYTES_5:
            rcvMsg.dlc = 5;
 800819a:	2314      	movs	r3, #20
 800819c:	18fb      	adds	r3, r7, r3
 800819e:	2205      	movs	r2, #5
 80081a0:	711a      	strb	r2, [r3, #4]
            break;
 80081a2:	e013      	b.n	80081cc <prv_read_can_received_msg+0xc4>
        case FDCAN_DLC_BYTES_6:
            rcvMsg.dlc = 6;
 80081a4:	2314      	movs	r3, #20
 80081a6:	18fb      	adds	r3, r7, r3
 80081a8:	2206      	movs	r2, #6
 80081aa:	711a      	strb	r2, [r3, #4]
            break;
 80081ac:	e00e      	b.n	80081cc <prv_read_can_received_msg+0xc4>
        case FDCAN_DLC_BYTES_7:
            rcvMsg.dlc = 7;
 80081ae:	2314      	movs	r3, #20
 80081b0:	18fb      	adds	r3, r7, r3
 80081b2:	2207      	movs	r2, #7
 80081b4:	711a      	strb	r2, [r3, #4]
            break;
 80081b6:	e009      	b.n	80081cc <prv_read_can_received_msg+0xc4>
        case FDCAN_DLC_BYTES_8:
            rcvMsg.dlc = 8;
 80081b8:	2314      	movs	r3, #20
 80081ba:	18fb      	adds	r3, r7, r3
 80081bc:	2208      	movs	r2, #8
 80081be:	711a      	strb	r2, [r3, #4]
            break;
 80081c0:	e004      	b.n	80081cc <prv_read_can_received_msg+0xc4>
        default:
            rcvMsg.dlc = 0;
 80081c2:	2314      	movs	r3, #20
 80081c4:	18fb      	adds	r3, r7, r3
 80081c6:	2200      	movs	r2, #0
 80081c8:	711a      	strb	r2, [r3, #4]
            break; /* Invalid length when more than 8 */
 80081ca:	46c0      	nop			@ (mov r8, r8)
    }
    rcvMsgIdent = rcvMsg.ident;
 80081cc:	2114      	movs	r1, #20
 80081ce:	187b      	adds	r3, r7, r1
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	627b      	str	r3, [r7, #36]	@ 0x24

    // save Operationtime
     if(rcvMsg.ident == 0x1 && rcvMsg.dlc >0 && msg_701_HB == false){
 80081d4:	187b      	adds	r3, r7, r1
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d11a      	bne.n	8008212 <prv_read_can_received_msg+0x10a>
 80081dc:	187b      	adds	r3, r7, r1
 80081de:	791b      	ldrb	r3, [r3, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d016      	beq.n	8008212 <prv_read_can_received_msg+0x10a>
 80081e4:	4b39      	ldr	r3, [pc, #228]	@ (80082cc <prv_read_can_received_msg+0x1c4>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2201      	movs	r2, #1
 80081ea:	4053      	eors	r3, r2
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00f      	beq.n	8008212 <prv_read_can_received_msg+0x10a>
    	FFZ.OperationTime = (rcvMsg.data[3]<<24)| (rcvMsg.data[2]<<16)|(rcvMsg.data[1]<<8)|rcvMsg.data[0];
 80081f2:	187b      	adds	r3, r7, r1
 80081f4:	7a1b      	ldrb	r3, [r3, #8]
 80081f6:	061a      	lsls	r2, r3, #24
 80081f8:	187b      	adds	r3, r7, r1
 80081fa:	79db      	ldrb	r3, [r3, #7]
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	431a      	orrs	r2, r3
 8008200:	187b      	adds	r3, r7, r1
 8008202:	799b      	ldrb	r3, [r3, #6]
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	4313      	orrs	r3, r2
 8008208:	187a      	adds	r2, r7, r1
 800820a:	7952      	ldrb	r2, [r2, #5]
 800820c:	431a      	orrs	r2, r3
 800820e:	4b30      	ldr	r3, [pc, #192]	@ (80082d0 <prv_read_can_received_msg+0x1c8>)
 8008210:	609a      	str	r2, [r3, #8]
        }
    //Controll in main to start Process
    if(rcvMsg.ident == 0x701 && rcvMsg.dlc >0 && rcvMsg.data[0]== 0x05){
 8008212:	2114      	movs	r1, #20
 8008214:	187b      	adds	r3, r7, r1
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a2e      	ldr	r2, [pc, #184]	@ (80082d4 <prv_read_can_received_msg+0x1cc>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d10b      	bne.n	8008236 <prv_read_can_received_msg+0x12e>
 800821e:	000a      	movs	r2, r1
 8008220:	18bb      	adds	r3, r7, r2
 8008222:	791b      	ldrb	r3, [r3, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d006      	beq.n	8008236 <prv_read_can_received_msg+0x12e>
 8008228:	18bb      	adds	r3, r7, r2
 800822a:	795b      	ldrb	r3, [r3, #5]
 800822c:	2b05      	cmp	r3, #5
 800822e:	d102      	bne.n	8008236 <prv_read_can_received_msg+0x12e>
    	msg_701_HB = true;
 8008230:	4b26      	ldr	r3, [pc, #152]	@ (80082cc <prv_read_can_received_msg+0x1c4>)
 8008232:	2201      	movs	r2, #1
 8008234:	701a      	strb	r2, [r3, #0]

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8008236:	4b28      	ldr	r3, [pc, #160]	@ (80082d8 <prv_read_can_received_msg+0x1d0>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <prv_read_can_received_msg+0x13c>
        __BKPT(0);
 8008240:	be00      	bkpt	0x0000
 8008242:	e026      	b.n	8008292 <prv_read_can_received_msg+0x18a>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8008244:	4b24      	ldr	r3, [pc, #144]	@ (80082d8 <prv_read_can_received_msg+0x1d0>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800824c:	4b22      	ldr	r3, [pc, #136]	@ (80082d8 <prv_read_can_received_msg+0x1d0>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	232a      	movs	r3, #42	@ 0x2a
 8008252:	18fb      	adds	r3, r7, r3
 8008254:	8912      	ldrh	r2, [r2, #8]
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	e016      	b.n	8008288 <prv_read_can_received_msg+0x180>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 800825a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	001a      	movs	r2, r3
 8008260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008262:	4053      	eors	r3, r2
 8008264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008266:	8852      	ldrh	r2, [r2, #2]
 8008268:	4013      	ands	r3, r2
 800826a:	d104      	bne.n	8008276 <prv_read_can_received_msg+0x16e>
                messageFound = 1;
 800826c:	2329      	movs	r3, #41	@ 0x29
 800826e:	18fb      	adds	r3, r7, r3
 8008270:	2201      	movs	r2, #1
 8008272:	701a      	strb	r2, [r3, #0]
                break;
 8008274:	e00d      	b.n	8008292 <prv_read_can_received_msg+0x18a>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8008276:	222a      	movs	r2, #42	@ 0x2a
 8008278:	18bb      	adds	r3, r7, r2
 800827a:	18ba      	adds	r2, r7, r2
 800827c:	8812      	ldrh	r2, [r2, #0]
 800827e:	3a01      	subs	r2, #1
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008284:	330c      	adds	r3, #12
 8008286:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008288:	232a      	movs	r3, #42	@ 0x2a
 800828a:	18fb      	adds	r3, r7, r3
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e3      	bne.n	800825a <prv_read_can_received_msg+0x152>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8008292:	2329      	movs	r3, #41	@ 0x29
 8008294:	18fb      	adds	r3, r7, r3
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d010      	beq.n	80082be <prv_read_can_received_msg+0x1b6>
 800829c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00d      	beq.n	80082be <prv_read_can_received_msg+0x1b6>
 80082a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <prv_read_can_received_msg+0x1b6>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 80082aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	2114      	movs	r1, #20
 80082b4:	1879      	adds	r1, r7, r1
 80082b6:	0018      	movs	r0, r3
 80082b8:	4790      	blx	r2
 80082ba:	e000      	b.n	80082be <prv_read_can_received_msg+0x1b6>
        return;
 80082bc:	46c0      	nop			@ (mov r8, r8)
    }
}
 80082be:	46bd      	mov	sp, r7
 80082c0:	b00c      	add	sp, #48	@ 0x30
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	200004d8 	.word	0x200004d8
 80082c8:	080108a4 	.word	0x080108a4
 80082cc:	200004b0 	.word	0x200004b0
 80082d0:	200005fc 	.word	0x200005fc
 80082d4:	00000701 	.word	0x00000701
 80082d8:	200004ac 	.word	0x200004ac

080082dc <HAL_FDCAN_RxFifo0Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
    if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2201      	movs	r2, #1
 80082ea:	4013      	ands	r3, r2
 80082ec:	d005      	beq.n	80082fa <HAL_FDCAN_RxFifo0Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO0, RxFifo0ITs);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2140      	movs	r1, #64	@ 0x40
 80082f4:	0018      	movs	r0, r3
 80082f6:	f7ff ff07 	bl	8008108 <prv_read_can_received_msg>
    }
}
 80082fa:	46c0      	nop			@ (mov r8, r8)
 80082fc:	46bd      	mov	sp, r7
 80082fe:	b002      	add	sp, #8
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_FDCAN_RxFifo1Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo1ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo1ITs) {
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
    if (RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) {
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2208      	movs	r2, #8
 8008310:	4013      	ands	r3, r2
 8008312:	d005      	beq.n	8008320 <HAL_FDCAN_RxFifo1Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO1, RxFifo1ITs);
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2141      	movs	r1, #65	@ 0x41
 800831a:	0018      	movs	r0, r3
 800831c:	f7ff fef4 	bl	8008108 <prv_read_can_received_msg>
    }
}
 8008320:	46c0      	nop			@ (mov r8, r8)
 8008322:	46bd      	mov	sp, r7
 8008324:	b002      	add	sp, #8
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_FDCAN_TxBufferCompleteCallback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       BufferIndexes: Bits of successfully sent TX buffers
 */
void
HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef* hfdcan, uint32_t BufferIndexes) {
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
    CANModule_local->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8008332:	4b30      	ldr	r3, [pc, #192]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2200      	movs	r2, #0
 8008338:	621a      	str	r2, [r3, #32]
    CANModule_local->bufferInhibitFlag = false;            /* Clear flag from previous message */
 800833a:	4b2e      	ldr	r3, [pc, #184]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2200      	movs	r2, #0
 8008340:	61da      	str	r2, [r3, #28]
    if (CANModule_local->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8008342:	4b2c      	ldr	r3, [pc, #176]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d04d      	beq.n	80083ea <HAL_FDCAN_TxBufferCompleteCallback+0xc2>
        CO_CANtx_t* buffer = &CANModule_local->txArray[0]; /* Start with first buffer handle */
 800834e:	4b29      	ldr	r3, [pc, #164]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	617b      	str	r3, [r7, #20]
         * This function is always called from interrupt,
         * however to make sure no preemption can happen, interrupts are anyway locked
         * (unless you can guarantee no higher priority interrupt will try to access to FDCAN instance and send data,
         *  then no need to lock interrupts..)
         */
        CO_LOCK_CAN_SEND(CANModule_local);
 8008356:	4b27      	ldr	r3, [pc, #156]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 8008358:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800835a:	f3ef 8210 	mrs	r2, PRIMASK
 800835e:	60fa      	str	r2, [r7, #12]
  return(result);
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8008364:	b672      	cpsid	i
}
 8008366:	46c0      	nop			@ (mov r8, r8)
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8008368:	4b22      	ldr	r3, [pc, #136]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	2312      	movs	r3, #18
 800836e:	18fb      	adds	r3, r7, r3
 8008370:	8a12      	ldrh	r2, [r2, #16]
 8008372:	801a      	strh	r2, [r3, #0]
 8008374:	e024      	b.n	80083c0 <HAL_FDCAN_TxBufferCompleteCallback+0x98>
            /* Try to send message */
            if (buffer->bufferFull) {
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d017      	beq.n	80083ae <HAL_FDCAN_TxBufferCompleteCallback+0x86>
                if (prv_send_can_message(CANModule_local, buffer)) {
 800837e:	4b1d      	ldr	r3, [pc, #116]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	0011      	movs	r1, r2
 8008386:	0018      	movs	r0, r3
 8008388:	f7ff fd3a 	bl	8007e00 <prv_send_can_message>
 800838c:	1e03      	subs	r3, r0, #0
 800838e:	d00e      	beq.n	80083ae <HAL_FDCAN_TxBufferCompleteCallback+0x86>
                    buffer->bufferFull = false;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2200      	movs	r2, #0
 8008394:	611a      	str	r2, [r3, #16]
                    CANModule_local->CANtxCount--;
 8008396:	4b17      	ldr	r3, [pc, #92]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 800839c:	b292      	uxth	r2, r2
 800839e:	3a01      	subs	r2, #1
 80083a0:	b292      	uxth	r2, r2
 80083a2:	849a      	strh	r2, [r3, #36]	@ 0x24
                    CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 80083a4:	4b13      	ldr	r3, [pc, #76]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	6952      	ldr	r2, [r2, #20]
 80083ac:	61da      	str	r2, [r3, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 80083ae:	2212      	movs	r2, #18
 80083b0:	18bb      	adds	r3, r7, r2
 80083b2:	18ba      	adds	r2, r7, r2
 80083b4:	8812      	ldrh	r2, [r2, #0]
 80083b6:	3a01      	subs	r2, #1
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	3318      	adds	r3, #24
 80083be:	617b      	str	r3, [r7, #20]
 80083c0:	2212      	movs	r2, #18
 80083c2:	18bb      	adds	r3, r7, r2
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1d5      	bne.n	8008376 <HAL_FDCAN_TxBufferCompleteCallback+0x4e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 80083ca:	18bb      	adds	r3, r7, r2
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d103      	bne.n	80083da <HAL_FDCAN_TxBufferCompleteCallback+0xb2>
            CANModule_local->CANtxCount = 0U;
 80083d2:	4b08      	ldr	r3, [pc, #32]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2200      	movs	r2, #0
 80083d8:	849a      	strh	r2, [r3, #36]	@ 0x24
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
 80083da:	4b06      	ldr	r3, [pc, #24]	@ (80083f4 <HAL_FDCAN_TxBufferCompleteCallback+0xcc>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f383 8810 	msr	PRIMASK, r3
}
 80083e8:	46c0      	nop			@ (mov r8, r8)
    }
}
 80083ea:	46c0      	nop			@ (mov r8, r8)
 80083ec:	46bd      	mov	sp, r7
 80083ee:	b006      	add	sp, #24
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	46c0      	nop			@ (mov r8, r8)
 80083f4:	200004ac 	.word	0x200004ac

080083f8 <FFZ_Init>:
#include "ffz.h"

/**
 *
 */
void FFZ_Init() {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
//	FFZ_Objects FFZ;

	//TX
	FFZ.Driving_Active = NOT_ACTIVE;
 80083fc:	4b16      	ldr	r3, [pc, #88]	@ (8008458 <FFZ_Init+0x60>)
 80083fe:	2200      	movs	r2, #0
 8008400:	701a      	strb	r2, [r3, #0]
	FFZ.Lift_Hydraulic_Active = NOT_ACTIVE;
 8008402:	4b15      	ldr	r3, [pc, #84]	@ (8008458 <FFZ_Init+0x60>)
 8008404:	2200      	movs	r2, #0
 8008406:	705a      	strb	r2, [r3, #1]
	FFZ.DriverPresent = NOT_ACTIVE;
 8008408:	4b13      	ldr	r3, [pc, #76]	@ (8008458 <FFZ_Init+0x60>)
 800840a:	2200      	movs	r2, #0
 800840c:	709a      	strb	r2, [r3, #2]
	FFZ.TruckSpeed = 0;
 800840e:	4b12      	ldr	r3, [pc, #72]	@ (8008458 <FFZ_Init+0x60>)
 8008410:	2200      	movs	r2, #0
 8008412:	809a      	strh	r2, [r3, #4]
	FFZ.OperationTime = EBZ_Init();
 8008414:	f000 fb34 	bl	8008a80 <EBZ_Init>
 8008418:	0003      	movs	r3, r0
 800841a:	001a      	movs	r2, r3
 800841c:	4b0e      	ldr	r3, [pc, #56]	@ (8008458 <FFZ_Init+0x60>)
 800841e:	609a      	str	r2, [r3, #8]
	FFZ.F1A_CreepSpeed = AVAILABLE;
 8008420:	4b0d      	ldr	r3, [pc, #52]	@ (8008458 <FFZ_Init+0x60>)
 8008422:	2201      	movs	r2, #1
 8008424:	731a      	strb	r2, [r3, #12]
	FFZ.F2A_LiftingLimitiation = AVAILABLE;
 8008426:	4b0c      	ldr	r3, [pc, #48]	@ (8008458 <FFZ_Init+0x60>)
 8008428:	2201      	movs	r2, #1
 800842a:	735a      	strb	r2, [r3, #13]
	FFZ.F3A_TruckSpeedSignal = AVAILABLE;
 800842c:	4b0a      	ldr	r3, [pc, #40]	@ (8008458 <FFZ_Init+0x60>)
 800842e:	2201      	movs	r2, #1
 8008430:	739a      	strb	r2, [r3, #14]
	FFZ.MainVersion = 0x01;
 8008432:	4b09      	ldr	r3, [pc, #36]	@ (8008458 <FFZ_Init+0x60>)
 8008434:	2201      	movs	r2, #1
 8008436:	73da      	strb	r2, [r3, #15]
	FFZ.Subversion = 0x01;
 8008438:	4b07      	ldr	r3, [pc, #28]	@ (8008458 <FFZ_Init+0x60>)
 800843a:	2201      	movs	r2, #1
 800843c:	741a      	strb	r2, [r3, #16]

	// RX
	FFZ.ACRQ_AcceesReq = INHIBT;
 800843e:	4b06      	ldr	r3, [pc, #24]	@ (8008458 <FFZ_Init+0x60>)
 8008440:	2200      	movs	r2, #0
 8008442:	745a      	strb	r2, [r3, #17]
	FFZ.SRRQ_SpeedReductionReq = INHIBT;
 8008444:	4b04      	ldr	r3, [pc, #16]	@ (8008458 <FFZ_Init+0x60>)
 8008446:	2200      	movs	r2, #0
 8008448:	749a      	strb	r2, [r3, #18]
	FFZ.LRRQ_LiftReductionReq = INHIBT;
 800844a:	4b03      	ldr	r3, [pc, #12]	@ (8008458 <FFZ_Init+0x60>)
 800844c:	2200      	movs	r2, #0
 800844e:	74da      	strb	r2, [r3, #19]

}
 8008450:	46c0      	nop			@ (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	46c0      	nop			@ (mov r8, r8)
 8008458:	200005fc 	.word	0x200005fc

0800845c <writedata>:
 *      Author: Testrechner
 */

#include "flashMemory.h"

void writedata(uint32_t StartPageAddress, uint32_t Data) {
 800845c:	b5b0      	push	{r4, r5, r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	60fb      	str	r3, [r7, #12]

	HAL_FLASH_Unlock();
 800846a:	f001 fdb7 	bl	8009fdc <HAL_FLASH_Unlock>
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800846e:	2110      	movs	r1, #16
 8008470:	187b      	adds	r3, r7, r1
 8008472:	2202      	movs	r2, #2
 8008474:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8008476:	187b      	adds	r3, r7, r1
 8008478:	2204      	movs	r2, #4
 800847a:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Page = PAGE;
 800847c:	187b      	adds	r3, r7, r1
 800847e:	223f      	movs	r2, #63	@ 0x3f
 8008480:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 8008482:	187b      	adds	r3, r7, r1
 8008484:	2201      	movs	r2, #1
 8008486:	60da      	str	r2, [r3, #12]

	/* Erase the user Flash area*/
//	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);


	 if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8008488:	230c      	movs	r3, #12
 800848a:	18fa      	adds	r2, r7, r3
 800848c:	187b      	adds	r3, r7, r1
 800848e:	0011      	movs	r1, r2
 8008490:	0018      	movs	r0, r3
 8008492:	f001 fe61 	bl	800a158 <HAL_FLASHEx_Erase>
 8008496:	1e03      	subs	r3, r0, #0
 8008498:	d004      	beq.n	80084a4 <writedata+0x48>
	    {
	        HAL_FLASH_GetError();
 800849a:	f001 fde5 	bl	800a068 <HAL_FLASH_GetError>
	        HAL_FLASH_Lock();
 800849e:	f001 fdc1 	bl	800a024 <HAL_FLASH_Lock>
 80084a2:	e00b      	b.n	80084bc <writedata+0x60>
	        return;
	    }
	/* Program the user Flash area word by word*/
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, Data);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	001c      	movs	r4, r3
 80084a8:	2300      	movs	r3, #0
 80084aa:	001d      	movs	r5, r3
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	0022      	movs	r2, r4
 80084b0:	002b      	movs	r3, r5
 80084b2:	2001      	movs	r0, #1
 80084b4:	f001 fd44 	bl	8009f40 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80084b8:	f001 fdb4 	bl	800a024 <HAL_FLASH_Lock>

}
 80084bc:	46bd      	mov	sp, r7
 80084be:	b008      	add	sp, #32
 80084c0:	bdb0      	pop	{r4, r5, r7, pc}

080084c2 <readdata>:

void readdata(uint32_t StartPageAddress, uint32_t *RxBuf) {
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b082      	sub	sp, #8
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	6039      	str	r1, [r7, #0]

	*RxBuf = *(__IO uint32_t*) StartPageAddress;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	46c0      	nop			@ (mov r8, r8)
 80084d6:	46bd      	mov	sp, r7
 80084d8:	b002      	add	sp, #8
 80084da:	bd80      	pop	{r7, pc}

080084dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80084e2:	f000 fcdb 	bl	8008e9c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80084e6:	f000 f843 	bl	8008570 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80084ea:	f000 f94f 	bl	800878c <MX_GPIO_Init>
	MX_FDCAN2_Init();
 80084ee:	f000 f8a1 	bl	8008634 <MX_FDCAN2_Init>
	MX_TIM14_Init();
 80084f2:	f000 f925 	bl	8008740 <MX_TIM14_Init>
	MX_USB_Device_Init();
 80084f6:	f006 fb33 	bl	800eb60 <MX_USB_Device_Init>
	MX_TIM7_Init();
 80084fa:	f000 f8e3 	bl	80086c4 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 80084fe:	4b15      	ldr	r3, [pc, #84]	@ (8008554 <main+0x78>)
 8008500:	0018      	movs	r0, r3
 8008502:	f003 fb8d 	bl	800bc20 <HAL_TIM_Base_Start_IT>
	readdata(ADDRESS, &Rx_OperationTime);
 8008506:	4b14      	ldr	r3, [pc, #80]	@ (8008558 <main+0x7c>)
 8008508:	4a14      	ldr	r2, [pc, #80]	@ (800855c <main+0x80>)
 800850a:	0019      	movs	r1, r3
 800850c:	0010      	movs	r0, r2
 800850e:	f7ff ffd8 	bl	80084c2 <readdata>
	FFZ_Init();
 8008512:	f7ff ff71 	bl	80083f8 <FFZ_Init>
//	FFZ.OperationTime = EBZ_Init();

	CANopenNodeSTM32 canOpenNodeSTM32;
	canOpenNodeSTM32.CANHandle = &hfdcan2;
 8008516:	003b      	movs	r3, r7
 8008518:	4a11      	ldr	r2, [pc, #68]	@ (8008560 <main+0x84>)
 800851a:	609a      	str	r2, [r3, #8]
	canOpenNodeSTM32.HWInitFunction = MX_FDCAN2_Init;
 800851c:	003b      	movs	r3, r7
 800851e:	4a11      	ldr	r2, [pc, #68]	@ (8008564 <main+0x88>)
 8008520:	60da      	str	r2, [r3, #12]
	canOpenNodeSTM32.timerHandle = &htim14;
 8008522:	003b      	movs	r3, r7
 8008524:	4a10      	ldr	r2, [pc, #64]	@ (8008568 <main+0x8c>)
 8008526:	605a      	str	r2, [r3, #4]
	canOpenNodeSTM32.desiredNodeID = 0x15;
 8008528:	003b      	movs	r3, r7
 800852a:	2215      	movs	r2, #21
 800852c:	701a      	strb	r2, [r3, #0]
	canOpenNodeSTM32.baudrate = 500;
 800852e:	003b      	movs	r3, r7
 8008530:	22fa      	movs	r2, #250	@ 0xfa
 8008532:	0052      	lsls	r2, r2, #1
 8008534:	805a      	strh	r2, [r3, #2]
	canopen_app_init(&canOpenNodeSTM32);
 8008536:	003b      	movs	r3, r7
 8008538:	0018      	movs	r0, r3
 800853a:	f7ff f899 	bl	8007670 <canopen_app_init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		readParams();
 800853e:	f000 f9e7 	bl	8008910 <readParams>
		setParams();
 8008542:	f000 fa53 	bl	80089ec <setParams>

		/*
		 * Process CANopen Start:
		 * Nur wenn Master ein Heartbeat sendet kann das FFZ antowrten,
		 */
		if (msg_701_HB == true) {
 8008546:	4b09      	ldr	r3, [pc, #36]	@ (800856c <main+0x90>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0f7      	beq.n	800853e <main+0x62>
			canopen_app_process();
 800854e:	f7ff f9f3 	bl	8007938 <canopen_app_process>
		readParams();
 8008552:	e7f4      	b.n	800853e <main+0x62>
 8008554:	20000564 	.word	0x20000564
 8008558:	20000610 	.word	0x20000610
 800855c:	0801f800 	.word	0x0801f800
 8008560:	20000500 	.word	0x20000500
 8008564:	08008635 	.word	0x08008635
 8008568:	200005b0 	.word	0x200005b0
 800856c:	200004b0 	.word	0x200004b0

08008570 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8008570:	b590      	push	{r4, r7, lr}
 8008572:	b095      	sub	sp, #84	@ 0x54
 8008574:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008576:	2414      	movs	r4, #20
 8008578:	193b      	adds	r3, r7, r4
 800857a:	0018      	movs	r0, r3
 800857c:	233c      	movs	r3, #60	@ 0x3c
 800857e:	001a      	movs	r2, r3
 8008580:	2100      	movs	r1, #0
 8008582:	f007 fae0 	bl	800fb46 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008586:	1d3b      	adds	r3, r7, #4
 8008588:	0018      	movs	r0, r3
 800858a:	2310      	movs	r3, #16
 800858c:	001a      	movs	r2, r3
 800858e:	2100      	movs	r1, #0
 8008590:	f007 fad9 	bl	800fb46 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008594:	2380      	movs	r3, #128	@ 0x80
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	0018      	movs	r0, r3
 800859a:	f002 fb83 	bl	800aca4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800859e:	193b      	adds	r3, r7, r4
 80085a0:	2222      	movs	r2, #34	@ 0x22
 80085a2:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80085a4:	193b      	adds	r3, r7, r4
 80085a6:	2280      	movs	r2, #128	@ 0x80
 80085a8:	0052      	lsls	r2, r2, #1
 80085aa:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80085ac:	193b      	adds	r3, r7, r4
 80085ae:	2280      	movs	r2, #128	@ 0x80
 80085b0:	03d2      	lsls	r2, r2, #15
 80085b2:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80085b4:	0021      	movs	r1, r4
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	2200      	movs	r2, #0
 80085ba:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80085bc:	187b      	adds	r3, r7, r1
 80085be:	2240      	movs	r2, #64	@ 0x40
 80085c0:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085c2:	187b      	adds	r3, r7, r1
 80085c4:	2202      	movs	r2, #2
 80085c6:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80085c8:	187b      	adds	r3, r7, r1
 80085ca:	2202      	movs	r2, #2
 80085cc:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80085ce:	187b      	adds	r3, r7, r1
 80085d0:	2200      	movs	r2, #0
 80085d2:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLN = 8;
 80085d4:	187b      	adds	r3, r7, r1
 80085d6:	2208      	movs	r2, #8
 80085d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085da:	187b      	adds	r3, r7, r1
 80085dc:	2280      	movs	r2, #128	@ 0x80
 80085de:	0292      	lsls	r2, r2, #10
 80085e0:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80085e2:	187b      	adds	r3, r7, r1
 80085e4:	2280      	movs	r2, #128	@ 0x80
 80085e6:	0492      	lsls	r2, r2, #18
 80085e8:	635a      	str	r2, [r3, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80085ea:	187b      	adds	r3, r7, r1
 80085ec:	2280      	movs	r2, #128	@ 0x80
 80085ee:	0592      	lsls	r2, r2, #22
 80085f0:	639a      	str	r2, [r3, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80085f2:	187b      	adds	r3, r7, r1
 80085f4:	0018      	movs	r0, r3
 80085f6:	f002 fb95 	bl	800ad24 <HAL_RCC_OscConfig>
 80085fa:	1e03      	subs	r3, r0, #0
 80085fc:	d001      	beq.n	8008602 <SystemClock_Config+0x92>
		Error_Handler();
 80085fe:	f000 fa53 	bl	8008aa8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8008602:	1d3b      	adds	r3, r7, #4
 8008604:	2207      	movs	r2, #7
 8008606:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008608:	1d3b      	adds	r3, r7, #4
 800860a:	2202      	movs	r2, #2
 800860c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800860e:	1d3b      	adds	r3, r7, #4
 8008610:	2200      	movs	r2, #0
 8008612:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008614:	1d3b      	adds	r3, r7, #4
 8008616:	2200      	movs	r2, #0
 8008618:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800861a:	1d3b      	adds	r3, r7, #4
 800861c:	2102      	movs	r1, #2
 800861e:	0018      	movs	r0, r3
 8008620:	f002 fee0 	bl	800b3e4 <HAL_RCC_ClockConfig>
 8008624:	1e03      	subs	r3, r0, #0
 8008626:	d001      	beq.n	800862c <SystemClock_Config+0xbc>
		Error_Handler();
 8008628:	f000 fa3e 	bl	8008aa8 <Error_Handler>
	}
}
 800862c:	46c0      	nop			@ (mov r8, r8)
 800862e:	46bd      	mov	sp, r7
 8008630:	b015      	add	sp, #84	@ 0x54
 8008632:	bd90      	pop	{r4, r7, pc}

08008634 <MX_FDCAN2_Init>:
/**
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void) {
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN2_Init 0 */

	/* USER CODE BEGIN FDCAN2_Init 1 */

	/* USER CODE END FDCAN2_Init 1 */
	hfdcan2.Instance = FDCAN2;
 8008638:	4b20      	ldr	r3, [pc, #128]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 800863a:	4a21      	ldr	r2, [pc, #132]	@ (80086c0 <MX_FDCAN2_Init+0x8c>)
 800863c:	601a      	str	r2, [r3, #0]
	hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800863e:	4b1f      	ldr	r3, [pc, #124]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 8008640:	2200      	movs	r2, #0
 8008642:	605a      	str	r2, [r3, #4]
	hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8008644:	4b1d      	ldr	r3, [pc, #116]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 8008646:	2200      	movs	r2, #0
 8008648:	609a      	str	r2, [r3, #8]
	hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800864a:	4b1c      	ldr	r3, [pc, #112]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 800864c:	2200      	movs	r2, #0
 800864e:	60da      	str	r2, [r3, #12]
	hfdcan2.Init.AutoRetransmission = ENABLE;
 8008650:	4b1a      	ldr	r3, [pc, #104]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 8008652:	2201      	movs	r2, #1
 8008654:	741a      	strb	r2, [r3, #16]
	hfdcan2.Init.TransmitPause = ENABLE;
 8008656:	4b19      	ldr	r3, [pc, #100]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 8008658:	2201      	movs	r2, #1
 800865a:	745a      	strb	r2, [r3, #17]
	hfdcan2.Init.ProtocolException = DISABLE;
 800865c:	4b17      	ldr	r3, [pc, #92]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 800865e:	2200      	movs	r2, #0
 8008660:	749a      	strb	r2, [r3, #18]
	hfdcan2.Init.NominalPrescaler = 8;
 8008662:	4b16      	ldr	r3, [pc, #88]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 8008664:	2208      	movs	r2, #8
 8008666:	615a      	str	r2, [r3, #20]
	hfdcan2.Init.NominalSyncJumpWidth = 1;
 8008668:	4b14      	ldr	r3, [pc, #80]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 800866a:	2201      	movs	r2, #1
 800866c:	619a      	str	r2, [r3, #24]
	hfdcan2.Init.NominalTimeSeg1 = 13;
 800866e:	4b13      	ldr	r3, [pc, #76]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 8008670:	220d      	movs	r2, #13
 8008672:	61da      	str	r2, [r3, #28]
	hfdcan2.Init.NominalTimeSeg2 = 2;
 8008674:	4b11      	ldr	r3, [pc, #68]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 8008676:	2202      	movs	r2, #2
 8008678:	621a      	str	r2, [r3, #32]
	hfdcan2.Init.DataPrescaler = 8;
 800867a:	4b10      	ldr	r3, [pc, #64]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 800867c:	2208      	movs	r2, #8
 800867e:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan2.Init.DataSyncJumpWidth = 1;
 8008680:	4b0e      	ldr	r3, [pc, #56]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 8008682:	2201      	movs	r2, #1
 8008684:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan2.Init.DataTimeSeg1 = 13;
 8008686:	4b0d      	ldr	r3, [pc, #52]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 8008688:	220d      	movs	r2, #13
 800868a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan2.Init.DataTimeSeg2 = 2;
 800868c:	4b0b      	ldr	r3, [pc, #44]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 800868e:	2202      	movs	r2, #2
 8008690:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan2.Init.StdFiltersNbr = 0;
 8008692:	4b0a      	ldr	r3, [pc, #40]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 8008694:	2200      	movs	r2, #0
 8008696:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan2.Init.ExtFiltersNbr = 0;
 8008698:	4b08      	ldr	r3, [pc, #32]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 800869a:	2200      	movs	r2, #0
 800869c:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800869e:	4b07      	ldr	r3, [pc, #28]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK) {
 80086a4:	4b05      	ldr	r3, [pc, #20]	@ (80086bc <MX_FDCAN2_Init+0x88>)
 80086a6:	0018      	movs	r0, r3
 80086a8:	f000 fd88 	bl	80091bc <HAL_FDCAN_Init>
 80086ac:	1e03      	subs	r3, r0, #0
 80086ae:	d001      	beq.n	80086b4 <MX_FDCAN2_Init+0x80>
		Error_Handler();
 80086b0:	f000 f9fa 	bl	8008aa8 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN2_Init 2 */

	/* USER CODE END FDCAN2_Init 2 */

}
 80086b4:	46c0      	nop			@ (mov r8, r8)
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	46c0      	nop			@ (mov r8, r8)
 80086bc:	20000500 	.word	0x20000500
 80086c0:	40006800 	.word	0x40006800

080086c4 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80086ca:	1d3b      	adds	r3, r7, #4
 80086cc:	0018      	movs	r0, r3
 80086ce:	230c      	movs	r3, #12
 80086d0:	001a      	movs	r2, r3
 80086d2:	2100      	movs	r1, #0
 80086d4:	f007 fa37 	bl	800fb46 <memset>

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 80086d8:	4b15      	ldr	r3, [pc, #84]	@ (8008730 <MX_TIM7_Init+0x6c>)
 80086da:	4a16      	ldr	r2, [pc, #88]	@ (8008734 <MX_TIM7_Init+0x70>)
 80086dc:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 64000 - 1;
 80086de:	4b14      	ldr	r3, [pc, #80]	@ (8008730 <MX_TIM7_Init+0x6c>)
 80086e0:	4a15      	ldr	r2, [pc, #84]	@ (8008738 <MX_TIM7_Init+0x74>)
 80086e2:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086e4:	4b12      	ldr	r3, [pc, #72]	@ (8008730 <MX_TIM7_Init+0x6c>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 1000 - 1;
 80086ea:	4b11      	ldr	r3, [pc, #68]	@ (8008730 <MX_TIM7_Init+0x6c>)
 80086ec:	4a13      	ldr	r2, [pc, #76]	@ (800873c <MX_TIM7_Init+0x78>)
 80086ee:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008730 <MX_TIM7_Init+0x6c>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80086f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008730 <MX_TIM7_Init+0x6c>)
 80086f8:	0018      	movs	r0, r3
 80086fa:	f003 fa39 	bl	800bb70 <HAL_TIM_Base_Init>
 80086fe:	1e03      	subs	r3, r0, #0
 8008700:	d001      	beq.n	8008706 <MX_TIM7_Init+0x42>
		Error_Handler();
 8008702:	f000 f9d1 	bl	8008aa8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008706:	1d3b      	adds	r3, r7, #4
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800870c:	1d3b      	adds	r3, r7, #4
 800870e:	2200      	movs	r2, #0
 8008710:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8008712:	1d3a      	adds	r2, r7, #4
 8008714:	4b06      	ldr	r3, [pc, #24]	@ (8008730 <MX_TIM7_Init+0x6c>)
 8008716:	0011      	movs	r1, r2
 8008718:	0018      	movs	r0, r3
 800871a:	f003 fcd1 	bl	800c0c0 <HAL_TIMEx_MasterConfigSynchronization>
 800871e:	1e03      	subs	r3, r0, #0
 8008720:	d001      	beq.n	8008726 <MX_TIM7_Init+0x62>
			!= HAL_OK) {
		Error_Handler();
 8008722:	f000 f9c1 	bl	8008aa8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8008726:	46c0      	nop			@ (mov r8, r8)
 8008728:	46bd      	mov	sp, r7
 800872a:	b004      	add	sp, #16
 800872c:	bd80      	pop	{r7, pc}
 800872e:	46c0      	nop			@ (mov r8, r8)
 8008730:	20000564 	.word	0x20000564
 8008734:	40001400 	.word	0x40001400
 8008738:	0000f9ff 	.word	0x0000f9ff
 800873c:	000003e7 	.word	0x000003e7

08008740 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8008744:	4b0e      	ldr	r3, [pc, #56]	@ (8008780 <MX_TIM14_Init+0x40>)
 8008746:	4a0f      	ldr	r2, [pc, #60]	@ (8008784 <MX_TIM14_Init+0x44>)
 8008748:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 64 - 1;
 800874a:	4b0d      	ldr	r3, [pc, #52]	@ (8008780 <MX_TIM14_Init+0x40>)
 800874c:	223f      	movs	r2, #63	@ 0x3f
 800874e:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008750:	4b0b      	ldr	r3, [pc, #44]	@ (8008780 <MX_TIM14_Init+0x40>)
 8008752:	2200      	movs	r2, #0
 8008754:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 1000 - 1;
 8008756:	4b0a      	ldr	r3, [pc, #40]	@ (8008780 <MX_TIM14_Init+0x40>)
 8008758:	4a0b      	ldr	r2, [pc, #44]	@ (8008788 <MX_TIM14_Init+0x48>)
 800875a:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800875c:	4b08      	ldr	r3, [pc, #32]	@ (8008780 <MX_TIM14_Init+0x40>)
 800875e:	2200      	movs	r2, #0
 8008760:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008762:	4b07      	ldr	r3, [pc, #28]	@ (8008780 <MX_TIM14_Init+0x40>)
 8008764:	2200      	movs	r2, #0
 8008766:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8008768:	4b05      	ldr	r3, [pc, #20]	@ (8008780 <MX_TIM14_Init+0x40>)
 800876a:	0018      	movs	r0, r3
 800876c:	f003 fa00 	bl	800bb70 <HAL_TIM_Base_Init>
 8008770:	1e03      	subs	r3, r0, #0
 8008772:	d001      	beq.n	8008778 <MX_TIM14_Init+0x38>
		Error_Handler();
 8008774:	f000 f998 	bl	8008aa8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 8008778:	46c0      	nop			@ (mov r8, r8)
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	46c0      	nop			@ (mov r8, r8)
 8008780:	200005b0 	.word	0x200005b0
 8008784:	40002000 	.word	0x40002000
 8008788:	000003e7 	.word	0x000003e7

0800878c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800878c:	b590      	push	{r4, r7, lr}
 800878e:	b089      	sub	sp, #36	@ 0x24
 8008790:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008792:	240c      	movs	r4, #12
 8008794:	193b      	adds	r3, r7, r4
 8008796:	0018      	movs	r0, r3
 8008798:	2314      	movs	r3, #20
 800879a:	001a      	movs	r2, r3
 800879c:	2100      	movs	r1, #0
 800879e:	f007 f9d2 	bl	800fb46 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80087a2:	4b3a      	ldr	r3, [pc, #232]	@ (800888c <MX_GPIO_Init+0x100>)
 80087a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087a6:	4b39      	ldr	r3, [pc, #228]	@ (800888c <MX_GPIO_Init+0x100>)
 80087a8:	2102      	movs	r1, #2
 80087aa:	430a      	orrs	r2, r1
 80087ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80087ae:	4b37      	ldr	r3, [pc, #220]	@ (800888c <MX_GPIO_Init+0x100>)
 80087b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087b2:	2202      	movs	r2, #2
 80087b4:	4013      	ands	r3, r2
 80087b6:	60bb      	str	r3, [r7, #8]
 80087b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80087ba:	4b34      	ldr	r3, [pc, #208]	@ (800888c <MX_GPIO_Init+0x100>)
 80087bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087be:	4b33      	ldr	r3, [pc, #204]	@ (800888c <MX_GPIO_Init+0x100>)
 80087c0:	2101      	movs	r1, #1
 80087c2:	430a      	orrs	r2, r1
 80087c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80087c6:	4b31      	ldr	r3, [pc, #196]	@ (800888c <MX_GPIO_Init+0x100>)
 80087c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ca:	2201      	movs	r2, #1
 80087cc:	4013      	ands	r3, r2
 80087ce:	607b      	str	r3, [r7, #4]
 80087d0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 80087d2:	2380      	movs	r3, #128	@ 0x80
 80087d4:	00d9      	lsls	r1, r3, #3
 80087d6:	23a0      	movs	r3, #160	@ 0xa0
 80087d8:	05db      	lsls	r3, r3, #23
 80087da:	2200      	movs	r2, #0
 80087dc:	0018      	movs	r0, r3
 80087de:	f001 fef4 	bl	800a5ca <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CRASH_REL_Pin | LOG_REL_Pin, GPIO_PIN_RESET);
 80087e2:	4b2b      	ldr	r3, [pc, #172]	@ (8008890 <MX_GPIO_Init+0x104>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	2160      	movs	r1, #96	@ 0x60
 80087e8:	0018      	movs	r0, r3
 80087ea:	f001 feee 	bl	800a5ca <HAL_GPIO_WritePin>

	/*Configure GPIO pin : EBZ_IN_Pin */
	GPIO_InitStruct.Pin = EBZ_IN_Pin;
 80087ee:	193b      	adds	r3, r7, r4
 80087f0:	2280      	movs	r2, #128	@ 0x80
 80087f2:	0052      	lsls	r2, r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087f6:	193b      	adds	r3, r7, r4
 80087f8:	2200      	movs	r2, #0
 80087fa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087fc:	193b      	adds	r3, r7, r4
 80087fe:	2200      	movs	r2, #0
 8008800:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(EBZ_IN_GPIO_Port, &GPIO_InitStruct);
 8008802:	193a      	adds	r2, r7, r4
 8008804:	23a0      	movs	r3, #160	@ 0xa0
 8008806:	05db      	lsls	r3, r3, #23
 8008808:	0011      	movs	r1, r2
 800880a:	0018      	movs	r0, r3
 800880c:	f001 fd54 	bl	800a2b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : TEST_LED_Pin */
	GPIO_InitStruct.Pin = TEST_LED_Pin;
 8008810:	0021      	movs	r1, r4
 8008812:	187b      	adds	r3, r7, r1
 8008814:	2280      	movs	r2, #128	@ 0x80
 8008816:	00d2      	lsls	r2, r2, #3
 8008818:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800881a:	000c      	movs	r4, r1
 800881c:	193b      	adds	r3, r7, r4
 800881e:	2201      	movs	r2, #1
 8008820:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008822:	193b      	adds	r3, r7, r4
 8008824:	2200      	movs	r2, #0
 8008826:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008828:	193b      	adds	r3, r7, r4
 800882a:	2200      	movs	r2, #0
 800882c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800882e:	193a      	adds	r2, r7, r4
 8008830:	23a0      	movs	r3, #160	@ 0xa0
 8008832:	05db      	lsls	r3, r3, #23
 8008834:	0011      	movs	r1, r2
 8008836:	0018      	movs	r0, r3
 8008838:	f001 fd3e 	bl	800a2b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : CRASH_REL_Pin LOG_REL_Pin */
	GPIO_InitStruct.Pin = CRASH_REL_Pin | LOG_REL_Pin;
 800883c:	193b      	adds	r3, r7, r4
 800883e:	2260      	movs	r2, #96	@ 0x60
 8008840:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008842:	193b      	adds	r3, r7, r4
 8008844:	2201      	movs	r2, #1
 8008846:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008848:	193b      	adds	r3, r7, r4
 800884a:	2200      	movs	r2, #0
 800884c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800884e:	193b      	adds	r3, r7, r4
 8008850:	2200      	movs	r2, #0
 8008852:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008854:	193b      	adds	r3, r7, r4
 8008856:	4a0e      	ldr	r2, [pc, #56]	@ (8008890 <MX_GPIO_Init+0x104>)
 8008858:	0019      	movs	r1, r3
 800885a:	0010      	movs	r0, r2
 800885c:	f001 fd2c 	bl	800a2b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DriverPresent_P_Pin DriverPresent_M_Pin */
	GPIO_InitStruct.Pin = DriverPresent_P_Pin | DriverPresent_M_Pin;
 8008860:	0021      	movs	r1, r4
 8008862:	187b      	adds	r3, r7, r1
 8008864:	22c0      	movs	r2, #192	@ 0xc0
 8008866:	0052      	lsls	r2, r2, #1
 8008868:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800886a:	187b      	adds	r3, r7, r1
 800886c:	2200      	movs	r2, #0
 800886e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008870:	187b      	adds	r3, r7, r1
 8008872:	2200      	movs	r2, #0
 8008874:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008876:	187b      	adds	r3, r7, r1
 8008878:	4a05      	ldr	r2, [pc, #20]	@ (8008890 <MX_GPIO_Init+0x104>)
 800887a:	0019      	movs	r1, r3
 800887c:	0010      	movs	r0, r2
 800887e:	f001 fd1b 	bl	800a2b8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/*Configure GPIO pin Output Level */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8008882:	46c0      	nop			@ (mov r8, r8)
 8008884:	46bd      	mov	sp, r7
 8008886:	b009      	add	sp, #36	@ 0x24
 8008888:	bd90      	pop	{r4, r7, pc}
 800888a:	46c0      	nop			@ (mov r8, r8)
 800888c:	40021000 	.word	0x40021000
 8008890:	50000400 	.word	0x50000400

08008894 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
//	if (htim->Instance == TIM14) {
//		HAL_IncTick();
//	}
	/* USER CODE BEGIN Callback 1 */
// Handle CANOpen app interrupts
	if (htim == canopenNodeSTM32->timerHandle) {
 800889c:	4b18      	ldr	r3, [pc, #96]	@ (8008900 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d101      	bne.n	80088ac <HAL_TIM_PeriodElapsedCallback+0x18>
//			&& OD_PERSIST_COMM.x1017_producerHeartbeatTime != 0) {
		canopen_app_interrupt();
 80088a8:	f7ff f8b8 	bl	8007a1c <canopen_app_interrupt>
	}
	/* USER CODE END Callback 1 */

	if ((htim->Instance == TIM7)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a14      	ldr	r2, [pc, #80]	@ (8008904 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d11f      	bne.n	80088f6 <HAL_TIM_PeriodElapsedCallback+0x62>
			&& (HAL_GPIO_ReadPin(EBZ_IN_GPIO_Port, EBZ_IN_Pin) == GPIO_PIN_SET)
 80088b6:	2380      	movs	r3, #128	@ 0x80
 80088b8:	005a      	lsls	r2, r3, #1
 80088ba:	23a0      	movs	r3, #160	@ 0xa0
 80088bc:	05db      	lsls	r3, r3, #23
 80088be:	0011      	movs	r1, r2
 80088c0:	0018      	movs	r0, r3
 80088c2:	f001 fe65 	bl	800a590 <HAL_GPIO_ReadPin>
 80088c6:	0003      	movs	r3, r0
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d114      	bne.n	80088f6 <HAL_TIM_PeriodElapsedCallback+0x62>
			&& (FFZ.ACRQ_AcceesReq == RELEASE)
 80088cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008908 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80088ce:	7c5b      	ldrb	r3, [r3, #17]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d110      	bne.n	80088f6 <HAL_TIM_PeriodElapsedCallback+0x62>
			&& (FFZ.DriverPresent == ACTIVE )) {
 80088d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008908 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80088d6:	789b      	ldrb	r3, [r3, #2]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d10c      	bne.n	80088f6 <HAL_TIM_PeriodElapsedCallback+0x62>
		FFZ.OperationTime++;
 80088dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008908 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	1c5a      	adds	r2, r3, #1
 80088e2:	4b09      	ldr	r3, [pc, #36]	@ (8008908 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80088e4:	609a      	str	r2, [r3, #8]
		writedata(ADDRESS, FFZ.OperationTime);
 80088e6:	4b08      	ldr	r3, [pc, #32]	@ (8008908 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	001a      	movs	r2, r3
 80088ec:	4b07      	ldr	r3, [pc, #28]	@ (800890c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80088ee:	0011      	movs	r1, r2
 80088f0:	0018      	movs	r0, r3
 80088f2:	f7ff fdb3 	bl	800845c <writedata>
	}
}
 80088f6:	46c0      	nop			@ (mov r8, r8)
 80088f8:	46bd      	mov	sp, r7
 80088fa:	b002      	add	sp, #8
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	46c0      	nop			@ (mov r8, r8)
 8008900:	20000498 	.word	0x20000498
 8008904:	40001400 	.word	0x40001400
 8008908:	200005fc 	.word	0x200005fc
 800890c:	0801f800 	.word	0x0801f800

08008910 <readParams>:

void readParams() {
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(DriverPresent_M_GPIO_Port, DriverPresent_M_Pin)
 8008914:	2380      	movs	r3, #128	@ 0x80
 8008916:	005b      	lsls	r3, r3, #1
 8008918:	4a31      	ldr	r2, [pc, #196]	@ (80089e0 <readParams+0xd0>)
 800891a:	0019      	movs	r1, r3
 800891c:	0010      	movs	r0, r2
 800891e:	f001 fe37 	bl	800a590 <HAL_GPIO_ReadPin>
 8008922:	1e03      	subs	r3, r0, #0
 8008924:	d106      	bne.n	8008934 <readParams+0x24>
			|| HAL_GPIO_ReadPin(DriverPresent_P_GPIO_Port,
 8008926:	4b2e      	ldr	r3, [pc, #184]	@ (80089e0 <readParams+0xd0>)
 8008928:	2180      	movs	r1, #128	@ 0x80
 800892a:	0018      	movs	r0, r3
 800892c:	f001 fe30 	bl	800a590 <HAL_GPIO_ReadPin>
 8008930:	1e03      	subs	r3, r0, #0
 8008932:	d00b      	beq.n	800894c <readParams+0x3c>
			DriverPresent_P_Pin)) {
		FFZ.DriverPresent = ACTIVE;
 8008934:	4b2b      	ldr	r3, [pc, #172]	@ (80089e4 <readParams+0xd4>)
 8008936:	2201      	movs	r2, #1
 8008938:	709a      	strb	r2, [r3, #2]
		HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 800893a:	2380      	movs	r3, #128	@ 0x80
 800893c:	00d9      	lsls	r1, r3, #3
 800893e:	23a0      	movs	r3, #160	@ 0xa0
 8008940:	05db      	lsls	r3, r3, #23
 8008942:	2201      	movs	r2, #1
 8008944:	0018      	movs	r0, r3
 8008946:	f001 fe40 	bl	800a5ca <HAL_GPIO_WritePin>
 800894a:	e00a      	b.n	8008962 <readParams+0x52>

	} else {
		FFZ.DriverPresent = NOT_ACTIVE;
 800894c:	4b25      	ldr	r3, [pc, #148]	@ (80089e4 <readParams+0xd4>)
 800894e:	2200      	movs	r2, #0
 8008950:	709a      	strb	r2, [r3, #2]
		HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8008952:	2380      	movs	r3, #128	@ 0x80
 8008954:	00d9      	lsls	r1, r3, #3
 8008956:	23a0      	movs	r3, #160	@ 0xa0
 8008958:	05db      	lsls	r3, r3, #23
 800895a:	2200      	movs	r2, #0
 800895c:	0018      	movs	r0, r3
 800895e:	f001 fe34 	bl	800a5ca <HAL_GPIO_WritePin>
	}

	//txPDO 1 @ 100 ms
	OD_PERSIST_COMM.x6010_DP_LA_TA = (FFZ.DriverPresent << 4)
 8008962:	4b20      	ldr	r3, [pc, #128]	@ (80089e4 <readParams+0xd4>)
 8008964:	789b      	ldrb	r3, [r3, #2]
 8008966:	011b      	lsls	r3, r3, #4
			| (FFZ.Lift_Hydraulic_Active << 2) | FFZ.Driving_Active;
 8008968:	b25a      	sxtb	r2, r3
 800896a:	4b1e      	ldr	r3, [pc, #120]	@ (80089e4 <readParams+0xd4>)
 800896c:	785b      	ldrb	r3, [r3, #1]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	b25b      	sxtb	r3, r3
 8008972:	4313      	orrs	r3, r2
 8008974:	b25a      	sxtb	r2, r3
 8008976:	4b1b      	ldr	r3, [pc, #108]	@ (80089e4 <readParams+0xd4>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	b25b      	sxtb	r3, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	b25b      	sxtb	r3, r3
 8008980:	b2d9      	uxtb	r1, r3
	OD_PERSIST_COMM.x6010_DP_LA_TA = (FFZ.DriverPresent << 4)
 8008982:	4b19      	ldr	r3, [pc, #100]	@ (80089e8 <readParams+0xd8>)
 8008984:	22f0      	movs	r2, #240	@ 0xf0
 8008986:	5499      	strb	r1, [r3, r2]
	OD_PERSIST_COMM.x6012_truckSpeed = FFZ.TruckSpeed;
 8008988:	4b16      	ldr	r3, [pc, #88]	@ (80089e4 <readParams+0xd4>)
 800898a:	2104      	movs	r1, #4
 800898c:	5e59      	ldrsh	r1, [r3, r1]
 800898e:	4b16      	ldr	r3, [pc, #88]	@ (80089e8 <readParams+0xd8>)
 8008990:	22f2      	movs	r2, #242	@ 0xf2
 8008992:	5299      	strh	r1, [r3, r2]

	//txPDO 2 @ 1000 ms
	OD_PERSIST_COMM.x6013_operationTime = FFZ.OperationTime;
 8008994:	4b13      	ldr	r3, [pc, #76]	@ (80089e4 <readParams+0xd4>)
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	4b13      	ldr	r3, [pc, #76]	@ (80089e8 <readParams+0xd8>)
 800899a:	21f4      	movs	r1, #244	@ 0xf4
 800899c:	505a      	str	r2, [r3, r1]
	OD_PERSIST_COMM.x6014_feature = (FFZ.F3A_TruckSpeedSignal << 2)
 800899e:	4b11      	ldr	r3, [pc, #68]	@ (80089e4 <readParams+0xd4>)
 80089a0:	7b9b      	ldrb	r3, [r3, #14]
 80089a2:	009b      	lsls	r3, r3, #2
			| (FFZ.F2A_LiftingLimitiation << 1) | FFZ.F1A_CreepSpeed;
 80089a4:	b25a      	sxtb	r2, r3
 80089a6:	4b0f      	ldr	r3, [pc, #60]	@ (80089e4 <readParams+0xd4>)
 80089a8:	7b5b      	ldrb	r3, [r3, #13]
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	b25b      	sxtb	r3, r3
 80089ae:	4313      	orrs	r3, r2
 80089b0:	b25a      	sxtb	r2, r3
 80089b2:	4b0c      	ldr	r3, [pc, #48]	@ (80089e4 <readParams+0xd4>)
 80089b4:	7b1b      	ldrb	r3, [r3, #12]
 80089b6:	b25b      	sxtb	r3, r3
 80089b8:	4313      	orrs	r3, r2
 80089ba:	b25b      	sxtb	r3, r3
 80089bc:	b2d9      	uxtb	r1, r3
	OD_PERSIST_COMM.x6014_feature = (FFZ.F3A_TruckSpeedSignal << 2)
 80089be:	4b0a      	ldr	r3, [pc, #40]	@ (80089e8 <readParams+0xd8>)
 80089c0:	22f8      	movs	r2, #248	@ 0xf8
 80089c2:	5499      	strb	r1, [r3, r2]
	OD_PERSIST_COMM.x6015_mainVersion = FFZ.MainVersion;
 80089c4:	4b07      	ldr	r3, [pc, #28]	@ (80089e4 <readParams+0xd4>)
 80089c6:	7bd9      	ldrb	r1, [r3, #15]
 80089c8:	4b07      	ldr	r3, [pc, #28]	@ (80089e8 <readParams+0xd8>)
 80089ca:	22f9      	movs	r2, #249	@ 0xf9
 80089cc:	5499      	strb	r1, [r3, r2]
	OD_PERSIST_COMM.x6016_subVersion = FFZ.Subversion;
 80089ce:	4b05      	ldr	r3, [pc, #20]	@ (80089e4 <readParams+0xd4>)
 80089d0:	7c19      	ldrb	r1, [r3, #16]
 80089d2:	4b05      	ldr	r3, [pc, #20]	@ (80089e8 <readParams+0xd8>)
 80089d4:	22fa      	movs	r2, #250	@ 0xfa
 80089d6:	5499      	strb	r1, [r3, r2]

	// end of ReadParams

}
 80089d8:	46c0      	nop			@ (mov r8, r8)
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	46c0      	nop			@ (mov r8, r8)
 80089e0:	50000400 	.word	0x50000400
 80089e4:	200005fc 	.word	0x200005fc
 80089e8:	20000000 	.word	0x20000000

080089ec <setParams>:

void setParams() {
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0

	//rxPDO 1 @ 100 ms
	FFZ.LRRQ_LiftReductionReq = (OD_PERSIST_COMM.x6020_LRRQ_SRRQ_ACRQ
 80089f0:	4b20      	ldr	r3, [pc, #128]	@ (8008a74 <setParams+0x88>)
 80089f2:	22fb      	movs	r2, #251	@ 0xfb
 80089f4:	5c9b      	ldrb	r3, [r3, r2]
			& 0b00010000) >> 4;
 80089f6:	111b      	asrs	r3, r3, #4
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2201      	movs	r2, #1
 80089fc:	4013      	ands	r3, r2
 80089fe:	b2da      	uxtb	r2, r3
	FFZ.LRRQ_LiftReductionReq = (OD_PERSIST_COMM.x6020_LRRQ_SRRQ_ACRQ
 8008a00:	4b1d      	ldr	r3, [pc, #116]	@ (8008a78 <setParams+0x8c>)
 8008a02:	74da      	strb	r2, [r3, #19]

	FFZ.SRRQ_SpeedReductionReq = (OD_PERSIST_COMM.x6020_LRRQ_SRRQ_ACRQ
 8008a04:	4b1b      	ldr	r3, [pc, #108]	@ (8008a74 <setParams+0x88>)
 8008a06:	22fb      	movs	r2, #251	@ 0xfb
 8008a08:	5c9b      	ldrb	r3, [r3, r2]
			& 0b00000100) >> 2;
 8008a0a:	109b      	asrs	r3, r3, #2
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2201      	movs	r2, #1
 8008a10:	4013      	ands	r3, r2
 8008a12:	b2da      	uxtb	r2, r3
	FFZ.SRRQ_SpeedReductionReq = (OD_PERSIST_COMM.x6020_LRRQ_SRRQ_ACRQ
 8008a14:	4b18      	ldr	r3, [pc, #96]	@ (8008a78 <setParams+0x8c>)
 8008a16:	749a      	strb	r2, [r3, #18]

	FFZ.ACRQ_AcceesReq = OD_PERSIST_COMM.x6020_LRRQ_SRRQ_ACRQ & 0b00000001;
 8008a18:	4b16      	ldr	r3, [pc, #88]	@ (8008a74 <setParams+0x88>)
 8008a1a:	22fb      	movs	r2, #251	@ 0xfb
 8008a1c:	5c9b      	ldrb	r3, [r3, r2]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	4013      	ands	r3, r2
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	4b14      	ldr	r3, [pc, #80]	@ (8008a78 <setParams+0x8c>)
 8008a26:	745a      	strb	r2, [r3, #17]

	if (FFZ.ACRQ_AcceesReq == RELEASE) {
 8008a28:	4b13      	ldr	r3, [pc, #76]	@ (8008a78 <setParams+0x8c>)
 8008a2a:	7c5b      	ldrb	r3, [r3, #17]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d106      	bne.n	8008a3e <setParams+0x52>
		HAL_GPIO_WritePin(LOG_REL_GPIO_Port, LOG_REL_Pin, GPIO_PIN_SET);
 8008a30:	4b12      	ldr	r3, [pc, #72]	@ (8008a7c <setParams+0x90>)
 8008a32:	2201      	movs	r2, #1
 8008a34:	2140      	movs	r1, #64	@ 0x40
 8008a36:	0018      	movs	r0, r3
 8008a38:	f001 fdc7 	bl	800a5ca <HAL_GPIO_WritePin>
 8008a3c:	e005      	b.n	8008a4a <setParams+0x5e>
	} else {
		HAL_GPIO_WritePin(LOG_REL_GPIO_Port, LOG_REL_Pin, GPIO_PIN_RESET);
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008a7c <setParams+0x90>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	2140      	movs	r1, #64	@ 0x40
 8008a44:	0018      	movs	r0, r3
 8008a46:	f001 fdc0 	bl	800a5ca <HAL_GPIO_WritePin>
	}

	if (FFZ.SRRQ_SpeedReductionReq == RELEASE) {
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a78 <setParams+0x8c>)
 8008a4c:	7c9b      	ldrb	r3, [r3, #18]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d106      	bne.n	8008a60 <setParams+0x74>
		HAL_GPIO_WritePin(CRASH_REL_GPIO_Port, CRASH_REL_Pin, GPIO_PIN_SET);
 8008a52:	4b0a      	ldr	r3, [pc, #40]	@ (8008a7c <setParams+0x90>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	2120      	movs	r1, #32
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f001 fdb6 	bl	800a5ca <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(CRASH_REL_GPIO_Port, CRASH_REL_Pin, GPIO_PIN_RESET);
	}
}
 8008a5e:	e005      	b.n	8008a6c <setParams+0x80>
		HAL_GPIO_WritePin(CRASH_REL_GPIO_Port, CRASH_REL_Pin, GPIO_PIN_RESET);
 8008a60:	4b06      	ldr	r3, [pc, #24]	@ (8008a7c <setParams+0x90>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	2120      	movs	r1, #32
 8008a66:	0018      	movs	r0, r3
 8008a68:	f001 fdaf 	bl	800a5ca <HAL_GPIO_WritePin>
}
 8008a6c:	46c0      	nop			@ (mov r8, r8)
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	46c0      	nop			@ (mov r8, r8)
 8008a74:	20000000 	.word	0x20000000
 8008a78:	200005fc 	.word	0x200005fc
 8008a7c:	50000400 	.word	0x50000400

08008a80 <EBZ_Init>:

uint32_t EBZ_Init() {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
	uint32_t ebz = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	607b      	str	r3, [r7, #4]
	 *
	 * Wenn Speicher leer, -> EBZ=0
	 *
	 */

	if (Rx_OperationTime != 0) {
 8008a8a:	4b06      	ldr	r3, [pc, #24]	@ (8008aa4 <EBZ_Init+0x24>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <EBZ_Init+0x18>
		ebz = Rx_OperationTime;
 8008a92:	4b04      	ldr	r3, [pc, #16]	@ (8008aa4 <EBZ_Init+0x24>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	607b      	str	r3, [r7, #4]
	}
	return ebz;
 8008a98:	687b      	ldr	r3, [r7, #4]
}
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	b002      	add	sp, #8
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	46c0      	nop			@ (mov r8, r8)
 8008aa4:	20000610 	.word	0x20000610

08008aa8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008aac:	b672      	cpsid	i
}
 8008aae:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008ab0:	46c0      	nop			@ (mov r8, r8)
 8008ab2:	e7fd      	b.n	8008ab0 <Error_Handler+0x8>

08008ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aba:	4b11      	ldr	r3, [pc, #68]	@ (8008b00 <HAL_MspInit+0x4c>)
 8008abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008abe:	4b10      	ldr	r3, [pc, #64]	@ (8008b00 <HAL_MspInit+0x4c>)
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	641a      	str	r2, [r3, #64]	@ 0x40
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b00 <HAL_MspInit+0x4c>)
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aca:	2201      	movs	r2, #1
 8008acc:	4013      	ands	r3, r2
 8008ace:	607b      	str	r3, [r7, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8008b00 <HAL_MspInit+0x4c>)
 8008ad4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8008b00 <HAL_MspInit+0x4c>)
 8008ad8:	2180      	movs	r1, #128	@ 0x80
 8008ada:	0549      	lsls	r1, r1, #21
 8008adc:	430a      	orrs	r2, r1
 8008ade:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008ae0:	4b07      	ldr	r3, [pc, #28]	@ (8008b00 <HAL_MspInit+0x4c>)
 8008ae2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ae4:	2380      	movs	r3, #128	@ 0x80
 8008ae6:	055b      	lsls	r3, r3, #21
 8008ae8:	4013      	ands	r3, r2
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8008aee:	2380      	movs	r3, #128	@ 0x80
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	0018      	movs	r0, r3
 8008af4:	f000 fa58 	bl	8008fa8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008af8:	46c0      	nop			@ (mov r8, r8)
 8008afa:	46bd      	mov	sp, r7
 8008afc:	b002      	add	sp, #8
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	40021000 	.word	0x40021000

08008b04 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8008b04:	b590      	push	{r4, r7, lr}
 8008b06:	b09d      	sub	sp, #116	@ 0x74
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b0c:	235c      	movs	r3, #92	@ 0x5c
 8008b0e:	18fb      	adds	r3, r7, r3
 8008b10:	0018      	movs	r0, r3
 8008b12:	2314      	movs	r3, #20
 8008b14:	001a      	movs	r2, r3
 8008b16:	2100      	movs	r1, #0
 8008b18:	f007 f815 	bl	800fb46 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b1c:	2410      	movs	r4, #16
 8008b1e:	193b      	adds	r3, r7, r4
 8008b20:	0018      	movs	r0, r3
 8008b22:	234c      	movs	r3, #76	@ 0x4c
 8008b24:	001a      	movs	r2, r3
 8008b26:	2100      	movs	r1, #0
 8008b28:	f007 f80d 	bl	800fb46 <memset>
  if(hfdcan->Instance==FDCAN2)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a2a      	ldr	r2, [pc, #168]	@ (8008bdc <HAL_FDCAN_MspInit+0xd8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d14e      	bne.n	8008bd4 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8008b36:	193b      	adds	r3, r7, r4
 8008b38:	2280      	movs	r2, #128	@ 0x80
 8008b3a:	0492      	lsls	r2, r2, #18
 8008b3c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8008b3e:	193b      	adds	r3, r7, r4
 8008b40:	2200      	movs	r2, #0
 8008b42:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b44:	193b      	adds	r3, r7, r4
 8008b46:	0018      	movs	r0, r3
 8008b48:	f002 fdd6 	bl	800b6f8 <HAL_RCCEx_PeriphCLKConfig>
 8008b4c:	1e03      	subs	r3, r0, #0
 8008b4e:	d001      	beq.n	8008b54 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8008b50:	f7ff ffaa 	bl	8008aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8008b54:	4b22      	ldr	r3, [pc, #136]	@ (8008be0 <HAL_FDCAN_MspInit+0xdc>)
 8008b56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b58:	4b21      	ldr	r3, [pc, #132]	@ (8008be0 <HAL_FDCAN_MspInit+0xdc>)
 8008b5a:	2180      	movs	r1, #128	@ 0x80
 8008b5c:	0149      	lsls	r1, r1, #5
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008b62:	4b1f      	ldr	r3, [pc, #124]	@ (8008be0 <HAL_FDCAN_MspInit+0xdc>)
 8008b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b66:	2380      	movs	r3, #128	@ 0x80
 8008b68:	015b      	lsls	r3, r3, #5
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b70:	4b1b      	ldr	r3, [pc, #108]	@ (8008be0 <HAL_FDCAN_MspInit+0xdc>)
 8008b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b74:	4b1a      	ldr	r3, [pc, #104]	@ (8008be0 <HAL_FDCAN_MspInit+0xdc>)
 8008b76:	2102      	movs	r1, #2
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8008b7c:	4b18      	ldr	r3, [pc, #96]	@ (8008be0 <HAL_FDCAN_MspInit+0xdc>)
 8008b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b80:	2202      	movs	r2, #2
 8008b82:	4013      	ands	r3, r2
 8008b84:	60bb      	str	r3, [r7, #8]
 8008b86:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008b88:	215c      	movs	r1, #92	@ 0x5c
 8008b8a:	187b      	adds	r3, r7, r1
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b90:	187b      	adds	r3, r7, r1
 8008b92:	2202      	movs	r2, #2
 8008b94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b96:	187b      	adds	r3, r7, r1
 8008b98:	2200      	movs	r2, #0
 8008b9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b9c:	187b      	adds	r3, r7, r1
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8008ba2:	187b      	adds	r3, r7, r1
 8008ba4:	2203      	movs	r2, #3
 8008ba6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ba8:	187b      	adds	r3, r7, r1
 8008baa:	4a0e      	ldr	r2, [pc, #56]	@ (8008be4 <HAL_FDCAN_MspInit+0xe0>)
 8008bac:	0019      	movs	r1, r3
 8008bae:	0010      	movs	r0, r2
 8008bb0:	f001 fb82 	bl	800a2b8 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	2015      	movs	r0, #21
 8008bba:	f000 fac9 	bl	8009150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8008bbe:	2015      	movs	r0, #21
 8008bc0:	f000 fadb 	bl	800917a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	2016      	movs	r0, #22
 8008bca:	f000 fac1 	bl	8009150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 8008bce:	2016      	movs	r0, #22
 8008bd0:	f000 fad3 	bl	800917a <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8008bd4:	46c0      	nop			@ (mov r8, r8)
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b01d      	add	sp, #116	@ 0x74
 8008bda:	bd90      	pop	{r4, r7, pc}
 8008bdc:	40006800 	.word	0x40006800
 8008be0:	40021000 	.word	0x40021000
 8008be4:	50000400 	.word	0x50000400

08008be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8008c64 <HAL_TIM_Base_MspInit+0x7c>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d114      	bne.n	8008c24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8008c68 <HAL_TIM_Base_MspInit+0x80>)
 8008bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8008c68 <HAL_TIM_Base_MspInit+0x80>)
 8008c00:	2120      	movs	r1, #32
 8008c02:	430a      	orrs	r2, r1
 8008c04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008c06:	4b18      	ldr	r3, [pc, #96]	@ (8008c68 <HAL_TIM_Base_MspInit+0x80>)
 8008c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 8008c12:	2200      	movs	r2, #0
 8008c14:	2100      	movs	r1, #0
 8008c16:	2012      	movs	r0, #18
 8008c18:	f000 fa9a 	bl	8009150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8008c1c:	2012      	movs	r0, #18
 8008c1e:	f000 faac 	bl	800917a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8008c22:	e01a      	b.n	8008c5a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a10      	ldr	r2, [pc, #64]	@ (8008c6c <HAL_TIM_Base_MspInit+0x84>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d115      	bne.n	8008c5a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8008c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c68 <HAL_TIM_Base_MspInit+0x80>)
 8008c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c32:	4b0d      	ldr	r3, [pc, #52]	@ (8008c68 <HAL_TIM_Base_MspInit+0x80>)
 8008c34:	2180      	movs	r1, #128	@ 0x80
 8008c36:	0209      	lsls	r1, r1, #8
 8008c38:	430a      	orrs	r2, r1
 8008c3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c68 <HAL_TIM_Base_MspInit+0x80>)
 8008c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c40:	2380      	movs	r3, #128	@ 0x80
 8008c42:	021b      	lsls	r3, r3, #8
 8008c44:	4013      	ands	r3, r2
 8008c46:	60bb      	str	r3, [r7, #8]
 8008c48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	2013      	movs	r0, #19
 8008c50:	f000 fa7e 	bl	8009150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8008c54:	2013      	movs	r0, #19
 8008c56:	f000 fa90 	bl	800917a <HAL_NVIC_EnableIRQ>
}
 8008c5a:	46c0      	nop			@ (mov r8, r8)
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	b004      	add	sp, #16
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	46c0      	nop			@ (mov r8, r8)
 8008c64:	40001400 	.word	0x40001400
 8008c68:	40021000 	.word	0x40021000
 8008c6c:	40002000 	.word	0x40002000

08008c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008c74:	46c0      	nop			@ (mov r8, r8)
 8008c76:	e7fd      	b.n	8008c74 <NMI_Handler+0x4>

08008c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c7c:	46c0      	nop			@ (mov r8, r8)
 8008c7e:	e7fd      	b.n	8008c7c <HardFault_Handler+0x4>

08008c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008c84:	46c0      	nop			@ (mov r8, r8)
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c8e:	46c0      	nop			@ (mov r8, r8)
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c98:	f000 f96a 	bl	8008f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c9c:	46c0      	nop			@ (mov r8, r8)
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008ca8:	4b03      	ldr	r3, [pc, #12]	@ (8008cb8 <TIM7_LPTIM2_IRQHandler+0x14>)
 8008caa:	0018      	movs	r0, r3
 8008cac:	f003 f848 	bl	800bd40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8008cb0:	46c0      	nop			@ (mov r8, r8)
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	46c0      	nop			@ (mov r8, r8)
 8008cb8:	20000564 	.word	0x20000564

08008cbc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008cc0:	4b03      	ldr	r3, [pc, #12]	@ (8008cd0 <TIM14_IRQHandler+0x14>)
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	f003 f83c 	bl	800bd40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8008cc8:	46c0      	nop			@ (mov r8, r8)
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	46c0      	nop			@ (mov r8, r8)
 8008cd0:	200005b0 	.word	0x200005b0

08008cd4 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8008cd8:	4b03      	ldr	r3, [pc, #12]	@ (8008ce8 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f000 fed0 	bl	8009a80 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8008ce0:	46c0      	nop			@ (mov r8, r8)
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	46c0      	nop			@ (mov r8, r8)
 8008ce8:	20000500 	.word	0x20000500

08008cec <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8008cf0:	4b03      	ldr	r3, [pc, #12]	@ (8008d00 <TIM17_FDCAN_IT1_IRQHandler+0x14>)
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f000 fec4 	bl	8009a80 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8008cf8:	46c0      	nop			@ (mov r8, r8)
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	46c0      	nop			@ (mov r8, r8)
 8008d00:	20000500 	.word	0x20000500

08008d04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d10:	2300      	movs	r3, #0
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	e00a      	b.n	8008d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008d16:	e000      	b.n	8008d1a <_read+0x16>
 8008d18:	bf00      	nop
 8008d1a:	0001      	movs	r1, r0
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	60ba      	str	r2, [r7, #8]
 8008d22:	b2ca      	uxtb	r2, r1
 8008d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	dbf0      	blt.n	8008d16 <_read+0x12>
  }

  return len;
 8008d34:	687b      	ldr	r3, [r7, #4]
}
 8008d36:	0018      	movs	r0, r3
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	b006      	add	sp, #24
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b086      	sub	sp, #24
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	60f8      	str	r0, [r7, #12]
 8008d46:	60b9      	str	r1, [r7, #8]
 8008d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	617b      	str	r3, [r7, #20]
 8008d4e:	e009      	b.n	8008d64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	60ba      	str	r2, [r7, #8]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	0018      	movs	r0, r3
 8008d5a:	e000      	b.n	8008d5e <_write+0x20>
 8008d5c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	3301      	adds	r3, #1
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	dbf1      	blt.n	8008d50 <_write+0x12>
  }
  return len;
 8008d6c:	687b      	ldr	r3, [r7, #4]
}
 8008d6e:	0018      	movs	r0, r3
 8008d70:	46bd      	mov	sp, r7
 8008d72:	b006      	add	sp, #24
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <_close>:

int _close(int file)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	425b      	negs	r3, r3
}
 8008d82:	0018      	movs	r0, r3
 8008d84:	46bd      	mov	sp, r7
 8008d86:	b002      	add	sp, #8
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2280      	movs	r2, #128	@ 0x80
 8008d98:	0192      	lsls	r2, r2, #6
 8008d9a:	605a      	str	r2, [r3, #4]
  return 0;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	0018      	movs	r0, r3
 8008da0:	46bd      	mov	sp, r7
 8008da2:	b002      	add	sp, #8
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <_isatty>:

int _isatty(int file)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008dae:	2301      	movs	r3, #1
}
 8008db0:	0018      	movs	r0, r3
 8008db2:	46bd      	mov	sp, r7
 8008db4:	b002      	add	sp, #8
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	b004      	add	sp, #16
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008dd8:	4a14      	ldr	r2, [pc, #80]	@ (8008e2c <_sbrk+0x5c>)
 8008dda:	4b15      	ldr	r3, [pc, #84]	@ (8008e30 <_sbrk+0x60>)
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008de4:	4b13      	ldr	r3, [pc, #76]	@ (8008e34 <_sbrk+0x64>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d102      	bne.n	8008df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008dec:	4b11      	ldr	r3, [pc, #68]	@ (8008e34 <_sbrk+0x64>)
 8008dee:	4a12      	ldr	r2, [pc, #72]	@ (8008e38 <_sbrk+0x68>)
 8008df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008df2:	4b10      	ldr	r3, [pc, #64]	@ (8008e34 <_sbrk+0x64>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	18d3      	adds	r3, r2, r3
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d207      	bcs.n	8008e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008e00:	f006 ff0a 	bl	800fc18 <__errno>
 8008e04:	0003      	movs	r3, r0
 8008e06:	220c      	movs	r2, #12
 8008e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	425b      	negs	r3, r3
 8008e0e:	e009      	b.n	8008e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008e10:	4b08      	ldr	r3, [pc, #32]	@ (8008e34 <_sbrk+0x64>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008e16:	4b07      	ldr	r3, [pc, #28]	@ (8008e34 <_sbrk+0x64>)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	18d2      	adds	r2, r2, r3
 8008e1e:	4b05      	ldr	r3, [pc, #20]	@ (8008e34 <_sbrk+0x64>)
 8008e20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008e22:	68fb      	ldr	r3, [r7, #12]
}
 8008e24:	0018      	movs	r0, r3
 8008e26:	46bd      	mov	sp, r7
 8008e28:	b006      	add	sp, #24
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20024000 	.word	0x20024000
 8008e30:	00000400 	.word	0x00000400
 8008e34:	20000614 	.word	0x20000614
 8008e38:	20002160 	.word	0x20002160

08008e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008e40:	46c0      	nop			@ (mov r8, r8)
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008e48:	480d      	ldr	r0, [pc, #52]	@ (8008e80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008e4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008e4c:	f7ff fff6 	bl	8008e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008e50:	480c      	ldr	r0, [pc, #48]	@ (8008e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8008e52:	490d      	ldr	r1, [pc, #52]	@ (8008e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008e54:	4a0d      	ldr	r2, [pc, #52]	@ (8008e8c <LoopForever+0xe>)
  movs r3, #0
 8008e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e58:	e002      	b.n	8008e60 <LoopCopyDataInit>

08008e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e5e:	3304      	adds	r3, #4

08008e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e64:	d3f9      	bcc.n	8008e5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e66:	4a0a      	ldr	r2, [pc, #40]	@ (8008e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008e68:	4c0a      	ldr	r4, [pc, #40]	@ (8008e94 <LoopForever+0x16>)
  movs r3, #0
 8008e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e6c:	e001      	b.n	8008e72 <LoopFillZerobss>

08008e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e70:	3204      	adds	r2, #4

08008e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e74:	d3fb      	bcc.n	8008e6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008e76:	f006 fed5 	bl	800fc24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008e7a:	f7ff fb2f 	bl	80084dc <main>

08008e7e <LoopForever>:

LoopForever:
  b LoopForever
 8008e7e:	e7fe      	b.n	8008e7e <LoopForever>
  ldr   r0, =_estack
 8008e80:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8008e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e88:	2000047c 	.word	0x2000047c
  ldr r2, =_sidata
 8008e8c:	08010d4c 	.word	0x08010d4c
  ldr r2, =_sbss
 8008e90:	2000047c 	.word	0x2000047c
  ldr r4, =_ebss
 8008e94:	20002160 	.word	0x20002160

08008e98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008e98:	e7fe      	b.n	8008e98 <ADC1_COMP_IRQHandler>
	...

08008e9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008ea2:	1dfb      	adds	r3, r7, #7
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed8 <HAL_Init+0x3c>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed8 <HAL_Init+0x3c>)
 8008eae:	2180      	movs	r1, #128	@ 0x80
 8008eb0:	0049      	lsls	r1, r1, #1
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008eb6:	2003      	movs	r0, #3
 8008eb8:	f000 f810 	bl	8008edc <HAL_InitTick>
 8008ebc:	1e03      	subs	r3, r0, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008ec0:	1dfb      	adds	r3, r7, #7
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	701a      	strb	r2, [r3, #0]
 8008ec6:	e001      	b.n	8008ecc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008ec8:	f7ff fdf4 	bl	8008ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008ecc:	1dfb      	adds	r3, r7, #7
 8008ece:	781b      	ldrb	r3, [r3, #0]
}
 8008ed0:	0018      	movs	r0, r3
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	b002      	add	sp, #8
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40022000 	.word	0x40022000

08008edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008edc:	b590      	push	{r4, r7, lr}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008ee4:	230f      	movs	r3, #15
 8008ee6:	18fb      	adds	r3, r7, r3
 8008ee8:	2200      	movs	r2, #0
 8008eea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8008eec:	4b1d      	ldr	r3, [pc, #116]	@ (8008f64 <HAL_InitTick+0x88>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d02b      	beq.n	8008f4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8008ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8008f68 <HAL_InitTick+0x8c>)
 8008ef6:	681c      	ldr	r4, [r3, #0]
 8008ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f64 <HAL_InitTick+0x88>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	0019      	movs	r1, r3
 8008efe:	23fa      	movs	r3, #250	@ 0xfa
 8008f00:	0098      	lsls	r0, r3, #2
 8008f02:	f7f7 f913 	bl	800012c <__udivsi3>
 8008f06:	0003      	movs	r3, r0
 8008f08:	0019      	movs	r1, r3
 8008f0a:	0020      	movs	r0, r4
 8008f0c:	f7f7 f90e 	bl	800012c <__udivsi3>
 8008f10:	0003      	movs	r3, r0
 8008f12:	0018      	movs	r0, r3
 8008f14:	f000 f945 	bl	80091a2 <HAL_SYSTICK_Config>
 8008f18:	1e03      	subs	r3, r0, #0
 8008f1a:	d112      	bne.n	8008f42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d80a      	bhi.n	8008f38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	2301      	movs	r3, #1
 8008f26:	425b      	negs	r3, r3
 8008f28:	2200      	movs	r2, #0
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	f000 f910 	bl	8009150 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008f30:	4b0e      	ldr	r3, [pc, #56]	@ (8008f6c <HAL_InitTick+0x90>)
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	e00d      	b.n	8008f54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008f38:	230f      	movs	r3, #15
 8008f3a:	18fb      	adds	r3, r7, r3
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	701a      	strb	r2, [r3, #0]
 8008f40:	e008      	b.n	8008f54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008f42:	230f      	movs	r3, #15
 8008f44:	18fb      	adds	r3, r7, r3
 8008f46:	2201      	movs	r2, #1
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	e003      	b.n	8008f54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008f4c:	230f      	movs	r3, #15
 8008f4e:	18fb      	adds	r3, r7, r3
 8008f50:	2201      	movs	r2, #1
 8008f52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008f54:	230f      	movs	r3, #15
 8008f56:	18fb      	adds	r3, r7, r3
 8008f58:	781b      	ldrb	r3, [r3, #0]
}
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	b005      	add	sp, #20
 8008f60:	bd90      	pop	{r4, r7, pc}
 8008f62:	46c0      	nop			@ (mov r8, r8)
 8008f64:	200002a0 	.word	0x200002a0
 8008f68:	20000298 	.word	0x20000298
 8008f6c:	2000029c 	.word	0x2000029c

08008f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008f74:	4b05      	ldr	r3, [pc, #20]	@ (8008f8c <HAL_IncTick+0x1c>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	001a      	movs	r2, r3
 8008f7a:	4b05      	ldr	r3, [pc, #20]	@ (8008f90 <HAL_IncTick+0x20>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	18d2      	adds	r2, r2, r3
 8008f80:	4b03      	ldr	r3, [pc, #12]	@ (8008f90 <HAL_IncTick+0x20>)
 8008f82:	601a      	str	r2, [r3, #0]
}
 8008f84:	46c0      	nop			@ (mov r8, r8)
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	46c0      	nop			@ (mov r8, r8)
 8008f8c:	200002a0 	.word	0x200002a0
 8008f90:	20000618 	.word	0x20000618

08008f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  return uwTick;
 8008f98:	4b02      	ldr	r3, [pc, #8]	@ (8008fa4 <HAL_GetTick+0x10>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
}
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	46c0      	nop			@ (mov r8, r8)
 8008fa4:	20000618 	.word	0x20000618

08008fa8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8008fb0:	4b06      	ldr	r3, [pc, #24]	@ (8008fcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a06      	ldr	r2, [pc, #24]	@ (8008fd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	0019      	movs	r1, r3
 8008fba:	4b04      	ldr	r3, [pc, #16]	@ (8008fcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	601a      	str	r2, [r3, #0]
}
 8008fc2:	46c0      	nop			@ (mov r8, r8)
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	b002      	add	sp, #8
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	46c0      	nop			@ (mov r8, r8)
 8008fcc:	40010000 	.word	0x40010000
 8008fd0:	fffff9ff 	.word	0xfffff9ff

08008fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	0002      	movs	r2, r0
 8008fdc:	1dfb      	adds	r3, r7, #7
 8008fde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008fe0:	1dfb      	adds	r3, r7, #7
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fe6:	d809      	bhi.n	8008ffc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fe8:	1dfb      	adds	r3, r7, #7
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	001a      	movs	r2, r3
 8008fee:	231f      	movs	r3, #31
 8008ff0:	401a      	ands	r2, r3
 8008ff2:	4b04      	ldr	r3, [pc, #16]	@ (8009004 <__NVIC_EnableIRQ+0x30>)
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	4091      	lsls	r1, r2
 8008ff8:	000a      	movs	r2, r1
 8008ffa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8008ffc:	46c0      	nop			@ (mov r8, r8)
 8008ffe:	46bd      	mov	sp, r7
 8009000:	b002      	add	sp, #8
 8009002:	bd80      	pop	{r7, pc}
 8009004:	e000e100 	.word	0xe000e100

08009008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009008:	b590      	push	{r4, r7, lr}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	0002      	movs	r2, r0
 8009010:	6039      	str	r1, [r7, #0]
 8009012:	1dfb      	adds	r3, r7, #7
 8009014:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009016:	1dfb      	adds	r3, r7, #7
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b7f      	cmp	r3, #127	@ 0x7f
 800901c:	d828      	bhi.n	8009070 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800901e:	4a2f      	ldr	r2, [pc, #188]	@ (80090dc <__NVIC_SetPriority+0xd4>)
 8009020:	1dfb      	adds	r3, r7, #7
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	b25b      	sxtb	r3, r3
 8009026:	089b      	lsrs	r3, r3, #2
 8009028:	33c0      	adds	r3, #192	@ 0xc0
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	589b      	ldr	r3, [r3, r2]
 800902e:	1dfa      	adds	r2, r7, #7
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	0011      	movs	r1, r2
 8009034:	2203      	movs	r2, #3
 8009036:	400a      	ands	r2, r1
 8009038:	00d2      	lsls	r2, r2, #3
 800903a:	21ff      	movs	r1, #255	@ 0xff
 800903c:	4091      	lsls	r1, r2
 800903e:	000a      	movs	r2, r1
 8009040:	43d2      	mvns	r2, r2
 8009042:	401a      	ands	r2, r3
 8009044:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	019b      	lsls	r3, r3, #6
 800904a:	22ff      	movs	r2, #255	@ 0xff
 800904c:	401a      	ands	r2, r3
 800904e:	1dfb      	adds	r3, r7, #7
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	0018      	movs	r0, r3
 8009054:	2303      	movs	r3, #3
 8009056:	4003      	ands	r3, r0
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800905c:	481f      	ldr	r0, [pc, #124]	@ (80090dc <__NVIC_SetPriority+0xd4>)
 800905e:	1dfb      	adds	r3, r7, #7
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	b25b      	sxtb	r3, r3
 8009064:	089b      	lsrs	r3, r3, #2
 8009066:	430a      	orrs	r2, r1
 8009068:	33c0      	adds	r3, #192	@ 0xc0
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800906e:	e031      	b.n	80090d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009070:	4a1b      	ldr	r2, [pc, #108]	@ (80090e0 <__NVIC_SetPriority+0xd8>)
 8009072:	1dfb      	adds	r3, r7, #7
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	0019      	movs	r1, r3
 8009078:	230f      	movs	r3, #15
 800907a:	400b      	ands	r3, r1
 800907c:	3b08      	subs	r3, #8
 800907e:	089b      	lsrs	r3, r3, #2
 8009080:	3306      	adds	r3, #6
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	18d3      	adds	r3, r2, r3
 8009086:	3304      	adds	r3, #4
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	1dfa      	adds	r2, r7, #7
 800908c:	7812      	ldrb	r2, [r2, #0]
 800908e:	0011      	movs	r1, r2
 8009090:	2203      	movs	r2, #3
 8009092:	400a      	ands	r2, r1
 8009094:	00d2      	lsls	r2, r2, #3
 8009096:	21ff      	movs	r1, #255	@ 0xff
 8009098:	4091      	lsls	r1, r2
 800909a:	000a      	movs	r2, r1
 800909c:	43d2      	mvns	r2, r2
 800909e:	401a      	ands	r2, r3
 80090a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	019b      	lsls	r3, r3, #6
 80090a6:	22ff      	movs	r2, #255	@ 0xff
 80090a8:	401a      	ands	r2, r3
 80090aa:	1dfb      	adds	r3, r7, #7
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	0018      	movs	r0, r3
 80090b0:	2303      	movs	r3, #3
 80090b2:	4003      	ands	r3, r0
 80090b4:	00db      	lsls	r3, r3, #3
 80090b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80090b8:	4809      	ldr	r0, [pc, #36]	@ (80090e0 <__NVIC_SetPriority+0xd8>)
 80090ba:	1dfb      	adds	r3, r7, #7
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	001c      	movs	r4, r3
 80090c0:	230f      	movs	r3, #15
 80090c2:	4023      	ands	r3, r4
 80090c4:	3b08      	subs	r3, #8
 80090c6:	089b      	lsrs	r3, r3, #2
 80090c8:	430a      	orrs	r2, r1
 80090ca:	3306      	adds	r3, #6
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	18c3      	adds	r3, r0, r3
 80090d0:	3304      	adds	r3, #4
 80090d2:	601a      	str	r2, [r3, #0]
}
 80090d4:	46c0      	nop			@ (mov r8, r8)
 80090d6:	46bd      	mov	sp, r7
 80090d8:	b003      	add	sp, #12
 80090da:	bd90      	pop	{r4, r7, pc}
 80090dc:	e000e100 	.word	0xe000e100
 80090e0:	e000ed00 	.word	0xe000ed00

080090e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80090e8:	f3bf 8f4f 	dsb	sy
}
 80090ec:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090ee:	4b04      	ldr	r3, [pc, #16]	@ (8009100 <__NVIC_SystemReset+0x1c>)
 80090f0:	4a04      	ldr	r2, [pc, #16]	@ (8009104 <__NVIC_SystemReset+0x20>)
 80090f2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80090f4:	f3bf 8f4f 	dsb	sy
}
 80090f8:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80090fa:	46c0      	nop			@ (mov r8, r8)
 80090fc:	e7fd      	b.n	80090fa <__NVIC_SystemReset+0x16>
 80090fe:	46c0      	nop			@ (mov r8, r8)
 8009100:	e000ed00 	.word	0xe000ed00
 8009104:	05fa0004 	.word	0x05fa0004

08009108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	1e5a      	subs	r2, r3, #1
 8009114:	2380      	movs	r3, #128	@ 0x80
 8009116:	045b      	lsls	r3, r3, #17
 8009118:	429a      	cmp	r2, r3
 800911a:	d301      	bcc.n	8009120 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800911c:	2301      	movs	r3, #1
 800911e:	e010      	b.n	8009142 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009120:	4b0a      	ldr	r3, [pc, #40]	@ (800914c <SysTick_Config+0x44>)
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	3a01      	subs	r2, #1
 8009126:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009128:	2301      	movs	r3, #1
 800912a:	425b      	negs	r3, r3
 800912c:	2103      	movs	r1, #3
 800912e:	0018      	movs	r0, r3
 8009130:	f7ff ff6a 	bl	8009008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009134:	4b05      	ldr	r3, [pc, #20]	@ (800914c <SysTick_Config+0x44>)
 8009136:	2200      	movs	r2, #0
 8009138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800913a:	4b04      	ldr	r3, [pc, #16]	@ (800914c <SysTick_Config+0x44>)
 800913c:	2207      	movs	r2, #7
 800913e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009140:	2300      	movs	r3, #0
}
 8009142:	0018      	movs	r0, r3
 8009144:	46bd      	mov	sp, r7
 8009146:	b002      	add	sp, #8
 8009148:	bd80      	pop	{r7, pc}
 800914a:	46c0      	nop			@ (mov r8, r8)
 800914c:	e000e010 	.word	0xe000e010

08009150 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	607a      	str	r2, [r7, #4]
 800915a:	210f      	movs	r1, #15
 800915c:	187b      	adds	r3, r7, r1
 800915e:	1c02      	adds	r2, r0, #0
 8009160:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	187b      	adds	r3, r7, r1
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	b25b      	sxtb	r3, r3
 800916a:	0011      	movs	r1, r2
 800916c:	0018      	movs	r0, r3
 800916e:	f7ff ff4b 	bl	8009008 <__NVIC_SetPriority>
}
 8009172:	46c0      	nop			@ (mov r8, r8)
 8009174:	46bd      	mov	sp, r7
 8009176:	b004      	add	sp, #16
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	0002      	movs	r2, r0
 8009182:	1dfb      	adds	r3, r7, #7
 8009184:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009186:	1dfb      	adds	r3, r7, #7
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	b25b      	sxtb	r3, r3
 800918c:	0018      	movs	r0, r3
 800918e:	f7ff ff21 	bl	8008fd4 <__NVIC_EnableIRQ>
}
 8009192:	46c0      	nop			@ (mov r8, r8)
 8009194:	46bd      	mov	sp, r7
 8009196:	b002      	add	sp, #8
 8009198:	bd80      	pop	{r7, pc}

0800919a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800919e:	f7ff ffa1 	bl	80090e4 <__NVIC_SystemReset>

080091a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	0018      	movs	r0, r3
 80091ae:	f7ff ffab 	bl	8009108 <SysTick_Config>
 80091b2:	0003      	movs	r3, r0
}
 80091b4:	0018      	movs	r0, r3
 80091b6:	46bd      	mov	sp, r7
 80091b8:	b002      	add	sp, #8
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e14e      	b.n	800946c <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	225c      	movs	r2, #92	@ 0x5c
 80091d2:	5c9b      	ldrb	r3, [r3, r2]
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d107      	bne.n	80091ea <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	225d      	movs	r2, #93	@ 0x5d
 80091de:	2100      	movs	r1, #0
 80091e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	0018      	movs	r0, r3
 80091e6:	f7ff fc8d 	bl	8008b04 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2110      	movs	r1, #16
 80091f6:	438a      	bics	r2, r1
 80091f8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091fa:	f7ff fecb 	bl	8008f94 <HAL_GetTick>
 80091fe:	0003      	movs	r3, r0
 8009200:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009202:	e012      	b.n	800922a <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009204:	f7ff fec6 	bl	8008f94 <HAL_GetTick>
 8009208:	0002      	movs	r2, r0
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b0a      	cmp	r3, #10
 8009210:	d90b      	bls.n	800922a <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009216:	2201      	movs	r2, #1
 8009218:	431a      	orrs	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	225c      	movs	r2, #92	@ 0x5c
 8009222:	2103      	movs	r1, #3
 8009224:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e120      	b.n	800946c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	2208      	movs	r2, #8
 8009232:	4013      	ands	r3, r2
 8009234:	2b08      	cmp	r3, #8
 8009236:	d0e5      	beq.n	8009204 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2101      	movs	r1, #1
 8009244:	430a      	orrs	r2, r1
 8009246:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009248:	f7ff fea4 	bl	8008f94 <HAL_GetTick>
 800924c:	0003      	movs	r3, r0
 800924e:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009250:	e012      	b.n	8009278 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009252:	f7ff fe9f 	bl	8008f94 <HAL_GetTick>
 8009256:	0002      	movs	r2, r0
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b0a      	cmp	r3, #10
 800925e:	d90b      	bls.n	8009278 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009264:	2201      	movs	r2, #1
 8009266:	431a      	orrs	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	225c      	movs	r2, #92	@ 0x5c
 8009270:	2103      	movs	r1, #3
 8009272:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e0f9      	b.n	800946c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	2201      	movs	r2, #1
 8009280:	4013      	ands	r3, r2
 8009282:	d0e6      	beq.n	8009252 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699a      	ldr	r2, [r3, #24]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2102      	movs	r1, #2
 8009290:	430a      	orrs	r2, r1
 8009292:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a76      	ldr	r2, [pc, #472]	@ (8009474 <HAL_FDCAN_Init+0x2b8>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d103      	bne.n	80092a6 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800929e:	4a76      	ldr	r2, [pc, #472]	@ (8009478 <HAL_FDCAN_Init+0x2bc>)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	7c1b      	ldrb	r3, [r3, #16]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d108      	bne.n	80092c0 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	699a      	ldr	r2, [r3, #24]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2140      	movs	r1, #64	@ 0x40
 80092ba:	438a      	bics	r2, r1
 80092bc:	619a      	str	r2, [r3, #24]
 80092be:	e007      	b.n	80092d0 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	699a      	ldr	r2, [r3, #24]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2140      	movs	r1, #64	@ 0x40
 80092cc:	430a      	orrs	r2, r1
 80092ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	7c5b      	ldrb	r3, [r3, #17]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d109      	bne.n	80092ec <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2180      	movs	r1, #128	@ 0x80
 80092e4:	01c9      	lsls	r1, r1, #7
 80092e6:	430a      	orrs	r2, r1
 80092e8:	619a      	str	r2, [r3, #24]
 80092ea:	e007      	b.n	80092fc <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	699a      	ldr	r2, [r3, #24]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4961      	ldr	r1, [pc, #388]	@ (800947c <HAL_FDCAN_Init+0x2c0>)
 80092f8:	400a      	ands	r2, r1
 80092fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	7c9b      	ldrb	r3, [r3, #18]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d108      	bne.n	8009316 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	699a      	ldr	r2, [r3, #24]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	495c      	ldr	r1, [pc, #368]	@ (8009480 <HAL_FDCAN_Init+0x2c4>)
 8009310:	400a      	ands	r2, r1
 8009312:	619a      	str	r2, [r3, #24]
 8009314:	e008      	b.n	8009328 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	699a      	ldr	r2, [r3, #24]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2180      	movs	r1, #128	@ 0x80
 8009322:	0149      	lsls	r1, r1, #5
 8009324:	430a      	orrs	r2, r1
 8009326:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	4a55      	ldr	r2, [pc, #340]	@ (8009484 <HAL_FDCAN_Init+0x2c8>)
 8009330:	4013      	ands	r3, r2
 8009332:	0019      	movs	r1, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699a      	ldr	r2, [r3, #24]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	21a4      	movs	r1, #164	@ 0xa4
 800934c:	438a      	bics	r2, r1
 800934e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691a      	ldr	r2, [r3, #16]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2110      	movs	r1, #16
 800935c:	438a      	bics	r2, r1
 800935e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d108      	bne.n	800937a <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2104      	movs	r1, #4
 8009374:	430a      	orrs	r2, r1
 8009376:	619a      	str	r2, [r3, #24]
 8009378:	e02c      	b.n	80093d4 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d028      	beq.n	80093d4 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	2b02      	cmp	r3, #2
 8009388:	d01c      	beq.n	80093c4 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	699a      	ldr	r2, [r3, #24]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2180      	movs	r1, #128	@ 0x80
 8009396:	430a      	orrs	r2, r1
 8009398:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691a      	ldr	r2, [r3, #16]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2110      	movs	r1, #16
 80093a6:	430a      	orrs	r2, r1
 80093a8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d110      	bne.n	80093d4 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	699a      	ldr	r2, [r3, #24]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2120      	movs	r1, #32
 80093be:	430a      	orrs	r2, r1
 80093c0:	619a      	str	r2, [r3, #24]
 80093c2:	e007      	b.n	80093d4 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	699a      	ldr	r2, [r3, #24]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2120      	movs	r1, #32
 80093d0:	430a      	orrs	r2, r1
 80093d2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	3b01      	subs	r3, #1
 80093da:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80093e4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80093ec:	431a      	orrs	r2, r3
 80093ee:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80093fc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80093fe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	23c0      	movs	r3, #192	@ 0xc0
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	429a      	cmp	r2, r3
 800940a:	d115      	bne.n	8009438 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009410:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009416:	3b01      	subs	r3, #1
 8009418:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800941a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009420:	3b01      	subs	r3, #1
 8009422:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009424:	431a      	orrs	r2, r3
 8009426:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800942c:	3b01      	subs	r3, #1
 800942e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009434:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009436:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	22c0      	movs	r2, #192	@ 0xc0
 800943e:	5899      	ldr	r1, [r3, r2]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	21c0      	movs	r1, #192	@ 0xc0
 800944c:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	0018      	movs	r0, r3
 8009452:	f000 fc8d 	bl	8009d70 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	225c      	movs	r2, #92	@ 0x5c
 8009466:	2101      	movs	r1, #1
 8009468:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	0018      	movs	r0, r3
 800946e:	46bd      	mov	sp, r7
 8009470:	b004      	add	sp, #16
 8009472:	bd80      	pop	{r7, pc}
 8009474:	40006400 	.word	0x40006400
 8009478:	40006500 	.word	0x40006500
 800947c:	ffffbfff 	.word	0xffffbfff
 8009480:	ffffefff 	.word	0xffffefff
 8009484:	fffffcff 	.word	0xfffffcff

08009488 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	225c      	movs	r2, #92	@ 0x5c
 800949a:	5c9b      	ldrb	r3, [r3, r2]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d117      	bne.n	80094d2 <HAL_FDCAN_ConfigGlobalFilter+0x4a>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2280      	movs	r2, #128	@ 0x80
 80094a8:	589b      	ldr	r3, [r3, r2]
 80094aa:	223f      	movs	r2, #63	@ 0x3f
 80094ac:	4393      	bics	r3, r2
 80094ae:	0019      	movs	r1, r3
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	011a      	lsls	r2, r3, #4
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	431a      	orrs	r2, r3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	431a      	orrs	r2, r3
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	431a      	orrs	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	2180      	movs	r1, #128	@ 0x80
 80094cc:	505a      	str	r2, [r3, r1]
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	e006      	b.n	80094e0 <HAL_FDCAN_ConfigGlobalFilter+0x58>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094d6:	2204      	movs	r2, #4
 80094d8:	431a      	orrs	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
  }
}
 80094e0:	0018      	movs	r0, r3
 80094e2:	46bd      	mov	sp, r7
 80094e4:	b004      	add	sp, #16
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	225c      	movs	r2, #92	@ 0x5c
 80094f4:	5c9b      	ldrb	r3, [r3, r2]
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d110      	bne.n	800951e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	225c      	movs	r2, #92	@ 0x5c
 8009500:	2102      	movs	r1, #2
 8009502:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699a      	ldr	r2, [r3, #24]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2101      	movs	r1, #1
 8009510:	438a      	bics	r2, r1
 8009512:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	e006      	b.n	800952c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009522:	2204      	movs	r2, #4
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
  }
}
 800952c:	0018      	movs	r0, r3
 800952e:	46bd      	mov	sp, r7
 8009530:	b002      	add	sp, #8
 8009532:	bd80      	pop	{r7, pc}

08009534 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	225c      	movs	r2, #92	@ 0x5c
 8009544:	5c9b      	ldrb	r3, [r3, r2]
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b02      	cmp	r3, #2
 800954a:	d155      	bne.n	80095f8 <HAL_FDCAN_Stop+0xc4>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2101      	movs	r1, #1
 8009558:	430a      	orrs	r2, r1
 800955a:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800955c:	e011      	b.n	8009582 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b0a      	cmp	r3, #10
 8009562:	d90b      	bls.n	800957c <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009568:	2201      	movs	r2, #1
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	225c      	movs	r2, #92	@ 0x5c
 8009574:	2103      	movs	r1, #3
 8009576:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e044      	b.n	8009606 <HAL_FDCAN_Stop+0xd2>
      }

      /* Increment counter */
      Counter++;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3301      	adds	r3, #1
 8009580:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	2201      	movs	r2, #1
 800958a:	4013      	ands	r3, r2
 800958c:	d0e7      	beq.n	800955e <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	699a      	ldr	r2, [r3, #24]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2110      	movs	r1, #16
 800959e:	438a      	bics	r2, r1
 80095a0:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80095a2:	e011      	b.n	80095c8 <HAL_FDCAN_Stop+0x94>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b0a      	cmp	r3, #10
 80095a8:	d90b      	bls.n	80095c2 <HAL_FDCAN_Stop+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ae:	2201      	movs	r2, #1
 80095b0:	431a      	orrs	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	225c      	movs	r2, #92	@ 0x5c
 80095ba:	2103      	movs	r1, #3
 80095bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e021      	b.n	8009606 <HAL_FDCAN_Stop+0xd2>
      }

      /* Increment counter */
      Counter++;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3301      	adds	r3, #1
 80095c6:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	2208      	movs	r2, #8
 80095d0:	4013      	ands	r3, r2
 80095d2:	2b08      	cmp	r3, #8
 80095d4:	d0e6      	beq.n	80095a4 <HAL_FDCAN_Stop+0x70>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	699a      	ldr	r2, [r3, #24]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2102      	movs	r1, #2
 80095e2:	430a      	orrs	r2, r1
 80095e4:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	225c      	movs	r2, #92	@ 0x5c
 80095f0:	2101      	movs	r1, #1
 80095f2:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e006      	b.n	8009606 <HAL_FDCAN_Stop+0xd2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095fc:	2208      	movs	r2, #8
 80095fe:	431a      	orrs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
  }
}
 8009606:	0018      	movs	r0, r3
 8009608:	46bd      	mov	sp, r7
 800960a:	b004      	add	sp, #16
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b086      	sub	sp, #24
 8009612:	af00      	add	r7, sp, #0
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	60b9      	str	r1, [r7, #8]
 8009618:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	225c      	movs	r2, #92	@ 0x5c
 800961e:	5c9b      	ldrb	r3, [r3, r2]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d12d      	bne.n	8009682 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	22c4      	movs	r2, #196	@ 0xc4
 800962c:	589a      	ldr	r2, [r3, r2]
 800962e:	2380      	movs	r3, #128	@ 0x80
 8009630:	039b      	lsls	r3, r3, #14
 8009632:	4013      	ands	r3, r2
 8009634:	d008      	beq.n	8009648 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800963a:	2280      	movs	r2, #128	@ 0x80
 800963c:	0092      	lsls	r2, r2, #2
 800963e:	431a      	orrs	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e023      	b.n	8009690 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	22c4      	movs	r2, #196	@ 0xc4
 800964e:	589b      	ldr	r3, [r3, r2]
 8009650:	0c1b      	lsrs	r3, r3, #16
 8009652:	2203      	movs	r2, #3
 8009654:	4013      	ands	r3, r2
 8009656:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 fbf2 	bl	8009e48 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2101      	movs	r1, #1
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	4091      	lsls	r1, r2
 800966e:	000a      	movs	r2, r1
 8009670:	21cc      	movs	r1, #204	@ 0xcc
 8009672:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8009674:	2201      	movs	r2, #1
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	409a      	lsls	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	e006      	b.n	8009690 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009686:	2208      	movs	r2, #8
 8009688:	431a      	orrs	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
  }
}
 8009690:	0018      	movs	r0, r3
 8009692:	46bd      	mov	sp, r7
 8009694:	b006      	add	sp, #24
 8009696:	bd80      	pop	{r7, pc}

08009698 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08a      	sub	sp, #40	@ 0x28
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80096aa:	201b      	movs	r0, #27
 80096ac:	183b      	adds	r3, r7, r0
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	215c      	movs	r1, #92	@ 0x5c
 80096b2:	5c52      	ldrb	r2, [r2, r1]
 80096b4:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80096b6:	183b      	adds	r3, r7, r0
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d000      	beq.n	80096c0 <HAL_FDCAN_GetRxMessage+0x28>
 80096be:	e0ec      	b.n	800989a <HAL_FDCAN_GetRxMessage+0x202>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b40      	cmp	r3, #64	@ 0x40
 80096c4:	d137      	bne.n	8009736 <HAL_FDCAN_GetRxMessage+0x9e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2290      	movs	r2, #144	@ 0x90
 80096cc:	589b      	ldr	r3, [r3, r2]
 80096ce:	220f      	movs	r2, #15
 80096d0:	4013      	ands	r3, r2
 80096d2:	d108      	bne.n	80096e6 <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096d8:	2280      	movs	r2, #128	@ 0x80
 80096da:	0052      	lsls	r2, r2, #1
 80096dc:	431a      	orrs	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e0e0      	b.n	80098a8 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2290      	movs	r2, #144	@ 0x90
 80096ec:	589b      	ldr	r3, [r3, r2]
 80096ee:	0e1b      	lsrs	r3, r3, #24
 80096f0:	2201      	movs	r2, #1
 80096f2:	4013      	ands	r3, r2
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d10a      	bne.n	800970e <HAL_FDCAN_GetRxMessage+0x76>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2280      	movs	r2, #128	@ 0x80
 80096fe:	589b      	ldr	r3, [r3, r2]
 8009700:	0a5b      	lsrs	r3, r3, #9
 8009702:	2201      	movs	r2, #1
 8009704:	4013      	ands	r3, r2
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_FDCAN_GetRxMessage+0x76>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800970a:	2301      	movs	r3, #1
 800970c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2290      	movs	r2, #144	@ 0x90
 8009714:	589b      	ldr	r3, [r3, r2]
 8009716:	0a1b      	lsrs	r3, r3, #8
 8009718:	2203      	movs	r2, #3
 800971a:	4013      	ands	r3, r2
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	18d3      	adds	r3, r2, r3
 8009720:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009726:	69fa      	ldr	r2, [r7, #28]
 8009728:	0013      	movs	r3, r2
 800972a:	00db      	lsls	r3, r3, #3
 800972c:	189b      	adds	r3, r3, r2
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	18cb      	adds	r3, r1, r3
 8009732:	627b      	str	r3, [r7, #36]	@ 0x24
 8009734:	e036      	b.n	80097a4 <HAL_FDCAN_GetRxMessage+0x10c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2298      	movs	r2, #152	@ 0x98
 800973c:	589b      	ldr	r3, [r3, r2]
 800973e:	220f      	movs	r2, #15
 8009740:	4013      	ands	r3, r2
 8009742:	d108      	bne.n	8009756 <HAL_FDCAN_GetRxMessage+0xbe>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009748:	2280      	movs	r2, #128	@ 0x80
 800974a:	0052      	lsls	r2, r2, #1
 800974c:	431a      	orrs	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e0a8      	b.n	80098a8 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2298      	movs	r2, #152	@ 0x98
 800975c:	589b      	ldr	r3, [r3, r2]
 800975e:	0e1b      	lsrs	r3, r3, #24
 8009760:	2201      	movs	r2, #1
 8009762:	4013      	ands	r3, r2
 8009764:	2b01      	cmp	r3, #1
 8009766:	d10a      	bne.n	800977e <HAL_FDCAN_GetRxMessage+0xe6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2280      	movs	r2, #128	@ 0x80
 800976e:	589b      	ldr	r3, [r3, r2]
 8009770:	0a1b      	lsrs	r3, r3, #8
 8009772:	2201      	movs	r2, #1
 8009774:	4013      	ands	r3, r2
 8009776:	2b01      	cmp	r3, #1
 8009778:	d101      	bne.n	800977e <HAL_FDCAN_GetRxMessage+0xe6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800977a:	2301      	movs	r3, #1
 800977c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2298      	movs	r2, #152	@ 0x98
 8009784:	589b      	ldr	r3, [r3, r2]
 8009786:	0a1b      	lsrs	r3, r3, #8
 8009788:	2203      	movs	r2, #3
 800978a:	4013      	ands	r3, r2
 800978c:	69fa      	ldr	r2, [r7, #28]
 800978e:	18d3      	adds	r3, r2, r3
 8009790:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	0013      	movs	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	189b      	adds	r3, r3, r2
 800979e:	00db      	lsls	r3, r3, #3
 80097a0:	18cb      	adds	r3, r1, r3
 80097a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80097a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	2380      	movs	r3, #128	@ 0x80
 80097aa:	05db      	lsls	r3, r3, #23
 80097ac:	401a      	ands	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d107      	bne.n	80097ca <HAL_FDCAN_GetRxMessage+0x132>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	0c9b      	lsrs	r3, r3, #18
 80097c0:	055b      	lsls	r3, r3, #21
 80097c2:	0d5a      	lsrs	r2, r3, #21
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	601a      	str	r2, [r3, #0]
 80097c8:	e005      	b.n	80097d6 <HAL_FDCAN_GetRxMessage+0x13e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80097ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	08da      	lsrs	r2, r3, #3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80097d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	2380      	movs	r3, #128	@ 0x80
 80097dc:	059b      	lsls	r3, r3, #22
 80097de:	401a      	ands	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80097e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	0fdb      	lsrs	r3, r3, #31
 80097ea:	07da      	lsls	r2, r3, #31
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80097f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f2:	3304      	adds	r3, #4
 80097f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80097f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	0c1a      	lsrs	r2, r3, #16
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8009802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	0c1b      	lsrs	r3, r3, #16
 8009808:	220f      	movs	r2, #15
 800980a:	401a      	ands	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	2380      	movs	r3, #128	@ 0x80
 8009816:	035b      	lsls	r3, r3, #13
 8009818:	401a      	ands	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	2380      	movs	r3, #128	@ 0x80
 8009824:	039b      	lsls	r3, r3, #14
 8009826:	401a      	ands	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800982c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	0e1b      	lsrs	r3, r3, #24
 8009832:	227f      	movs	r2, #127	@ 0x7f
 8009834:	401a      	ands	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800983a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	0fda      	lsrs	r2, r3, #31
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	3304      	adds	r3, #4
 8009848:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800984a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800984e:	2300      	movs	r3, #0
 8009850:	623b      	str	r3, [r7, #32]
 8009852:	e00a      	b.n	800986a <HAL_FDCAN_GetRxMessage+0x1d2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	18d2      	adds	r2, r2, r3
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	18cb      	adds	r3, r1, r3
 8009860:	7812      	ldrb	r2, [r2, #0]
 8009862:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	3301      	adds	r3, #1
 8009868:	623b      	str	r3, [r7, #32]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	4a10      	ldr	r2, [pc, #64]	@ (80098b0 <HAL_FDCAN_GetRxMessage+0x218>)
 8009870:	5cd3      	ldrb	r3, [r2, r3]
 8009872:	001a      	movs	r2, r3
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	4293      	cmp	r3, r2
 8009878:	d3ec      	bcc.n	8009854 <HAL_FDCAN_GetRxMessage+0x1bc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2b40      	cmp	r3, #64	@ 0x40
 800987e:	d105      	bne.n	800988c <HAL_FDCAN_GetRxMessage+0x1f4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2194      	movs	r1, #148	@ 0x94
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	505a      	str	r2, [r3, r1]
 800988a:	e004      	b.n	8009896 <HAL_FDCAN_GetRxMessage+0x1fe>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	219c      	movs	r1, #156	@ 0x9c
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	e006      	b.n	80098a8 <HAL_FDCAN_GetRxMessage+0x210>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800989e:	2208      	movs	r2, #8
 80098a0:	431a      	orrs	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
  }
}
 80098a8:	0018      	movs	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	b00a      	add	sp, #40	@ 0x28
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	08010c70 	.word	0x08010c70

080098b4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	22c4      	movs	r2, #196	@ 0xc4
 80098c2:	589b      	ldr	r3, [r3, r2]
 80098c4:	2207      	movs	r2, #7
 80098c6:	4013      	ands	r3, r2
 80098c8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80098ca:	68fb      	ldr	r3, [r7, #12]
}
 80098cc:	0018      	movs	r0, r3
 80098ce:	46bd      	mov	sp, r7
 80098d0:	b004      	add	sp, #16
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80098e0:	2017      	movs	r0, #23
 80098e2:	183b      	adds	r3, r7, r0
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	215c      	movs	r1, #92	@ 0x5c
 80098e8:	5c52      	ldrb	r2, [r2, r1]
 80098ea:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80098ec:	0002      	movs	r2, r0
 80098ee:	18bb      	adds	r3, r7, r2
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d004      	beq.n	8009900 <HAL_FDCAN_ActivateNotification+0x2c>
 80098f6:	18bb      	adds	r3, r7, r2
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d000      	beq.n	8009900 <HAL_FDCAN_ActivateNotification+0x2c>
 80098fe:	e0b4      	b.n	8009a6a <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009906:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2207      	movs	r2, #7
 800990c:	4013      	ands	r3, r2
 800990e:	d003      	beq.n	8009918 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2201      	movs	r2, #1
 8009914:	4013      	ands	r3, r2
 8009916:	d034      	beq.n	8009982 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2238      	movs	r2, #56	@ 0x38
 800991c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800991e:	d003      	beq.n	8009928 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	2202      	movs	r2, #2
 8009924:	4013      	ands	r3, r2
 8009926:	d02c      	beq.n	8009982 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	23e0      	movs	r3, #224	@ 0xe0
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8009930:	d003      	beq.n	800993a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	2204      	movs	r2, #4
 8009936:	4013      	ands	r3, r2
 8009938:	d023      	beq.n	8009982 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	23f0      	movs	r3, #240	@ 0xf0
 800993e:	015b      	lsls	r3, r3, #5
 8009940:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8009942:	d003      	beq.n	800994c <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	2208      	movs	r2, #8
 8009948:	4013      	ands	r3, r2
 800994a:	d01a      	beq.n	8009982 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	23e0      	movs	r3, #224	@ 0xe0
 8009950:	021b      	lsls	r3, r3, #8
 8009952:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8009954:	d003      	beq.n	800995e <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2210      	movs	r2, #16
 800995a:	4013      	ands	r3, r2
 800995c:	d011      	beq.n	8009982 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	23c0      	movs	r3, #192	@ 0xc0
 8009962:	029b      	lsls	r3, r3, #10
 8009964:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8009966:	d003      	beq.n	8009970 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2220      	movs	r2, #32
 800996c:	4013      	ands	r3, r2
 800996e:	d008      	beq.n	8009982 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	23fc      	movs	r3, #252	@ 0xfc
 8009974:	041b      	lsls	r3, r3, #16
 8009976:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8009978:	d00b      	beq.n	8009992 <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	2240      	movs	r2, #64	@ 0x40
 800997e:	4013      	ands	r3, r2
 8009980:	d107      	bne.n	8009992 <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2101      	movs	r1, #1
 800998e:	430a      	orrs	r2, r1
 8009990:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2207      	movs	r2, #7
 8009996:	4013      	ands	r3, r2
 8009998:	d003      	beq.n	80099a2 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2201      	movs	r2, #1
 800999e:	4013      	ands	r3, r2
 80099a0:	d134      	bne.n	8009a0c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2238      	movs	r2, #56	@ 0x38
 80099a6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80099a8:	d003      	beq.n	80099b2 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	2202      	movs	r2, #2
 80099ae:	4013      	ands	r3, r2
 80099b0:	d12c      	bne.n	8009a0c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	23e0      	movs	r3, #224	@ 0xe0
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80099ba:	d003      	beq.n	80099c4 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	2204      	movs	r2, #4
 80099c0:	4013      	ands	r3, r2
 80099c2:	d123      	bne.n	8009a0c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	23f0      	movs	r3, #240	@ 0xf0
 80099c8:	015b      	lsls	r3, r3, #5
 80099ca:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80099cc:	d003      	beq.n	80099d6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2208      	movs	r2, #8
 80099d2:	4013      	ands	r3, r2
 80099d4:	d11a      	bne.n	8009a0c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	23e0      	movs	r3, #224	@ 0xe0
 80099da:	021b      	lsls	r3, r3, #8
 80099dc:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80099de:	d003      	beq.n	80099e8 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2210      	movs	r2, #16
 80099e4:	4013      	ands	r3, r2
 80099e6:	d111      	bne.n	8009a0c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	23c0      	movs	r3, #192	@ 0xc0
 80099ec:	029b      	lsls	r3, r3, #10
 80099ee:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80099f0:	d003      	beq.n	80099fa <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2220      	movs	r2, #32
 80099f6:	4013      	ands	r3, r2
 80099f8:	d108      	bne.n	8009a0c <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	23fc      	movs	r3, #252	@ 0xfc
 80099fe:	041b      	lsls	r3, r3, #16
 8009a00:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8009a02:	d00b      	beq.n	8009a1c <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	2240      	movs	r2, #64	@ 0x40
 8009a08:	4013      	ands	r3, r2
 8009a0a:	d007      	beq.n	8009a1c <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2102      	movs	r1, #2
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2280      	movs	r2, #128	@ 0x80
 8009a20:	4013      	ands	r3, r2
 8009a22:	d009      	beq.n	8009a38 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	22dc      	movs	r2, #220	@ 0xdc
 8009a2a:	5899      	ldr	r1, [r3, r2]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	21dc      	movs	r1, #220	@ 0xdc
 8009a36:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	2380      	movs	r3, #128	@ 0x80
 8009a3c:	005b      	lsls	r3, r3, #1
 8009a3e:	4013      	ands	r3, r2
 8009a40:	d009      	beq.n	8009a56 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	22e0      	movs	r2, #224	@ 0xe0
 8009a48:	5899      	ldr	r1, [r3, r2]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	430a      	orrs	r2, r1
 8009a52:	21e0      	movs	r1, #224	@ 0xe0
 8009a54:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	e006      	b.n	8009a78 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a6e:	2202      	movs	r2, #2
 8009a70:	431a      	orrs	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
  }
}
 8009a78:	0018      	movs	r0, r3
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	b006      	add	sp, #24
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08c      	sub	sp, #48	@ 0x30
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a8e:	23e0      	movs	r3, #224	@ 0xe0
 8009a90:	015b      	lsls	r3, r3, #5
 8009a92:	4013      	ands	r3, r2
 8009a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aa8:	2207      	movs	r2, #7
 8009aaa:	4013      	ands	r3, r2
 8009aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac0:	2238      	movs	r2, #56	@ 0x38
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	4013      	ands	r3, r2
 8009ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ad8:	23f1      	movs	r3, #241	@ 0xf1
 8009ada:	041b      	lsls	r3, r3, #16
 8009adc:	4013      	ands	r3, r2
 8009ade:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009af2:	23e0      	movs	r3, #224	@ 0xe0
 8009af4:	031b      	lsls	r3, r3, #12
 8009af6:	4013      	ands	r3, r2
 8009af8:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	4013      	ands	r3, r2
 8009b04:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b0c:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b14:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2240      	movs	r2, #64	@ 0x40
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	d00b      	beq.n	8009b36 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	2240      	movs	r2, #64	@ 0x40
 8009b22:	4013      	ands	r3, r2
 8009b24:	d007      	beq.n	8009b36 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2240      	movs	r2, #64	@ 0x40
 8009b2c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	0018      	movs	r0, r3
 8009b32:	f000 f904 	bl	8009d3e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	2380      	movs	r3, #128	@ 0x80
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	d01b      	beq.n	8009b78 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	2380      	movs	r3, #128	@ 0x80
 8009b44:	005b      	lsls	r3, r3, #1
 8009b46:	4013      	ands	r3, r2
 8009b48:	d016      	beq.n	8009b78 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	22d8      	movs	r2, #216	@ 0xd8
 8009b50:	589b      	ldr	r3, [r3, r2]
 8009b52:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	22e0      	movs	r2, #224	@ 0xe0
 8009b5a:	589a      	ldr	r2, [r3, r2]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	4013      	ands	r3, r2
 8009b60:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2280      	movs	r2, #128	@ 0x80
 8009b68:	0052      	lsls	r2, r2, #1
 8009b6a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	0011      	movs	r1, r2
 8009b72:	0018      	movs	r0, r3
 8009b74:	f000 f8ca 	bl	8009d0c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d009      	beq.n	8009b92 <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b84:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	0011      	movs	r1, r2
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f000 f8ac 	bl	8009cea <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d009      	beq.n	8009bac <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b9e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	0011      	movs	r1, r2
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	f7fe fb98 	bl	80082dc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d009      	beq.n	8009bc6 <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bb8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	0011      	movs	r1, r2
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f7fe fb9e 	bl	8008302 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	2380      	movs	r3, #128	@ 0x80
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4013      	ands	r3, r2
 8009bce:	d00d      	beq.n	8009bec <HAL_FDCAN_IRQHandler+0x16c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	2380      	movs	r3, #128	@ 0x80
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	d008      	beq.n	8009bec <HAL_FDCAN_IRQHandler+0x16c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2280      	movs	r2, #128	@ 0x80
 8009be0:	0092      	lsls	r2, r2, #2
 8009be2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	0018      	movs	r0, r3
 8009be8:	f000 f888 	bl	8009cfc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2280      	movs	r2, #128	@ 0x80
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	d019      	beq.n	8009c28 <HAL_FDCAN_IRQHandler+0x1a8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	2280      	movs	r2, #128	@ 0x80
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	d015      	beq.n	8009c28 <HAL_FDCAN_IRQHandler+0x1a8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	22d4      	movs	r2, #212	@ 0xd4
 8009c02:	589b      	ldr	r3, [r3, r2]
 8009c04:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	22dc      	movs	r2, #220	@ 0xdc
 8009c0c:	589a      	ldr	r2, [r3, r2]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4013      	ands	r3, r2
 8009c12:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2280      	movs	r2, #128	@ 0x80
 8009c1a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	0011      	movs	r1, r2
 8009c22:	0018      	movs	r0, r3
 8009c24:	f7fe fb80 	bl	8008328 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	2380      	movs	r3, #128	@ 0x80
 8009c2c:	019b      	lsls	r3, r3, #6
 8009c2e:	4013      	ands	r3, r2
 8009c30:	d00d      	beq.n	8009c4e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8009c32:	69ba      	ldr	r2, [r7, #24]
 8009c34:	2380      	movs	r3, #128	@ 0x80
 8009c36:	019b      	lsls	r3, r3, #6
 8009c38:	4013      	ands	r3, r2
 8009c3a:	d008      	beq.n	8009c4e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2280      	movs	r2, #128	@ 0x80
 8009c42:	0192      	lsls	r2, r2, #6
 8009c44:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	0018      	movs	r0, r3
 8009c4a:	f000 f868 	bl	8009d1e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	2380      	movs	r3, #128	@ 0x80
 8009c52:	021b      	lsls	r3, r3, #8
 8009c54:	4013      	ands	r3, r2
 8009c56:	d00d      	beq.n	8009c74 <HAL_FDCAN_IRQHandler+0x1f4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	2380      	movs	r3, #128	@ 0x80
 8009c5c:	021b      	lsls	r3, r3, #8
 8009c5e:	4013      	ands	r3, r2
 8009c60:	d008      	beq.n	8009c74 <HAL_FDCAN_IRQHandler+0x1f4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2280      	movs	r2, #128	@ 0x80
 8009c68:	0212      	lsls	r2, r2, #8
 8009c6a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	0018      	movs	r0, r3
 8009c70:	f000 f85d 	bl	8009d2e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	2380      	movs	r3, #128	@ 0x80
 8009c78:	01db      	lsls	r3, r3, #7
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	d00f      	beq.n	8009c9e <HAL_FDCAN_IRQHandler+0x21e>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	2380      	movs	r3, #128	@ 0x80
 8009c82:	01db      	lsls	r3, r3, #7
 8009c84:	4013      	ands	r3, r2
 8009c86:	d00a      	beq.n	8009c9e <HAL_FDCAN_IRQHandler+0x21e>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2280      	movs	r2, #128	@ 0x80
 8009c8e:	01d2      	lsls	r2, r2, #7
 8009c90:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c96:	2280      	movs	r2, #128	@ 0x80
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d009      	beq.n	8009cb8 <HAL_FDCAN_IRQHandler+0x238>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	69fa      	ldr	r2, [r7, #28]
 8009caa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009cac:	69fa      	ldr	r2, [r7, #28]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	0011      	movs	r1, r2
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	f000 f853 	bl	8009d5e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d009      	beq.n	8009cd2 <HAL_FDCAN_IRQHandler+0x252>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6a3a      	ldr	r2, [r7, #32]
 8009cc4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <HAL_FDCAN_IRQHandler+0x262>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f000 f836 	bl	8009d4e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009ce2:	46c0      	nop			@ (mov r8, r8)
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	b00c      	add	sp, #48	@ 0x30
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009cf4:	46c0      	nop			@ (mov r8, r8)
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	b002      	add	sp, #8
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8009d04:	46c0      	nop			@ (mov r8, r8)
 8009d06:	46bd      	mov	sp, r7
 8009d08:	b002      	add	sp, #8
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8009d16:	46c0      	nop			@ (mov r8, r8)
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	b002      	add	sp, #8
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8009d26:	46c0      	nop			@ (mov r8, r8)
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	b002      	add	sp, #8
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8009d36:	46c0      	nop			@ (mov r8, r8)
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	b002      	add	sp, #8
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b082      	sub	sp, #8
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009d46:	46c0      	nop			@ (mov r8, r8)
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	b002      	add	sp, #8
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8009d56:	46c0      	nop			@ (mov r8, r8)
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	b002      	add	sp, #8
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8009d68:	46c0      	nop			@ (mov r8, r8)
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	b002      	add	sp, #8
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009d78:	4b2f      	ldr	r3, [pc, #188]	@ (8009e38 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8009d7a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a2e      	ldr	r2, [pc, #184]	@ (8009e3c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d105      	bne.n	8009d92 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	22d4      	movs	r2, #212	@ 0xd4
 8009d8a:	0092      	lsls	r2, r2, #2
 8009d8c:	4694      	mov	ip, r2
 8009d8e:	4463      	add	r3, ip
 8009d90:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2280      	movs	r2, #128	@ 0x80
 8009d9e:	589b      	ldr	r3, [r3, r2]
 8009da0:	4a27      	ldr	r2, [pc, #156]	@ (8009e40 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8009da2:	4013      	ands	r3, r2
 8009da4:	0019      	movs	r1, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009daa:	041a      	lsls	r2, r3, #16
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	2180      	movs	r1, #128	@ 0x80
 8009db4:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	3370      	adds	r3, #112	@ 0x70
 8009dba:	001a      	movs	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2280      	movs	r2, #128	@ 0x80
 8009dc6:	589b      	ldr	r3, [r3, r2]
 8009dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8009e44 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8009dca:	4013      	ands	r3, r2
 8009dcc:	0019      	movs	r1, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd2:	061a      	lsls	r2, r3, #24
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	2180      	movs	r1, #128	@ 0x80
 8009ddc:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	33b0      	adds	r3, #176	@ 0xb0
 8009de2:	001a      	movs	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	3389      	adds	r3, #137	@ 0x89
 8009dec:	33ff      	adds	r3, #255	@ 0xff
 8009dee:	001a      	movs	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2298      	movs	r2, #152	@ 0x98
 8009df8:	0092      	lsls	r2, r2, #2
 8009dfa:	189a      	adds	r2, r3, r2
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	229e      	movs	r2, #158	@ 0x9e
 8009e04:	0092      	lsls	r2, r2, #2
 8009e06:	189a      	adds	r2, r3, r2
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	e005      	b.n	8009e1e <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	22d4      	movs	r2, #212	@ 0xd4
 8009e22:	0092      	lsls	r2, r2, #2
 8009e24:	4694      	mov	ip, r2
 8009e26:	4463      	add	r3, ip
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d3f1      	bcc.n	8009e12 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8009e2e:	46c0      	nop			@ (mov r8, r8)
 8009e30:	46c0      	nop			@ (mov r8, r8)
 8009e32:	46bd      	mov	sp, r7
 8009e34:	b004      	add	sp, #16
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	4000b400 	.word	0x4000b400
 8009e3c:	40006800 	.word	0x40006800
 8009e40:	ffe0ffff 	.word	0xffe0ffff
 8009e44:	f0ffffff 	.word	0xf0ffffff

08009e48 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10a      	bne.n	8009e74 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8009e66:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	e00b      	b.n	8009e8c <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009e7c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8009e82:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009e84:	2280      	movs	r2, #128	@ 0x80
 8009e86:	05d2      	lsls	r2, r2, #23
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009e96:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009e9c:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8009ea2:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	0013      	movs	r3, r2
 8009eb6:	00db      	lsls	r3, r3, #3
 8009eb8:	189b      	adds	r3, r3, r2
 8009eba:	00db      	lsls	r3, r3, #3
 8009ebc:	18cb      	adds	r3, r1, r3
 8009ebe:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	69fa      	ldr	r2, [r7, #28]
 8009ec4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009ed8:	2300      	movs	r3, #0
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	e020      	b.n	8009f20 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	3303      	adds	r3, #3
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	18d3      	adds	r3, r2, r3
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	3302      	adds	r3, #2
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	18cb      	adds	r3, r1, r3
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009ef6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	3301      	adds	r3, #1
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	18cb      	adds	r3, r1, r3
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009f04:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	188a      	adds	r2, r1, r2
 8009f0c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009f0e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	3304      	adds	r3, #4
 8009f18:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	4a05      	ldr	r2, [pc, #20]	@ (8009f3c <FDCAN_CopyMessageToRAM+0xf4>)
 8009f26:	5cd3      	ldrb	r3, [r2, r3]
 8009f28:	001a      	movs	r2, r3
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d3d6      	bcc.n	8009ede <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8009f30:	46c0      	nop			@ (mov r8, r8)
 8009f32:	46c0      	nop			@ (mov r8, r8)
 8009f34:	46bd      	mov	sp, r7
 8009f36:	b008      	add	sp, #32
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	46c0      	nop			@ (mov r8, r8)
 8009f3c:	08010c70 	.word	0x08010c70

08009f40 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009f40:	b5b0      	push	{r4, r5, r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	603a      	str	r2, [r7, #0]
 8009f4c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f4e:	4b21      	ldr	r3, [pc, #132]	@ (8009fd4 <HAL_FLASH_Program+0x94>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <HAL_FLASH_Program+0x1a>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e038      	b.n	8009fcc <HAL_FLASH_Program+0x8c>
 8009f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8009fd4 <HAL_FLASH_Program+0x94>)
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009f60:	4b1c      	ldr	r3, [pc, #112]	@ (8009fd4 <HAL_FLASH_Program+0x94>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009f66:	2517      	movs	r5, #23
 8009f68:	197c      	adds	r4, r7, r5
 8009f6a:	23fa      	movs	r3, #250	@ 0xfa
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	0018      	movs	r0, r3
 8009f70:	f000 f884 	bl	800a07c <FLASH_WaitForLastOperation>
 8009f74:	0003      	movs	r3, r0
 8009f76:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8009f78:	197b      	adds	r3, r7, r5
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d11f      	bne.n	8009fc0 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d106      	bne.n	8009f94 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68b9      	ldr	r1, [r7, #8]
 8009f8c:	0008      	movs	r0, r1
 8009f8e:	f000 f8c3 	bl	800a118 <FLASH_Program_DoubleWord>
 8009f92:	e005      	b.n	8009fa0 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	0011      	movs	r1, r2
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	f006 fa28 	bl	80103f0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009fa0:	2317      	movs	r3, #23
 8009fa2:	18fc      	adds	r4, r7, r3
 8009fa4:	23fa      	movs	r3, #250	@ 0xfa
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f000 f867 	bl	800a07c <FLASH_WaitForLastOperation>
 8009fae:	0003      	movs	r3, r0
 8009fb0:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8009fb2:	4b09      	ldr	r3, [pc, #36]	@ (8009fd8 <HAL_FLASH_Program+0x98>)
 8009fb4:	695a      	ldr	r2, [r3, #20]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	43d9      	mvns	r1, r3
 8009fba:	4b07      	ldr	r3, [pc, #28]	@ (8009fd8 <HAL_FLASH_Program+0x98>)
 8009fbc:	400a      	ands	r2, r1
 8009fbe:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009fc0:	4b04      	ldr	r3, [pc, #16]	@ (8009fd4 <HAL_FLASH_Program+0x94>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009fc6:	2317      	movs	r3, #23
 8009fc8:	18fb      	adds	r3, r7, r3
 8009fca:	781b      	ldrb	r3, [r3, #0]
}
 8009fcc:	0018      	movs	r0, r3
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	b006      	add	sp, #24
 8009fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8009fd4:	2000061c 	.word	0x2000061c
 8009fd8:	40022000 	.word	0x40022000

08009fdc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009fe2:	1dfb      	adds	r3, r7, #7
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8009fe8:	4b0b      	ldr	r3, [pc, #44]	@ (800a018 <HAL_FLASH_Unlock+0x3c>)
 8009fea:	695b      	ldr	r3, [r3, #20]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	da0c      	bge.n	800a00a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009ff0:	4b09      	ldr	r3, [pc, #36]	@ (800a018 <HAL_FLASH_Unlock+0x3c>)
 8009ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800a01c <HAL_FLASH_Unlock+0x40>)
 8009ff4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009ff6:	4b08      	ldr	r3, [pc, #32]	@ (800a018 <HAL_FLASH_Unlock+0x3c>)
 8009ff8:	4a09      	ldr	r2, [pc, #36]	@ (800a020 <HAL_FLASH_Unlock+0x44>)
 8009ffa:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8009ffc:	4b06      	ldr	r3, [pc, #24]	@ (800a018 <HAL_FLASH_Unlock+0x3c>)
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	2b00      	cmp	r3, #0
 800a002:	da02      	bge.n	800a00a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800a004:	1dfb      	adds	r3, r7, #7
 800a006:	2201      	movs	r2, #1
 800a008:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800a00a:	1dfb      	adds	r3, r7, #7
 800a00c:	781b      	ldrb	r3, [r3, #0]
}
 800a00e:	0018      	movs	r0, r3
 800a010:	46bd      	mov	sp, r7
 800a012:	b002      	add	sp, #8
 800a014:	bd80      	pop	{r7, pc}
 800a016:	46c0      	nop			@ (mov r8, r8)
 800a018:	40022000 	.word	0x40022000
 800a01c:	45670123 	.word	0x45670123
 800a020:	cdef89ab 	.word	0xcdef89ab

0800a024 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800a02a:	1dfb      	adds	r3, r7, #7
 800a02c:	2201      	movs	r2, #1
 800a02e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a030:	23fa      	movs	r3, #250	@ 0xfa
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	0018      	movs	r0, r3
 800a036:	f000 f821 	bl	800a07c <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a03a:	4b0a      	ldr	r3, [pc, #40]	@ (800a064 <HAL_FLASH_Lock+0x40>)
 800a03c:	695a      	ldr	r2, [r3, #20]
 800a03e:	4b09      	ldr	r3, [pc, #36]	@ (800a064 <HAL_FLASH_Lock+0x40>)
 800a040:	2180      	movs	r1, #128	@ 0x80
 800a042:	0609      	lsls	r1, r1, #24
 800a044:	430a      	orrs	r2, r1
 800a046:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800a048:	4b06      	ldr	r3, [pc, #24]	@ (800a064 <HAL_FLASH_Lock+0x40>)
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	da02      	bge.n	800a056 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 800a050:	1dfb      	adds	r3, r7, #7
 800a052:	2200      	movs	r2, #0
 800a054:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a056:	1dfb      	adds	r3, r7, #7
 800a058:	781b      	ldrb	r3, [r3, #0]
}
 800a05a:	0018      	movs	r0, r3
 800a05c:	46bd      	mov	sp, r7
 800a05e:	b002      	add	sp, #8
 800a060:	bd80      	pop	{r7, pc}
 800a062:	46c0      	nop			@ (mov r8, r8)
 800a064:	40022000 	.word	0x40022000

0800a068 <HAL_FLASH_GetError>:
  *            @arg @ref HAL_FLASH_ERROR_OPTV Option validity error
  *            @arg @ref HAL_FLASH_ERROR_ECCD two ECC errors have been detected
  * @note (*) availability depends on devices
  */
uint32_t HAL_FLASH_GetError(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 800a06c:	4b02      	ldr	r3, [pc, #8]	@ (800a078 <HAL_FLASH_GetError+0x10>)
 800a06e:	685b      	ldr	r3, [r3, #4]
}
 800a070:	0018      	movs	r0, r3
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	46c0      	nop			@ (mov r8, r8)
 800a078:	2000061c 	.word	0x2000061c

0800a07c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800a084:	f7fe ff86 	bl	8008f94 <HAL_GetTick>
 800a088:	0003      	movs	r3, r0
 800a08a:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 800a08c:	23c0      	movs	r3, #192	@ 0xc0
 800a08e:	029b      	lsls	r3, r3, #10
 800a090:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800a092:	e00c      	b.n	800a0ae <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3301      	adds	r3, #1
 800a098:	d009      	beq.n	800a0ae <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800a09a:	f7fe ff7b 	bl	8008f94 <HAL_GetTick>
 800a09e:	0002      	movs	r2, r0
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d801      	bhi.n	800a0ae <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e028      	b.n	800a100 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800a0ae:	4b16      	ldr	r3, [pc, #88]	@ (800a108 <FLASH_WaitForLastOperation+0x8c>)
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	d1ed      	bne.n	800a094 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800a0b8:	4b13      	ldr	r3, [pc, #76]	@ (800a108 <FLASH_WaitForLastOperation+0x8c>)
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	4a13      	ldr	r2, [pc, #76]	@ (800a10c <FLASH_WaitForLastOperation+0x90>)
 800a0be:	4013      	ands	r3, r2
 800a0c0:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800a0c2:	4b11      	ldr	r3, [pc, #68]	@ (800a108 <FLASH_WaitForLastOperation+0x8c>)
 800a0c4:	4a12      	ldr	r2, [pc, #72]	@ (800a110 <FLASH_WaitForLastOperation+0x94>)
 800a0c6:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d011      	beq.n	800a0f2 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800a0ce:	4b11      	ldr	r3, [pc, #68]	@ (800a114 <FLASH_WaitForLastOperation+0x98>)
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e013      	b.n	800a100 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	d009      	beq.n	800a0f2 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800a0de:	f7fe ff59 	bl	8008f94 <HAL_GetTick>
 800a0e2:	0002      	movs	r2, r0
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d801      	bhi.n	800a0f2 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e006      	b.n	800a100 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800a0f2:	4b05      	ldr	r3, [pc, #20]	@ (800a108 <FLASH_WaitForLastOperation+0x8c>)
 800a0f4:	691a      	ldr	r2, [r3, #16]
 800a0f6:	2380      	movs	r3, #128	@ 0x80
 800a0f8:	02db      	lsls	r3, r3, #11
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	d1ec      	bne.n	800a0d8 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	0018      	movs	r0, r3
 800a102:	46bd      	mov	sp, r7
 800a104:	b004      	add	sp, #16
 800a106:	bd80      	pop	{r7, pc}
 800a108:	40022000 	.word	0x40022000
 800a10c:	0000c3fa 	.word	0x0000c3fa
 800a110:	0008c3fb 	.word	0x0008c3fb
 800a114:	2000061c 	.word	0x2000061c

0800a118 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a118:	b5b0      	push	{r4, r5, r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	603a      	str	r2, [r7, #0]
 800a122:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a124:	4b0b      	ldr	r3, [pc, #44]	@ (800a154 <FLASH_Program_DoubleWord+0x3c>)
 800a126:	695a      	ldr	r2, [r3, #20]
 800a128:	4b0a      	ldr	r3, [pc, #40]	@ (800a154 <FLASH_Program_DoubleWord+0x3c>)
 800a12a:	2101      	movs	r1, #1
 800a12c:	430a      	orrs	r2, r1
 800a12e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a136:	f3bf 8f6f 	isb	sy
}
 800a13a:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	001c      	movs	r4, r3
 800a140:	2300      	movs	r3, #0
 800a142:	001d      	movs	r5, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	3304      	adds	r3, #4
 800a148:	0022      	movs	r2, r4
 800a14a:	601a      	str	r2, [r3, #0]
}
 800a14c:	46c0      	nop			@ (mov r8, r8)
 800a14e:	46bd      	mov	sp, r7
 800a150:	b004      	add	sp, #16
 800a152:	bdb0      	pop	{r4, r5, r7, pc}
 800a154:	40022000 	.word	0x40022000

0800a158 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800a158:	b5b0      	push	{r4, r5, r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a162:	4b33      	ldr	r3, [pc, #204]	@ (800a230 <HAL_FLASHEx_Erase+0xd8>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d101      	bne.n	800a16e <HAL_FLASHEx_Erase+0x16>
 800a16a:	2302      	movs	r3, #2
 800a16c:	e05c      	b.n	800a228 <HAL_FLASHEx_Erase+0xd0>
 800a16e:	4b30      	ldr	r3, [pc, #192]	@ (800a230 <HAL_FLASHEx_Erase+0xd8>)
 800a170:	2201      	movs	r2, #1
 800a172:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a174:	4b2e      	ldr	r3, [pc, #184]	@ (800a230 <HAL_FLASHEx_Erase+0xd8>)
 800a176:	2200      	movs	r2, #0
 800a178:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a17a:	250f      	movs	r5, #15
 800a17c:	197c      	adds	r4, r7, r5
 800a17e:	23fa      	movs	r3, #250	@ 0xfa
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	0018      	movs	r0, r3
 800a184:	f7ff ff7a 	bl	800a07c <FLASH_WaitForLastOperation>
 800a188:	0003      	movs	r3, r0
 800a18a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800a18c:	002c      	movs	r4, r5
 800a18e:	193b      	adds	r3, r7, r4
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d142      	bne.n	800a21c <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	d10d      	bne.n	800a1ba <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	f000 f848 	bl	800a238 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a1a8:	193c      	adds	r4, r7, r4
 800a1aa:	23fa      	movs	r3, #250	@ 0xfa
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f7ff ff64 	bl	800a07c <FLASH_WaitForLastOperation>
 800a1b4:	0003      	movs	r3, r0
 800a1b6:	7023      	strb	r3, [r4, #0]
 800a1b8:	e030      	b.n	800a21c <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	4252      	negs	r2, r2
 800a1c0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	60bb      	str	r3, [r7, #8]
 800a1c8:	e01a      	b.n	800a200 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	0011      	movs	r1, r2
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	f000 f844 	bl	800a260 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a1d8:	250f      	movs	r5, #15
 800a1da:	197c      	adds	r4, r7, r5
 800a1dc:	23fa      	movs	r3, #250	@ 0xfa
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	f7ff ff4b 	bl	800a07c <FLASH_WaitForLastOperation>
 800a1e6:	0003      	movs	r3, r0
 800a1e8:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800a1ea:	197b      	adds	r3, r7, r5
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	601a      	str	r2, [r3, #0]
          break;
 800a1f8:	e00a      	b.n	800a210 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	60bb      	str	r3, [r7, #8]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	18d3      	adds	r3, r2, r3
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d3dc      	bcc.n	800a1ca <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a210:	4b08      	ldr	r3, [pc, #32]	@ (800a234 <HAL_FLASHEx_Erase+0xdc>)
 800a212:	695a      	ldr	r2, [r3, #20]
 800a214:	4b07      	ldr	r3, [pc, #28]	@ (800a234 <HAL_FLASHEx_Erase+0xdc>)
 800a216:	2102      	movs	r1, #2
 800a218:	438a      	bics	r2, r1
 800a21a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a21c:	4b04      	ldr	r3, [pc, #16]	@ (800a230 <HAL_FLASHEx_Erase+0xd8>)
 800a21e:	2200      	movs	r2, #0
 800a220:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800a222:	230f      	movs	r3, #15
 800a224:	18fb      	adds	r3, r7, r3
 800a226:	781b      	ldrb	r3, [r3, #0]
}
 800a228:	0018      	movs	r0, r3
 800a22a:	46bd      	mov	sp, r7
 800a22c:	b004      	add	sp, #16
 800a22e:	bdb0      	pop	{r4, r5, r7, pc}
 800a230:	2000061c 	.word	0x2000061c
 800a234:	40022000 	.word	0x40022000

0800a238 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800a240:	4b06      	ldr	r3, [pc, #24]	@ (800a25c <FLASH_MassErase+0x24>)
 800a242:	695a      	ldr	r2, [r3, #20]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	431a      	orrs	r2, r3
 800a248:	4b04      	ldr	r3, [pc, #16]	@ (800a25c <FLASH_MassErase+0x24>)
 800a24a:	2180      	movs	r1, #128	@ 0x80
 800a24c:	0249      	lsls	r1, r1, #9
 800a24e:	430a      	orrs	r2, r1
 800a250:	615a      	str	r2, [r3, #20]
}
 800a252:	46c0      	nop			@ (mov r8, r8)
 800a254:	46bd      	mov	sp, r7
 800a256:	b002      	add	sp, #8
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	46c0      	nop			@ (mov r8, r8)
 800a25c:	40022000 	.word	0x40022000

0800a260 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800a26a:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a8 <FLASH_PageErase+0x48>)
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	4a0f      	ldr	r2, [pc, #60]	@ (800a2ac <FLASH_PageErase+0x4c>)
 800a270:	4013      	ands	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b04      	cmp	r3, #4
 800a278:	d005      	beq.n	800a286 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2280      	movs	r2, #128	@ 0x80
 800a27e:	0192      	lsls	r2, r2, #6
 800a280:	4313      	orrs	r3, r2
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	e003      	b.n	800a28e <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	4a09      	ldr	r2, [pc, #36]	@ (800a2b0 <FLASH_PageErase+0x50>)
 800a28a:	4013      	ands	r3, r2
 800a28c:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	00da      	lsls	r2, r3, #3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	431a      	orrs	r2, r3
 800a296:	4b04      	ldr	r3, [pc, #16]	@ (800a2a8 <FLASH_PageErase+0x48>)
 800a298:	4906      	ldr	r1, [pc, #24]	@ (800a2b4 <FLASH_PageErase+0x54>)
 800a29a:	430a      	orrs	r2, r1
 800a29c:	615a      	str	r2, [r3, #20]
}
 800a29e:	46c0      	nop			@ (mov r8, r8)
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	b004      	add	sp, #16
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	46c0      	nop			@ (mov r8, r8)
 800a2a8:	40022000 	.word	0x40022000
 800a2ac:	ffffe007 	.word	0xffffe007
 800a2b0:	ffffdfff 	.word	0xffffdfff
 800a2b4:	00010002 	.word	0x00010002

0800a2b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a2c6:	e14d      	b.n	800a564 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	4091      	lsls	r1, r2
 800a2d2:	000a      	movs	r2, r1
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d100      	bne.n	800a2e0 <HAL_GPIO_Init+0x28>
 800a2de:	e13e      	b.n	800a55e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	2203      	movs	r2, #3
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d005      	beq.n	800a2f8 <HAL_GPIO_Init+0x40>
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	2203      	movs	r2, #3
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d130      	bne.n	800a35a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	005b      	lsls	r3, r3, #1
 800a302:	2203      	movs	r2, #3
 800a304:	409a      	lsls	r2, r3
 800a306:	0013      	movs	r3, r2
 800a308:	43da      	mvns	r2, r3
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	4013      	ands	r3, r2
 800a30e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	409a      	lsls	r2, r3
 800a31a:	0013      	movs	r3, r2
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	4313      	orrs	r3, r2
 800a320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a32e:	2201      	movs	r2, #1
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	409a      	lsls	r2, r3
 800a334:	0013      	movs	r3, r2
 800a336:	43da      	mvns	r2, r3
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	4013      	ands	r3, r2
 800a33c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	091b      	lsrs	r3, r3, #4
 800a344:	2201      	movs	r2, #1
 800a346:	401a      	ands	r2, r3
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	409a      	lsls	r2, r3
 800a34c:	0013      	movs	r3, r2
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	4313      	orrs	r3, r2
 800a352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	2203      	movs	r2, #3
 800a360:	4013      	ands	r3, r2
 800a362:	2b03      	cmp	r3, #3
 800a364:	d017      	beq.n	800a396 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	005b      	lsls	r3, r3, #1
 800a370:	2203      	movs	r2, #3
 800a372:	409a      	lsls	r2, r3
 800a374:	0013      	movs	r3, r2
 800a376:	43da      	mvns	r2, r3
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	4013      	ands	r3, r2
 800a37c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	409a      	lsls	r2, r3
 800a388:	0013      	movs	r3, r2
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	2203      	movs	r2, #3
 800a39c:	4013      	ands	r3, r2
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d123      	bne.n	800a3ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	08da      	lsrs	r2, r3, #3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	3208      	adds	r2, #8
 800a3aa:	0092      	lsls	r2, r2, #2
 800a3ac:	58d3      	ldr	r3, [r2, r3]
 800a3ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2207      	movs	r2, #7
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	220f      	movs	r2, #15
 800a3ba:	409a      	lsls	r2, r3
 800a3bc:	0013      	movs	r3, r2
 800a3be:	43da      	mvns	r2, r3
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	691a      	ldr	r2, [r3, #16]
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2107      	movs	r1, #7
 800a3ce:	400b      	ands	r3, r1
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	409a      	lsls	r2, r3
 800a3d4:	0013      	movs	r3, r2
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	08da      	lsrs	r2, r3, #3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3208      	adds	r2, #8
 800a3e4:	0092      	lsls	r2, r2, #2
 800a3e6:	6939      	ldr	r1, [r7, #16]
 800a3e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	2203      	movs	r2, #3
 800a3f6:	409a      	lsls	r2, r3
 800a3f8:	0013      	movs	r3, r2
 800a3fa:	43da      	mvns	r2, r3
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	4013      	ands	r3, r2
 800a400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	2203      	movs	r2, #3
 800a408:	401a      	ands	r2, r3
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	409a      	lsls	r2, r3
 800a410:	0013      	movs	r3, r2
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	4313      	orrs	r3, r2
 800a416:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	23c0      	movs	r3, #192	@ 0xc0
 800a424:	029b      	lsls	r3, r3, #10
 800a426:	4013      	ands	r3, r2
 800a428:	d100      	bne.n	800a42c <HAL_GPIO_Init+0x174>
 800a42a:	e098      	b.n	800a55e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800a42c:	4a53      	ldr	r2, [pc, #332]	@ (800a57c <HAL_GPIO_Init+0x2c4>)
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	089b      	lsrs	r3, r3, #2
 800a432:	3318      	adds	r3, #24
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	589b      	ldr	r3, [r3, r2]
 800a438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	2203      	movs	r2, #3
 800a43e:	4013      	ands	r3, r2
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	220f      	movs	r2, #15
 800a444:	409a      	lsls	r2, r3
 800a446:	0013      	movs	r3, r2
 800a448:	43da      	mvns	r2, r3
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	4013      	ands	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	23a0      	movs	r3, #160	@ 0xa0
 800a454:	05db      	lsls	r3, r3, #23
 800a456:	429a      	cmp	r2, r3
 800a458:	d019      	beq.n	800a48e <HAL_GPIO_Init+0x1d6>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a48      	ldr	r2, [pc, #288]	@ (800a580 <HAL_GPIO_Init+0x2c8>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d013      	beq.n	800a48a <HAL_GPIO_Init+0x1d2>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a47      	ldr	r2, [pc, #284]	@ (800a584 <HAL_GPIO_Init+0x2cc>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d00d      	beq.n	800a486 <HAL_GPIO_Init+0x1ce>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a46      	ldr	r2, [pc, #280]	@ (800a588 <HAL_GPIO_Init+0x2d0>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d007      	beq.n	800a482 <HAL_GPIO_Init+0x1ca>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a45      	ldr	r2, [pc, #276]	@ (800a58c <HAL_GPIO_Init+0x2d4>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d101      	bne.n	800a47e <HAL_GPIO_Init+0x1c6>
 800a47a:	2304      	movs	r3, #4
 800a47c:	e008      	b.n	800a490 <HAL_GPIO_Init+0x1d8>
 800a47e:	2305      	movs	r3, #5
 800a480:	e006      	b.n	800a490 <HAL_GPIO_Init+0x1d8>
 800a482:	2303      	movs	r3, #3
 800a484:	e004      	b.n	800a490 <HAL_GPIO_Init+0x1d8>
 800a486:	2302      	movs	r3, #2
 800a488:	e002      	b.n	800a490 <HAL_GPIO_Init+0x1d8>
 800a48a:	2301      	movs	r3, #1
 800a48c:	e000      	b.n	800a490 <HAL_GPIO_Init+0x1d8>
 800a48e:	2300      	movs	r3, #0
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	2103      	movs	r1, #3
 800a494:	400a      	ands	r2, r1
 800a496:	00d2      	lsls	r2, r2, #3
 800a498:	4093      	lsls	r3, r2
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800a4a0:	4936      	ldr	r1, [pc, #216]	@ (800a57c <HAL_GPIO_Init+0x2c4>)
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	089b      	lsrs	r3, r3, #2
 800a4a6:	3318      	adds	r3, #24
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a4ae:	4b33      	ldr	r3, [pc, #204]	@ (800a57c <HAL_GPIO_Init+0x2c4>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	43da      	mvns	r2, r3
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	2380      	movs	r3, #128	@ 0x80
 800a4c4:	035b      	lsls	r3, r3, #13
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	d003      	beq.n	800a4d2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a4d2:	4b2a      	ldr	r3, [pc, #168]	@ (800a57c <HAL_GPIO_Init+0x2c4>)
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800a4d8:	4b28      	ldr	r3, [pc, #160]	@ (800a57c <HAL_GPIO_Init+0x2c4>)
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	43da      	mvns	r2, r3
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	2380      	movs	r3, #128	@ 0x80
 800a4ee:	039b      	lsls	r3, r3, #14
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	d003      	beq.n	800a4fc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a4fc:	4b1f      	ldr	r3, [pc, #124]	@ (800a57c <HAL_GPIO_Init+0x2c4>)
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a502:	4a1e      	ldr	r2, [pc, #120]	@ (800a57c <HAL_GPIO_Init+0x2c4>)
 800a504:	2384      	movs	r3, #132	@ 0x84
 800a506:	58d3      	ldr	r3, [r2, r3]
 800a508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	43da      	mvns	r2, r3
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4013      	ands	r3, r2
 800a512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	2380      	movs	r3, #128	@ 0x80
 800a51a:	029b      	lsls	r3, r3, #10
 800a51c:	4013      	ands	r3, r2
 800a51e:	d003      	beq.n	800a528 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4313      	orrs	r3, r2
 800a526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a528:	4914      	ldr	r1, [pc, #80]	@ (800a57c <HAL_GPIO_Init+0x2c4>)
 800a52a:	2284      	movs	r2, #132	@ 0x84
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800a530:	4a12      	ldr	r2, [pc, #72]	@ (800a57c <HAL_GPIO_Init+0x2c4>)
 800a532:	2380      	movs	r3, #128	@ 0x80
 800a534:	58d3      	ldr	r3, [r2, r3]
 800a536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	43da      	mvns	r2, r3
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	4013      	ands	r3, r2
 800a540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	2380      	movs	r3, #128	@ 0x80
 800a548:	025b      	lsls	r3, r3, #9
 800a54a:	4013      	ands	r3, r2
 800a54c:	d003      	beq.n	800a556 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a556:	4909      	ldr	r1, [pc, #36]	@ (800a57c <HAL_GPIO_Init+0x2c4>)
 800a558:	2280      	movs	r2, #128	@ 0x80
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	3301      	adds	r3, #1
 800a562:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	40da      	lsrs	r2, r3
 800a56c:	1e13      	subs	r3, r2, #0
 800a56e:	d000      	beq.n	800a572 <HAL_GPIO_Init+0x2ba>
 800a570:	e6aa      	b.n	800a2c8 <HAL_GPIO_Init+0x10>
  }
}
 800a572:	46c0      	nop			@ (mov r8, r8)
 800a574:	46c0      	nop			@ (mov r8, r8)
 800a576:	46bd      	mov	sp, r7
 800a578:	b006      	add	sp, #24
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	40021800 	.word	0x40021800
 800a580:	50000400 	.word	0x50000400
 800a584:	50000800 	.word	0x50000800
 800a588:	50000c00 	.word	0x50000c00
 800a58c:	50001000 	.word	0x50001000

0800a590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	000a      	movs	r2, r1
 800a59a:	1cbb      	adds	r3, r7, #2
 800a59c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	1cba      	adds	r2, r7, #2
 800a5a4:	8812      	ldrh	r2, [r2, #0]
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	d004      	beq.n	800a5b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800a5aa:	230f      	movs	r3, #15
 800a5ac:	18fb      	adds	r3, r7, r3
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	e003      	b.n	800a5bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a5b4:	230f      	movs	r3, #15
 800a5b6:	18fb      	adds	r3, r7, r3
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800a5bc:	230f      	movs	r3, #15
 800a5be:	18fb      	adds	r3, r7, r3
 800a5c0:	781b      	ldrb	r3, [r3, #0]
}
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	b004      	add	sp, #16
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	0008      	movs	r0, r1
 800a5d4:	0011      	movs	r1, r2
 800a5d6:	1cbb      	adds	r3, r7, #2
 800a5d8:	1c02      	adds	r2, r0, #0
 800a5da:	801a      	strh	r2, [r3, #0]
 800a5dc:	1c7b      	adds	r3, r7, #1
 800a5de:	1c0a      	adds	r2, r1, #0
 800a5e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a5e2:	1c7b      	adds	r3, r7, #1
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d004      	beq.n	800a5f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a5ea:	1cbb      	adds	r3, r7, #2
 800a5ec:	881a      	ldrh	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a5f2:	e003      	b.n	800a5fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a5f4:	1cbb      	adds	r3, r7, #2
 800a5f6:	881a      	ldrh	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a5fc:	46c0      	nop			@ (mov r8, r8)
 800a5fe:	46bd      	mov	sp, r7
 800a600:	b002      	add	sp, #8
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a604:	b590      	push	{r4, r7, lr}
 800a606:	b087      	sub	sp, #28
 800a608:	af02      	add	r7, sp, #8
 800a60a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e0ea      	b.n	800a7ec <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a76      	ldr	r2, [pc, #472]	@ (800a7f4 <HAL_PCD_Init+0x1f0>)
 800a61a:	5c9b      	ldrb	r3, [r3, r2]
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d108      	bne.n	800a634 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	23a5      	movs	r3, #165	@ 0xa5
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	2100      	movs	r1, #0
 800a62a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	0018      	movs	r0, r3
 800a630:	f004 fc5a 	bl	800eee8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a6f      	ldr	r2, [pc, #444]	@ (800a7f4 <HAL_PCD_Init+0x1f0>)
 800a638:	2103      	movs	r1, #3
 800a63a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	0018      	movs	r0, r3
 800a642:	f001 fddf 	bl	800c204 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a646:	230f      	movs	r3, #15
 800a648:	18fb      	adds	r3, r7, r3
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e049      	b.n	800a6e4 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a650:	200f      	movs	r0, #15
 800a652:	183b      	adds	r3, r7, r0
 800a654:	781a      	ldrb	r2, [r3, #0]
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	0013      	movs	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	189b      	adds	r3, r3, r2
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	18cb      	adds	r3, r1, r3
 800a662:	3315      	adds	r3, #21
 800a664:	2201      	movs	r2, #1
 800a666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a668:	183b      	adds	r3, r7, r0
 800a66a:	781a      	ldrb	r2, [r3, #0]
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	0013      	movs	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	189b      	adds	r3, r3, r2
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	18cb      	adds	r3, r1, r3
 800a678:	3314      	adds	r3, #20
 800a67a:	183a      	adds	r2, r7, r0
 800a67c:	7812      	ldrb	r2, [r2, #0]
 800a67e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a680:	183b      	adds	r3, r7, r0
 800a682:	781a      	ldrb	r2, [r3, #0]
 800a684:	6879      	ldr	r1, [r7, #4]
 800a686:	0013      	movs	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	189b      	adds	r3, r3, r2
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	18cb      	adds	r3, r1, r3
 800a690:	3317      	adds	r3, #23
 800a692:	2200      	movs	r2, #0
 800a694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a696:	183b      	adds	r3, r7, r0
 800a698:	781a      	ldrb	r2, [r3, #0]
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	0013      	movs	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	189b      	adds	r3, r3, r2
 800a6a2:	00db      	lsls	r3, r3, #3
 800a6a4:	18cb      	adds	r3, r1, r3
 800a6a6:	3324      	adds	r3, #36	@ 0x24
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a6ac:	183b      	adds	r3, r7, r0
 800a6ae:	781a      	ldrb	r2, [r3, #0]
 800a6b0:	6879      	ldr	r1, [r7, #4]
 800a6b2:	0013      	movs	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	189b      	adds	r3, r3, r2
 800a6b8:	00db      	lsls	r3, r3, #3
 800a6ba:	18cb      	adds	r3, r1, r3
 800a6bc:	3328      	adds	r3, #40	@ 0x28
 800a6be:	2200      	movs	r2, #0
 800a6c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a6c2:	183b      	adds	r3, r7, r0
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	6879      	ldr	r1, [r7, #4]
 800a6c8:	1c5a      	adds	r2, r3, #1
 800a6ca:	0013      	movs	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	189b      	adds	r3, r3, r2
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	18cb      	adds	r3, r1, r3
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6da:	183b      	adds	r3, r7, r0
 800a6dc:	781a      	ldrb	r2, [r3, #0]
 800a6de:	183b      	adds	r3, r7, r0
 800a6e0:	3201      	adds	r2, #1
 800a6e2:	701a      	strb	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	791b      	ldrb	r3, [r3, #4]
 800a6e8:	210f      	movs	r1, #15
 800a6ea:	187a      	adds	r2, r7, r1
 800a6ec:	7812      	ldrb	r2, [r2, #0]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d3ae      	bcc.n	800a650 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6f2:	187b      	adds	r3, r7, r1
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	701a      	strb	r2, [r3, #0]
 800a6f8:	e056      	b.n	800a7a8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a6fa:	240f      	movs	r4, #15
 800a6fc:	193b      	adds	r3, r7, r4
 800a6fe:	781a      	ldrb	r2, [r3, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	2356      	movs	r3, #86	@ 0x56
 800a704:	33ff      	adds	r3, #255	@ 0xff
 800a706:	0019      	movs	r1, r3
 800a708:	0013      	movs	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	189b      	adds	r3, r3, r2
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	18c3      	adds	r3, r0, r3
 800a712:	185b      	adds	r3, r3, r1
 800a714:	2200      	movs	r2, #0
 800a716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a718:	193b      	adds	r3, r7, r4
 800a71a:	781a      	ldrb	r2, [r3, #0]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	23aa      	movs	r3, #170	@ 0xaa
 800a720:	0059      	lsls	r1, r3, #1
 800a722:	0013      	movs	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	189b      	adds	r3, r3, r2
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	18c3      	adds	r3, r0, r3
 800a72c:	185b      	adds	r3, r3, r1
 800a72e:	193a      	adds	r2, r7, r4
 800a730:	7812      	ldrb	r2, [r2, #0]
 800a732:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a734:	193b      	adds	r3, r7, r4
 800a736:	781a      	ldrb	r2, [r3, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	2358      	movs	r3, #88	@ 0x58
 800a73c:	33ff      	adds	r3, #255	@ 0xff
 800a73e:	0019      	movs	r1, r3
 800a740:	0013      	movs	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	189b      	adds	r3, r3, r2
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	18c3      	adds	r3, r0, r3
 800a74a:	185b      	adds	r3, r3, r1
 800a74c:	2200      	movs	r2, #0
 800a74e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a750:	193b      	adds	r3, r7, r4
 800a752:	781a      	ldrb	r2, [r3, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	23b2      	movs	r3, #178	@ 0xb2
 800a758:	0059      	lsls	r1, r3, #1
 800a75a:	0013      	movs	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	189b      	adds	r3, r3, r2
 800a760:	00db      	lsls	r3, r3, #3
 800a762:	18c3      	adds	r3, r0, r3
 800a764:	185b      	adds	r3, r3, r1
 800a766:	2200      	movs	r2, #0
 800a768:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a76a:	193b      	adds	r3, r7, r4
 800a76c:	781a      	ldrb	r2, [r3, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	23b4      	movs	r3, #180	@ 0xb4
 800a772:	0059      	lsls	r1, r3, #1
 800a774:	0013      	movs	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	189b      	adds	r3, r3, r2
 800a77a:	00db      	lsls	r3, r3, #3
 800a77c:	18c3      	adds	r3, r0, r3
 800a77e:	185b      	adds	r3, r3, r1
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a784:	193b      	adds	r3, r7, r4
 800a786:	781a      	ldrb	r2, [r3, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	23b6      	movs	r3, #182	@ 0xb6
 800a78c:	0059      	lsls	r1, r3, #1
 800a78e:	0013      	movs	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	189b      	adds	r3, r3, r2
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	18c3      	adds	r3, r0, r3
 800a798:	185b      	adds	r3, r3, r1
 800a79a:	2200      	movs	r2, #0
 800a79c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a79e:	193b      	adds	r3, r7, r4
 800a7a0:	781a      	ldrb	r2, [r3, #0]
 800a7a2:	193b      	adds	r3, r7, r4
 800a7a4:	3201      	adds	r2, #1
 800a7a6:	701a      	strb	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	791b      	ldrb	r3, [r3, #4]
 800a7ac:	220f      	movs	r2, #15
 800a7ae:	18ba      	adds	r2, r7, r2
 800a7b0:	7812      	ldrb	r2, [r2, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d3a1      	bcc.n	800a6fa <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6818      	ldr	r0, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	466a      	mov	r2, sp
 800a7be:	7c19      	ldrb	r1, [r3, #16]
 800a7c0:	7011      	strb	r1, [r2, #0]
 800a7c2:	6859      	ldr	r1, [r3, #4]
 800a7c4:	689a      	ldr	r2, [r3, #8]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f001 fd55 	bl	800c276 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a07      	ldr	r2, [pc, #28]	@ (800a7f4 <HAL_PCD_Init+0x1f0>)
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	7b1b      	ldrb	r3, [r3, #12]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d103      	bne.n	800a7ea <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	0018      	movs	r0, r3
 800a7e6:	f000 fa2c 	bl	800ac42 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	0018      	movs	r0, r3
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	b005      	add	sp, #20
 800a7f2:	bd90      	pop	{r4, r7, pc}
 800a7f4:	00000295 	.word	0x00000295

0800a7f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	23a5      	movs	r3, #165	@ 0xa5
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	5cd3      	ldrb	r3, [r2, r3]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d101      	bne.n	800a810 <HAL_PCD_Start+0x18>
 800a80c:	2302      	movs	r3, #2
 800a80e:	e014      	b.n	800a83a <HAL_PCD_Start+0x42>
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	23a5      	movs	r3, #165	@ 0xa5
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	2101      	movs	r1, #1
 800a818:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	0018      	movs	r0, r3
 800a820:	f001 fcdc 	bl	800c1dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	0018      	movs	r0, r3
 800a82a:	f003 fa41 	bl	800dcb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	23a5      	movs	r3, #165	@ 0xa5
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	2100      	movs	r1, #0
 800a836:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	0018      	movs	r0, r3
 800a83c:	46bd      	mov	sp, r7
 800a83e:	b002      	add	sp, #8
 800a840:	bd80      	pop	{r7, pc}

0800a842 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a842:	b590      	push	{r4, r7, lr}
 800a844:	b085      	sub	sp, #20
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	000c      	movs	r4, r1
 800a84c:	0010      	movs	r0, r2
 800a84e:	0019      	movs	r1, r3
 800a850:	1cfb      	adds	r3, r7, #3
 800a852:	1c22      	adds	r2, r4, #0
 800a854:	701a      	strb	r2, [r3, #0]
 800a856:	003b      	movs	r3, r7
 800a858:	1c02      	adds	r2, r0, #0
 800a85a:	801a      	strh	r2, [r3, #0]
 800a85c:	1cbb      	adds	r3, r7, #2
 800a85e:	1c0a      	adds	r2, r1, #0
 800a860:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a862:	230b      	movs	r3, #11
 800a864:	18fb      	adds	r3, r7, r3
 800a866:	2200      	movs	r2, #0
 800a868:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a86a:	1cfb      	adds	r3, r7, #3
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	b25b      	sxtb	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	da10      	bge.n	800a896 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a874:	1cfb      	adds	r3, r7, #3
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	2207      	movs	r2, #7
 800a87a:	401a      	ands	r2, r3
 800a87c:	0013      	movs	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	189b      	adds	r3, r3, r2
 800a882:	00db      	lsls	r3, r3, #3
 800a884:	3310      	adds	r3, #16
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	18d3      	adds	r3, r2, r3
 800a88a:	3304      	adds	r3, #4
 800a88c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2201      	movs	r2, #1
 800a892:	705a      	strb	r2, [r3, #1]
 800a894:	e010      	b.n	800a8b8 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a896:	1cfb      	adds	r3, r7, #3
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2207      	movs	r2, #7
 800a89c:	401a      	ands	r2, r3
 800a89e:	0013      	movs	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	189b      	adds	r3, r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	3351      	adds	r3, #81	@ 0x51
 800a8a8:	33ff      	adds	r3, #255	@ 0xff
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	18d3      	adds	r3, r2, r3
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a8b8:	1cfb      	adds	r3, r7, #3
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	2207      	movs	r2, #7
 800a8be:	4013      	ands	r3, r2
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a8c6:	003b      	movs	r3, r7
 800a8c8:	881a      	ldrh	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	1cba      	adds	r2, r7, #2
 800a8d2:	7812      	ldrb	r2, [r2, #0]
 800a8d4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a8d6:	1cbb      	adds	r3, r7, #2
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d102      	bne.n	800a8e4 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	23a5      	movs	r3, #165	@ 0xa5
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	5cd3      	ldrb	r3, [r2, r3]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d101      	bne.n	800a8f4 <HAL_PCD_EP_Open+0xb2>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e013      	b.n	800a91c <HAL_PCD_EP_Open+0xda>
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	23a5      	movs	r3, #165	@ 0xa5
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	0011      	movs	r1, r2
 800a906:	0018      	movs	r0, r3
 800a908:	f001 fce0 	bl	800c2cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	23a5      	movs	r3, #165	@ 0xa5
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	2100      	movs	r1, #0
 800a914:	54d1      	strb	r1, [r2, r3]

  return ret;
 800a916:	230b      	movs	r3, #11
 800a918:	18fb      	adds	r3, r7, r3
 800a91a:	781b      	ldrb	r3, [r3, #0]
}
 800a91c:	0018      	movs	r0, r3
 800a91e:	46bd      	mov	sp, r7
 800a920:	b005      	add	sp, #20
 800a922:	bd90      	pop	{r4, r7, pc}

0800a924 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	000a      	movs	r2, r1
 800a92e:	1cfb      	adds	r3, r7, #3
 800a930:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a932:	1cfb      	adds	r3, r7, #3
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	b25b      	sxtb	r3, r3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	da10      	bge.n	800a95e <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a93c:	1cfb      	adds	r3, r7, #3
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	2207      	movs	r2, #7
 800a942:	401a      	ands	r2, r3
 800a944:	0013      	movs	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	189b      	adds	r3, r3, r2
 800a94a:	00db      	lsls	r3, r3, #3
 800a94c:	3310      	adds	r3, #16
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	18d3      	adds	r3, r2, r3
 800a952:	3304      	adds	r3, #4
 800a954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2201      	movs	r2, #1
 800a95a:	705a      	strb	r2, [r3, #1]
 800a95c:	e010      	b.n	800a980 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a95e:	1cfb      	adds	r3, r7, #3
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	2207      	movs	r2, #7
 800a964:	401a      	ands	r2, r3
 800a966:	0013      	movs	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	189b      	adds	r3, r3, r2
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	3351      	adds	r3, #81	@ 0x51
 800a970:	33ff      	adds	r3, #255	@ 0xff
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	18d3      	adds	r3, r2, r3
 800a976:	3304      	adds	r3, #4
 800a978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a980:	1cfb      	adds	r3, r7, #3
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2207      	movs	r2, #7
 800a986:	4013      	ands	r3, r2
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	23a5      	movs	r3, #165	@ 0xa5
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	5cd3      	ldrb	r3, [r2, r3]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d101      	bne.n	800a99e <HAL_PCD_EP_Close+0x7a>
 800a99a:	2302      	movs	r3, #2
 800a99c:	e011      	b.n	800a9c2 <HAL_PCD_EP_Close+0x9e>
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	23a5      	movs	r3, #165	@ 0xa5
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	0011      	movs	r1, r2
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	f001 ffbf 	bl	800c934 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	23a5      	movs	r3, #165	@ 0xa5
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	2100      	movs	r1, #0
 800a9be:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	b004      	add	sp, #16
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b086      	sub	sp, #24
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	60f8      	str	r0, [r7, #12]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
 800a9d6:	200b      	movs	r0, #11
 800a9d8:	183b      	adds	r3, r7, r0
 800a9da:	1c0a      	adds	r2, r1, #0
 800a9dc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a9de:	0001      	movs	r1, r0
 800a9e0:	187b      	adds	r3, r7, r1
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2207      	movs	r2, #7
 800a9e6:	401a      	ands	r2, r3
 800a9e8:	0013      	movs	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	189b      	adds	r3, r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	3351      	adds	r3, #81	@ 0x51
 800a9f2:	33ff      	adds	r3, #255	@ 0xff
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	18d3      	adds	r3, r2, r3
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	2200      	movs	r2, #0
 800aa12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa14:	187b      	adds	r3, r7, r1
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2207      	movs	r2, #7
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	0011      	movs	r1, r2
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	f002 f8e8 	bl	800cc00 <USB_EPStartXfer>

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	0018      	movs	r0, r3
 800aa34:	46bd      	mov	sp, r7
 800aa36:	b006      	add	sp, #24
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	000a      	movs	r2, r1
 800aa44:	1cfb      	adds	r3, r7, #3
 800aa46:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800aa48:	1cfb      	adds	r3, r7, #3
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	2207      	movs	r2, #7
 800aa4e:	401a      	ands	r2, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	23b8      	movs	r3, #184	@ 0xb8
 800aa54:	0059      	lsls	r1, r3, #1
 800aa56:	0013      	movs	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	189b      	adds	r3, r3, r2
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	18c3      	adds	r3, r0, r3
 800aa60:	185b      	adds	r3, r3, r1
 800aa62:	681b      	ldr	r3, [r3, #0]
}
 800aa64:	0018      	movs	r0, r3
 800aa66:	46bd      	mov	sp, r7
 800aa68:	b002      	add	sp, #8
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	607a      	str	r2, [r7, #4]
 800aa76:	603b      	str	r3, [r7, #0]
 800aa78:	200b      	movs	r0, #11
 800aa7a:	183b      	adds	r3, r7, r0
 800aa7c:	1c0a      	adds	r2, r1, #0
 800aa7e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa80:	183b      	adds	r3, r7, r0
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	2207      	movs	r2, #7
 800aa86:	401a      	ands	r2, r3
 800aa88:	0013      	movs	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	189b      	adds	r3, r3, r2
 800aa8e:	00db      	lsls	r3, r3, #3
 800aa90:	3310      	adds	r3, #16
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	18d3      	adds	r3, r2, r3
 800aa96:	3304      	adds	r3, #4
 800aa98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	2224      	movs	r2, #36	@ 0x24
 800aaaa:	2101      	movs	r1, #1
 800aaac:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2200      	movs	r2, #0
 800aab8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2201      	movs	r2, #1
 800aabe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aac0:	183b      	adds	r3, r7, r0
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	2207      	movs	r2, #7
 800aac6:	4013      	ands	r3, r2
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	0011      	movs	r1, r2
 800aad6:	0018      	movs	r0, r3
 800aad8:	f002 f892 	bl	800cc00 <USB_EPStartXfer>

  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	0018      	movs	r0, r3
 800aae0:	46bd      	mov	sp, r7
 800aae2:	b006      	add	sp, #24
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b084      	sub	sp, #16
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	000a      	movs	r2, r1
 800aaf0:	1cfb      	adds	r3, r7, #3
 800aaf2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800aaf4:	1cfb      	adds	r3, r7, #3
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2207      	movs	r2, #7
 800aafa:	4013      	ands	r3, r2
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	7912      	ldrb	r2, [r2, #4]
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d901      	bls.n	800ab08 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e048      	b.n	800ab9a <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ab08:	1cfb      	adds	r3, r7, #3
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b25b      	sxtb	r3, r3
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	da10      	bge.n	800ab34 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab12:	1cfb      	adds	r3, r7, #3
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	2207      	movs	r2, #7
 800ab18:	401a      	ands	r2, r3
 800ab1a:	0013      	movs	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	189b      	adds	r3, r3, r2
 800ab20:	00db      	lsls	r3, r3, #3
 800ab22:	3310      	adds	r3, #16
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	18d3      	adds	r3, r2, r3
 800ab28:	3304      	adds	r3, #4
 800ab2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	705a      	strb	r2, [r3, #1]
 800ab32:	e00e      	b.n	800ab52 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ab34:	1cfb      	adds	r3, r7, #3
 800ab36:	781a      	ldrb	r2, [r3, #0]
 800ab38:	0013      	movs	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	189b      	adds	r3, r3, r2
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	3351      	adds	r3, #81	@ 0x51
 800ab42:	33ff      	adds	r3, #255	@ 0xff
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	18d3      	adds	r3, r2, r3
 800ab48:	3304      	adds	r3, #4
 800ab4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2201      	movs	r2, #1
 800ab56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab58:	1cfb      	adds	r3, r7, #3
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2207      	movs	r2, #7
 800ab5e:	4013      	ands	r3, r2
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	23a5      	movs	r3, #165	@ 0xa5
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	5cd3      	ldrb	r3, [r2, r3]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d101      	bne.n	800ab76 <HAL_PCD_EP_SetStall+0x90>
 800ab72:	2302      	movs	r3, #2
 800ab74:	e011      	b.n	800ab9a <HAL_PCD_EP_SetStall+0xb4>
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	23a5      	movs	r3, #165	@ 0xa5
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	0011      	movs	r1, r2
 800ab88:	0018      	movs	r0, r3
 800ab8a:	f003 f84f 	bl	800dc2c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	23a5      	movs	r3, #165	@ 0xa5
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	2100      	movs	r1, #0
 800ab96:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	0018      	movs	r0, r3
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	b004      	add	sp, #16
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800aba2:	b590      	push	{r4, r7, lr}
 800aba4:	b087      	sub	sp, #28
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	0008      	movs	r0, r1
 800abac:	0011      	movs	r1, r2
 800abae:	607b      	str	r3, [r7, #4]
 800abb0:	240a      	movs	r4, #10
 800abb2:	193b      	adds	r3, r7, r4
 800abb4:	1c02      	adds	r2, r0, #0
 800abb6:	801a      	strh	r2, [r3, #0]
 800abb8:	2308      	movs	r3, #8
 800abba:	18fb      	adds	r3, r7, r3
 800abbc:	1c0a      	adds	r2, r1, #0
 800abbe:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800abc0:	0021      	movs	r1, r4
 800abc2:	187b      	adds	r3, r7, r1
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	2280      	movs	r2, #128	@ 0x80
 800abc8:	4013      	ands	r3, r2
 800abca:	b29b      	uxth	r3, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00d      	beq.n	800abec <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abd0:	187b      	adds	r3, r7, r1
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	2207      	movs	r2, #7
 800abd6:	401a      	ands	r2, r3
 800abd8:	0013      	movs	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	189b      	adds	r3, r3, r2
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	3310      	adds	r3, #16
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	18d3      	adds	r3, r2, r3
 800abe6:	3304      	adds	r3, #4
 800abe8:	617b      	str	r3, [r7, #20]
 800abea:	e00c      	b.n	800ac06 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800abec:	230a      	movs	r3, #10
 800abee:	18fb      	adds	r3, r7, r3
 800abf0:	881a      	ldrh	r2, [r3, #0]
 800abf2:	0013      	movs	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	189b      	adds	r3, r3, r2
 800abf8:	00db      	lsls	r3, r3, #3
 800abfa:	3351      	adds	r3, #81	@ 0x51
 800abfc:	33ff      	adds	r3, #255	@ 0xff
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	18d3      	adds	r3, r2, r3
 800ac02:	3304      	adds	r3, #4
 800ac04:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ac06:	2308      	movs	r3, #8
 800ac08:	18fb      	adds	r3, r7, r3
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d107      	bne.n	800ac20 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2200      	movs	r2, #0
 800ac14:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	80da      	strh	r2, [r3, #6]
 800ac1e:	e00b      	b.n	800ac38 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	2201      	movs	r2, #1
 800ac24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	0c1b      	lsrs	r3, r3, #16
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	0018      	movs	r0, r3
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	b007      	add	sp, #28
 800ac40:	bd90      	pop	{r4, r7, pc}

0800ac42 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	23b5      	movs	r3, #181	@ 0xb5
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	2101      	movs	r1, #1
 800ac58:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	23b3      	movs	r3, #179	@ 0xb3
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	2100      	movs	r1, #0
 800ac62:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac68:	2201      	movs	r2, #1
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac74:	2202      	movs	r2, #2
 800ac76:	431a      	orrs	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	0018      	movs	r0, r3
 800ac80:	46bd      	mov	sp, r7
 800ac82:	b004      	add	sp, #16
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ac8c:	4b04      	ldr	r3, [pc, #16]	@ (800aca0 <HAL_PWREx_EnableVddUSB+0x18>)
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	4b03      	ldr	r3, [pc, #12]	@ (800aca0 <HAL_PWREx_EnableVddUSB+0x18>)
 800ac92:	2180      	movs	r1, #128	@ 0x80
 800ac94:	00c9      	lsls	r1, r1, #3
 800ac96:	430a      	orrs	r2, r1
 800ac98:	605a      	str	r2, [r3, #4]
}
 800ac9a:	46c0      	nop			@ (mov r8, r8)
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	40007000 	.word	0x40007000

0800aca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800acac:	4b19      	ldr	r3, [pc, #100]	@ (800ad14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a19      	ldr	r2, [pc, #100]	@ (800ad18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800acb2:	4013      	ands	r3, r2
 800acb4:	0019      	movs	r1, r3
 800acb6:	4b17      	ldr	r3, [pc, #92]	@ (800ad14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	430a      	orrs	r2, r1
 800acbc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	2380      	movs	r3, #128	@ 0x80
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d11f      	bne.n	800ad08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800acc8:	4b14      	ldr	r3, [pc, #80]	@ (800ad1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	0013      	movs	r3, r2
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	189b      	adds	r3, r3, r2
 800acd2:	005b      	lsls	r3, r3, #1
 800acd4:	4912      	ldr	r1, [pc, #72]	@ (800ad20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800acd6:	0018      	movs	r0, r3
 800acd8:	f7f5 fa28 	bl	800012c <__udivsi3>
 800acdc:	0003      	movs	r3, r0
 800acde:	3301      	adds	r3, #1
 800ace0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ace2:	e008      	b.n	800acf6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3b01      	subs	r3, #1
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	e001      	b.n	800acf6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800acf2:	2303      	movs	r3, #3
 800acf4:	e009      	b.n	800ad0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800acf6:	4b07      	ldr	r3, [pc, #28]	@ (800ad14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800acf8:	695a      	ldr	r2, [r3, #20]
 800acfa:	2380      	movs	r3, #128	@ 0x80
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	401a      	ands	r2, r3
 800ad00:	2380      	movs	r3, #128	@ 0x80
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d0ed      	beq.n	800ace4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	b004      	add	sp, #16
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	46c0      	nop			@ (mov r8, r8)
 800ad14:	40007000 	.word	0x40007000
 800ad18:	fffff9ff 	.word	0xfffff9ff
 800ad1c:	20000298 	.word	0x20000298
 800ad20:	000f4240 	.word	0x000f4240

0800ad24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b088      	sub	sp, #32
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	f000 fb50 	bl	800b3d8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	4013      	ands	r3, r2
 800ad40:	d100      	bne.n	800ad44 <HAL_RCC_OscConfig+0x20>
 800ad42:	e07c      	b.n	800ae3e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad44:	4bc3      	ldr	r3, [pc, #780]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	2238      	movs	r2, #56	@ 0x38
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad4e:	4bc1      	ldr	r3, [pc, #772]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	2203      	movs	r2, #3
 800ad54:	4013      	ands	r3, r2
 800ad56:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	2b10      	cmp	r3, #16
 800ad5c:	d102      	bne.n	800ad64 <HAL_RCC_OscConfig+0x40>
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d002      	beq.n	800ad6a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	2b08      	cmp	r3, #8
 800ad68:	d10b      	bne.n	800ad82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad6a:	4bba      	ldr	r3, [pc, #744]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	2380      	movs	r3, #128	@ 0x80
 800ad70:	029b      	lsls	r3, r3, #10
 800ad72:	4013      	ands	r3, r2
 800ad74:	d062      	beq.n	800ae3c <HAL_RCC_OscConfig+0x118>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d15e      	bne.n	800ae3c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e32a      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	685a      	ldr	r2, [r3, #4]
 800ad86:	2380      	movs	r3, #128	@ 0x80
 800ad88:	025b      	lsls	r3, r3, #9
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d107      	bne.n	800ad9e <HAL_RCC_OscConfig+0x7a>
 800ad8e:	4bb1      	ldr	r3, [pc, #708]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4bb0      	ldr	r3, [pc, #704]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ad94:	2180      	movs	r1, #128	@ 0x80
 800ad96:	0249      	lsls	r1, r1, #9
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	e020      	b.n	800ade0 <HAL_RCC_OscConfig+0xbc>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	23a0      	movs	r3, #160	@ 0xa0
 800ada4:	02db      	lsls	r3, r3, #11
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d10e      	bne.n	800adc8 <HAL_RCC_OscConfig+0xa4>
 800adaa:	4baa      	ldr	r3, [pc, #680]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	4ba9      	ldr	r3, [pc, #676]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800adb0:	2180      	movs	r1, #128	@ 0x80
 800adb2:	02c9      	lsls	r1, r1, #11
 800adb4:	430a      	orrs	r2, r1
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	4ba6      	ldr	r3, [pc, #664]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	4ba5      	ldr	r3, [pc, #660]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800adbe:	2180      	movs	r1, #128	@ 0x80
 800adc0:	0249      	lsls	r1, r1, #9
 800adc2:	430a      	orrs	r2, r1
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	e00b      	b.n	800ade0 <HAL_RCC_OscConfig+0xbc>
 800adc8:	4ba2      	ldr	r3, [pc, #648]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	4ba1      	ldr	r3, [pc, #644]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800adce:	49a2      	ldr	r1, [pc, #648]	@ (800b058 <HAL_RCC_OscConfig+0x334>)
 800add0:	400a      	ands	r2, r1
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	4b9f      	ldr	r3, [pc, #636]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	4b9e      	ldr	r3, [pc, #632]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800adda:	49a0      	ldr	r1, [pc, #640]	@ (800b05c <HAL_RCC_OscConfig+0x338>)
 800addc:	400a      	ands	r2, r1
 800adde:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d014      	beq.n	800ae12 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade8:	f7fe f8d4 	bl	8008f94 <HAL_GetTick>
 800adec:	0003      	movs	r3, r0
 800adee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800adf0:	e008      	b.n	800ae04 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800adf2:	f7fe f8cf 	bl	8008f94 <HAL_GetTick>
 800adf6:	0002      	movs	r2, r0
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	2b64      	cmp	r3, #100	@ 0x64
 800adfe:	d901      	bls.n	800ae04 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e2e9      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae04:	4b93      	ldr	r3, [pc, #588]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	2380      	movs	r3, #128	@ 0x80
 800ae0a:	029b      	lsls	r3, r3, #10
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	d0f0      	beq.n	800adf2 <HAL_RCC_OscConfig+0xce>
 800ae10:	e015      	b.n	800ae3e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae12:	f7fe f8bf 	bl	8008f94 <HAL_GetTick>
 800ae16:	0003      	movs	r3, r0
 800ae18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ae1a:	e008      	b.n	800ae2e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae1c:	f7fe f8ba 	bl	8008f94 <HAL_GetTick>
 800ae20:	0002      	movs	r2, r0
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	2b64      	cmp	r3, #100	@ 0x64
 800ae28:	d901      	bls.n	800ae2e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e2d4      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ae2e:	4b89      	ldr	r3, [pc, #548]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	2380      	movs	r3, #128	@ 0x80
 800ae34:	029b      	lsls	r3, r3, #10
 800ae36:	4013      	ands	r3, r2
 800ae38:	d1f0      	bne.n	800ae1c <HAL_RCC_OscConfig+0xf8>
 800ae3a:	e000      	b.n	800ae3e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae3c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2202      	movs	r2, #2
 800ae44:	4013      	ands	r3, r2
 800ae46:	d100      	bne.n	800ae4a <HAL_RCC_OscConfig+0x126>
 800ae48:	e099      	b.n	800af7e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae4a:	4b82      	ldr	r3, [pc, #520]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	2238      	movs	r2, #56	@ 0x38
 800ae50:	4013      	ands	r3, r2
 800ae52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae54:	4b7f      	ldr	r3, [pc, #508]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	2203      	movs	r2, #3
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	2b10      	cmp	r3, #16
 800ae62:	d102      	bne.n	800ae6a <HAL_RCC_OscConfig+0x146>
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d002      	beq.n	800ae70 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d135      	bne.n	800aedc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae70:	4b78      	ldr	r3, [pc, #480]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	2380      	movs	r3, #128	@ 0x80
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	4013      	ands	r3, r2
 800ae7a:	d005      	beq.n	800ae88 <HAL_RCC_OscConfig+0x164>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d101      	bne.n	800ae88 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e2a7      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae88:	4b72      	ldr	r3, [pc, #456]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	4a74      	ldr	r2, [pc, #464]	@ (800b060 <HAL_RCC_OscConfig+0x33c>)
 800ae8e:	4013      	ands	r3, r2
 800ae90:	0019      	movs	r1, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	021a      	lsls	r2, r3, #8
 800ae98:	4b6e      	ldr	r3, [pc, #440]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d112      	bne.n	800aeca <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800aea4:	4b6b      	ldr	r3, [pc, #428]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a6e      	ldr	r2, [pc, #440]	@ (800b064 <HAL_RCC_OscConfig+0x340>)
 800aeaa:	4013      	ands	r3, r2
 800aeac:	0019      	movs	r1, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	691a      	ldr	r2, [r3, #16]
 800aeb2:	4b68      	ldr	r3, [pc, #416]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800aeb8:	4b66      	ldr	r3, [pc, #408]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	0adb      	lsrs	r3, r3, #11
 800aebe:	2207      	movs	r2, #7
 800aec0:	4013      	ands	r3, r2
 800aec2:	4a69      	ldr	r2, [pc, #420]	@ (800b068 <HAL_RCC_OscConfig+0x344>)
 800aec4:	40da      	lsrs	r2, r3
 800aec6:	4b69      	ldr	r3, [pc, #420]	@ (800b06c <HAL_RCC_OscConfig+0x348>)
 800aec8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800aeca:	4b69      	ldr	r3, [pc, #420]	@ (800b070 <HAL_RCC_OscConfig+0x34c>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	0018      	movs	r0, r3
 800aed0:	f7fe f804 	bl	8008edc <HAL_InitTick>
 800aed4:	1e03      	subs	r3, r0, #0
 800aed6:	d051      	beq.n	800af7c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e27d      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d030      	beq.n	800af46 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800aee4:	4b5b      	ldr	r3, [pc, #364]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a5e      	ldr	r2, [pc, #376]	@ (800b064 <HAL_RCC_OscConfig+0x340>)
 800aeea:	4013      	ands	r3, r2
 800aeec:	0019      	movs	r1, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	691a      	ldr	r2, [r3, #16]
 800aef2:	4b58      	ldr	r3, [pc, #352]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800aef4:	430a      	orrs	r2, r1
 800aef6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800aef8:	4b56      	ldr	r3, [pc, #344]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	4b55      	ldr	r3, [pc, #340]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800aefe:	2180      	movs	r1, #128	@ 0x80
 800af00:	0049      	lsls	r1, r1, #1
 800af02:	430a      	orrs	r2, r1
 800af04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af06:	f7fe f845 	bl	8008f94 <HAL_GetTick>
 800af0a:	0003      	movs	r3, r0
 800af0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800af0e:	e008      	b.n	800af22 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af10:	f7fe f840 	bl	8008f94 <HAL_GetTick>
 800af14:	0002      	movs	r2, r0
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d901      	bls.n	800af22 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e25a      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800af22:	4b4c      	ldr	r3, [pc, #304]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	2380      	movs	r3, #128	@ 0x80
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	4013      	ands	r3, r2
 800af2c:	d0f0      	beq.n	800af10 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af2e:	4b49      	ldr	r3, [pc, #292]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	4a4b      	ldr	r2, [pc, #300]	@ (800b060 <HAL_RCC_OscConfig+0x33c>)
 800af34:	4013      	ands	r3, r2
 800af36:	0019      	movs	r1, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	021a      	lsls	r2, r3, #8
 800af3e:	4b45      	ldr	r3, [pc, #276]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800af40:	430a      	orrs	r2, r1
 800af42:	605a      	str	r2, [r3, #4]
 800af44:	e01b      	b.n	800af7e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800af46:	4b43      	ldr	r3, [pc, #268]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	4b42      	ldr	r3, [pc, #264]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800af4c:	4949      	ldr	r1, [pc, #292]	@ (800b074 <HAL_RCC_OscConfig+0x350>)
 800af4e:	400a      	ands	r2, r1
 800af50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af52:	f7fe f81f 	bl	8008f94 <HAL_GetTick>
 800af56:	0003      	movs	r3, r0
 800af58:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800af5a:	e008      	b.n	800af6e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af5c:	f7fe f81a 	bl	8008f94 <HAL_GetTick>
 800af60:	0002      	movs	r2, r0
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	2b02      	cmp	r3, #2
 800af68:	d901      	bls.n	800af6e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e234      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800af6e:	4b39      	ldr	r3, [pc, #228]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	2380      	movs	r3, #128	@ 0x80
 800af74:	00db      	lsls	r3, r3, #3
 800af76:	4013      	ands	r3, r2
 800af78:	d1f0      	bne.n	800af5c <HAL_RCC_OscConfig+0x238>
 800af7a:	e000      	b.n	800af7e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af7c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2208      	movs	r2, #8
 800af84:	4013      	ands	r3, r2
 800af86:	d047      	beq.n	800b018 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800af88:	4b32      	ldr	r3, [pc, #200]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	2238      	movs	r2, #56	@ 0x38
 800af8e:	4013      	ands	r3, r2
 800af90:	2b18      	cmp	r3, #24
 800af92:	d10a      	bne.n	800afaa <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800af94:	4b2f      	ldr	r3, [pc, #188]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800af96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af98:	2202      	movs	r2, #2
 800af9a:	4013      	ands	r3, r2
 800af9c:	d03c      	beq.n	800b018 <HAL_RCC_OscConfig+0x2f4>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d138      	bne.n	800b018 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e216      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d019      	beq.n	800afe6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800afb2:	4b28      	ldr	r3, [pc, #160]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800afb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800afb6:	4b27      	ldr	r3, [pc, #156]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800afb8:	2101      	movs	r1, #1
 800afba:	430a      	orrs	r2, r1
 800afbc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afbe:	f7fd ffe9 	bl	8008f94 <HAL_GetTick>
 800afc2:	0003      	movs	r3, r0
 800afc4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800afc6:	e008      	b.n	800afda <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afc8:	f7fd ffe4 	bl	8008f94 <HAL_GetTick>
 800afcc:	0002      	movs	r2, r0
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d901      	bls.n	800afda <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800afd6:	2303      	movs	r3, #3
 800afd8:	e1fe      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800afda:	4b1e      	ldr	r3, [pc, #120]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800afdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afde:	2202      	movs	r2, #2
 800afe0:	4013      	ands	r3, r2
 800afe2:	d0f1      	beq.n	800afc8 <HAL_RCC_OscConfig+0x2a4>
 800afe4:	e018      	b.n	800b018 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800afe6:	4b1b      	ldr	r3, [pc, #108]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800afe8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800afea:	4b1a      	ldr	r3, [pc, #104]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800afec:	2101      	movs	r1, #1
 800afee:	438a      	bics	r2, r1
 800aff0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff2:	f7fd ffcf 	bl	8008f94 <HAL_GetTick>
 800aff6:	0003      	movs	r3, r0
 800aff8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800affa:	e008      	b.n	800b00e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800affc:	f7fd ffca 	bl	8008f94 <HAL_GetTick>
 800b000:	0002      	movs	r2, r0
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	2b02      	cmp	r3, #2
 800b008:	d901      	bls.n	800b00e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e1e4      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b00e:	4b11      	ldr	r3, [pc, #68]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800b010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b012:	2202      	movs	r2, #2
 800b014:	4013      	ands	r3, r2
 800b016:	d1f1      	bne.n	800affc <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2204      	movs	r2, #4
 800b01e:	4013      	ands	r3, r2
 800b020:	d100      	bne.n	800b024 <HAL_RCC_OscConfig+0x300>
 800b022:	e0c7      	b.n	800b1b4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b024:	231f      	movs	r3, #31
 800b026:	18fb      	adds	r3, r7, r3
 800b028:	2200      	movs	r2, #0
 800b02a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b02c:	4b09      	ldr	r3, [pc, #36]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	2238      	movs	r2, #56	@ 0x38
 800b032:	4013      	ands	r3, r2
 800b034:	2b20      	cmp	r3, #32
 800b036:	d11f      	bne.n	800b078 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800b038:	4b06      	ldr	r3, [pc, #24]	@ (800b054 <HAL_RCC_OscConfig+0x330>)
 800b03a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b03c:	2202      	movs	r2, #2
 800b03e:	4013      	ands	r3, r2
 800b040:	d100      	bne.n	800b044 <HAL_RCC_OscConfig+0x320>
 800b042:	e0b7      	b.n	800b1b4 <HAL_RCC_OscConfig+0x490>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d000      	beq.n	800b04e <HAL_RCC_OscConfig+0x32a>
 800b04c:	e0b2      	b.n	800b1b4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	e1c2      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
 800b052:	46c0      	nop			@ (mov r8, r8)
 800b054:	40021000 	.word	0x40021000
 800b058:	fffeffff 	.word	0xfffeffff
 800b05c:	fffbffff 	.word	0xfffbffff
 800b060:	ffff80ff 	.word	0xffff80ff
 800b064:	ffffc7ff 	.word	0xffffc7ff
 800b068:	00f42400 	.word	0x00f42400
 800b06c:	20000298 	.word	0x20000298
 800b070:	2000029c 	.word	0x2000029c
 800b074:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b078:	4bb5      	ldr	r3, [pc, #724]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b07a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b07c:	2380      	movs	r3, #128	@ 0x80
 800b07e:	055b      	lsls	r3, r3, #21
 800b080:	4013      	ands	r3, r2
 800b082:	d101      	bne.n	800b088 <HAL_RCC_OscConfig+0x364>
 800b084:	2301      	movs	r3, #1
 800b086:	e000      	b.n	800b08a <HAL_RCC_OscConfig+0x366>
 800b088:	2300      	movs	r3, #0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d011      	beq.n	800b0b2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b08e:	4bb0      	ldr	r3, [pc, #704]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b092:	4baf      	ldr	r3, [pc, #700]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b094:	2180      	movs	r1, #128	@ 0x80
 800b096:	0549      	lsls	r1, r1, #21
 800b098:	430a      	orrs	r2, r1
 800b09a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b09c:	4bac      	ldr	r3, [pc, #688]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b09e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0a0:	2380      	movs	r3, #128	@ 0x80
 800b0a2:	055b      	lsls	r3, r3, #21
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800b0aa:	231f      	movs	r3, #31
 800b0ac:	18fb      	adds	r3, r7, r3
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0b2:	4ba8      	ldr	r3, [pc, #672]	@ (800b354 <HAL_RCC_OscConfig+0x630>)
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	2380      	movs	r3, #128	@ 0x80
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	d11a      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b0be:	4ba5      	ldr	r3, [pc, #660]	@ (800b354 <HAL_RCC_OscConfig+0x630>)
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	4ba4      	ldr	r3, [pc, #656]	@ (800b354 <HAL_RCC_OscConfig+0x630>)
 800b0c4:	2180      	movs	r1, #128	@ 0x80
 800b0c6:	0049      	lsls	r1, r1, #1
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800b0cc:	f7fd ff62 	bl	8008f94 <HAL_GetTick>
 800b0d0:	0003      	movs	r3, r0
 800b0d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0d4:	e008      	b.n	800b0e8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0d6:	f7fd ff5d 	bl	8008f94 <HAL_GetTick>
 800b0da:	0002      	movs	r2, r0
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d901      	bls.n	800b0e8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e177      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0e8:	4b9a      	ldr	r3, [pc, #616]	@ (800b354 <HAL_RCC_OscConfig+0x630>)
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	2380      	movs	r3, #128	@ 0x80
 800b0ee:	005b      	lsls	r3, r3, #1
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	d0f0      	beq.n	800b0d6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d106      	bne.n	800b10a <HAL_RCC_OscConfig+0x3e6>
 800b0fc:	4b94      	ldr	r3, [pc, #592]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b0fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b100:	4b93      	ldr	r3, [pc, #588]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b102:	2101      	movs	r1, #1
 800b104:	430a      	orrs	r2, r1
 800b106:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b108:	e01c      	b.n	800b144 <HAL_RCC_OscConfig+0x420>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	2b05      	cmp	r3, #5
 800b110:	d10c      	bne.n	800b12c <HAL_RCC_OscConfig+0x408>
 800b112:	4b8f      	ldr	r3, [pc, #572]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b114:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b116:	4b8e      	ldr	r3, [pc, #568]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b118:	2104      	movs	r1, #4
 800b11a:	430a      	orrs	r2, r1
 800b11c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b11e:	4b8c      	ldr	r3, [pc, #560]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b120:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b122:	4b8b      	ldr	r3, [pc, #556]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b124:	2101      	movs	r1, #1
 800b126:	430a      	orrs	r2, r1
 800b128:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b12a:	e00b      	b.n	800b144 <HAL_RCC_OscConfig+0x420>
 800b12c:	4b88      	ldr	r3, [pc, #544]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b12e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b130:	4b87      	ldr	r3, [pc, #540]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b132:	2101      	movs	r1, #1
 800b134:	438a      	bics	r2, r1
 800b136:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b138:	4b85      	ldr	r3, [pc, #532]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b13a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b13c:	4b84      	ldr	r3, [pc, #528]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b13e:	2104      	movs	r1, #4
 800b140:	438a      	bics	r2, r1
 800b142:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d014      	beq.n	800b176 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b14c:	f7fd ff22 	bl	8008f94 <HAL_GetTick>
 800b150:	0003      	movs	r3, r0
 800b152:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b154:	e009      	b.n	800b16a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b156:	f7fd ff1d 	bl	8008f94 <HAL_GetTick>
 800b15a:	0002      	movs	r2, r0
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	4a7d      	ldr	r2, [pc, #500]	@ (800b358 <HAL_RCC_OscConfig+0x634>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d901      	bls.n	800b16a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e136      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b16a:	4b79      	ldr	r3, [pc, #484]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b16c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b16e:	2202      	movs	r2, #2
 800b170:	4013      	ands	r3, r2
 800b172:	d0f0      	beq.n	800b156 <HAL_RCC_OscConfig+0x432>
 800b174:	e013      	b.n	800b19e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b176:	f7fd ff0d 	bl	8008f94 <HAL_GetTick>
 800b17a:	0003      	movs	r3, r0
 800b17c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b17e:	e009      	b.n	800b194 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b180:	f7fd ff08 	bl	8008f94 <HAL_GetTick>
 800b184:	0002      	movs	r2, r0
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	1ad3      	subs	r3, r2, r3
 800b18a:	4a73      	ldr	r2, [pc, #460]	@ (800b358 <HAL_RCC_OscConfig+0x634>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d901      	bls.n	800b194 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e121      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b194:	4b6e      	ldr	r3, [pc, #440]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b198:	2202      	movs	r2, #2
 800b19a:	4013      	ands	r3, r2
 800b19c:	d1f0      	bne.n	800b180 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b19e:	231f      	movs	r3, #31
 800b1a0:	18fb      	adds	r3, r7, r3
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d105      	bne.n	800b1b4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b1a8:	4b69      	ldr	r3, [pc, #420]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b1aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1ac:	4b68      	ldr	r3, [pc, #416]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b1ae:	496b      	ldr	r1, [pc, #428]	@ (800b35c <HAL_RCC_OscConfig+0x638>)
 800b1b0:	400a      	ands	r2, r1
 800b1b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2220      	movs	r2, #32
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	d039      	beq.n	800b232 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d01b      	beq.n	800b1fe <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b1c6:	4b62      	ldr	r3, [pc, #392]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	4b61      	ldr	r3, [pc, #388]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b1cc:	2180      	movs	r1, #128	@ 0x80
 800b1ce:	03c9      	lsls	r1, r1, #15
 800b1d0:	430a      	orrs	r2, r1
 800b1d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1d4:	f7fd fede 	bl	8008f94 <HAL_GetTick>
 800b1d8:	0003      	movs	r3, r0
 800b1da:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b1dc:	e008      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b1de:	f7fd fed9 	bl	8008f94 <HAL_GetTick>
 800b1e2:	0002      	movs	r2, r0
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d901      	bls.n	800b1f0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e0f3      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b1f0:	4b57      	ldr	r3, [pc, #348]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	2380      	movs	r3, #128	@ 0x80
 800b1f6:	041b      	lsls	r3, r3, #16
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	d0f0      	beq.n	800b1de <HAL_RCC_OscConfig+0x4ba>
 800b1fc:	e019      	b.n	800b232 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b1fe:	4b54      	ldr	r3, [pc, #336]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	4b53      	ldr	r3, [pc, #332]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b204:	4956      	ldr	r1, [pc, #344]	@ (800b360 <HAL_RCC_OscConfig+0x63c>)
 800b206:	400a      	ands	r2, r1
 800b208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b20a:	f7fd fec3 	bl	8008f94 <HAL_GetTick>
 800b20e:	0003      	movs	r3, r0
 800b210:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b212:	e008      	b.n	800b226 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b214:	f7fd febe 	bl	8008f94 <HAL_GetTick>
 800b218:	0002      	movs	r2, r0
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d901      	bls.n	800b226 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800b222:	2303      	movs	r3, #3
 800b224:	e0d8      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b226:	4b4a      	ldr	r3, [pc, #296]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	2380      	movs	r3, #128	@ 0x80
 800b22c:	041b      	lsls	r3, r3, #16
 800b22e:	4013      	ands	r3, r2
 800b230:	d1f0      	bne.n	800b214 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d100      	bne.n	800b23c <HAL_RCC_OscConfig+0x518>
 800b23a:	e0cc      	b.n	800b3d6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b23c:	4b44      	ldr	r3, [pc, #272]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	2238      	movs	r2, #56	@ 0x38
 800b242:	4013      	ands	r3, r2
 800b244:	2b10      	cmp	r3, #16
 800b246:	d100      	bne.n	800b24a <HAL_RCC_OscConfig+0x526>
 800b248:	e07b      	b.n	800b342 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d156      	bne.n	800b300 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b252:	4b3f      	ldr	r3, [pc, #252]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	4b3e      	ldr	r3, [pc, #248]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b258:	4942      	ldr	r1, [pc, #264]	@ (800b364 <HAL_RCC_OscConfig+0x640>)
 800b25a:	400a      	ands	r2, r1
 800b25c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b25e:	f7fd fe99 	bl	8008f94 <HAL_GetTick>
 800b262:	0003      	movs	r3, r0
 800b264:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b266:	e008      	b.n	800b27a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b268:	f7fd fe94 	bl	8008f94 <HAL_GetTick>
 800b26c:	0002      	movs	r2, r0
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	2b02      	cmp	r3, #2
 800b274:	d901      	bls.n	800b27a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e0ae      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b27a:	4b35      	ldr	r3, [pc, #212]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	2380      	movs	r3, #128	@ 0x80
 800b280:	049b      	lsls	r3, r3, #18
 800b282:	4013      	ands	r3, r2
 800b284:	d1f0      	bne.n	800b268 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b286:	4b32      	ldr	r3, [pc, #200]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	4a37      	ldr	r2, [pc, #220]	@ (800b368 <HAL_RCC_OscConfig+0x644>)
 800b28c:	4013      	ands	r3, r2
 800b28e:	0019      	movs	r1, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b298:	431a      	orrs	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29e:	021b      	lsls	r3, r3, #8
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2ac:	431a      	orrs	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	4b26      	ldr	r3, [pc, #152]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b2b6:	430a      	orrs	r2, r1
 800b2b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b2ba:	4b25      	ldr	r3, [pc, #148]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	4b24      	ldr	r3, [pc, #144]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b2c0:	2180      	movs	r1, #128	@ 0x80
 800b2c2:	0449      	lsls	r1, r1, #17
 800b2c4:	430a      	orrs	r2, r1
 800b2c6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800b2c8:	4b21      	ldr	r3, [pc, #132]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	4b20      	ldr	r3, [pc, #128]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b2ce:	2180      	movs	r1, #128	@ 0x80
 800b2d0:	0549      	lsls	r1, r1, #21
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2d6:	f7fd fe5d 	bl	8008f94 <HAL_GetTick>
 800b2da:	0003      	movs	r3, r0
 800b2dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2de:	e008      	b.n	800b2f2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2e0:	f7fd fe58 	bl	8008f94 <HAL_GetTick>
 800b2e4:	0002      	movs	r2, r0
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d901      	bls.n	800b2f2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e072      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2f2:	4b17      	ldr	r3, [pc, #92]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	2380      	movs	r3, #128	@ 0x80
 800b2f8:	049b      	lsls	r3, r3, #18
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	d0f0      	beq.n	800b2e0 <HAL_RCC_OscConfig+0x5bc>
 800b2fe:	e06a      	b.n	800b3d6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b300:	4b13      	ldr	r3, [pc, #76]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	4b12      	ldr	r3, [pc, #72]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b306:	4917      	ldr	r1, [pc, #92]	@ (800b364 <HAL_RCC_OscConfig+0x640>)
 800b308:	400a      	ands	r2, r1
 800b30a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b30c:	f7fd fe42 	bl	8008f94 <HAL_GetTick>
 800b310:	0003      	movs	r3, r0
 800b312:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b314:	e008      	b.n	800b328 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b316:	f7fd fe3d 	bl	8008f94 <HAL_GetTick>
 800b31a:	0002      	movs	r2, r0
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	1ad3      	subs	r3, r2, r3
 800b320:	2b02      	cmp	r3, #2
 800b322:	d901      	bls.n	800b328 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e057      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b328:	4b09      	ldr	r3, [pc, #36]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	2380      	movs	r3, #128	@ 0x80
 800b32e:	049b      	lsls	r3, r3, #18
 800b330:	4013      	ands	r3, r2
 800b332:	d1f0      	bne.n	800b316 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800b334:	4b06      	ldr	r3, [pc, #24]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b336:	68da      	ldr	r2, [r3, #12]
 800b338:	4b05      	ldr	r3, [pc, #20]	@ (800b350 <HAL_RCC_OscConfig+0x62c>)
 800b33a:	490c      	ldr	r1, [pc, #48]	@ (800b36c <HAL_RCC_OscConfig+0x648>)
 800b33c:	400a      	ands	r2, r1
 800b33e:	60da      	str	r2, [r3, #12]
 800b340:	e049      	b.n	800b3d6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a1b      	ldr	r3, [r3, #32]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d112      	bne.n	800b370 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e044      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
 800b34e:	46c0      	nop			@ (mov r8, r8)
 800b350:	40021000 	.word	0x40021000
 800b354:	40007000 	.word	0x40007000
 800b358:	00001388 	.word	0x00001388
 800b35c:	efffffff 	.word	0xefffffff
 800b360:	ffbfffff 	.word	0xffbfffff
 800b364:	feffffff 	.word	0xfeffffff
 800b368:	11c1808c 	.word	0x11c1808c
 800b36c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800b370:	4b1b      	ldr	r3, [pc, #108]	@ (800b3e0 <HAL_RCC_OscConfig+0x6bc>)
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2203      	movs	r2, #3
 800b37a:	401a      	ands	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b380:	429a      	cmp	r2, r3
 800b382:	d126      	bne.n	800b3d2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2270      	movs	r2, #112	@ 0x70
 800b388:	401a      	ands	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b38e:	429a      	cmp	r2, r3
 800b390:	d11f      	bne.n	800b3d2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	23fe      	movs	r3, #254	@ 0xfe
 800b396:	01db      	lsls	r3, r3, #7
 800b398:	401a      	ands	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d116      	bne.n	800b3d2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	23f8      	movs	r3, #248	@ 0xf8
 800b3a8:	039b      	lsls	r3, r3, #14
 800b3aa:	401a      	ands	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d10e      	bne.n	800b3d2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b3b4:	697a      	ldr	r2, [r7, #20]
 800b3b6:	23e0      	movs	r3, #224	@ 0xe0
 800b3b8:	051b      	lsls	r3, r3, #20
 800b3ba:	401a      	ands	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d106      	bne.n	800b3d2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	0f5b      	lsrs	r3, r3, #29
 800b3c8:	075a      	lsls	r2, r3, #29
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d001      	beq.n	800b3d6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e000      	b.n	800b3d8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	0018      	movs	r0, r3
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	b008      	add	sp, #32
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	40021000 	.word	0x40021000

0800b3e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e0e9      	b.n	800b5cc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3f8:	4b76      	ldr	r3, [pc, #472]	@ (800b5d4 <HAL_RCC_ClockConfig+0x1f0>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2207      	movs	r2, #7
 800b3fe:	4013      	ands	r3, r2
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	429a      	cmp	r2, r3
 800b404:	d91e      	bls.n	800b444 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b406:	4b73      	ldr	r3, [pc, #460]	@ (800b5d4 <HAL_RCC_ClockConfig+0x1f0>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2207      	movs	r2, #7
 800b40c:	4393      	bics	r3, r2
 800b40e:	0019      	movs	r1, r3
 800b410:	4b70      	ldr	r3, [pc, #448]	@ (800b5d4 <HAL_RCC_ClockConfig+0x1f0>)
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b418:	f7fd fdbc 	bl	8008f94 <HAL_GetTick>
 800b41c:	0003      	movs	r3, r0
 800b41e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b420:	e009      	b.n	800b436 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b422:	f7fd fdb7 	bl	8008f94 <HAL_GetTick>
 800b426:	0002      	movs	r2, r0
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	4a6a      	ldr	r2, [pc, #424]	@ (800b5d8 <HAL_RCC_ClockConfig+0x1f4>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d901      	bls.n	800b436 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e0ca      	b.n	800b5cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b436:	4b67      	ldr	r3, [pc, #412]	@ (800b5d4 <HAL_RCC_ClockConfig+0x1f0>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2207      	movs	r2, #7
 800b43c:	4013      	ands	r3, r2
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	429a      	cmp	r2, r3
 800b442:	d1ee      	bne.n	800b422 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2202      	movs	r2, #2
 800b44a:	4013      	ands	r3, r2
 800b44c:	d015      	beq.n	800b47a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2204      	movs	r2, #4
 800b454:	4013      	ands	r3, r2
 800b456:	d006      	beq.n	800b466 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800b458:	4b60      	ldr	r3, [pc, #384]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b45a:	689a      	ldr	r2, [r3, #8]
 800b45c:	4b5f      	ldr	r3, [pc, #380]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b45e:	21e0      	movs	r1, #224	@ 0xe0
 800b460:	01c9      	lsls	r1, r1, #7
 800b462:	430a      	orrs	r2, r1
 800b464:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b466:	4b5d      	ldr	r3, [pc, #372]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	4a5d      	ldr	r2, [pc, #372]	@ (800b5e0 <HAL_RCC_ClockConfig+0x1fc>)
 800b46c:	4013      	ands	r3, r2
 800b46e:	0019      	movs	r1, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	689a      	ldr	r2, [r3, #8]
 800b474:	4b59      	ldr	r3, [pc, #356]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b476:	430a      	orrs	r2, r1
 800b478:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2201      	movs	r2, #1
 800b480:	4013      	ands	r3, r2
 800b482:	d057      	beq.n	800b534 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d107      	bne.n	800b49c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b48c:	4b53      	ldr	r3, [pc, #332]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	2380      	movs	r3, #128	@ 0x80
 800b492:	029b      	lsls	r3, r3, #10
 800b494:	4013      	ands	r3, r2
 800b496:	d12b      	bne.n	800b4f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e097      	b.n	800b5cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d107      	bne.n	800b4b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4a4:	4b4d      	ldr	r3, [pc, #308]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	2380      	movs	r3, #128	@ 0x80
 800b4aa:	049b      	lsls	r3, r3, #18
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	d11f      	bne.n	800b4f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e08b      	b.n	800b5cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d107      	bne.n	800b4cc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b4bc:	4b47      	ldr	r3, [pc, #284]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	2380      	movs	r3, #128	@ 0x80
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	d113      	bne.n	800b4f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e07f      	b.n	800b5cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	2b03      	cmp	r3, #3
 800b4d2:	d106      	bne.n	800b4e2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b4d4:	4b41      	ldr	r3, [pc, #260]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b4d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4d8:	2202      	movs	r2, #2
 800b4da:	4013      	ands	r3, r2
 800b4dc:	d108      	bne.n	800b4f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e074      	b.n	800b5cc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b4e2:	4b3e      	ldr	r3, [pc, #248]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b4e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	d101      	bne.n	800b4f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e06d      	b.n	800b5cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b4f0:	4b3a      	ldr	r3, [pc, #232]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	2207      	movs	r2, #7
 800b4f6:	4393      	bics	r3, r2
 800b4f8:	0019      	movs	r1, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	4b37      	ldr	r3, [pc, #220]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b500:	430a      	orrs	r2, r1
 800b502:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b504:	f7fd fd46 	bl	8008f94 <HAL_GetTick>
 800b508:	0003      	movs	r3, r0
 800b50a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b50c:	e009      	b.n	800b522 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b50e:	f7fd fd41 	bl	8008f94 <HAL_GetTick>
 800b512:	0002      	movs	r2, r0
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	4a2f      	ldr	r2, [pc, #188]	@ (800b5d8 <HAL_RCC_ClockConfig+0x1f4>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d901      	bls.n	800b522 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e054      	b.n	800b5cc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b522:	4b2e      	ldr	r3, [pc, #184]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	2238      	movs	r2, #56	@ 0x38
 800b528:	401a      	ands	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	00db      	lsls	r3, r3, #3
 800b530:	429a      	cmp	r2, r3
 800b532:	d1ec      	bne.n	800b50e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b534:	4b27      	ldr	r3, [pc, #156]	@ (800b5d4 <HAL_RCC_ClockConfig+0x1f0>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2207      	movs	r2, #7
 800b53a:	4013      	ands	r3, r2
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d21e      	bcs.n	800b580 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b542:	4b24      	ldr	r3, [pc, #144]	@ (800b5d4 <HAL_RCC_ClockConfig+0x1f0>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2207      	movs	r2, #7
 800b548:	4393      	bics	r3, r2
 800b54a:	0019      	movs	r1, r3
 800b54c:	4b21      	ldr	r3, [pc, #132]	@ (800b5d4 <HAL_RCC_ClockConfig+0x1f0>)
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	430a      	orrs	r2, r1
 800b552:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b554:	f7fd fd1e 	bl	8008f94 <HAL_GetTick>
 800b558:	0003      	movs	r3, r0
 800b55a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b55c:	e009      	b.n	800b572 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b55e:	f7fd fd19 	bl	8008f94 <HAL_GetTick>
 800b562:	0002      	movs	r2, r0
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	4a1b      	ldr	r2, [pc, #108]	@ (800b5d8 <HAL_RCC_ClockConfig+0x1f4>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d901      	bls.n	800b572 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e02c      	b.n	800b5cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b572:	4b18      	ldr	r3, [pc, #96]	@ (800b5d4 <HAL_RCC_ClockConfig+0x1f0>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2207      	movs	r2, #7
 800b578:	4013      	ands	r3, r2
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d1ee      	bne.n	800b55e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2204      	movs	r2, #4
 800b586:	4013      	ands	r3, r2
 800b588:	d009      	beq.n	800b59e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800b58a:	4b14      	ldr	r3, [pc, #80]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	4a15      	ldr	r2, [pc, #84]	@ (800b5e4 <HAL_RCC_ClockConfig+0x200>)
 800b590:	4013      	ands	r3, r2
 800b592:	0019      	movs	r1, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	68da      	ldr	r2, [r3, #12]
 800b598:	4b10      	ldr	r3, [pc, #64]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b59a:	430a      	orrs	r2, r1
 800b59c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800b59e:	f000 f829 	bl	800b5f4 <HAL_RCC_GetSysClockFreq>
 800b5a2:	0001      	movs	r1, r0
 800b5a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b5dc <HAL_RCC_ClockConfig+0x1f8>)
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	0a1b      	lsrs	r3, r3, #8
 800b5aa:	220f      	movs	r2, #15
 800b5ac:	401a      	ands	r2, r3
 800b5ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b5e8 <HAL_RCC_ClockConfig+0x204>)
 800b5b0:	0092      	lsls	r2, r2, #2
 800b5b2:	58d3      	ldr	r3, [r2, r3]
 800b5b4:	221f      	movs	r2, #31
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	000a      	movs	r2, r1
 800b5ba:	40da      	lsrs	r2, r3
 800b5bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b5ec <HAL_RCC_ClockConfig+0x208>)
 800b5be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b5f0 <HAL_RCC_ClockConfig+0x20c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	0018      	movs	r0, r3
 800b5c6:	f7fd fc89 	bl	8008edc <HAL_InitTick>
 800b5ca:	0003      	movs	r3, r0
}
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	b004      	add	sp, #16
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	40022000 	.word	0x40022000
 800b5d8:	00001388 	.word	0x00001388
 800b5dc:	40021000 	.word	0x40021000
 800b5e0:	fffff0ff 	.word	0xfffff0ff
 800b5e4:	ffff8fff 	.word	0xffff8fff
 800b5e8:	08010c30 	.word	0x08010c30
 800b5ec:	20000298 	.word	0x20000298
 800b5f0:	2000029c 	.word	0x2000029c

0800b5f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b5fa:	4b3c      	ldr	r3, [pc, #240]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	2238      	movs	r2, #56	@ 0x38
 800b600:	4013      	ands	r3, r2
 800b602:	d10f      	bne.n	800b624 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800b604:	4b39      	ldr	r3, [pc, #228]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	0adb      	lsrs	r3, r3, #11
 800b60a:	2207      	movs	r2, #7
 800b60c:	4013      	ands	r3, r2
 800b60e:	2201      	movs	r2, #1
 800b610:	409a      	lsls	r2, r3
 800b612:	0013      	movs	r3, r2
 800b614:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	4835      	ldr	r0, [pc, #212]	@ (800b6f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800b61a:	f7f4 fd87 	bl	800012c <__udivsi3>
 800b61e:	0003      	movs	r3, r0
 800b620:	613b      	str	r3, [r7, #16]
 800b622:	e05d      	b.n	800b6e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b624:	4b31      	ldr	r3, [pc, #196]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	2238      	movs	r2, #56	@ 0x38
 800b62a:	4013      	ands	r3, r2
 800b62c:	2b08      	cmp	r3, #8
 800b62e:	d102      	bne.n	800b636 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b630:	4b30      	ldr	r3, [pc, #192]	@ (800b6f4 <HAL_RCC_GetSysClockFreq+0x100>)
 800b632:	613b      	str	r3, [r7, #16]
 800b634:	e054      	b.n	800b6e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b636:	4b2d      	ldr	r3, [pc, #180]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	2238      	movs	r2, #56	@ 0x38
 800b63c:	4013      	ands	r3, r2
 800b63e:	2b10      	cmp	r3, #16
 800b640:	d138      	bne.n	800b6b4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800b642:	4b2a      	ldr	r3, [pc, #168]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	2203      	movs	r2, #3
 800b648:	4013      	ands	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b64c:	4b27      	ldr	r3, [pc, #156]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	091b      	lsrs	r3, r3, #4
 800b652:	2207      	movs	r2, #7
 800b654:	4013      	ands	r3, r2
 800b656:	3301      	adds	r3, #1
 800b658:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2b03      	cmp	r3, #3
 800b65e:	d10d      	bne.n	800b67c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b660:	68b9      	ldr	r1, [r7, #8]
 800b662:	4824      	ldr	r0, [pc, #144]	@ (800b6f4 <HAL_RCC_GetSysClockFreq+0x100>)
 800b664:	f7f4 fd62 	bl	800012c <__udivsi3>
 800b668:	0003      	movs	r3, r0
 800b66a:	0019      	movs	r1, r3
 800b66c:	4b1f      	ldr	r3, [pc, #124]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	0a1b      	lsrs	r3, r3, #8
 800b672:	227f      	movs	r2, #127	@ 0x7f
 800b674:	4013      	ands	r3, r2
 800b676:	434b      	muls	r3, r1
 800b678:	617b      	str	r3, [r7, #20]
        break;
 800b67a:	e00d      	b.n	800b698 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800b67c:	68b9      	ldr	r1, [r7, #8]
 800b67e:	481c      	ldr	r0, [pc, #112]	@ (800b6f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800b680:	f7f4 fd54 	bl	800012c <__udivsi3>
 800b684:	0003      	movs	r3, r0
 800b686:	0019      	movs	r1, r3
 800b688:	4b18      	ldr	r3, [pc, #96]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	0a1b      	lsrs	r3, r3, #8
 800b68e:	227f      	movs	r2, #127	@ 0x7f
 800b690:	4013      	ands	r3, r2
 800b692:	434b      	muls	r3, r1
 800b694:	617b      	str	r3, [r7, #20]
        break;
 800b696:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800b698:	4b14      	ldr	r3, [pc, #80]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	0f5b      	lsrs	r3, r3, #29
 800b69e:	2207      	movs	r2, #7
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800b6a6:	6879      	ldr	r1, [r7, #4]
 800b6a8:	6978      	ldr	r0, [r7, #20]
 800b6aa:	f7f4 fd3f 	bl	800012c <__udivsi3>
 800b6ae:	0003      	movs	r3, r0
 800b6b0:	613b      	str	r3, [r7, #16]
 800b6b2:	e015      	b.n	800b6e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b6b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	2238      	movs	r2, #56	@ 0x38
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	2b20      	cmp	r3, #32
 800b6be:	d103      	bne.n	800b6c8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800b6c0:	2380      	movs	r3, #128	@ 0x80
 800b6c2:	021b      	lsls	r3, r3, #8
 800b6c4:	613b      	str	r3, [r7, #16]
 800b6c6:	e00b      	b.n	800b6e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b6c8:	4b08      	ldr	r3, [pc, #32]	@ (800b6ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	2238      	movs	r2, #56	@ 0x38
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	2b18      	cmp	r3, #24
 800b6d2:	d103      	bne.n	800b6dc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800b6d4:	23fa      	movs	r3, #250	@ 0xfa
 800b6d6:	01db      	lsls	r3, r3, #7
 800b6d8:	613b      	str	r3, [r7, #16]
 800b6da:	e001      	b.n	800b6e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b6e0:	693b      	ldr	r3, [r7, #16]
}
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	b006      	add	sp, #24
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	46c0      	nop			@ (mov r8, r8)
 800b6ec:	40021000 	.word	0x40021000
 800b6f0:	00f42400 	.word	0x00f42400
 800b6f4:	007a1200 	.word	0x007a1200

0800b6f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800b700:	2313      	movs	r3, #19
 800b702:	18fb      	adds	r3, r7, r3
 800b704:	2200      	movs	r2, #0
 800b706:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b708:	2312      	movs	r3, #18
 800b70a:	18fb      	adds	r3, r7, r3
 800b70c:	2200      	movs	r2, #0
 800b70e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	2380      	movs	r3, #128	@ 0x80
 800b716:	029b      	lsls	r3, r3, #10
 800b718:	4013      	ands	r3, r2
 800b71a:	d100      	bne.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800b71c:	e0ad      	b.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b71e:	2011      	movs	r0, #17
 800b720:	183b      	adds	r3, r7, r0
 800b722:	2200      	movs	r2, #0
 800b724:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b726:	4b47      	ldr	r3, [pc, #284]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b72a:	2380      	movs	r3, #128	@ 0x80
 800b72c:	055b      	lsls	r3, r3, #21
 800b72e:	4013      	ands	r3, r2
 800b730:	d110      	bne.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b732:	4b44      	ldr	r3, [pc, #272]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b734:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b736:	4b43      	ldr	r3, [pc, #268]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b738:	2180      	movs	r1, #128	@ 0x80
 800b73a:	0549      	lsls	r1, r1, #21
 800b73c:	430a      	orrs	r2, r1
 800b73e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b740:	4b40      	ldr	r3, [pc, #256]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b744:	2380      	movs	r3, #128	@ 0x80
 800b746:	055b      	lsls	r3, r3, #21
 800b748:	4013      	ands	r3, r2
 800b74a:	60bb      	str	r3, [r7, #8]
 800b74c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b74e:	183b      	adds	r3, r7, r0
 800b750:	2201      	movs	r2, #1
 800b752:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b754:	4b3c      	ldr	r3, [pc, #240]	@ (800b848 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	4b3b      	ldr	r3, [pc, #236]	@ (800b848 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b75a:	2180      	movs	r1, #128	@ 0x80
 800b75c:	0049      	lsls	r1, r1, #1
 800b75e:	430a      	orrs	r2, r1
 800b760:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b762:	f7fd fc17 	bl	8008f94 <HAL_GetTick>
 800b766:	0003      	movs	r3, r0
 800b768:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b76a:	e00b      	b.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b76c:	f7fd fc12 	bl	8008f94 <HAL_GetTick>
 800b770:	0002      	movs	r2, r0
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	2b02      	cmp	r3, #2
 800b778:	d904      	bls.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800b77a:	2313      	movs	r3, #19
 800b77c:	18fb      	adds	r3, r7, r3
 800b77e:	2203      	movs	r2, #3
 800b780:	701a      	strb	r2, [r3, #0]
        break;
 800b782:	e005      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b784:	4b30      	ldr	r3, [pc, #192]	@ (800b848 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	2380      	movs	r3, #128	@ 0x80
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	4013      	ands	r3, r2
 800b78e:	d0ed      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800b790:	2313      	movs	r3, #19
 800b792:	18fb      	adds	r3, r7, r3
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d15e      	bne.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b79a:	4b2a      	ldr	r3, [pc, #168]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b79c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b79e:	23c0      	movs	r3, #192	@ 0xc0
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d019      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d014      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b7b6:	4b23      	ldr	r3, [pc, #140]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b7b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7ba:	4a24      	ldr	r2, [pc, #144]	@ (800b84c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800b7bc:	4013      	ands	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b7c0:	4b20      	ldr	r3, [pc, #128]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b7c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b7c4:	4b1f      	ldr	r3, [pc, #124]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b7c6:	2180      	movs	r1, #128	@ 0x80
 800b7c8:	0249      	lsls	r1, r1, #9
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b7ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b7d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b7d2:	4b1c      	ldr	r3, [pc, #112]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b7d4:	491e      	ldr	r1, [pc, #120]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800b7d6:	400a      	ands	r2, r1
 800b7d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b7da:	4b1a      	ldr	r3, [pc, #104]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b7dc:	697a      	ldr	r2, [r7, #20]
 800b7de:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	d016      	beq.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7e8:	f7fd fbd4 	bl	8008f94 <HAL_GetTick>
 800b7ec:	0003      	movs	r3, r0
 800b7ee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7f0:	e00c      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7f2:	f7fd fbcf 	bl	8008f94 <HAL_GetTick>
 800b7f6:	0002      	movs	r2, r0
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	4a15      	ldr	r2, [pc, #84]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d904      	bls.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800b802:	2313      	movs	r3, #19
 800b804:	18fb      	adds	r3, r7, r3
 800b806:	2203      	movs	r2, #3
 800b808:	701a      	strb	r2, [r3, #0]
            break;
 800b80a:	e004      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b80c:	4b0d      	ldr	r3, [pc, #52]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b80e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b810:	2202      	movs	r2, #2
 800b812:	4013      	ands	r3, r2
 800b814:	d0ed      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800b816:	2313      	movs	r3, #19
 800b818:	18fb      	adds	r3, r7, r3
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10a      	bne.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b820:	4b08      	ldr	r3, [pc, #32]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b824:	4a09      	ldr	r2, [pc, #36]	@ (800b84c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800b826:	4013      	ands	r3, r2
 800b828:	0019      	movs	r1, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b82e:	4b05      	ldr	r3, [pc, #20]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b830:	430a      	orrs	r2, r1
 800b832:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b834:	e016      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b836:	2312      	movs	r3, #18
 800b838:	18fb      	adds	r3, r7, r3
 800b83a:	2213      	movs	r2, #19
 800b83c:	18ba      	adds	r2, r7, r2
 800b83e:	7812      	ldrb	r2, [r2, #0]
 800b840:	701a      	strb	r2, [r3, #0]
 800b842:	e00f      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800b844:	40021000 	.word	0x40021000
 800b848:	40007000 	.word	0x40007000
 800b84c:	fffffcff 	.word	0xfffffcff
 800b850:	fffeffff 	.word	0xfffeffff
 800b854:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b858:	2312      	movs	r3, #18
 800b85a:	18fb      	adds	r3, r7, r3
 800b85c:	2213      	movs	r2, #19
 800b85e:	18ba      	adds	r2, r7, r2
 800b860:	7812      	ldrb	r2, [r2, #0]
 800b862:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b864:	2311      	movs	r3, #17
 800b866:	18fb      	adds	r3, r7, r3
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d105      	bne.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b86e:	4bb6      	ldr	r3, [pc, #728]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b872:	4bb5      	ldr	r3, [pc, #724]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b874:	49b5      	ldr	r1, [pc, #724]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800b876:	400a      	ands	r2, r1
 800b878:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2201      	movs	r2, #1
 800b880:	4013      	ands	r3, r2
 800b882:	d009      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b884:	4bb0      	ldr	r3, [pc, #704]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b888:	2203      	movs	r2, #3
 800b88a:	4393      	bics	r3, r2
 800b88c:	0019      	movs	r1, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	4bad      	ldr	r3, [pc, #692]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b894:	430a      	orrs	r2, r1
 800b896:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2202      	movs	r2, #2
 800b89e:	4013      	ands	r3, r2
 800b8a0:	d009      	beq.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b8a2:	4ba9      	ldr	r3, [pc, #676]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b8a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8a6:	220c      	movs	r2, #12
 800b8a8:	4393      	bics	r3, r2
 800b8aa:	0019      	movs	r1, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	689a      	ldr	r2, [r3, #8]
 800b8b0:	4ba5      	ldr	r3, [pc, #660]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	4013      	ands	r3, r2
 800b8be:	d009      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b8c0:	4ba1      	ldr	r3, [pc, #644]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b8c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8c4:	2230      	movs	r2, #48	@ 0x30
 800b8c6:	4393      	bics	r3, r2
 800b8c8:	0019      	movs	r1, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68da      	ldr	r2, [r3, #12]
 800b8ce:	4b9e      	ldr	r3, [pc, #632]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b8d0:	430a      	orrs	r2, r1
 800b8d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2210      	movs	r2, #16
 800b8da:	4013      	ands	r3, r2
 800b8dc:	d009      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b8de:	4b9a      	ldr	r3, [pc, #616]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b8e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8e2:	4a9b      	ldr	r2, [pc, #620]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	0019      	movs	r1, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	691a      	ldr	r2, [r3, #16]
 800b8ec:	4b96      	ldr	r3, [pc, #600]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	2380      	movs	r3, #128	@ 0x80
 800b8f8:	015b      	lsls	r3, r3, #5
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	d009      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800b8fe:	4b92      	ldr	r3, [pc, #584]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b902:	4a94      	ldr	r2, [pc, #592]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b904:	4013      	ands	r3, r2
 800b906:	0019      	movs	r1, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	695a      	ldr	r2, [r3, #20]
 800b90c:	4b8e      	ldr	r3, [pc, #568]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b90e:	430a      	orrs	r2, r1
 800b910:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	2380      	movs	r3, #128	@ 0x80
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4013      	ands	r3, r2
 800b91c:	d009      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b91e:	4b8a      	ldr	r3, [pc, #552]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b922:	4a8d      	ldr	r2, [pc, #564]	@ (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800b924:	4013      	ands	r3, r2
 800b926:	0019      	movs	r1, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b92c:	4b86      	ldr	r3, [pc, #536]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b92e:	430a      	orrs	r2, r1
 800b930:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	2380      	movs	r3, #128	@ 0x80
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	4013      	ands	r3, r2
 800b93c:	d009      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b93e:	4b82      	ldr	r3, [pc, #520]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b942:	4a86      	ldr	r2, [pc, #536]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800b944:	4013      	ands	r3, r2
 800b946:	0019      	movs	r1, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94c:	4b7e      	ldr	r3, [pc, #504]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b94e:	430a      	orrs	r2, r1
 800b950:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2220      	movs	r2, #32
 800b958:	4013      	ands	r3, r2
 800b95a:	d009      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b95c:	4b7a      	ldr	r3, [pc, #488]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b95e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b960:	4a7f      	ldr	r2, [pc, #508]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b962:	4013      	ands	r3, r2
 800b964:	0019      	movs	r1, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	4b77      	ldr	r3, [pc, #476]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b96c:	430a      	orrs	r2, r1
 800b96e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2240      	movs	r2, #64	@ 0x40
 800b976:	4013      	ands	r3, r2
 800b978:	d009      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b97a:	4b73      	ldr	r3, [pc, #460]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b97c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b97e:	4a79      	ldr	r2, [pc, #484]	@ (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800b980:	4013      	ands	r3, r2
 800b982:	0019      	movs	r1, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	69da      	ldr	r2, [r3, #28]
 800b988:	4b6f      	ldr	r3, [pc, #444]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b98a:	430a      	orrs	r2, r1
 800b98c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	2380      	movs	r3, #128	@ 0x80
 800b994:	01db      	lsls	r3, r3, #7
 800b996:	4013      	ands	r3, r2
 800b998:	d015      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b99a:	4b6b      	ldr	r3, [pc, #428]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	0899      	lsrs	r1, r3, #2
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9a6:	4b68      	ldr	r3, [pc, #416]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9b0:	2380      	movs	r3, #128	@ 0x80
 800b9b2:	05db      	lsls	r3, r3, #23
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d106      	bne.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b9b8:	4b63      	ldr	r3, [pc, #396]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b9ba:	68da      	ldr	r2, [r3, #12]
 800b9bc:	4b62      	ldr	r3, [pc, #392]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b9be:	2180      	movs	r1, #128	@ 0x80
 800b9c0:	0249      	lsls	r1, r1, #9
 800b9c2:	430a      	orrs	r2, r1
 800b9c4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	2380      	movs	r3, #128	@ 0x80
 800b9cc:	031b      	lsls	r3, r3, #12
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	d009      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9d2:	4b5d      	ldr	r3, [pc, #372]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b9d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9d6:	2240      	movs	r2, #64	@ 0x40
 800b9d8:	4393      	bics	r3, r2
 800b9da:	0019      	movs	r1, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9e0:	4b59      	ldr	r3, [pc, #356]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	2380      	movs	r3, #128	@ 0x80
 800b9ec:	039b      	lsls	r3, r3, #14
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	d016      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800b9f2:	4b55      	ldr	r3, [pc, #340]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9f6:	4a5c      	ldr	r2, [pc, #368]	@ (800bb68 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	0019      	movs	r1, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba00:	4b51      	ldr	r3, [pc, #324]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba02:	430a      	orrs	r2, r1
 800ba04:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba0a:	2380      	movs	r3, #128	@ 0x80
 800ba0c:	03db      	lsls	r3, r3, #15
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d106      	bne.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ba12:	4b4d      	ldr	r3, [pc, #308]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba14:	68da      	ldr	r2, [r3, #12]
 800ba16:	4b4c      	ldr	r3, [pc, #304]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba18:	2180      	movs	r1, #128	@ 0x80
 800ba1a:	0449      	lsls	r1, r1, #17
 800ba1c:	430a      	orrs	r2, r1
 800ba1e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	2380      	movs	r3, #128	@ 0x80
 800ba26:	03db      	lsls	r3, r3, #15
 800ba28:	4013      	ands	r3, r2
 800ba2a:	d016      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800ba2c:	4b46      	ldr	r3, [pc, #280]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba30:	4a4e      	ldr	r2, [pc, #312]	@ (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ba32:	4013      	ands	r3, r2
 800ba34:	0019      	movs	r1, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba3a:	4b43      	ldr	r3, [pc, #268]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba44:	2380      	movs	r3, #128	@ 0x80
 800ba46:	045b      	lsls	r3, r3, #17
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d106      	bne.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ba4c:	4b3e      	ldr	r3, [pc, #248]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba4e:	68da      	ldr	r2, [r3, #12]
 800ba50:	4b3d      	ldr	r3, [pc, #244]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba52:	2180      	movs	r1, #128	@ 0x80
 800ba54:	0449      	lsls	r1, r1, #17
 800ba56:	430a      	orrs	r2, r1
 800ba58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	2380      	movs	r3, #128	@ 0x80
 800ba60:	011b      	lsls	r3, r3, #4
 800ba62:	4013      	ands	r3, r2
 800ba64:	d014      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800ba66:	4b38      	ldr	r3, [pc, #224]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba6a:	2203      	movs	r2, #3
 800ba6c:	4393      	bics	r3, r2
 800ba6e:	0019      	movs	r1, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a1a      	ldr	r2, [r3, #32]
 800ba74:	4b34      	ldr	r3, [pc, #208]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba76:	430a      	orrs	r2, r1
 800ba78:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a1b      	ldr	r3, [r3, #32]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d106      	bne.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ba82:	4b31      	ldr	r3, [pc, #196]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba84:	68da      	ldr	r2, [r3, #12]
 800ba86:	4b30      	ldr	r3, [pc, #192]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba88:	2180      	movs	r1, #128	@ 0x80
 800ba8a:	0249      	lsls	r1, r1, #9
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	2380      	movs	r3, #128	@ 0x80
 800ba96:	019b      	lsls	r3, r3, #6
 800ba98:	4013      	ands	r3, r2
 800ba9a:	d014      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800ba9c:	4b2a      	ldr	r3, [pc, #168]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ba9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baa0:	220c      	movs	r2, #12
 800baa2:	4393      	bics	r3, r2
 800baa4:	0019      	movs	r1, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800baaa:	4b27      	ldr	r3, [pc, #156]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800baac:	430a      	orrs	r2, r1
 800baae:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	d106      	bne.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bab8:	4b23      	ldr	r3, [pc, #140]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800baba:	68da      	ldr	r2, [r3, #12]
 800babc:	4b22      	ldr	r3, [pc, #136]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800babe:	2180      	movs	r1, #128	@ 0x80
 800bac0:	0249      	lsls	r1, r1, #9
 800bac2:	430a      	orrs	r2, r1
 800bac4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	2380      	movs	r3, #128	@ 0x80
 800bacc:	045b      	lsls	r3, r3, #17
 800bace:	4013      	ands	r3, r2
 800bad0:	d016      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bad2:	4b1d      	ldr	r3, [pc, #116]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bad6:	4a22      	ldr	r2, [pc, #136]	@ (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bad8:	4013      	ands	r3, r2
 800bada:	0019      	movs	r1, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bae0:	4b19      	ldr	r3, [pc, #100]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bae2:	430a      	orrs	r2, r1
 800bae4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800baea:	2380      	movs	r3, #128	@ 0x80
 800baec:	019b      	lsls	r3, r3, #6
 800baee:	429a      	cmp	r2, r3
 800baf0:	d106      	bne.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800baf2:	4b15      	ldr	r3, [pc, #84]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800baf4:	68da      	ldr	r2, [r3, #12]
 800baf6:	4b14      	ldr	r3, [pc, #80]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800baf8:	2180      	movs	r1, #128	@ 0x80
 800bafa:	0449      	lsls	r1, r1, #17
 800bafc:	430a      	orrs	r2, r1
 800bafe:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	2380      	movs	r3, #128	@ 0x80
 800bb06:	049b      	lsls	r3, r3, #18
 800bb08:	4013      	ands	r3, r2
 800bb0a:	d016      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb0c:	4b0e      	ldr	r3, [pc, #56]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bb0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb10:	4a10      	ldr	r2, [pc, #64]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800bb12:	4013      	ands	r3, r2
 800bb14:	0019      	movs	r1, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb1a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bb1c:	430a      	orrs	r2, r1
 800bb1e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb24:	2380      	movs	r3, #128	@ 0x80
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d106      	bne.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bb2c:	4b06      	ldr	r3, [pc, #24]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bb2e:	68da      	ldr	r2, [r3, #12]
 800bb30:	4b05      	ldr	r3, [pc, #20]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bb32:	2180      	movs	r1, #128	@ 0x80
 800bb34:	0449      	lsls	r1, r1, #17
 800bb36:	430a      	orrs	r2, r1
 800bb38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800bb3a:	2312      	movs	r3, #18
 800bb3c:	18fb      	adds	r3, r7, r3
 800bb3e:	781b      	ldrb	r3, [r3, #0]
}
 800bb40:	0018      	movs	r0, r3
 800bb42:	46bd      	mov	sp, r7
 800bb44:	b006      	add	sp, #24
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	40021000 	.word	0x40021000
 800bb4c:	efffffff 	.word	0xefffffff
 800bb50:	fffff3ff 	.word	0xfffff3ff
 800bb54:	fffffcff 	.word	0xfffffcff
 800bb58:	fff3ffff 	.word	0xfff3ffff
 800bb5c:	ffcfffff 	.word	0xffcfffff
 800bb60:	ffffcfff 	.word	0xffffcfff
 800bb64:	ffff3fff 	.word	0xffff3fff
 800bb68:	ffbfffff 	.word	0xffbfffff
 800bb6c:	feffffff 	.word	0xfeffffff

0800bb70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e04a      	b.n	800bc18 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	223d      	movs	r2, #61	@ 0x3d
 800bb86:	5c9b      	ldrb	r3, [r3, r2]
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d107      	bne.n	800bb9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	223c      	movs	r2, #60	@ 0x3c
 800bb92:	2100      	movs	r1, #0
 800bb94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	0018      	movs	r0, r3
 800bb9a:	f7fd f825 	bl	8008be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	223d      	movs	r2, #61	@ 0x3d
 800bba2:	2102      	movs	r1, #2
 800bba4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	3304      	adds	r3, #4
 800bbae:	0019      	movs	r1, r3
 800bbb0:	0010      	movs	r0, r2
 800bbb2:	f000 f9ed 	bl	800bf90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2248      	movs	r2, #72	@ 0x48
 800bbba:	2101      	movs	r1, #1
 800bbbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	223e      	movs	r2, #62	@ 0x3e
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	5499      	strb	r1, [r3, r2]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	223f      	movs	r2, #63	@ 0x3f
 800bbca:	2101      	movs	r1, #1
 800bbcc:	5499      	strb	r1, [r3, r2]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2240      	movs	r2, #64	@ 0x40
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	5499      	strb	r1, [r3, r2]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2241      	movs	r2, #65	@ 0x41
 800bbda:	2101      	movs	r1, #1
 800bbdc:	5499      	strb	r1, [r3, r2]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2242      	movs	r2, #66	@ 0x42
 800bbe2:	2101      	movs	r1, #1
 800bbe4:	5499      	strb	r1, [r3, r2]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2243      	movs	r2, #67	@ 0x43
 800bbea:	2101      	movs	r1, #1
 800bbec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2244      	movs	r2, #68	@ 0x44
 800bbf2:	2101      	movs	r1, #1
 800bbf4:	5499      	strb	r1, [r3, r2]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2245      	movs	r2, #69	@ 0x45
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	5499      	strb	r1, [r3, r2]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2246      	movs	r2, #70	@ 0x46
 800bc02:	2101      	movs	r1, #1
 800bc04:	5499      	strb	r1, [r3, r2]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2247      	movs	r2, #71	@ 0x47
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	223d      	movs	r2, #61	@ 0x3d
 800bc12:	2101      	movs	r1, #1
 800bc14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	0018      	movs	r0, r3
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	b002      	add	sp, #8
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	223d      	movs	r2, #61	@ 0x3d
 800bc2c:	5c9b      	ldrb	r3, [r3, r2]
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d001      	beq.n	800bc38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e047      	b.n	800bcc8 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	223d      	movs	r2, #61	@ 0x3d
 800bc3c:	2102      	movs	r1, #2
 800bc3e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	68da      	ldr	r2, [r3, #12]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	430a      	orrs	r2, r1
 800bc4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a1e      	ldr	r2, [pc, #120]	@ (800bcd0 <HAL_TIM_Base_Start_IT+0xb0>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d014      	beq.n	800bc84 <HAL_TIM_Base_Start_IT+0x64>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	2380      	movs	r3, #128	@ 0x80
 800bc60:	05db      	lsls	r3, r3, #23
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d00e      	beq.n	800bc84 <HAL_TIM_Base_Start_IT+0x64>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a1a      	ldr	r2, [pc, #104]	@ (800bcd4 <HAL_TIM_Base_Start_IT+0xb4>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d009      	beq.n	800bc84 <HAL_TIM_Base_Start_IT+0x64>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a18      	ldr	r2, [pc, #96]	@ (800bcd8 <HAL_TIM_Base_Start_IT+0xb8>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d004      	beq.n	800bc84 <HAL_TIM_Base_Start_IT+0x64>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a17      	ldr	r2, [pc, #92]	@ (800bcdc <HAL_TIM_Base_Start_IT+0xbc>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d116      	bne.n	800bcb2 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	4a15      	ldr	r2, [pc, #84]	@ (800bce0 <HAL_TIM_Base_Start_IT+0xc0>)
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2b06      	cmp	r3, #6
 800bc94:	d016      	beq.n	800bcc4 <HAL_TIM_Base_Start_IT+0xa4>
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	2380      	movs	r3, #128	@ 0x80
 800bc9a:	025b      	lsls	r3, r3, #9
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d011      	beq.n	800bcc4 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2101      	movs	r1, #1
 800bcac:	430a      	orrs	r2, r1
 800bcae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcb0:	e008      	b.n	800bcc4 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2101      	movs	r1, #1
 800bcbe:	430a      	orrs	r2, r1
 800bcc0:	601a      	str	r2, [r3, #0]
 800bcc2:	e000      	b.n	800bcc6 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcc4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	0018      	movs	r0, r3
 800bcca:	46bd      	mov	sp, r7
 800bccc:	b004      	add	sp, #16
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	40012c00 	.word	0x40012c00
 800bcd4:	40000400 	.word	0x40000400
 800bcd8:	40000800 	.word	0x40000800
 800bcdc:	40014000 	.word	0x40014000
 800bce0:	00010007 	.word	0x00010007

0800bce4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68da      	ldr	r2, [r3, #12]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	438a      	bics	r2, r1
 800bcfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	6a1b      	ldr	r3, [r3, #32]
 800bd02:	4a0d      	ldr	r2, [pc, #52]	@ (800bd38 <HAL_TIM_Base_Stop_IT+0x54>)
 800bd04:	4013      	ands	r3, r2
 800bd06:	d10d      	bne.n	800bd24 <HAL_TIM_Base_Stop_IT+0x40>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	4a0b      	ldr	r2, [pc, #44]	@ (800bd3c <HAL_TIM_Base_Stop_IT+0x58>)
 800bd10:	4013      	ands	r3, r2
 800bd12:	d107      	bne.n	800bd24 <HAL_TIM_Base_Stop_IT+0x40>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2101      	movs	r1, #1
 800bd20:	438a      	bics	r2, r1
 800bd22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	223d      	movs	r2, #61	@ 0x3d
 800bd28:	2101      	movs	r1, #1
 800bd2a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	0018      	movs	r0, r3
 800bd30:	46bd      	mov	sp, r7
 800bd32:	b002      	add	sp, #8
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	46c0      	nop			@ (mov r8, r8)
 800bd38:	00001111 	.word	0x00001111
 800bd3c:	00000444 	.word	0x00000444

0800bd40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	d021      	beq.n	800bda4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2202      	movs	r2, #2
 800bd64:	4013      	ands	r3, r2
 800bd66:	d01d      	beq.n	800bda4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2203      	movs	r2, #3
 800bd6e:	4252      	negs	r2, r2
 800bd70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	2203      	movs	r2, #3
 800bd80:	4013      	ands	r3, r2
 800bd82:	d004      	beq.n	800bd8e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	0018      	movs	r0, r3
 800bd88:	f000 f8ea 	bl	800bf60 <HAL_TIM_IC_CaptureCallback>
 800bd8c:	e007      	b.n	800bd9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	0018      	movs	r0, r3
 800bd92:	f000 f8dd 	bl	800bf50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	0018      	movs	r0, r3
 800bd9a:	f000 f8e9 	bl	800bf70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2204      	movs	r2, #4
 800bda8:	4013      	ands	r3, r2
 800bdaa:	d022      	beq.n	800bdf2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2204      	movs	r2, #4
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	d01e      	beq.n	800bdf2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2205      	movs	r2, #5
 800bdba:	4252      	negs	r2, r2
 800bdbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2202      	movs	r2, #2
 800bdc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	699a      	ldr	r2, [r3, #24]
 800bdca:	23c0      	movs	r3, #192	@ 0xc0
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4013      	ands	r3, r2
 800bdd0:	d004      	beq.n	800bddc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	f000 f8c3 	bl	800bf60 <HAL_TIM_IC_CaptureCallback>
 800bdda:	e007      	b.n	800bdec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	0018      	movs	r0, r3
 800bde0:	f000 f8b6 	bl	800bf50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	0018      	movs	r0, r3
 800bde8:	f000 f8c2 	bl	800bf70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2208      	movs	r2, #8
 800bdf6:	4013      	ands	r3, r2
 800bdf8:	d021      	beq.n	800be3e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2208      	movs	r2, #8
 800bdfe:	4013      	ands	r3, r2
 800be00:	d01d      	beq.n	800be3e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2209      	movs	r2, #9
 800be08:	4252      	negs	r2, r2
 800be0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2204      	movs	r2, #4
 800be10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	2203      	movs	r2, #3
 800be1a:	4013      	ands	r3, r2
 800be1c:	d004      	beq.n	800be28 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	0018      	movs	r0, r3
 800be22:	f000 f89d 	bl	800bf60 <HAL_TIM_IC_CaptureCallback>
 800be26:	e007      	b.n	800be38 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	0018      	movs	r0, r3
 800be2c:	f000 f890 	bl	800bf50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	0018      	movs	r0, r3
 800be34:	f000 f89c 	bl	800bf70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	2210      	movs	r2, #16
 800be42:	4013      	ands	r3, r2
 800be44:	d022      	beq.n	800be8c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2210      	movs	r2, #16
 800be4a:	4013      	ands	r3, r2
 800be4c:	d01e      	beq.n	800be8c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2211      	movs	r2, #17
 800be54:	4252      	negs	r2, r2
 800be56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2208      	movs	r2, #8
 800be5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	69da      	ldr	r2, [r3, #28]
 800be64:	23c0      	movs	r3, #192	@ 0xc0
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4013      	ands	r3, r2
 800be6a:	d004      	beq.n	800be76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	0018      	movs	r0, r3
 800be70:	f000 f876 	bl	800bf60 <HAL_TIM_IC_CaptureCallback>
 800be74:	e007      	b.n	800be86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	0018      	movs	r0, r3
 800be7a:	f000 f869 	bl	800bf50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	0018      	movs	r0, r3
 800be82:	f000 f875 	bl	800bf70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2201      	movs	r2, #1
 800be90:	4013      	ands	r3, r2
 800be92:	d00c      	beq.n	800beae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2201      	movs	r2, #1
 800be98:	4013      	ands	r3, r2
 800be9a:	d008      	beq.n	800beae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2202      	movs	r2, #2
 800bea2:	4252      	negs	r2, r2
 800bea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	0018      	movs	r0, r3
 800beaa:	f7fc fcf3 	bl	8008894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2280      	movs	r2, #128	@ 0x80
 800beb2:	4013      	ands	r3, r2
 800beb4:	d104      	bne.n	800bec0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	2380      	movs	r3, #128	@ 0x80
 800beba:	019b      	lsls	r3, r3, #6
 800bebc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bebe:	d00b      	beq.n	800bed8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2280      	movs	r2, #128	@ 0x80
 800bec4:	4013      	ands	r3, r2
 800bec6:	d007      	beq.n	800bed8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a1e      	ldr	r2, [pc, #120]	@ (800bf48 <HAL_TIM_IRQHandler+0x208>)
 800bece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	0018      	movs	r0, r3
 800bed4:	f000 f972 	bl	800c1bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	2380      	movs	r3, #128	@ 0x80
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	4013      	ands	r3, r2
 800bee0:	d00b      	beq.n	800befa <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2280      	movs	r2, #128	@ 0x80
 800bee6:	4013      	ands	r3, r2
 800bee8:	d007      	beq.n	800befa <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a17      	ldr	r2, [pc, #92]	@ (800bf4c <HAL_TIM_IRQHandler+0x20c>)
 800bef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	0018      	movs	r0, r3
 800bef6:	f000 f969 	bl	800c1cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	2240      	movs	r2, #64	@ 0x40
 800befe:	4013      	ands	r3, r2
 800bf00:	d00c      	beq.n	800bf1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2240      	movs	r2, #64	@ 0x40
 800bf06:	4013      	ands	r3, r2
 800bf08:	d008      	beq.n	800bf1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2241      	movs	r2, #65	@ 0x41
 800bf10:	4252      	negs	r2, r2
 800bf12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	0018      	movs	r0, r3
 800bf18:	f000 f832 	bl	800bf80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2220      	movs	r2, #32
 800bf20:	4013      	ands	r3, r2
 800bf22:	d00c      	beq.n	800bf3e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2220      	movs	r2, #32
 800bf28:	4013      	ands	r3, r2
 800bf2a:	d008      	beq.n	800bf3e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2221      	movs	r2, #33	@ 0x21
 800bf32:	4252      	negs	r2, r2
 800bf34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	0018      	movs	r0, r3
 800bf3a:	f000 f937 	bl	800c1ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf3e:	46c0      	nop			@ (mov r8, r8)
 800bf40:	46bd      	mov	sp, r7
 800bf42:	b004      	add	sp, #16
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	46c0      	nop			@ (mov r8, r8)
 800bf48:	ffffdf7f 	.word	0xffffdf7f
 800bf4c:	fffffeff 	.word	0xfffffeff

0800bf50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf58:	46c0      	nop			@ (mov r8, r8)
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	b002      	add	sp, #8
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf68:	46c0      	nop			@ (mov r8, r8)
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	b002      	add	sp, #8
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf78:	46c0      	nop			@ (mov r8, r8)
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	b002      	add	sp, #8
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf88:	46c0      	nop			@ (mov r8, r8)
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	b002      	add	sp, #8
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4a3f      	ldr	r2, [pc, #252]	@ (800c0a0 <TIM_Base_SetConfig+0x110>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d00c      	beq.n	800bfc2 <TIM_Base_SetConfig+0x32>
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	2380      	movs	r3, #128	@ 0x80
 800bfac:	05db      	lsls	r3, r3, #23
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d007      	beq.n	800bfc2 <TIM_Base_SetConfig+0x32>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a3b      	ldr	r2, [pc, #236]	@ (800c0a4 <TIM_Base_SetConfig+0x114>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d003      	beq.n	800bfc2 <TIM_Base_SetConfig+0x32>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a3a      	ldr	r2, [pc, #232]	@ (800c0a8 <TIM_Base_SetConfig+0x118>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d108      	bne.n	800bfd4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2270      	movs	r2, #112	@ 0x70
 800bfc6:	4393      	bics	r3, r2
 800bfc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a32      	ldr	r2, [pc, #200]	@ (800c0a0 <TIM_Base_SetConfig+0x110>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d01c      	beq.n	800c016 <TIM_Base_SetConfig+0x86>
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	2380      	movs	r3, #128	@ 0x80
 800bfe0:	05db      	lsls	r3, r3, #23
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d017      	beq.n	800c016 <TIM_Base_SetConfig+0x86>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a2e      	ldr	r2, [pc, #184]	@ (800c0a4 <TIM_Base_SetConfig+0x114>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d013      	beq.n	800c016 <TIM_Base_SetConfig+0x86>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a2d      	ldr	r2, [pc, #180]	@ (800c0a8 <TIM_Base_SetConfig+0x118>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d00f      	beq.n	800c016 <TIM_Base_SetConfig+0x86>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a2c      	ldr	r2, [pc, #176]	@ (800c0ac <TIM_Base_SetConfig+0x11c>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d00b      	beq.n	800c016 <TIM_Base_SetConfig+0x86>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a2b      	ldr	r2, [pc, #172]	@ (800c0b0 <TIM_Base_SetConfig+0x120>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d007      	beq.n	800c016 <TIM_Base_SetConfig+0x86>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a2a      	ldr	r2, [pc, #168]	@ (800c0b4 <TIM_Base_SetConfig+0x124>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d003      	beq.n	800c016 <TIM_Base_SetConfig+0x86>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a29      	ldr	r2, [pc, #164]	@ (800c0b8 <TIM_Base_SetConfig+0x128>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d108      	bne.n	800c028 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4a28      	ldr	r2, [pc, #160]	@ (800c0bc <TIM_Base_SetConfig+0x12c>)
 800c01a:	4013      	ands	r3, r2
 800c01c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	4313      	orrs	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2280      	movs	r2, #128	@ 0x80
 800c02c:	4393      	bics	r3, r2
 800c02e:	001a      	movs	r2, r3
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	4313      	orrs	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	689a      	ldr	r2, [r3, #8]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a13      	ldr	r2, [pc, #76]	@ (800c0a0 <TIM_Base_SetConfig+0x110>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d00b      	beq.n	800c06e <TIM_Base_SetConfig+0xde>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a15      	ldr	r2, [pc, #84]	@ (800c0b0 <TIM_Base_SetConfig+0x120>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d007      	beq.n	800c06e <TIM_Base_SetConfig+0xde>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a14      	ldr	r2, [pc, #80]	@ (800c0b4 <TIM_Base_SetConfig+0x124>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d003      	beq.n	800c06e <TIM_Base_SetConfig+0xde>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a13      	ldr	r2, [pc, #76]	@ (800c0b8 <TIM_Base_SetConfig+0x128>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d103      	bne.n	800c076 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	691a      	ldr	r2, [r3, #16]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	2201      	movs	r2, #1
 800c082:	4013      	ands	r3, r2
 800c084:	2b01      	cmp	r3, #1
 800c086:	d106      	bne.n	800c096 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	691b      	ldr	r3, [r3, #16]
 800c08c:	2201      	movs	r2, #1
 800c08e:	4393      	bics	r3, r2
 800c090:	001a      	movs	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	611a      	str	r2, [r3, #16]
  }
}
 800c096:	46c0      	nop			@ (mov r8, r8)
 800c098:	46bd      	mov	sp, r7
 800c09a:	b004      	add	sp, #16
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	46c0      	nop			@ (mov r8, r8)
 800c0a0:	40012c00 	.word	0x40012c00
 800c0a4:	40000400 	.word	0x40000400
 800c0a8:	40000800 	.word	0x40000800
 800c0ac:	40002000 	.word	0x40002000
 800c0b0:	40014000 	.word	0x40014000
 800c0b4:	40014400 	.word	0x40014400
 800c0b8:	40014800 	.word	0x40014800
 800c0bc:	fffffcff 	.word	0xfffffcff

0800c0c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	223c      	movs	r2, #60	@ 0x3c
 800c0ce:	5c9b      	ldrb	r3, [r3, r2]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d101      	bne.n	800c0d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	e05a      	b.n	800c18e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	223c      	movs	r2, #60	@ 0x3c
 800c0dc:	2101      	movs	r1, #1
 800c0de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	223d      	movs	r2, #61	@ 0x3d
 800c0e4:	2102      	movs	r1, #2
 800c0e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a26      	ldr	r2, [pc, #152]	@ (800c198 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d108      	bne.n	800c114 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	4a25      	ldr	r2, [pc, #148]	@ (800c19c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c106:	4013      	ands	r3, r2
 800c108:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	4313      	orrs	r3, r2
 800c112:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2270      	movs	r2, #112	@ 0x70
 800c118:	4393      	bics	r3, r2
 800c11a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	4313      	orrs	r3, r2
 800c124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a19      	ldr	r2, [pc, #100]	@ (800c198 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d014      	beq.n	800c162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	2380      	movs	r3, #128	@ 0x80
 800c13e:	05db      	lsls	r3, r3, #23
 800c140:	429a      	cmp	r2, r3
 800c142:	d00e      	beq.n	800c162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a15      	ldr	r2, [pc, #84]	@ (800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d009      	beq.n	800c162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a14      	ldr	r2, [pc, #80]	@ (800c1a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d004      	beq.n	800c162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a12      	ldr	r2, [pc, #72]	@ (800c1a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d10c      	bne.n	800c17c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2280      	movs	r2, #128	@ 0x80
 800c166:	4393      	bics	r3, r2
 800c168:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	4313      	orrs	r3, r2
 800c172:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68ba      	ldr	r2, [r7, #8]
 800c17a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	223d      	movs	r2, #61	@ 0x3d
 800c180:	2101      	movs	r1, #1
 800c182:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	223c      	movs	r2, #60	@ 0x3c
 800c188:	2100      	movs	r1, #0
 800c18a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	0018      	movs	r0, r3
 800c190:	46bd      	mov	sp, r7
 800c192:	b004      	add	sp, #16
 800c194:	bd80      	pop	{r7, pc}
 800c196:	46c0      	nop			@ (mov r8, r8)
 800c198:	40012c00 	.word	0x40012c00
 800c19c:	ff0fffff 	.word	0xff0fffff
 800c1a0:	40000400 	.word	0x40000400
 800c1a4:	40000800 	.word	0x40000800
 800c1a8:	40014000 	.word	0x40014000

0800c1ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1b4:	46c0      	nop			@ (mov r8, r8)
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	b002      	add	sp, #8
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1c4:	46c0      	nop			@ (mov r8, r8)
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	b002      	add	sp, #8
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c1d4:	46c0      	nop			@ (mov r8, r8)
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	b002      	add	sp, #8
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c1ea:	4b05      	ldr	r3, [pc, #20]	@ (800c200 <USB_EnableGlobalInt+0x24>)
 800c1ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	0018      	movs	r0, r3
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	b004      	add	sp, #16
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	46c0      	nop			@ (mov r8, r8)
 800c200:	0000bf80 	.word	0x0000bf80

0800c204 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c20c:	4b06      	ldr	r3, [pc, #24]	@ (800c228 <USB_DisableGlobalInt+0x24>)
 800c20e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	43d2      	mvns	r2, r2
 800c218:	401a      	ands	r2, r3
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	0018      	movs	r0, r3
 800c222:	46bd      	mov	sp, r7
 800c224:	b004      	add	sp, #16
 800c226:	bd80      	pop	{r7, pc}
 800c228:	0000bf80 	.word	0x0000bf80

0800c22c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	000a      	movs	r2, r1
 800c236:	1cfb      	adds	r3, r7, #3
 800c238:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800c23a:	1cfb      	adds	r3, r7, #3
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d106      	bne.n	800c250 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	085a      	lsrs	r2, r3, #1
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	641a      	str	r2, [r3, #64]	@ 0x40
 800c24e:	e00d      	b.n	800c26c <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 800c250:	1cfb      	adds	r3, r7, #3
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d107      	bne.n	800c268 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c25c:	2280      	movs	r2, #128	@ 0x80
 800c25e:	0612      	lsls	r2, r2, #24
 800c260:	431a      	orrs	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	641a      	str	r2, [r3, #64]	@ 0x40
 800c266:	e001      	b.n	800c26c <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	e000      	b.n	800c26e <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	0018      	movs	r0, r3
 800c270:	46bd      	mov	sp, r7
 800c272:	b002      	add	sp, #8
 800c274:	bd80      	pop	{r7, pc}

0800c276 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c276:	b084      	sub	sp, #16
 800c278:	b5b0      	push	{r4, r5, r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	2004      	movs	r0, #4
 800c282:	2420      	movs	r4, #32
 800c284:	1900      	adds	r0, r0, r4
 800c286:	19c0      	adds	r0, r0, r7
 800c288:	6001      	str	r1, [r0, #0]
 800c28a:	6042      	str	r2, [r0, #4]
 800c28c:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c298:	2201      	movs	r2, #1
 800c29a:	4393      	bics	r3, r2
 800c29c:	001a      	movs	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800c2a2:	250f      	movs	r5, #15
 800c2a4:	197c      	adds	r4, r7, r5
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	0018      	movs	r0, r3
 800c2ac:	f7ff ffbe 	bl	800c22c <USB_SetCurrentMode>
 800c2b0:	0003      	movs	r3, r0
 800c2b2:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c2ba:	197b      	adds	r3, r7, r5
 800c2bc:	781b      	ldrb	r3, [r3, #0]
}
 800c2be:	0018      	movs	r0, r3
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	b004      	add	sp, #16
 800c2c4:	bcb0      	pop	{r4, r5, r7}
 800c2c6:	bc08      	pop	{r3}
 800c2c8:	b004      	add	sp, #16
 800c2ca:	4718      	bx	r3

0800c2cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b09e      	sub	sp, #120	@ 0x78
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c2d6:	2377      	movs	r3, #119	@ 0x77
 800c2d8:	18fb      	adds	r3, r7, r3
 800c2da:	2200      	movs	r2, #0
 800c2dc:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	18d3      	adds	r3, r2, r3
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4adc      	ldr	r2, [pc, #880]	@ (800c65c <USB_ActivateEndpoint+0x390>)
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	78db      	ldrb	r3, [r3, #3]
 800c2f4:	2b03      	cmp	r3, #3
 800c2f6:	d00e      	beq.n	800c316 <USB_ActivateEndpoint+0x4a>
 800c2f8:	dc19      	bgt.n	800c32e <USB_ActivateEndpoint+0x62>
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d01c      	beq.n	800c338 <USB_ActivateEndpoint+0x6c>
 800c2fe:	dc16      	bgt.n	800c32e <USB_ActivateEndpoint+0x62>
 800c300:	2b00      	cmp	r3, #0
 800c302:	d002      	beq.n	800c30a <USB_ActivateEndpoint+0x3e>
 800c304:	2b01      	cmp	r3, #1
 800c306:	d00c      	beq.n	800c322 <USB_ActivateEndpoint+0x56>
 800c308:	e011      	b.n	800c32e <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c30a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c30c:	2280      	movs	r2, #128	@ 0x80
 800c30e:	0092      	lsls	r2, r2, #2
 800c310:	4313      	orrs	r3, r2
 800c312:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c314:	e011      	b.n	800c33a <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c318:	22c0      	movs	r2, #192	@ 0xc0
 800c31a:	00d2      	lsls	r2, r2, #3
 800c31c:	4313      	orrs	r3, r2
 800c31e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c320:	e00b      	b.n	800c33a <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c322:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c324:	2280      	movs	r2, #128	@ 0x80
 800c326:	00d2      	lsls	r2, r2, #3
 800c328:	4313      	orrs	r3, r2
 800c32a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c32c:	e005      	b.n	800c33a <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800c32e:	2377      	movs	r3, #119	@ 0x77
 800c330:	18fb      	adds	r3, r7, r3
 800c332:	2201      	movs	r2, #1
 800c334:	701a      	strb	r2, [r3, #0]
      break;
 800c336:	e000      	b.n	800c33a <USB_ActivateEndpoint+0x6e>
      break;
 800c338:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	18d3      	adds	r3, r2, r3
 800c344:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c346:	49c6      	ldr	r1, [pc, #792]	@ (800c660 <USB_ActivateEndpoint+0x394>)
 800c348:	430a      	orrs	r2, r1
 800c34a:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	18d3      	adds	r3, r2, r3
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4ac2      	ldr	r2, [pc, #776]	@ (800c664 <USB_ActivateEndpoint+0x398>)
 800c35a:	4013      	ands	r3, r2
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	7812      	ldrb	r2, [r2, #0]
 800c360:	4313      	orrs	r3, r2
 800c362:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	18d3      	adds	r3, r2, r3
 800c36e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c370:	49bb      	ldr	r1, [pc, #748]	@ (800c660 <USB_ActivateEndpoint+0x394>)
 800c372:	430a      	orrs	r2, r1
 800c374:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	7b1b      	ldrb	r3, [r3, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d000      	beq.n	800c380 <USB_ActivateEndpoint+0xb4>
 800c37e:	e155      	b.n	800c62c <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	785b      	ldrb	r3, [r3, #1]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d06e      	beq.n	800c466 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	4ab6      	ldr	r2, [pc, #728]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c390:	4694      	mov	ip, r2
 800c392:	4463      	add	r3, ip
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	00db      	lsls	r3, r3, #3
 800c39c:	49b2      	ldr	r1, [pc, #712]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c39e:	468c      	mov	ip, r1
 800c3a0:	4463      	add	r3, ip
 800c3a2:	0c12      	lsrs	r2, r2, #16
 800c3a4:	0412      	lsls	r2, r2, #16
 800c3a6:	601a      	str	r2, [r3, #0]
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	00db      	lsls	r3, r3, #3
 800c3ae:	4aae      	ldr	r2, [pc, #696]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c3b0:	4694      	mov	ip, r2
 800c3b2:	4463      	add	r3, ip
 800c3b4:	6819      	ldr	r1, [r3, #0]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	88db      	ldrh	r3, [r3, #6]
 800c3ba:	089b      	lsrs	r3, r3, #2
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	009a      	lsls	r2, r3, #2
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	00db      	lsls	r3, r3, #3
 800c3c6:	48a8      	ldr	r0, [pc, #672]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c3c8:	4684      	mov	ip, r0
 800c3ca:	4463      	add	r3, ip
 800c3cc:	430a      	orrs	r2, r1
 800c3ce:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	18d3      	adds	r3, r2, r3
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	61bb      	str	r3, [r7, #24]
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	2240      	movs	r2, #64	@ 0x40
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	d011      	beq.n	800c40a <USB_ActivateEndpoint+0x13e>
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	18d3      	adds	r3, r2, r3
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a9c      	ldr	r2, [pc, #624]	@ (800c664 <USB_ActivateEndpoint+0x398>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	18d3      	adds	r3, r2, r3
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	4999      	ldr	r1, [pc, #612]	@ (800c66c <USB_ActivateEndpoint+0x3a0>)
 800c406:	430a      	orrs	r2, r1
 800c408:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	78db      	ldrb	r3, [r3, #3]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d016      	beq.n	800c440 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	18d3      	adds	r3, r2, r3
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a94      	ldr	r2, [pc, #592]	@ (800c670 <USB_ActivateEndpoint+0x3a4>)
 800c420:	4013      	ands	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2220      	movs	r2, #32
 800c428:	4053      	eors	r3, r2
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	18d3      	adds	r3, r2, r3
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	4989      	ldr	r1, [pc, #548]	@ (800c660 <USB_ActivateEndpoint+0x394>)
 800c43a:	430a      	orrs	r2, r1
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	e261      	b.n	800c904 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	18d3      	adds	r3, r2, r3
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a88      	ldr	r2, [pc, #544]	@ (800c670 <USB_ActivateEndpoint+0x3a4>)
 800c44e:	4013      	ands	r3, r2
 800c450:	613b      	str	r3, [r7, #16]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	18d3      	adds	r3, r2, r3
 800c45c:	693a      	ldr	r2, [r7, #16]
 800c45e:	4980      	ldr	r1, [pc, #512]	@ (800c660 <USB_ActivateEndpoint+0x394>)
 800c460:	430a      	orrs	r2, r1
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	e24e      	b.n	800c904 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	4a7e      	ldr	r2, [pc, #504]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c46e:	4694      	mov	ip, r2
 800c470:	4463      	add	r3, ip
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	00db      	lsls	r3, r3, #3
 800c47a:	497b      	ldr	r1, [pc, #492]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c47c:	468c      	mov	ip, r1
 800c47e:	4463      	add	r3, ip
 800c480:	0c12      	lsrs	r2, r2, #16
 800c482:	0412      	lsls	r2, r2, #16
 800c484:	605a      	str	r2, [r3, #4]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	00db      	lsls	r3, r3, #3
 800c48c:	4a76      	ldr	r2, [pc, #472]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c48e:	4694      	mov	ip, r2
 800c490:	4463      	add	r3, ip
 800c492:	6859      	ldr	r1, [r3, #4]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	88db      	ldrh	r3, [r3, #6]
 800c498:	089b      	lsrs	r3, r3, #2
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	009a      	lsls	r2, r3, #2
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	00db      	lsls	r3, r3, #3
 800c4a4:	4870      	ldr	r0, [pc, #448]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c4a6:	4684      	mov	ip, r0
 800c4a8:	4463      	add	r3, ip
 800c4aa:	430a      	orrs	r2, r1
 800c4ac:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	4a6c      	ldr	r2, [pc, #432]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c4b6:	4694      	mov	ip, r2
 800c4b8:	4463      	add	r3, ip
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	00db      	lsls	r3, r3, #3
 800c4c2:	4969      	ldr	r1, [pc, #420]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c4c4:	468c      	mov	ip, r1
 800c4c6:	4463      	add	r3, ip
 800c4c8:	0192      	lsls	r2, r2, #6
 800c4ca:	0992      	lsrs	r2, r2, #6
 800c4cc:	605a      	str	r2, [r3, #4]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	691b      	ldr	r3, [r3, #16]
 800c4d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4d4:	d920      	bls.n	800c518 <USB_ActivateEndpoint+0x24c>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	095b      	lsrs	r3, r3, #5
 800c4dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	221f      	movs	r2, #31
 800c4e4:	4013      	ands	r3, r2
 800c4e6:	d102      	bne.n	800c4ee <USB_ActivateEndpoint+0x222>
 800c4e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	4a5c      	ldr	r2, [pc, #368]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c4f6:	4694      	mov	ip, r2
 800c4f8:	4463      	add	r3, ip
 800c4fa:	685a      	ldr	r2, [r3, #4]
 800c4fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4fe:	069b      	lsls	r3, r3, #26
 800c500:	431a      	orrs	r2, r3
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	00db      	lsls	r3, r3, #3
 800c508:	4957      	ldr	r1, [pc, #348]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c50a:	468c      	mov	ip, r1
 800c50c:	4463      	add	r3, ip
 800c50e:	2180      	movs	r1, #128	@ 0x80
 800c510:	0609      	lsls	r1, r1, #24
 800c512:	430a      	orrs	r2, r1
 800c514:	605a      	str	r2, [r3, #4]
 800c516:	e032      	b.n	800c57e <USB_ActivateEndpoint+0x2b2>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d111      	bne.n	800c544 <USB_ActivateEndpoint+0x278>
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	00db      	lsls	r3, r3, #3
 800c526:	4a50      	ldr	r2, [pc, #320]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c528:	4694      	mov	ip, r2
 800c52a:	4463      	add	r3, ip
 800c52c:	685a      	ldr	r2, [r3, #4]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	494c      	ldr	r1, [pc, #304]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c536:	468c      	mov	ip, r1
 800c538:	4463      	add	r3, ip
 800c53a:	2180      	movs	r1, #128	@ 0x80
 800c53c:	0609      	lsls	r1, r1, #24
 800c53e:	430a      	orrs	r2, r1
 800c540:	605a      	str	r2, [r3, #4]
 800c542:	e01c      	b.n	800c57e <USB_ActivateEndpoint+0x2b2>
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	085b      	lsrs	r3, r3, #1
 800c54a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	2201      	movs	r2, #1
 800c552:	4013      	ands	r3, r2
 800c554:	d002      	beq.n	800c55c <USB_ActivateEndpoint+0x290>
 800c556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c558:	3301      	adds	r3, #1
 800c55a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	4a41      	ldr	r2, [pc, #260]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c564:	4694      	mov	ip, r2
 800c566:	4463      	add	r3, ip
 800c568:	6859      	ldr	r1, [r3, #4]
 800c56a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c56c:	069a      	lsls	r2, r3, #26
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	483c      	ldr	r0, [pc, #240]	@ (800c668 <USB_ActivateEndpoint+0x39c>)
 800c576:	4684      	mov	ip, r0
 800c578:	4463      	add	r3, ip
 800c57a:	430a      	orrs	r2, r1
 800c57c:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	18d3      	adds	r3, r2, r3
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c58c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c58e:	2380      	movs	r3, #128	@ 0x80
 800c590:	01db      	lsls	r3, r3, #7
 800c592:	4013      	ands	r3, r2
 800c594:	d011      	beq.n	800c5ba <USB_ActivateEndpoint+0x2ee>
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	18d3      	adds	r3, r2, r3
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a30      	ldr	r2, [pc, #192]	@ (800c664 <USB_ActivateEndpoint+0x398>)
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	18d3      	adds	r3, r2, r3
 800c5b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5b4:	492f      	ldr	r1, [pc, #188]	@ (800c674 <USB_ActivateEndpoint+0x3a8>)
 800c5b6:	430a      	orrs	r2, r1
 800c5b8:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d11c      	bne.n	800c5fc <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	18d3      	adds	r3, r2, r3
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a2a      	ldr	r2, [pc, #168]	@ (800c678 <USB_ActivateEndpoint+0x3ac>)
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	61fb      	str	r3, [r7, #28]
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	2280      	movs	r2, #128	@ 0x80
 800c5d8:	0152      	lsls	r2, r2, #5
 800c5da:	4053      	eors	r3, r2
 800c5dc:	61fb      	str	r3, [r7, #28]
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	2280      	movs	r2, #128	@ 0x80
 800c5e2:	0192      	lsls	r2, r2, #6
 800c5e4:	4053      	eors	r3, r2
 800c5e6:	61fb      	str	r3, [r7, #28]
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	18d3      	adds	r3, r2, r3
 800c5f2:	69fa      	ldr	r2, [r7, #28]
 800c5f4:	491a      	ldr	r1, [pc, #104]	@ (800c660 <USB_ActivateEndpoint+0x394>)
 800c5f6:	430a      	orrs	r2, r1
 800c5f8:	601a      	str	r2, [r3, #0]
 800c5fa:	e183      	b.n	800c904 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	18d3      	adds	r3, r2, r3
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a1b      	ldr	r2, [pc, #108]	@ (800c678 <USB_ActivateEndpoint+0x3ac>)
 800c60a:	4013      	ands	r3, r2
 800c60c:	623b      	str	r3, [r7, #32]
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	2280      	movs	r2, #128	@ 0x80
 800c612:	0192      	lsls	r2, r2, #6
 800c614:	4053      	eors	r3, r2
 800c616:	623b      	str	r3, [r7, #32]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	18d3      	adds	r3, r2, r3
 800c622:	6a3a      	ldr	r2, [r7, #32]
 800c624:	490e      	ldr	r1, [pc, #56]	@ (800c660 <USB_ActivateEndpoint+0x394>)
 800c626:	430a      	orrs	r2, r1
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	e16b      	b.n	800c904 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	78db      	ldrb	r3, [r3, #3]
 800c630:	2b02      	cmp	r3, #2
 800c632:	d125      	bne.n	800c680 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	18d3      	adds	r3, r2, r3
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a08      	ldr	r2, [pc, #32]	@ (800c664 <USB_ActivateEndpoint+0x398>)
 800c642:	4013      	ands	r3, r2
 800c644:	663b      	str	r3, [r7, #96]	@ 0x60
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	18d3      	adds	r3, r2, r3
 800c650:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c652:	490a      	ldr	r1, [pc, #40]	@ (800c67c <USB_ActivateEndpoint+0x3b0>)
 800c654:	430a      	orrs	r2, r1
 800c656:	601a      	str	r2, [r3, #0]
 800c658:	e024      	b.n	800c6a4 <USB_ActivateEndpoint+0x3d8>
 800c65a:	46c0      	nop			@ (mov r8, r8)
 800c65c:	07ff898f 	.word	0x07ff898f
 800c660:	00008080 	.word	0x00008080
 800c664:	07ff8f8f 	.word	0x07ff8f8f
 800c668:	40009800 	.word	0x40009800
 800c66c:	000080c0 	.word	0x000080c0
 800c670:	07ff8fbf 	.word	0x07ff8fbf
 800c674:	0000c080 	.word	0x0000c080
 800c678:	07ffbf8f 	.word	0x07ffbf8f
 800c67c:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	18d3      	adds	r3, r2, r3
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4aa1      	ldr	r2, [pc, #644]	@ (800c914 <USB_ActivateEndpoint+0x648>)
 800c68e:	4013      	ands	r3, r2
 800c690:	667b      	str	r3, [r7, #100]	@ 0x64
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	18d3      	adds	r3, r2, r3
 800c69c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c69e:	499e      	ldr	r1, [pc, #632]	@ (800c918 <USB_ActivateEndpoint+0x64c>)
 800c6a0:	430a      	orrs	r2, r1
 800c6a2:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	00db      	lsls	r3, r3, #3
 800c6aa:	4a9c      	ldr	r2, [pc, #624]	@ (800c91c <USB_ActivateEndpoint+0x650>)
 800c6ac:	4694      	mov	ip, r2
 800c6ae:	4463      	add	r3, ip
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	00db      	lsls	r3, r3, #3
 800c6b8:	4998      	ldr	r1, [pc, #608]	@ (800c91c <USB_ActivateEndpoint+0x650>)
 800c6ba:	468c      	mov	ip, r1
 800c6bc:	4463      	add	r3, ip
 800c6be:	0c12      	lsrs	r2, r2, #16
 800c6c0:	0412      	lsls	r2, r2, #16
 800c6c2:	601a      	str	r2, [r3, #0]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	4a94      	ldr	r2, [pc, #592]	@ (800c91c <USB_ActivateEndpoint+0x650>)
 800c6cc:	4694      	mov	ip, r2
 800c6ce:	4463      	add	r3, ip
 800c6d0:	6819      	ldr	r1, [r3, #0]
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	891b      	ldrh	r3, [r3, #8]
 800c6d6:	089b      	lsrs	r3, r3, #2
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	009a      	lsls	r2, r3, #2
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	00db      	lsls	r3, r3, #3
 800c6e2:	488e      	ldr	r0, [pc, #568]	@ (800c91c <USB_ActivateEndpoint+0x650>)
 800c6e4:	4684      	mov	ip, r0
 800c6e6:	4463      	add	r3, ip
 800c6e8:	430a      	orrs	r2, r1
 800c6ea:	601a      	str	r2, [r3, #0]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	4a8a      	ldr	r2, [pc, #552]	@ (800c91c <USB_ActivateEndpoint+0x650>)
 800c6f4:	4694      	mov	ip, r2
 800c6f6:	4463      	add	r3, ip
 800c6f8:	685a      	ldr	r2, [r3, #4]
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	4986      	ldr	r1, [pc, #536]	@ (800c91c <USB_ActivateEndpoint+0x650>)
 800c702:	468c      	mov	ip, r1
 800c704:	4463      	add	r3, ip
 800c706:	0c12      	lsrs	r2, r2, #16
 800c708:	0412      	lsls	r2, r2, #16
 800c70a:	605a      	str	r2, [r3, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	00db      	lsls	r3, r3, #3
 800c712:	4a82      	ldr	r2, [pc, #520]	@ (800c91c <USB_ActivateEndpoint+0x650>)
 800c714:	4694      	mov	ip, r2
 800c716:	4463      	add	r3, ip
 800c718:	6859      	ldr	r1, [r3, #4]
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	895b      	ldrh	r3, [r3, #10]
 800c71e:	089b      	lsrs	r3, r3, #2
 800c720:	b29b      	uxth	r3, r3
 800c722:	009a      	lsls	r2, r3, #2
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	00db      	lsls	r3, r3, #3
 800c72a:	487c      	ldr	r0, [pc, #496]	@ (800c91c <USB_ActivateEndpoint+0x650>)
 800c72c:	4684      	mov	ip, r0
 800c72e:	4463      	add	r3, ip
 800c730:	430a      	orrs	r2, r1
 800c732:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	785b      	ldrb	r3, [r3, #1]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d169      	bne.n	800c810 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	18d3      	adds	r3, r2, r3
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	643b      	str	r3, [r7, #64]	@ 0x40
 800c74a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c74c:	2380      	movs	r3, #128	@ 0x80
 800c74e:	01db      	lsls	r3, r3, #7
 800c750:	4013      	ands	r3, r2
 800c752:	d011      	beq.n	800c778 <USB_ActivateEndpoint+0x4ac>
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	18d3      	adds	r3, r2, r3
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a6f      	ldr	r2, [pc, #444]	@ (800c920 <USB_ActivateEndpoint+0x654>)
 800c762:	4013      	ands	r3, r2
 800c764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	18d3      	adds	r3, r2, r3
 800c770:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c772:	496c      	ldr	r1, [pc, #432]	@ (800c924 <USB_ActivateEndpoint+0x658>)
 800c774:	430a      	orrs	r2, r1
 800c776:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	18d3      	adds	r3, r2, r3
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c788:	2240      	movs	r2, #64	@ 0x40
 800c78a:	4013      	ands	r3, r2
 800c78c:	d011      	beq.n	800c7b2 <USB_ActivateEndpoint+0x4e6>
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	18d3      	adds	r3, r2, r3
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a61      	ldr	r2, [pc, #388]	@ (800c920 <USB_ActivateEndpoint+0x654>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	18d3      	adds	r3, r2, r3
 800c7aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7ac:	495e      	ldr	r1, [pc, #376]	@ (800c928 <USB_ActivateEndpoint+0x65c>)
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	18d3      	adds	r3, r2, r3
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a5b      	ldr	r2, [pc, #364]	@ (800c92c <USB_ActivateEndpoint+0x660>)
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c6:	2280      	movs	r2, #128	@ 0x80
 800c7c8:	0152      	lsls	r2, r2, #5
 800c7ca:	4053      	eors	r3, r2
 800c7cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d0:	2280      	movs	r2, #128	@ 0x80
 800c7d2:	0192      	lsls	r2, r2, #6
 800c7d4:	4053      	eors	r3, r2
 800c7d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	18d3      	adds	r3, r2, r3
 800c7e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7e4:	494c      	ldr	r1, [pc, #304]	@ (800c918 <USB_ActivateEndpoint+0x64c>)
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	18d3      	adds	r3, r2, r3
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a4e      	ldr	r2, [pc, #312]	@ (800c930 <USB_ActivateEndpoint+0x664>)
 800c7f8:	4013      	ands	r3, r2
 800c7fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	18d3      	adds	r3, r2, r3
 800c806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c808:	4943      	ldr	r1, [pc, #268]	@ (800c918 <USB_ActivateEndpoint+0x64c>)
 800c80a:	430a      	orrs	r2, r1
 800c80c:	601a      	str	r2, [r3, #0]
 800c80e:	e079      	b.n	800c904 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	18d3      	adds	r3, r2, r3
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c81e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c820:	2380      	movs	r3, #128	@ 0x80
 800c822:	01db      	lsls	r3, r3, #7
 800c824:	4013      	ands	r3, r2
 800c826:	d011      	beq.n	800c84c <USB_ActivateEndpoint+0x580>
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	18d3      	adds	r3, r2, r3
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a3a      	ldr	r2, [pc, #232]	@ (800c920 <USB_ActivateEndpoint+0x654>)
 800c836:	4013      	ands	r3, r2
 800c838:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	18d3      	adds	r3, r2, r3
 800c844:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c846:	4937      	ldr	r1, [pc, #220]	@ (800c924 <USB_ActivateEndpoint+0x658>)
 800c848:	430a      	orrs	r2, r1
 800c84a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	18d3      	adds	r3, r2, r3
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	657b      	str	r3, [r7, #84]	@ 0x54
 800c85a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c85c:	2240      	movs	r2, #64	@ 0x40
 800c85e:	4013      	ands	r3, r2
 800c860:	d011      	beq.n	800c886 <USB_ActivateEndpoint+0x5ba>
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	18d3      	adds	r3, r2, r3
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a2c      	ldr	r2, [pc, #176]	@ (800c920 <USB_ActivateEndpoint+0x654>)
 800c870:	4013      	ands	r3, r2
 800c872:	653b      	str	r3, [r7, #80]	@ 0x50
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	18d3      	adds	r3, r2, r3
 800c87e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c880:	4929      	ldr	r1, [pc, #164]	@ (800c928 <USB_ActivateEndpoint+0x65c>)
 800c882:	430a      	orrs	r2, r1
 800c884:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	78db      	ldrb	r3, [r3, #3]
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d016      	beq.n	800c8bc <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	18d3      	adds	r3, r2, r3
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a25      	ldr	r2, [pc, #148]	@ (800c930 <USB_ActivateEndpoint+0x664>)
 800c89c:	4013      	ands	r3, r2
 800c89e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8a2:	2220      	movs	r2, #32
 800c8a4:	4053      	eors	r3, r2
 800c8a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	18d3      	adds	r3, r2, r3
 800c8b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8b4:	4918      	ldr	r1, [pc, #96]	@ (800c918 <USB_ActivateEndpoint+0x64c>)
 800c8b6:	430a      	orrs	r2, r1
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	e011      	b.n	800c8e0 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	18d3      	adds	r3, r2, r3
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a19      	ldr	r2, [pc, #100]	@ (800c930 <USB_ActivateEndpoint+0x664>)
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	18d3      	adds	r3, r2, r3
 800c8d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c8da:	490f      	ldr	r1, [pc, #60]	@ (800c918 <USB_ActivateEndpoint+0x64c>)
 800c8dc:	430a      	orrs	r2, r1
 800c8de:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	18d3      	adds	r3, r2, r3
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a0f      	ldr	r2, [pc, #60]	@ (800c92c <USB_ActivateEndpoint+0x660>)
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	18d3      	adds	r3, r2, r3
 800c8fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8fe:	4906      	ldr	r1, [pc, #24]	@ (800c918 <USB_ActivateEndpoint+0x64c>)
 800c900:	430a      	orrs	r2, r1
 800c902:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c904:	2377      	movs	r3, #119	@ 0x77
 800c906:	18fb      	adds	r3, r7, r3
 800c908:	781b      	ldrb	r3, [r3, #0]
}
 800c90a:	0018      	movs	r0, r3
 800c90c:	46bd      	mov	sp, r7
 800c90e:	b01e      	add	sp, #120	@ 0x78
 800c910:	bd80      	pop	{r7, pc}
 800c912:	46c0      	nop			@ (mov r8, r8)
 800c914:	07ff8e8f 	.word	0x07ff8e8f
 800c918:	00008080 	.word	0x00008080
 800c91c:	40009800 	.word	0x40009800
 800c920:	07ff8f8f 	.word	0x07ff8f8f
 800c924:	0000c080 	.word	0x0000c080
 800c928:	000080c0 	.word	0x000080c0
 800c92c:	07ffbf8f 	.word	0x07ffbf8f
 800c930:	07ff8fbf 	.word	0x07ff8fbf

0800c934 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b096      	sub	sp, #88	@ 0x58
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	7b1b      	ldrb	r3, [r3, #12]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d164      	bne.n	800ca10 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	785b      	ldrb	r3, [r3, #1]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d02f      	beq.n	800c9ae <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	18d3      	adds	r3, r2, r3
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	613b      	str	r3, [r7, #16]
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	2240      	movs	r2, #64	@ 0x40
 800c960:	4013      	ands	r3, r2
 800c962:	d011      	beq.n	800c988 <USB_DeactivateEndpoint+0x54>
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	18d3      	adds	r3, r2, r3
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a9d      	ldr	r2, [pc, #628]	@ (800cbe8 <USB_DeactivateEndpoint+0x2b4>)
 800c972:	4013      	ands	r3, r2
 800c974:	60fb      	str	r3, [r7, #12]
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	18d3      	adds	r3, r2, r3
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	499a      	ldr	r1, [pc, #616]	@ (800cbec <USB_DeactivateEndpoint+0x2b8>)
 800c984:	430a      	orrs	r2, r1
 800c986:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	18d3      	adds	r3, r2, r3
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a96      	ldr	r2, [pc, #600]	@ (800cbf0 <USB_DeactivateEndpoint+0x2bc>)
 800c996:	4013      	ands	r3, r2
 800c998:	60bb      	str	r3, [r7, #8]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	18d3      	adds	r3, r2, r3
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	4993      	ldr	r1, [pc, #588]	@ (800cbf4 <USB_DeactivateEndpoint+0x2c0>)
 800c9a8:	430a      	orrs	r2, r1
 800c9aa:	601a      	str	r2, [r3, #0]
 800c9ac:	e117      	b.n	800cbde <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	18d3      	adds	r3, r2, r3
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	61fb      	str	r3, [r7, #28]
 800c9bc:	69fa      	ldr	r2, [r7, #28]
 800c9be:	2380      	movs	r3, #128	@ 0x80
 800c9c0:	01db      	lsls	r3, r3, #7
 800c9c2:	4013      	ands	r3, r2
 800c9c4:	d011      	beq.n	800c9ea <USB_DeactivateEndpoint+0xb6>
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	18d3      	adds	r3, r2, r3
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a85      	ldr	r2, [pc, #532]	@ (800cbe8 <USB_DeactivateEndpoint+0x2b4>)
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	61bb      	str	r3, [r7, #24]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	18d3      	adds	r3, r2, r3
 800c9e2:	69ba      	ldr	r2, [r7, #24]
 800c9e4:	4984      	ldr	r1, [pc, #528]	@ (800cbf8 <USB_DeactivateEndpoint+0x2c4>)
 800c9e6:	430a      	orrs	r2, r1
 800c9e8:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	18d3      	adds	r3, r2, r3
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a81      	ldr	r2, [pc, #516]	@ (800cbfc <USB_DeactivateEndpoint+0x2c8>)
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	617b      	str	r3, [r7, #20]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	18d3      	adds	r3, r2, r3
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	497a      	ldr	r1, [pc, #488]	@ (800cbf4 <USB_DeactivateEndpoint+0x2c0>)
 800ca0a:	430a      	orrs	r2, r1
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	e0e6      	b.n	800cbde <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	785b      	ldrb	r3, [r3, #1]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d171      	bne.n	800cafc <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	18d3      	adds	r3, r2, r3
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca28:	2380      	movs	r3, #128	@ 0x80
 800ca2a:	01db      	lsls	r3, r3, #7
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	d011      	beq.n	800ca54 <USB_DeactivateEndpoint+0x120>
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	18d3      	adds	r3, r2, r3
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a6a      	ldr	r2, [pc, #424]	@ (800cbe8 <USB_DeactivateEndpoint+0x2b4>)
 800ca3e:	4013      	ands	r3, r2
 800ca40:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	18d3      	adds	r3, r2, r3
 800ca4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca4e:	496a      	ldr	r1, [pc, #424]	@ (800cbf8 <USB_DeactivateEndpoint+0x2c4>)
 800ca50:	430a      	orrs	r2, r1
 800ca52:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	18d3      	adds	r3, r2, r3
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca64:	2240      	movs	r2, #64	@ 0x40
 800ca66:	4013      	ands	r3, r2
 800ca68:	d011      	beq.n	800ca8e <USB_DeactivateEndpoint+0x15a>
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	18d3      	adds	r3, r2, r3
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a5c      	ldr	r2, [pc, #368]	@ (800cbe8 <USB_DeactivateEndpoint+0x2b4>)
 800ca78:	4013      	ands	r3, r2
 800ca7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	18d3      	adds	r3, r2, r3
 800ca86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca88:	4958      	ldr	r1, [pc, #352]	@ (800cbec <USB_DeactivateEndpoint+0x2b8>)
 800ca8a:	430a      	orrs	r2, r1
 800ca8c:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	18d3      	adds	r3, r2, r3
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a53      	ldr	r2, [pc, #332]	@ (800cbe8 <USB_DeactivateEndpoint+0x2b4>)
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	18d3      	adds	r3, r2, r3
 800caaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800caac:	494f      	ldr	r1, [pc, #316]	@ (800cbec <USB_DeactivateEndpoint+0x2b8>)
 800caae:	430a      	orrs	r2, r1
 800cab0:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	18d3      	adds	r3, r2, r3
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a4f      	ldr	r2, [pc, #316]	@ (800cbfc <USB_DeactivateEndpoint+0x2c8>)
 800cac0:	4013      	ands	r3, r2
 800cac2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	18d3      	adds	r3, r2, r3
 800cace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cad0:	4948      	ldr	r1, [pc, #288]	@ (800cbf4 <USB_DeactivateEndpoint+0x2c0>)
 800cad2:	430a      	orrs	r2, r1
 800cad4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	18d3      	adds	r3, r2, r3
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a43      	ldr	r2, [pc, #268]	@ (800cbf0 <USB_DeactivateEndpoint+0x2bc>)
 800cae4:	4013      	ands	r3, r2
 800cae6:	623b      	str	r3, [r7, #32]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	18d3      	adds	r3, r2, r3
 800caf2:	6a3a      	ldr	r2, [r7, #32]
 800caf4:	493f      	ldr	r1, [pc, #252]	@ (800cbf4 <USB_DeactivateEndpoint+0x2c0>)
 800caf6:	430a      	orrs	r2, r1
 800caf8:	601a      	str	r2, [r3, #0]
 800cafa:	e070      	b.n	800cbde <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	18d3      	adds	r3, r2, r3
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cb0c:	2380      	movs	r3, #128	@ 0x80
 800cb0e:	01db      	lsls	r3, r3, #7
 800cb10:	4013      	ands	r3, r2
 800cb12:	d011      	beq.n	800cb38 <USB_DeactivateEndpoint+0x204>
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	18d3      	adds	r3, r2, r3
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a31      	ldr	r2, [pc, #196]	@ (800cbe8 <USB_DeactivateEndpoint+0x2b4>)
 800cb22:	4013      	ands	r3, r2
 800cb24:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	18d3      	adds	r3, r2, r3
 800cb30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb32:	4931      	ldr	r1, [pc, #196]	@ (800cbf8 <USB_DeactivateEndpoint+0x2c4>)
 800cb34:	430a      	orrs	r2, r1
 800cb36:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	18d3      	adds	r3, r2, r3
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb48:	2240      	movs	r2, #64	@ 0x40
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	d011      	beq.n	800cb72 <USB_DeactivateEndpoint+0x23e>
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	18d3      	adds	r3, r2, r3
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a23      	ldr	r2, [pc, #140]	@ (800cbe8 <USB_DeactivateEndpoint+0x2b4>)
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	18d3      	adds	r3, r2, r3
 800cb6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb6c:	491f      	ldr	r1, [pc, #124]	@ (800cbec <USB_DeactivateEndpoint+0x2b8>)
 800cb6e:	430a      	orrs	r2, r1
 800cb70:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	18d3      	adds	r3, r2, r3
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a1a      	ldr	r2, [pc, #104]	@ (800cbe8 <USB_DeactivateEndpoint+0x2b4>)
 800cb80:	4013      	ands	r3, r2
 800cb82:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	18d3      	adds	r3, r2, r3
 800cb8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb90:	4919      	ldr	r1, [pc, #100]	@ (800cbf8 <USB_DeactivateEndpoint+0x2c4>)
 800cb92:	430a      	orrs	r2, r1
 800cb94:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	18d3      	adds	r3, r2, r3
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a13      	ldr	r2, [pc, #76]	@ (800cbf0 <USB_DeactivateEndpoint+0x2bc>)
 800cba4:	4013      	ands	r3, r2
 800cba6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	18d3      	adds	r3, r2, r3
 800cbb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbb4:	490f      	ldr	r1, [pc, #60]	@ (800cbf4 <USB_DeactivateEndpoint+0x2c0>)
 800cbb6:	430a      	orrs	r2, r1
 800cbb8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	18d3      	adds	r3, r2, r3
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a0d      	ldr	r2, [pc, #52]	@ (800cbfc <USB_DeactivateEndpoint+0x2c8>)
 800cbc8:	4013      	ands	r3, r2
 800cbca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	18d3      	adds	r3, r2, r3
 800cbd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cbd8:	4906      	ldr	r1, [pc, #24]	@ (800cbf4 <USB_DeactivateEndpoint+0x2c0>)
 800cbda:	430a      	orrs	r2, r1
 800cbdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	0018      	movs	r0, r3
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	b016      	add	sp, #88	@ 0x58
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	07ff8f8f 	.word	0x07ff8f8f
 800cbec:	000080c0 	.word	0x000080c0
 800cbf0:	07ff8fbf 	.word	0x07ff8fbf
 800cbf4:	00008080 	.word	0x00008080
 800cbf8:	0000c080 	.word	0x0000c080
 800cbfc:	07ffbf8f 	.word	0x07ffbf8f

0800cc00 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800cc00:	b590      	push	{r4, r7, lr}
 800cc02:	b097      	sub	sp, #92	@ 0x5c
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	785b      	ldrb	r3, [r3, #1]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d001      	beq.n	800cc16 <USB_EPStartXfer+0x16>
 800cc12:	f000 fcbf 	bl	800d594 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	699a      	ldr	r2, [r3, #24]
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	691b      	ldr	r3, [r3, #16]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d903      	bls.n	800cc2a <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc28:	e002      	b.n	800cc30 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	699b      	ldr	r3, [r3, #24]
 800cc2e:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	7b1b      	ldrb	r3, [r3, #12]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d12b      	bne.n	800cc90 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	6959      	ldr	r1, [r3, #20]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	88da      	ldrh	r2, [r3, #6]
 800cc40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f001 f843 	bl	800dcd0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	00db      	lsls	r3, r3, #3
 800cc50:	4ace      	ldr	r2, [pc, #824]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cc52:	4694      	mov	ip, r2
 800cc54:	4463      	add	r3, ip
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	49cb      	ldr	r1, [pc, #812]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cc60:	468c      	mov	ip, r1
 800cc62:	4463      	add	r3, ip
 800cc64:	0412      	lsls	r2, r2, #16
 800cc66:	0c12      	lsrs	r2, r2, #16
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	4ac6      	ldr	r2, [pc, #792]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cc72:	4694      	mov	ip, r2
 800cc74:	4463      	add	r3, ip
 800cc76:	6819      	ldr	r1, [r3, #0]
 800cc78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc7a:	041a      	lsls	r2, r3, #16
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	00db      	lsls	r3, r3, #3
 800cc82:	48c2      	ldr	r0, [pc, #776]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cc84:	4684      	mov	ip, r0
 800cc86:	4463      	add	r3, ip
 800cc88:	430a      	orrs	r2, r1
 800cc8a:	601a      	str	r2, [r3, #0]
 800cc8c:	f000 fc67 	bl	800d55e <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	78db      	ldrb	r3, [r3, #3]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d000      	beq.n	800cc9a <USB_EPStartXfer+0x9a>
 800cc98:	e31a      	b.n	800d2d0 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	6a1a      	ldr	r2, [r3, #32]
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	691b      	ldr	r3, [r3, #16]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d800      	bhi.n	800cca8 <USB_EPStartXfer+0xa8>
 800cca6:	e2c7      	b.n	800d238 <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	18d3      	adds	r3, r2, r3
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4ab6      	ldr	r2, [pc, #728]	@ (800cf90 <USB_EPStartXfer+0x390>)
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	613b      	str	r3, [r7, #16]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	18d3      	adds	r3, r2, r3
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	49b3      	ldr	r1, [pc, #716]	@ (800cf94 <USB_EPStartXfer+0x394>)
 800ccc8:	430a      	orrs	r2, r1
 800ccca:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	6a1a      	ldr	r2, [r3, #32]
 800ccd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccd2:	1ad2      	subs	r2, r2, r3
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	18d3      	adds	r3, r2, r3
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2240      	movs	r2, #64	@ 0x40
 800cce6:	4013      	ands	r3, r2
 800cce8:	d100      	bne.n	800ccec <USB_EPStartXfer+0xec>
 800ccea:	e155      	b.n	800cf98 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	785b      	ldrb	r3, [r3, #1]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d162      	bne.n	800cdba <USB_EPStartXfer+0x1ba>
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	00db      	lsls	r3, r3, #3
 800ccfa:	4aa4      	ldr	r2, [pc, #656]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800ccfc:	4694      	mov	ip, r2
 800ccfe:	4463      	add	r3, ip
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	00db      	lsls	r3, r3, #3
 800cd08:	49a0      	ldr	r1, [pc, #640]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cd0a:	468c      	mov	ip, r1
 800cd0c:	4463      	add	r3, ip
 800cd0e:	0192      	lsls	r2, r2, #6
 800cd10:	0992      	lsrs	r2, r2, #6
 800cd12:	605a      	str	r2, [r3, #4]
 800cd14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd16:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd18:	d91e      	bls.n	800cd58 <USB_EPStartXfer+0x158>
 800cd1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd1c:	095b      	lsrs	r3, r3, #5
 800cd1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd22:	221f      	movs	r2, #31
 800cd24:	4013      	ands	r3, r2
 800cd26:	d102      	bne.n	800cd2e <USB_EPStartXfer+0x12e>
 800cd28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	4a95      	ldr	r2, [pc, #596]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cd36:	4694      	mov	ip, r2
 800cd38:	4463      	add	r3, ip
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd3e:	069b      	lsls	r3, r3, #26
 800cd40:	431a      	orrs	r2, r3
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	00db      	lsls	r3, r3, #3
 800cd48:	4990      	ldr	r1, [pc, #576]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cd4a:	468c      	mov	ip, r1
 800cd4c:	4463      	add	r3, ip
 800cd4e:	2180      	movs	r1, #128	@ 0x80
 800cd50:	0609      	lsls	r1, r1, #24
 800cd52:	430a      	orrs	r2, r1
 800cd54:	605a      	str	r2, [r3, #4]
 800cd56:	e055      	b.n	800ce04 <USB_EPStartXfer+0x204>
 800cd58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d111      	bne.n	800cd82 <USB_EPStartXfer+0x182>
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	00db      	lsls	r3, r3, #3
 800cd64:	4a89      	ldr	r2, [pc, #548]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cd66:	4694      	mov	ip, r2
 800cd68:	4463      	add	r3, ip
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	4986      	ldr	r1, [pc, #536]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cd74:	468c      	mov	ip, r1
 800cd76:	4463      	add	r3, ip
 800cd78:	2180      	movs	r1, #128	@ 0x80
 800cd7a:	0609      	lsls	r1, r1, #24
 800cd7c:	430a      	orrs	r2, r1
 800cd7e:	605a      	str	r2, [r3, #4]
 800cd80:	e040      	b.n	800ce04 <USB_EPStartXfer+0x204>
 800cd82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd84:	085b      	lsrs	r3, r3, #1
 800cd86:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	d002      	beq.n	800cd96 <USB_EPStartXfer+0x196>
 800cd90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd92:	3301      	adds	r3, #1
 800cd94:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	00db      	lsls	r3, r3, #3
 800cd9c:	4a7b      	ldr	r2, [pc, #492]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cd9e:	4694      	mov	ip, r2
 800cda0:	4463      	add	r3, ip
 800cda2:	6859      	ldr	r1, [r3, #4]
 800cda4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cda6:	069a      	lsls	r2, r3, #26
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	4877      	ldr	r0, [pc, #476]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cdb0:	4684      	mov	ip, r0
 800cdb2:	4463      	add	r3, ip
 800cdb4:	430a      	orrs	r2, r1
 800cdb6:	605a      	str	r2, [r3, #4]
 800cdb8:	e024      	b.n	800ce04 <USB_EPStartXfer+0x204>
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	785b      	ldrb	r3, [r3, #1]
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d120      	bne.n	800ce04 <USB_EPStartXfer+0x204>
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	4a70      	ldr	r2, [pc, #448]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cdca:	4694      	mov	ip, r2
 800cdcc:	4463      	add	r3, ip
 800cdce:	685a      	ldr	r2, [r3, #4]
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	00db      	lsls	r3, r3, #3
 800cdd6:	496d      	ldr	r1, [pc, #436]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cdd8:	468c      	mov	ip, r1
 800cdda:	4463      	add	r3, ip
 800cddc:	0412      	lsls	r2, r2, #16
 800cdde:	0c12      	lsrs	r2, r2, #16
 800cde0:	605a      	str	r2, [r3, #4]
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	4a68      	ldr	r2, [pc, #416]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cdea:	4694      	mov	ip, r2
 800cdec:	4463      	add	r3, ip
 800cdee:	6859      	ldr	r1, [r3, #4]
 800cdf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdf2:	041a      	lsls	r2, r3, #16
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	00db      	lsls	r3, r3, #3
 800cdfa:	4864      	ldr	r0, [pc, #400]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cdfc:	4684      	mov	ip, r0
 800cdfe:	4463      	add	r3, ip
 800ce00:	430a      	orrs	r2, r1
 800ce02:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ce04:	201a      	movs	r0, #26
 800ce06:	183b      	adds	r3, r7, r0
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	8952      	ldrh	r2, [r2, #10]
 800ce0c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	6959      	ldr	r1, [r3, #20]
 800ce12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce14:	b29c      	uxth	r4, r3
 800ce16:	183b      	adds	r3, r7, r0
 800ce18:	881a      	ldrh	r2, [r3, #0]
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	0023      	movs	r3, r4
 800ce1e:	f000 ff57 	bl	800dcd0 <USB_WritePMA>
            ep->xfer_buff += len;
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	695a      	ldr	r2, [r3, #20]
 800ce26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce28:	18d2      	adds	r2, r2, r3
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	6a1a      	ldr	r2, [r3, #32]
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	691b      	ldr	r3, [r3, #16]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d906      	bls.n	800ce48 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	6a1a      	ldr	r2, [r3, #32]
 800ce3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce40:	1ad2      	subs	r2, r2, r3
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	621a      	str	r2, [r3, #32]
 800ce46:	e005      	b.n	800ce54 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	6a1b      	ldr	r3, [r3, #32]
 800ce4c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	2200      	movs	r2, #0
 800ce52:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	785b      	ldrb	r3, [r3, #1]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d162      	bne.n	800cf22 <USB_EPStartXfer+0x322>
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	00db      	lsls	r3, r3, #3
 800ce62:	4a4a      	ldr	r2, [pc, #296]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800ce64:	4694      	mov	ip, r2
 800ce66:	4463      	add	r3, ip
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	00db      	lsls	r3, r3, #3
 800ce70:	4946      	ldr	r1, [pc, #280]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800ce72:	468c      	mov	ip, r1
 800ce74:	4463      	add	r3, ip
 800ce76:	0192      	lsls	r2, r2, #6
 800ce78:	0992      	lsrs	r2, r2, #6
 800ce7a:	601a      	str	r2, [r3, #0]
 800ce7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce7e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce80:	d91e      	bls.n	800cec0 <USB_EPStartXfer+0x2c0>
 800ce82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce84:	095b      	lsrs	r3, r3, #5
 800ce86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce8a:	221f      	movs	r2, #31
 800ce8c:	4013      	ands	r3, r2
 800ce8e:	d102      	bne.n	800ce96 <USB_EPStartXfer+0x296>
 800ce90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce92:	3b01      	subs	r3, #1
 800ce94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	00db      	lsls	r3, r3, #3
 800ce9c:	4a3b      	ldr	r2, [pc, #236]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800ce9e:	4694      	mov	ip, r2
 800cea0:	4463      	add	r3, ip
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cea6:	069b      	lsls	r3, r3, #26
 800cea8:	431a      	orrs	r2, r3
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	00db      	lsls	r3, r3, #3
 800ceb0:	4936      	ldr	r1, [pc, #216]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800ceb2:	468c      	mov	ip, r1
 800ceb4:	4463      	add	r3, ip
 800ceb6:	2180      	movs	r1, #128	@ 0x80
 800ceb8:	0609      	lsls	r1, r1, #24
 800ceba:	430a      	orrs	r2, r1
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	e055      	b.n	800cf6c <USB_EPStartXfer+0x36c>
 800cec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d111      	bne.n	800ceea <USB_EPStartXfer+0x2ea>
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	00db      	lsls	r3, r3, #3
 800cecc:	4a2f      	ldr	r2, [pc, #188]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cece:	4694      	mov	ip, r2
 800ced0:	4463      	add	r3, ip
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	00db      	lsls	r3, r3, #3
 800ceda:	492c      	ldr	r1, [pc, #176]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cedc:	468c      	mov	ip, r1
 800cede:	4463      	add	r3, ip
 800cee0:	2180      	movs	r1, #128	@ 0x80
 800cee2:	0609      	lsls	r1, r1, #24
 800cee4:	430a      	orrs	r2, r1
 800cee6:	601a      	str	r2, [r3, #0]
 800cee8:	e040      	b.n	800cf6c <USB_EPStartXfer+0x36c>
 800ceea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ceec:	085b      	lsrs	r3, r3, #1
 800ceee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cef2:	2201      	movs	r2, #1
 800cef4:	4013      	ands	r3, r2
 800cef6:	d002      	beq.n	800cefe <USB_EPStartXfer+0x2fe>
 800cef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cefa:	3301      	adds	r3, #1
 800cefc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	00db      	lsls	r3, r3, #3
 800cf04:	4a21      	ldr	r2, [pc, #132]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cf06:	4694      	mov	ip, r2
 800cf08:	4463      	add	r3, ip
 800cf0a:	6819      	ldr	r1, [r3, #0]
 800cf0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf0e:	069a      	lsls	r2, r3, #26
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	00db      	lsls	r3, r3, #3
 800cf16:	481d      	ldr	r0, [pc, #116]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cf18:	4684      	mov	ip, r0
 800cf1a:	4463      	add	r3, ip
 800cf1c:	430a      	orrs	r2, r1
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	e024      	b.n	800cf6c <USB_EPStartXfer+0x36c>
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	785b      	ldrb	r3, [r3, #1]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d120      	bne.n	800cf6c <USB_EPStartXfer+0x36c>
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	00db      	lsls	r3, r3, #3
 800cf30:	4a16      	ldr	r2, [pc, #88]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cf32:	4694      	mov	ip, r2
 800cf34:	4463      	add	r3, ip
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	00db      	lsls	r3, r3, #3
 800cf3e:	4913      	ldr	r1, [pc, #76]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cf40:	468c      	mov	ip, r1
 800cf42:	4463      	add	r3, ip
 800cf44:	0412      	lsls	r2, r2, #16
 800cf46:	0c12      	lsrs	r2, r2, #16
 800cf48:	601a      	str	r2, [r3, #0]
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	00db      	lsls	r3, r3, #3
 800cf50:	4a0e      	ldr	r2, [pc, #56]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cf52:	4694      	mov	ip, r2
 800cf54:	4463      	add	r3, ip
 800cf56:	6819      	ldr	r1, [r3, #0]
 800cf58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf5a:	041a      	lsls	r2, r3, #16
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	480a      	ldr	r0, [pc, #40]	@ (800cf8c <USB_EPStartXfer+0x38c>)
 800cf64:	4684      	mov	ip, r0
 800cf66:	4463      	add	r3, ip
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cf6c:	201a      	movs	r0, #26
 800cf6e:	183b      	adds	r3, r7, r0
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	8912      	ldrh	r2, [r2, #8]
 800cf74:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	6959      	ldr	r1, [r3, #20]
 800cf7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf7c:	b29c      	uxth	r4, r3
 800cf7e:	183b      	adds	r3, r7, r0
 800cf80:	881a      	ldrh	r2, [r3, #0]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	0023      	movs	r3, r4
 800cf86:	f000 fea3 	bl	800dcd0 <USB_WritePMA>
 800cf8a:	e2e8      	b.n	800d55e <USB_EPStartXfer+0x95e>
 800cf8c:	40009800 	.word	0x40009800
 800cf90:	07ff8f8f 	.word	0x07ff8f8f
 800cf94:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	785b      	ldrb	r3, [r3, #1]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d162      	bne.n	800d066 <USB_EPStartXfer+0x466>
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	00db      	lsls	r3, r3, #3
 800cfa6:	4ac7      	ldr	r2, [pc, #796]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800cfa8:	4694      	mov	ip, r2
 800cfaa:	4463      	add	r3, ip
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	49c3      	ldr	r1, [pc, #780]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800cfb6:	468c      	mov	ip, r1
 800cfb8:	4463      	add	r3, ip
 800cfba:	0192      	lsls	r2, r2, #6
 800cfbc:	0992      	lsrs	r2, r2, #6
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfc2:	2b3e      	cmp	r3, #62	@ 0x3e
 800cfc4:	d91e      	bls.n	800d004 <USB_EPStartXfer+0x404>
 800cfc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfc8:	095b      	lsrs	r3, r3, #5
 800cfca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfce:	221f      	movs	r2, #31
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	d102      	bne.n	800cfda <USB_EPStartXfer+0x3da>
 800cfd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	00db      	lsls	r3, r3, #3
 800cfe0:	4ab8      	ldr	r2, [pc, #736]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800cfe2:	4694      	mov	ip, r2
 800cfe4:	4463      	add	r3, ip
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfea:	069b      	lsls	r3, r3, #26
 800cfec:	431a      	orrs	r2, r3
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	00db      	lsls	r3, r3, #3
 800cff4:	49b3      	ldr	r1, [pc, #716]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800cff6:	468c      	mov	ip, r1
 800cff8:	4463      	add	r3, ip
 800cffa:	2180      	movs	r1, #128	@ 0x80
 800cffc:	0609      	lsls	r1, r1, #24
 800cffe:	430a      	orrs	r2, r1
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	e055      	b.n	800d0b0 <USB_EPStartXfer+0x4b0>
 800d004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d006:	2b00      	cmp	r3, #0
 800d008:	d111      	bne.n	800d02e <USB_EPStartXfer+0x42e>
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	00db      	lsls	r3, r3, #3
 800d010:	4aac      	ldr	r2, [pc, #688]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d012:	4694      	mov	ip, r2
 800d014:	4463      	add	r3, ip
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	00db      	lsls	r3, r3, #3
 800d01e:	49a9      	ldr	r1, [pc, #676]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d020:	468c      	mov	ip, r1
 800d022:	4463      	add	r3, ip
 800d024:	2180      	movs	r1, #128	@ 0x80
 800d026:	0609      	lsls	r1, r1, #24
 800d028:	430a      	orrs	r2, r1
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	e040      	b.n	800d0b0 <USB_EPStartXfer+0x4b0>
 800d02e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d030:	085b      	lsrs	r3, r3, #1
 800d032:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d036:	2201      	movs	r2, #1
 800d038:	4013      	ands	r3, r2
 800d03a:	d002      	beq.n	800d042 <USB_EPStartXfer+0x442>
 800d03c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d03e:	3301      	adds	r3, #1
 800d040:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	00db      	lsls	r3, r3, #3
 800d048:	4a9e      	ldr	r2, [pc, #632]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d04a:	4694      	mov	ip, r2
 800d04c:	4463      	add	r3, ip
 800d04e:	6819      	ldr	r1, [r3, #0]
 800d050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d052:	069a      	lsls	r2, r3, #26
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	00db      	lsls	r3, r3, #3
 800d05a:	489a      	ldr	r0, [pc, #616]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d05c:	4684      	mov	ip, r0
 800d05e:	4463      	add	r3, ip
 800d060:	430a      	orrs	r2, r1
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	e024      	b.n	800d0b0 <USB_EPStartXfer+0x4b0>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	785b      	ldrb	r3, [r3, #1]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d120      	bne.n	800d0b0 <USB_EPStartXfer+0x4b0>
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	4a93      	ldr	r2, [pc, #588]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d076:	4694      	mov	ip, r2
 800d078:	4463      	add	r3, ip
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	00db      	lsls	r3, r3, #3
 800d082:	4990      	ldr	r1, [pc, #576]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d084:	468c      	mov	ip, r1
 800d086:	4463      	add	r3, ip
 800d088:	0412      	lsls	r2, r2, #16
 800d08a:	0c12      	lsrs	r2, r2, #16
 800d08c:	601a      	str	r2, [r3, #0]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	4a8b      	ldr	r2, [pc, #556]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d096:	4694      	mov	ip, r2
 800d098:	4463      	add	r3, ip
 800d09a:	6819      	ldr	r1, [r3, #0]
 800d09c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d09e:	041a      	lsls	r2, r3, #16
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	4887      	ldr	r0, [pc, #540]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d0a8:	4684      	mov	ip, r0
 800d0aa:	4463      	add	r3, ip
 800d0ac:	430a      	orrs	r2, r1
 800d0ae:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d0b0:	201a      	movs	r0, #26
 800d0b2:	183b      	adds	r3, r7, r0
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	8912      	ldrh	r2, [r2, #8]
 800d0b8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	6959      	ldr	r1, [r3, #20]
 800d0be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0c0:	b29c      	uxth	r4, r3
 800d0c2:	183b      	adds	r3, r7, r0
 800d0c4:	881a      	ldrh	r2, [r3, #0]
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	0023      	movs	r3, r4
 800d0ca:	f000 fe01 	bl	800dcd0 <USB_WritePMA>
            ep->xfer_buff += len;
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	695a      	ldr	r2, [r3, #20]
 800d0d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0d4:	18d2      	adds	r2, r2, r3
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	6a1a      	ldr	r2, [r3, #32]
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d906      	bls.n	800d0f4 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	6a1a      	ldr	r2, [r3, #32]
 800d0ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0ec:	1ad2      	subs	r2, r2, r3
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	621a      	str	r2, [r3, #32]
 800d0f2:	e005      	b.n	800d100 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	6a1b      	ldr	r3, [r3, #32]
 800d0f8:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	785b      	ldrb	r3, [r3, #1]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d162      	bne.n	800d1ce <USB_EPStartXfer+0x5ce>
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	4a6d      	ldr	r2, [pc, #436]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d110:	4694      	mov	ip, r2
 800d112:	4463      	add	r3, ip
 800d114:	685a      	ldr	r2, [r3, #4]
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	00db      	lsls	r3, r3, #3
 800d11c:	4969      	ldr	r1, [pc, #420]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d11e:	468c      	mov	ip, r1
 800d120:	4463      	add	r3, ip
 800d122:	0192      	lsls	r2, r2, #6
 800d124:	0992      	lsrs	r2, r2, #6
 800d126:	605a      	str	r2, [r3, #4]
 800d128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d12a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d12c:	d91e      	bls.n	800d16c <USB_EPStartXfer+0x56c>
 800d12e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d130:	095b      	lsrs	r3, r3, #5
 800d132:	647b      	str	r3, [r7, #68]	@ 0x44
 800d134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d136:	221f      	movs	r2, #31
 800d138:	4013      	ands	r3, r2
 800d13a:	d102      	bne.n	800d142 <USB_EPStartXfer+0x542>
 800d13c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d13e:	3b01      	subs	r3, #1
 800d140:	647b      	str	r3, [r7, #68]	@ 0x44
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	4a5e      	ldr	r2, [pc, #376]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d14a:	4694      	mov	ip, r2
 800d14c:	4463      	add	r3, ip
 800d14e:	685a      	ldr	r2, [r3, #4]
 800d150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d152:	069b      	lsls	r3, r3, #26
 800d154:	431a      	orrs	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	4959      	ldr	r1, [pc, #356]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d15e:	468c      	mov	ip, r1
 800d160:	4463      	add	r3, ip
 800d162:	2180      	movs	r1, #128	@ 0x80
 800d164:	0609      	lsls	r1, r1, #24
 800d166:	430a      	orrs	r2, r1
 800d168:	605a      	str	r2, [r3, #4]
 800d16a:	e055      	b.n	800d218 <USB_EPStartXfer+0x618>
 800d16c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d111      	bne.n	800d196 <USB_EPStartXfer+0x596>
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	4a52      	ldr	r2, [pc, #328]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d17a:	4694      	mov	ip, r2
 800d17c:	4463      	add	r3, ip
 800d17e:	685a      	ldr	r2, [r3, #4]
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	494f      	ldr	r1, [pc, #316]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d188:	468c      	mov	ip, r1
 800d18a:	4463      	add	r3, ip
 800d18c:	2180      	movs	r1, #128	@ 0x80
 800d18e:	0609      	lsls	r1, r1, #24
 800d190:	430a      	orrs	r2, r1
 800d192:	605a      	str	r2, [r3, #4]
 800d194:	e040      	b.n	800d218 <USB_EPStartXfer+0x618>
 800d196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d198:	085b      	lsrs	r3, r3, #1
 800d19a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d19c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d19e:	2201      	movs	r2, #1
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	d002      	beq.n	800d1aa <USB_EPStartXfer+0x5aa>
 800d1a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	00db      	lsls	r3, r3, #3
 800d1b0:	4a44      	ldr	r2, [pc, #272]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d1b2:	4694      	mov	ip, r2
 800d1b4:	4463      	add	r3, ip
 800d1b6:	6859      	ldr	r1, [r3, #4]
 800d1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1ba:	069a      	lsls	r2, r3, #26
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	00db      	lsls	r3, r3, #3
 800d1c2:	4840      	ldr	r0, [pc, #256]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d1c4:	4684      	mov	ip, r0
 800d1c6:	4463      	add	r3, ip
 800d1c8:	430a      	orrs	r2, r1
 800d1ca:	605a      	str	r2, [r3, #4]
 800d1cc:	e024      	b.n	800d218 <USB_EPStartXfer+0x618>
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	785b      	ldrb	r3, [r3, #1]
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d120      	bne.n	800d218 <USB_EPStartXfer+0x618>
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	4a39      	ldr	r2, [pc, #228]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d1de:	4694      	mov	ip, r2
 800d1e0:	4463      	add	r3, ip
 800d1e2:	685a      	ldr	r2, [r3, #4]
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	00db      	lsls	r3, r3, #3
 800d1ea:	4936      	ldr	r1, [pc, #216]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d1ec:	468c      	mov	ip, r1
 800d1ee:	4463      	add	r3, ip
 800d1f0:	0412      	lsls	r2, r2, #16
 800d1f2:	0c12      	lsrs	r2, r2, #16
 800d1f4:	605a      	str	r2, [r3, #4]
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	4a31      	ldr	r2, [pc, #196]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d1fe:	4694      	mov	ip, r2
 800d200:	4463      	add	r3, ip
 800d202:	6859      	ldr	r1, [r3, #4]
 800d204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d206:	041a      	lsls	r2, r3, #16
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	482d      	ldr	r0, [pc, #180]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d210:	4684      	mov	ip, r0
 800d212:	4463      	add	r3, ip
 800d214:	430a      	orrs	r2, r1
 800d216:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800d218:	201a      	movs	r0, #26
 800d21a:	183b      	adds	r3, r7, r0
 800d21c:	683a      	ldr	r2, [r7, #0]
 800d21e:	8952      	ldrh	r2, [r2, #10]
 800d220:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	6959      	ldr	r1, [r3, #20]
 800d226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d228:	b29c      	uxth	r4, r3
 800d22a:	183b      	adds	r3, r7, r0
 800d22c:	881a      	ldrh	r2, [r3, #0]
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	0023      	movs	r3, r4
 800d232:	f000 fd4d 	bl	800dcd0 <USB_WritePMA>
 800d236:	e192      	b.n	800d55e <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	6a1b      	ldr	r3, [r3, #32]
 800d23c:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	18d3      	adds	r3, r2, r3
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a1f      	ldr	r2, [pc, #124]	@ (800d2c8 <USB_EPStartXfer+0x6c8>)
 800d24c:	4013      	ands	r3, r2
 800d24e:	617b      	str	r3, [r7, #20]
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	18d3      	adds	r3, r2, r3
 800d25a:	697a      	ldr	r2, [r7, #20]
 800d25c:	491b      	ldr	r1, [pc, #108]	@ (800d2cc <USB_EPStartXfer+0x6cc>)
 800d25e:	430a      	orrs	r2, r1
 800d260:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	4a16      	ldr	r2, [pc, #88]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d26a:	4694      	mov	ip, r2
 800d26c:	4463      	add	r3, ip
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	00db      	lsls	r3, r3, #3
 800d276:	4913      	ldr	r1, [pc, #76]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d278:	468c      	mov	ip, r1
 800d27a:	4463      	add	r3, ip
 800d27c:	0412      	lsls	r2, r2, #16
 800d27e:	0c12      	lsrs	r2, r2, #16
 800d280:	601a      	str	r2, [r3, #0]
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	00db      	lsls	r3, r3, #3
 800d288:	4a0e      	ldr	r2, [pc, #56]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d28a:	4694      	mov	ip, r2
 800d28c:	4463      	add	r3, ip
 800d28e:	6819      	ldr	r1, [r3, #0]
 800d290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d292:	041a      	lsls	r2, r3, #16
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	00db      	lsls	r3, r3, #3
 800d29a:	480a      	ldr	r0, [pc, #40]	@ (800d2c4 <USB_EPStartXfer+0x6c4>)
 800d29c:	4684      	mov	ip, r0
 800d29e:	4463      	add	r3, ip
 800d2a0:	430a      	orrs	r2, r1
 800d2a2:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d2a4:	201a      	movs	r0, #26
 800d2a6:	183b      	adds	r3, r7, r0
 800d2a8:	683a      	ldr	r2, [r7, #0]
 800d2aa:	8912      	ldrh	r2, [r2, #8]
 800d2ac:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	6959      	ldr	r1, [r3, #20]
 800d2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2b4:	b29c      	uxth	r4, r3
 800d2b6:	183b      	adds	r3, r7, r0
 800d2b8:	881a      	ldrh	r2, [r3, #0]
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	0023      	movs	r3, r4
 800d2be:	f000 fd07 	bl	800dcd0 <USB_WritePMA>
 800d2c2:	e14c      	b.n	800d55e <USB_EPStartXfer+0x95e>
 800d2c4:	40009800 	.word	0x40009800
 800d2c8:	07ff8e8f 	.word	0x07ff8e8f
 800d2cc:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	6a1a      	ldr	r2, [r3, #32]
 800d2d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2d6:	1ad2      	subs	r2, r2, r3
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	18d3      	adds	r3, r2, r3
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2240      	movs	r2, #64	@ 0x40
 800d2ea:	4013      	ands	r3, r2
 800d2ec:	d100      	bne.n	800d2f0 <USB_EPStartXfer+0x6f0>
 800d2ee:	e09b      	b.n	800d428 <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	785b      	ldrb	r3, [r3, #1]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d162      	bne.n	800d3be <USB_EPStartXfer+0x7be>
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	00db      	lsls	r3, r3, #3
 800d2fe:	4ad6      	ldr	r2, [pc, #856]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d300:	4694      	mov	ip, r2
 800d302:	4463      	add	r3, ip
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	00db      	lsls	r3, r3, #3
 800d30c:	49d2      	ldr	r1, [pc, #840]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d30e:	468c      	mov	ip, r1
 800d310:	4463      	add	r3, ip
 800d312:	0192      	lsls	r2, r2, #6
 800d314:	0992      	lsrs	r2, r2, #6
 800d316:	605a      	str	r2, [r3, #4]
 800d318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d31a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d31c:	d91e      	bls.n	800d35c <USB_EPStartXfer+0x75c>
 800d31e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d320:	095b      	lsrs	r3, r3, #5
 800d322:	643b      	str	r3, [r7, #64]	@ 0x40
 800d324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d326:	221f      	movs	r2, #31
 800d328:	4013      	ands	r3, r2
 800d32a:	d102      	bne.n	800d332 <USB_EPStartXfer+0x732>
 800d32c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d32e:	3b01      	subs	r3, #1
 800d330:	643b      	str	r3, [r7, #64]	@ 0x40
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	00db      	lsls	r3, r3, #3
 800d338:	4ac7      	ldr	r2, [pc, #796]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d33a:	4694      	mov	ip, r2
 800d33c:	4463      	add	r3, ip
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d342:	069b      	lsls	r3, r3, #26
 800d344:	431a      	orrs	r2, r3
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	00db      	lsls	r3, r3, #3
 800d34c:	49c2      	ldr	r1, [pc, #776]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d34e:	468c      	mov	ip, r1
 800d350:	4463      	add	r3, ip
 800d352:	2180      	movs	r1, #128	@ 0x80
 800d354:	0609      	lsls	r1, r1, #24
 800d356:	430a      	orrs	r2, r1
 800d358:	605a      	str	r2, [r3, #4]
 800d35a:	e055      	b.n	800d408 <USB_EPStartXfer+0x808>
 800d35c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d111      	bne.n	800d386 <USB_EPStartXfer+0x786>
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	00db      	lsls	r3, r3, #3
 800d368:	4abb      	ldr	r2, [pc, #748]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d36a:	4694      	mov	ip, r2
 800d36c:	4463      	add	r3, ip
 800d36e:	685a      	ldr	r2, [r3, #4]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	49b8      	ldr	r1, [pc, #736]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d378:	468c      	mov	ip, r1
 800d37a:	4463      	add	r3, ip
 800d37c:	2180      	movs	r1, #128	@ 0x80
 800d37e:	0609      	lsls	r1, r1, #24
 800d380:	430a      	orrs	r2, r1
 800d382:	605a      	str	r2, [r3, #4]
 800d384:	e040      	b.n	800d408 <USB_EPStartXfer+0x808>
 800d386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d388:	085b      	lsrs	r3, r3, #1
 800d38a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d38c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d38e:	2201      	movs	r2, #1
 800d390:	4013      	ands	r3, r2
 800d392:	d002      	beq.n	800d39a <USB_EPStartXfer+0x79a>
 800d394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d396:	3301      	adds	r3, #1
 800d398:	643b      	str	r3, [r7, #64]	@ 0x40
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	4aad      	ldr	r2, [pc, #692]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d3a2:	4694      	mov	ip, r2
 800d3a4:	4463      	add	r3, ip
 800d3a6:	6859      	ldr	r1, [r3, #4]
 800d3a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3aa:	069a      	lsls	r2, r3, #26
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	00db      	lsls	r3, r3, #3
 800d3b2:	48a9      	ldr	r0, [pc, #676]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d3b4:	4684      	mov	ip, r0
 800d3b6:	4463      	add	r3, ip
 800d3b8:	430a      	orrs	r2, r1
 800d3ba:	605a      	str	r2, [r3, #4]
 800d3bc:	e024      	b.n	800d408 <USB_EPStartXfer+0x808>
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	785b      	ldrb	r3, [r3, #1]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d120      	bne.n	800d408 <USB_EPStartXfer+0x808>
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	00db      	lsls	r3, r3, #3
 800d3cc:	4aa2      	ldr	r2, [pc, #648]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d3ce:	4694      	mov	ip, r2
 800d3d0:	4463      	add	r3, ip
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	00db      	lsls	r3, r3, #3
 800d3da:	499f      	ldr	r1, [pc, #636]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d3dc:	468c      	mov	ip, r1
 800d3de:	4463      	add	r3, ip
 800d3e0:	0412      	lsls	r2, r2, #16
 800d3e2:	0c12      	lsrs	r2, r2, #16
 800d3e4:	605a      	str	r2, [r3, #4]
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	00db      	lsls	r3, r3, #3
 800d3ec:	4a9a      	ldr	r2, [pc, #616]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d3ee:	4694      	mov	ip, r2
 800d3f0:	4463      	add	r3, ip
 800d3f2:	6859      	ldr	r1, [r3, #4]
 800d3f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3f6:	041a      	lsls	r2, r3, #16
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	00db      	lsls	r3, r3, #3
 800d3fe:	4896      	ldr	r0, [pc, #600]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d400:	4684      	mov	ip, r0
 800d402:	4463      	add	r3, ip
 800d404:	430a      	orrs	r2, r1
 800d406:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800d408:	201a      	movs	r0, #26
 800d40a:	183b      	adds	r3, r7, r0
 800d40c:	683a      	ldr	r2, [r7, #0]
 800d40e:	8952      	ldrh	r2, [r2, #10]
 800d410:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	6959      	ldr	r1, [r3, #20]
 800d416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d418:	b29c      	uxth	r4, r3
 800d41a:	183b      	adds	r3, r7, r0
 800d41c:	881a      	ldrh	r2, [r3, #0]
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	0023      	movs	r3, r4
 800d422:	f000 fc55 	bl	800dcd0 <USB_WritePMA>
 800d426:	e09a      	b.n	800d55e <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	785b      	ldrb	r3, [r3, #1]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d162      	bne.n	800d4f6 <USB_EPStartXfer+0x8f6>
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	00db      	lsls	r3, r3, #3
 800d436:	4a88      	ldr	r2, [pc, #544]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d438:	4694      	mov	ip, r2
 800d43a:	4463      	add	r3, ip
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	00db      	lsls	r3, r3, #3
 800d444:	4984      	ldr	r1, [pc, #528]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d446:	468c      	mov	ip, r1
 800d448:	4463      	add	r3, ip
 800d44a:	0192      	lsls	r2, r2, #6
 800d44c:	0992      	lsrs	r2, r2, #6
 800d44e:	601a      	str	r2, [r3, #0]
 800d450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d452:	2b3e      	cmp	r3, #62	@ 0x3e
 800d454:	d91e      	bls.n	800d494 <USB_EPStartXfer+0x894>
 800d456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d458:	095b      	lsrs	r3, r3, #5
 800d45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d45c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d45e:	221f      	movs	r2, #31
 800d460:	4013      	ands	r3, r2
 800d462:	d102      	bne.n	800d46a <USB_EPStartXfer+0x86a>
 800d464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d466:	3b01      	subs	r3, #1
 800d468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	4a79      	ldr	r2, [pc, #484]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d472:	4694      	mov	ip, r2
 800d474:	4463      	add	r3, ip
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d47a:	069b      	lsls	r3, r3, #26
 800d47c:	431a      	orrs	r2, r3
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	4974      	ldr	r1, [pc, #464]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d486:	468c      	mov	ip, r1
 800d488:	4463      	add	r3, ip
 800d48a:	2180      	movs	r1, #128	@ 0x80
 800d48c:	0609      	lsls	r1, r1, #24
 800d48e:	430a      	orrs	r2, r1
 800d490:	601a      	str	r2, [r3, #0]
 800d492:	e055      	b.n	800d540 <USB_EPStartXfer+0x940>
 800d494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d496:	2b00      	cmp	r3, #0
 800d498:	d111      	bne.n	800d4be <USB_EPStartXfer+0x8be>
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	4a6d      	ldr	r2, [pc, #436]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d4a2:	4694      	mov	ip, r2
 800d4a4:	4463      	add	r3, ip
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	00db      	lsls	r3, r3, #3
 800d4ae:	496a      	ldr	r1, [pc, #424]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d4b0:	468c      	mov	ip, r1
 800d4b2:	4463      	add	r3, ip
 800d4b4:	2180      	movs	r1, #128	@ 0x80
 800d4b6:	0609      	lsls	r1, r1, #24
 800d4b8:	430a      	orrs	r2, r1
 800d4ba:	601a      	str	r2, [r3, #0]
 800d4bc:	e040      	b.n	800d540 <USB_EPStartXfer+0x940>
 800d4be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4c0:	085b      	lsrs	r3, r3, #1
 800d4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	4013      	ands	r3, r2
 800d4ca:	d002      	beq.n	800d4d2 <USB_EPStartXfer+0x8d2>
 800d4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	00db      	lsls	r3, r3, #3
 800d4d8:	4a5f      	ldr	r2, [pc, #380]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d4da:	4694      	mov	ip, r2
 800d4dc:	4463      	add	r3, ip
 800d4de:	6819      	ldr	r1, [r3, #0]
 800d4e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e2:	069a      	lsls	r2, r3, #26
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	00db      	lsls	r3, r3, #3
 800d4ea:	485b      	ldr	r0, [pc, #364]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d4ec:	4684      	mov	ip, r0
 800d4ee:	4463      	add	r3, ip
 800d4f0:	430a      	orrs	r2, r1
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	e024      	b.n	800d540 <USB_EPStartXfer+0x940>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	785b      	ldrb	r3, [r3, #1]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d120      	bne.n	800d540 <USB_EPStartXfer+0x940>
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	00db      	lsls	r3, r3, #3
 800d504:	4a54      	ldr	r2, [pc, #336]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d506:	4694      	mov	ip, r2
 800d508:	4463      	add	r3, ip
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	00db      	lsls	r3, r3, #3
 800d512:	4951      	ldr	r1, [pc, #324]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d514:	468c      	mov	ip, r1
 800d516:	4463      	add	r3, ip
 800d518:	0412      	lsls	r2, r2, #16
 800d51a:	0c12      	lsrs	r2, r2, #16
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	00db      	lsls	r3, r3, #3
 800d524:	4a4c      	ldr	r2, [pc, #304]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d526:	4694      	mov	ip, r2
 800d528:	4463      	add	r3, ip
 800d52a:	6819      	ldr	r1, [r3, #0]
 800d52c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d52e:	041a      	lsls	r2, r3, #16
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	00db      	lsls	r3, r3, #3
 800d536:	4848      	ldr	r0, [pc, #288]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d538:	4684      	mov	ip, r0
 800d53a:	4463      	add	r3, ip
 800d53c:	430a      	orrs	r2, r1
 800d53e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d540:	201a      	movs	r0, #26
 800d542:	183b      	adds	r3, r7, r0
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	8912      	ldrh	r2, [r2, #8]
 800d548:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	6959      	ldr	r1, [r3, #20]
 800d54e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d550:	b29c      	uxth	r4, r3
 800d552:	183b      	adds	r3, r7, r0
 800d554:	881a      	ldrh	r2, [r3, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	0023      	movs	r3, r4
 800d55a:	f000 fbb9 	bl	800dcd0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	18d3      	adds	r3, r2, r3
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a3c      	ldr	r2, [pc, #240]	@ (800d65c <USB_EPStartXfer+0xa5c>)
 800d56c:	4013      	ands	r3, r2
 800d56e:	60fb      	str	r3, [r7, #12]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2210      	movs	r2, #16
 800d574:	4053      	eors	r3, r2
 800d576:	60fb      	str	r3, [r7, #12]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2220      	movs	r2, #32
 800d57c:	4053      	eors	r3, r2
 800d57e:	60fb      	str	r3, [r7, #12]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	18d3      	adds	r3, r2, r3
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	4934      	ldr	r1, [pc, #208]	@ (800d660 <USB_EPStartXfer+0xa60>)
 800d58e:	430a      	orrs	r2, r1
 800d590:	601a      	str	r2, [r3, #0]
 800d592:	e340      	b.n	800dc16 <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	7b1b      	ldrb	r3, [r3, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d000      	beq.n	800d59e <USB_EPStartXfer+0x99e>
 800d59c:	e07e      	b.n	800d69c <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	699a      	ldr	r2, [r3, #24]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d909      	bls.n	800d5be <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	699a      	ldr	r2, [r3, #24]
 800d5b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5b6:	1ad2      	subs	r2, r2, r3
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	619a      	str	r2, [r3, #24]
 800d5bc:	e005      	b.n	800d5ca <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	699b      	ldr	r3, [r3, #24]
 800d5c2:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	4a21      	ldr	r2, [pc, #132]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d5d2:	4694      	mov	ip, r2
 800d5d4:	4463      	add	r3, ip
 800d5d6:	685a      	ldr	r2, [r3, #4]
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	00db      	lsls	r3, r3, #3
 800d5de:	491e      	ldr	r1, [pc, #120]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d5e0:	468c      	mov	ip, r1
 800d5e2:	4463      	add	r3, ip
 800d5e4:	0192      	lsls	r2, r2, #6
 800d5e6:	0992      	lsrs	r2, r2, #6
 800d5e8:	605a      	str	r2, [r3, #4]
 800d5ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800d5ee:	d91e      	bls.n	800d62e <USB_EPStartXfer+0xa2e>
 800d5f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5f2:	095b      	lsrs	r3, r3, #5
 800d5f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d5f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5f8:	221f      	movs	r2, #31
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	d102      	bne.n	800d604 <USB_EPStartXfer+0xa04>
 800d5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d600:	3b01      	subs	r3, #1
 800d602:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	00db      	lsls	r3, r3, #3
 800d60a:	4a13      	ldr	r2, [pc, #76]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d60c:	4694      	mov	ip, r2
 800d60e:	4463      	add	r3, ip
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d614:	069b      	lsls	r3, r3, #26
 800d616:	431a      	orrs	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	490e      	ldr	r1, [pc, #56]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d620:	468c      	mov	ip, r1
 800d622:	4463      	add	r3, ip
 800d624:	2180      	movs	r1, #128	@ 0x80
 800d626:	0609      	lsls	r1, r1, #24
 800d628:	430a      	orrs	r2, r1
 800d62a:	605a      	str	r2, [r3, #4]
 800d62c:	e2d7      	b.n	800dbde <USB_EPStartXfer+0xfde>
 800d62e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d630:	2b00      	cmp	r3, #0
 800d632:	d117      	bne.n	800d664 <USB_EPStartXfer+0xa64>
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	00db      	lsls	r3, r3, #3
 800d63a:	4a07      	ldr	r2, [pc, #28]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d63c:	4694      	mov	ip, r2
 800d63e:	4463      	add	r3, ip
 800d640:	685a      	ldr	r2, [r3, #4]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	4903      	ldr	r1, [pc, #12]	@ (800d658 <USB_EPStartXfer+0xa58>)
 800d64a:	468c      	mov	ip, r1
 800d64c:	4463      	add	r3, ip
 800d64e:	2180      	movs	r1, #128	@ 0x80
 800d650:	0609      	lsls	r1, r1, #24
 800d652:	430a      	orrs	r2, r1
 800d654:	605a      	str	r2, [r3, #4]
 800d656:	e2c2      	b.n	800dbde <USB_EPStartXfer+0xfde>
 800d658:	40009800 	.word	0x40009800
 800d65c:	07ff8fbf 	.word	0x07ff8fbf
 800d660:	00008080 	.word	0x00008080
 800d664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d666:	085b      	lsrs	r3, r3, #1
 800d668:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d66a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d66c:	2201      	movs	r2, #1
 800d66e:	4013      	ands	r3, r2
 800d670:	d002      	beq.n	800d678 <USB_EPStartXfer+0xa78>
 800d672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d674:	3301      	adds	r3, #1
 800d676:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	00db      	lsls	r3, r3, #3
 800d67e:	4ac4      	ldr	r2, [pc, #784]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d680:	4694      	mov	ip, r2
 800d682:	4463      	add	r3, ip
 800d684:	6859      	ldr	r1, [r3, #4]
 800d686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d688:	069a      	lsls	r2, r3, #26
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	48bf      	ldr	r0, [pc, #764]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d692:	4684      	mov	ip, r0
 800d694:	4463      	add	r3, ip
 800d696:	430a      	orrs	r2, r1
 800d698:	605a      	str	r2, [r3, #4]
 800d69a:	e2a0      	b.n	800dbde <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	78db      	ldrb	r3, [r3, #3]
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	d000      	beq.n	800d6a6 <USB_EPStartXfer+0xaa6>
 800d6a4:	e15f      	b.n	800d966 <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	785b      	ldrb	r3, [r3, #1]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d168      	bne.n	800d780 <USB_EPStartXfer+0xb80>
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	00db      	lsls	r3, r3, #3
 800d6b4:	4ab6      	ldr	r2, [pc, #728]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d6b6:	4694      	mov	ip, r2
 800d6b8:	4463      	add	r3, ip
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	00db      	lsls	r3, r3, #3
 800d6c2:	49b3      	ldr	r1, [pc, #716]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d6c4:	468c      	mov	ip, r1
 800d6c6:	4463      	add	r3, ip
 800d6c8:	0192      	lsls	r2, r2, #6
 800d6ca:	0992      	lsrs	r2, r2, #6
 800d6cc:	601a      	str	r2, [r3, #0]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d6d4:	d920      	bls.n	800d718 <USB_EPStartXfer+0xb18>
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	095b      	lsrs	r3, r3, #5
 800d6dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	221f      	movs	r2, #31
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	d102      	bne.n	800d6ee <USB_EPStartXfer+0xaee>
 800d6e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	4aa6      	ldr	r2, [pc, #664]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d6f6:	4694      	mov	ip, r2
 800d6f8:	4463      	add	r3, ip
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6fe:	069b      	lsls	r3, r3, #26
 800d700:	431a      	orrs	r2, r3
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	00db      	lsls	r3, r3, #3
 800d708:	49a1      	ldr	r1, [pc, #644]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d70a:	468c      	mov	ip, r1
 800d70c:	4463      	add	r3, ip
 800d70e:	2180      	movs	r1, #128	@ 0x80
 800d710:	0609      	lsls	r1, r1, #24
 800d712:	430a      	orrs	r2, r1
 800d714:	601a      	str	r2, [r3, #0]
 800d716:	e059      	b.n	800d7cc <USB_EPStartXfer+0xbcc>
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d111      	bne.n	800d744 <USB_EPStartXfer+0xb44>
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	00db      	lsls	r3, r3, #3
 800d726:	4a9a      	ldr	r2, [pc, #616]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d728:	4694      	mov	ip, r2
 800d72a:	4463      	add	r3, ip
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	4996      	ldr	r1, [pc, #600]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d736:	468c      	mov	ip, r1
 800d738:	4463      	add	r3, ip
 800d73a:	2180      	movs	r1, #128	@ 0x80
 800d73c:	0609      	lsls	r1, r1, #24
 800d73e:	430a      	orrs	r2, r1
 800d740:	601a      	str	r2, [r3, #0]
 800d742:	e043      	b.n	800d7cc <USB_EPStartXfer+0xbcc>
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	085b      	lsrs	r3, r3, #1
 800d74a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	2201      	movs	r2, #1
 800d752:	4013      	ands	r3, r2
 800d754:	d002      	beq.n	800d75c <USB_EPStartXfer+0xb5c>
 800d756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d758:	3301      	adds	r3, #1
 800d75a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	00db      	lsls	r3, r3, #3
 800d762:	4a8b      	ldr	r2, [pc, #556]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d764:	4694      	mov	ip, r2
 800d766:	4463      	add	r3, ip
 800d768:	6819      	ldr	r1, [r3, #0]
 800d76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d76c:	069a      	lsls	r2, r3, #26
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	00db      	lsls	r3, r3, #3
 800d774:	4886      	ldr	r0, [pc, #536]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d776:	4684      	mov	ip, r0
 800d778:	4463      	add	r3, ip
 800d77a:	430a      	orrs	r2, r1
 800d77c:	601a      	str	r2, [r3, #0]
 800d77e:	e025      	b.n	800d7cc <USB_EPStartXfer+0xbcc>
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	785b      	ldrb	r3, [r3, #1]
 800d784:	2b01      	cmp	r3, #1
 800d786:	d121      	bne.n	800d7cc <USB_EPStartXfer+0xbcc>
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	4a80      	ldr	r2, [pc, #512]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d790:	4694      	mov	ip, r2
 800d792:	4463      	add	r3, ip
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	00db      	lsls	r3, r3, #3
 800d79c:	497c      	ldr	r1, [pc, #496]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d79e:	468c      	mov	ip, r1
 800d7a0:	4463      	add	r3, ip
 800d7a2:	0412      	lsls	r2, r2, #16
 800d7a4:	0c12      	lsrs	r2, r2, #16
 800d7a6:	601a      	str	r2, [r3, #0]
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	4a78      	ldr	r2, [pc, #480]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d7b0:	4694      	mov	ip, r2
 800d7b2:	4463      	add	r3, ip
 800d7b4:	6819      	ldr	r1, [r3, #0]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	691b      	ldr	r3, [r3, #16]
 800d7ba:	041a      	lsls	r2, r3, #16
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	00db      	lsls	r3, r3, #3
 800d7c2:	4873      	ldr	r0, [pc, #460]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d7c4:	4684      	mov	ip, r0
 800d7c6:	4463      	add	r3, ip
 800d7c8:	430a      	orrs	r2, r1
 800d7ca:	601a      	str	r2, [r3, #0]
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	785b      	ldrb	r3, [r3, #1]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d168      	bne.n	800d8a6 <USB_EPStartXfer+0xca6>
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	00db      	lsls	r3, r3, #3
 800d7da:	4a6d      	ldr	r2, [pc, #436]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d7dc:	4694      	mov	ip, r2
 800d7de:	4463      	add	r3, ip
 800d7e0:	685a      	ldr	r2, [r3, #4]
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	4969      	ldr	r1, [pc, #420]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d7ea:	468c      	mov	ip, r1
 800d7ec:	4463      	add	r3, ip
 800d7ee:	0192      	lsls	r2, r2, #6
 800d7f0:	0992      	lsrs	r2, r2, #6
 800d7f2:	605a      	str	r2, [r3, #4]
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	691b      	ldr	r3, [r3, #16]
 800d7f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7fa:	d920      	bls.n	800d83e <USB_EPStartXfer+0xc3e>
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	095b      	lsrs	r3, r3, #5
 800d802:	633b      	str	r3, [r7, #48]	@ 0x30
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	221f      	movs	r2, #31
 800d80a:	4013      	ands	r3, r2
 800d80c:	d102      	bne.n	800d814 <USB_EPStartXfer+0xc14>
 800d80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d810:	3b01      	subs	r3, #1
 800d812:	633b      	str	r3, [r7, #48]	@ 0x30
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	00db      	lsls	r3, r3, #3
 800d81a:	4a5d      	ldr	r2, [pc, #372]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d81c:	4694      	mov	ip, r2
 800d81e:	4463      	add	r3, ip
 800d820:	685a      	ldr	r2, [r3, #4]
 800d822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d824:	069b      	lsls	r3, r3, #26
 800d826:	431a      	orrs	r2, r3
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	4958      	ldr	r1, [pc, #352]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d830:	468c      	mov	ip, r1
 800d832:	4463      	add	r3, ip
 800d834:	2180      	movs	r1, #128	@ 0x80
 800d836:	0609      	lsls	r1, r1, #24
 800d838:	430a      	orrs	r2, r1
 800d83a:	605a      	str	r2, [r3, #4]
 800d83c:	e059      	b.n	800d8f2 <USB_EPStartXfer+0xcf2>
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	691b      	ldr	r3, [r3, #16]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d111      	bne.n	800d86a <USB_EPStartXfer+0xc6a>
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	00db      	lsls	r3, r3, #3
 800d84c:	4a50      	ldr	r2, [pc, #320]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d84e:	4694      	mov	ip, r2
 800d850:	4463      	add	r3, ip
 800d852:	685a      	ldr	r2, [r3, #4]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	00db      	lsls	r3, r3, #3
 800d85a:	494d      	ldr	r1, [pc, #308]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d85c:	468c      	mov	ip, r1
 800d85e:	4463      	add	r3, ip
 800d860:	2180      	movs	r1, #128	@ 0x80
 800d862:	0609      	lsls	r1, r1, #24
 800d864:	430a      	orrs	r2, r1
 800d866:	605a      	str	r2, [r3, #4]
 800d868:	e043      	b.n	800d8f2 <USB_EPStartXfer+0xcf2>
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	085b      	lsrs	r3, r3, #1
 800d870:	633b      	str	r3, [r7, #48]	@ 0x30
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	2201      	movs	r2, #1
 800d878:	4013      	ands	r3, r2
 800d87a:	d002      	beq.n	800d882 <USB_EPStartXfer+0xc82>
 800d87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87e:	3301      	adds	r3, #1
 800d880:	633b      	str	r3, [r7, #48]	@ 0x30
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	00db      	lsls	r3, r3, #3
 800d888:	4a41      	ldr	r2, [pc, #260]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d88a:	4694      	mov	ip, r2
 800d88c:	4463      	add	r3, ip
 800d88e:	6859      	ldr	r1, [r3, #4]
 800d890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d892:	069a      	lsls	r2, r3, #26
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	00db      	lsls	r3, r3, #3
 800d89a:	483d      	ldr	r0, [pc, #244]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d89c:	4684      	mov	ip, r0
 800d89e:	4463      	add	r3, ip
 800d8a0:	430a      	orrs	r2, r1
 800d8a2:	605a      	str	r2, [r3, #4]
 800d8a4:	e025      	b.n	800d8f2 <USB_EPStartXfer+0xcf2>
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	785b      	ldrb	r3, [r3, #1]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d121      	bne.n	800d8f2 <USB_EPStartXfer+0xcf2>
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	4a36      	ldr	r2, [pc, #216]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d8b6:	4694      	mov	ip, r2
 800d8b8:	4463      	add	r3, ip
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	00db      	lsls	r3, r3, #3
 800d8c2:	4933      	ldr	r1, [pc, #204]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d8c4:	468c      	mov	ip, r1
 800d8c6:	4463      	add	r3, ip
 800d8c8:	0412      	lsls	r2, r2, #16
 800d8ca:	0c12      	lsrs	r2, r2, #16
 800d8cc:	605a      	str	r2, [r3, #4]
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	00db      	lsls	r3, r3, #3
 800d8d4:	4a2e      	ldr	r2, [pc, #184]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d8d6:	4694      	mov	ip, r2
 800d8d8:	4463      	add	r3, ip
 800d8da:	6859      	ldr	r1, [r3, #4]
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	691b      	ldr	r3, [r3, #16]
 800d8e0:	041a      	lsls	r2, r3, #16
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	00db      	lsls	r3, r3, #3
 800d8e8:	4829      	ldr	r0, [pc, #164]	@ (800d990 <USB_EPStartXfer+0xd90>)
 800d8ea:	4684      	mov	ip, r0
 800d8ec:	4463      	add	r3, ip
 800d8ee:	430a      	orrs	r2, r1
 800d8f0:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	69db      	ldr	r3, [r3, #28]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d100      	bne.n	800d8fc <USB_EPStartXfer+0xcfc>
 800d8fa:	e170      	b.n	800dbde <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	18d3      	adds	r3, r2, r3
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	2126      	movs	r1, #38	@ 0x26
 800d90a:	187b      	adds	r3, r7, r1
 800d90c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d90e:	187b      	adds	r3, r7, r1
 800d910:	881a      	ldrh	r2, [r3, #0]
 800d912:	2380      	movs	r3, #128	@ 0x80
 800d914:	01db      	lsls	r3, r3, #7
 800d916:	4013      	ands	r3, r2
 800d918:	d004      	beq.n	800d924 <USB_EPStartXfer+0xd24>
 800d91a:	187b      	adds	r3, r7, r1
 800d91c:	881b      	ldrh	r3, [r3, #0]
 800d91e:	2240      	movs	r2, #64	@ 0x40
 800d920:	4013      	ands	r3, r2
 800d922:	d10d      	bne.n	800d940 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d924:	2126      	movs	r1, #38	@ 0x26
 800d926:	187b      	adds	r3, r7, r1
 800d928:	881a      	ldrh	r2, [r3, #0]
 800d92a:	2380      	movs	r3, #128	@ 0x80
 800d92c:	01db      	lsls	r3, r3, #7
 800d92e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d930:	d000      	beq.n	800d934 <USB_EPStartXfer+0xd34>
 800d932:	e154      	b.n	800dbde <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d934:	187b      	adds	r3, r7, r1
 800d936:	881b      	ldrh	r3, [r3, #0]
 800d938:	2240      	movs	r2, #64	@ 0x40
 800d93a:	4013      	ands	r3, r2
 800d93c:	d000      	beq.n	800d940 <USB_EPStartXfer+0xd40>
 800d93e:	e14e      	b.n	800dbde <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	18d3      	adds	r3, r2, r3
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a11      	ldr	r2, [pc, #68]	@ (800d994 <USB_EPStartXfer+0xd94>)
 800d94e:	4013      	ands	r3, r2
 800d950:	623b      	str	r3, [r7, #32]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	18d3      	adds	r3, r2, r3
 800d95c:	6a3a      	ldr	r2, [r7, #32]
 800d95e:	490e      	ldr	r1, [pc, #56]	@ (800d998 <USB_EPStartXfer+0xd98>)
 800d960:	430a      	orrs	r2, r1
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	e13b      	b.n	800dbde <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	78db      	ldrb	r3, [r3, #3]
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d000      	beq.n	800d970 <USB_EPStartXfer+0xd70>
 800d96e:	e134      	b.n	800dbda <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	699a      	ldr	r2, [r3, #24]
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	691b      	ldr	r3, [r3, #16]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d90f      	bls.n	800d99c <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	691b      	ldr	r3, [r3, #16]
 800d980:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	699a      	ldr	r2, [r3, #24]
 800d986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d988:	1ad2      	subs	r2, r2, r3
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	619a      	str	r2, [r3, #24]
 800d98e:	e00b      	b.n	800d9a8 <USB_EPStartXfer+0xda8>
 800d990:	40009800 	.word	0x40009800
 800d994:	07ff8f8f 	.word	0x07ff8f8f
 800d998:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	699b      	ldr	r3, [r3, #24]
 800d9a0:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	785b      	ldrb	r3, [r3, #1]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d162      	bne.n	800da76 <USB_EPStartXfer+0xe76>
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	00db      	lsls	r3, r3, #3
 800d9b6:	4a9a      	ldr	r2, [pc, #616]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800d9b8:	4694      	mov	ip, r2
 800d9ba:	4463      	add	r3, ip
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	00db      	lsls	r3, r3, #3
 800d9c4:	4996      	ldr	r1, [pc, #600]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800d9c6:	468c      	mov	ip, r1
 800d9c8:	4463      	add	r3, ip
 800d9ca:	0192      	lsls	r2, r2, #6
 800d9cc:	0992      	lsrs	r2, r2, #6
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d9d4:	d91e      	bls.n	800da14 <USB_EPStartXfer+0xe14>
 800d9d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9d8:	095b      	lsrs	r3, r3, #5
 800d9da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9de:	221f      	movs	r2, #31
 800d9e0:	4013      	ands	r3, r2
 800d9e2:	d102      	bne.n	800d9ea <USB_EPStartXfer+0xdea>
 800d9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	4a8b      	ldr	r2, [pc, #556]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800d9f2:	4694      	mov	ip, r2
 800d9f4:	4463      	add	r3, ip
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fa:	069b      	lsls	r3, r3, #26
 800d9fc:	431a      	orrs	r2, r3
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	00db      	lsls	r3, r3, #3
 800da04:	4986      	ldr	r1, [pc, #536]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800da06:	468c      	mov	ip, r1
 800da08:	4463      	add	r3, ip
 800da0a:	2180      	movs	r1, #128	@ 0x80
 800da0c:	0609      	lsls	r1, r1, #24
 800da0e:	430a      	orrs	r2, r1
 800da10:	601a      	str	r2, [r3, #0]
 800da12:	e055      	b.n	800dac0 <USB_EPStartXfer+0xec0>
 800da14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da16:	2b00      	cmp	r3, #0
 800da18:	d111      	bne.n	800da3e <USB_EPStartXfer+0xe3e>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	00db      	lsls	r3, r3, #3
 800da20:	4a7f      	ldr	r2, [pc, #508]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800da22:	4694      	mov	ip, r2
 800da24:	4463      	add	r3, ip
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	00db      	lsls	r3, r3, #3
 800da2e:	497c      	ldr	r1, [pc, #496]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800da30:	468c      	mov	ip, r1
 800da32:	4463      	add	r3, ip
 800da34:	2180      	movs	r1, #128	@ 0x80
 800da36:	0609      	lsls	r1, r1, #24
 800da38:	430a      	orrs	r2, r1
 800da3a:	601a      	str	r2, [r3, #0]
 800da3c:	e040      	b.n	800dac0 <USB_EPStartXfer+0xec0>
 800da3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da40:	085b      	lsrs	r3, r3, #1
 800da42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da46:	2201      	movs	r2, #1
 800da48:	4013      	ands	r3, r2
 800da4a:	d002      	beq.n	800da52 <USB_EPStartXfer+0xe52>
 800da4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da4e:	3301      	adds	r3, #1
 800da50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	00db      	lsls	r3, r3, #3
 800da58:	4a71      	ldr	r2, [pc, #452]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800da5a:	4694      	mov	ip, r2
 800da5c:	4463      	add	r3, ip
 800da5e:	6819      	ldr	r1, [r3, #0]
 800da60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da62:	069a      	lsls	r2, r3, #26
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	00db      	lsls	r3, r3, #3
 800da6a:	486d      	ldr	r0, [pc, #436]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800da6c:	4684      	mov	ip, r0
 800da6e:	4463      	add	r3, ip
 800da70:	430a      	orrs	r2, r1
 800da72:	601a      	str	r2, [r3, #0]
 800da74:	e024      	b.n	800dac0 <USB_EPStartXfer+0xec0>
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	785b      	ldrb	r3, [r3, #1]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d120      	bne.n	800dac0 <USB_EPStartXfer+0xec0>
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	4a66      	ldr	r2, [pc, #408]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800da86:	4694      	mov	ip, r2
 800da88:	4463      	add	r3, ip
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	00db      	lsls	r3, r3, #3
 800da92:	4963      	ldr	r1, [pc, #396]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800da94:	468c      	mov	ip, r1
 800da96:	4463      	add	r3, ip
 800da98:	0412      	lsls	r2, r2, #16
 800da9a:	0c12      	lsrs	r2, r2, #16
 800da9c:	601a      	str	r2, [r3, #0]
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	00db      	lsls	r3, r3, #3
 800daa4:	4a5e      	ldr	r2, [pc, #376]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800daa6:	4694      	mov	ip, r2
 800daa8:	4463      	add	r3, ip
 800daaa:	6819      	ldr	r1, [r3, #0]
 800daac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daae:	041a      	lsls	r2, r3, #16
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	00db      	lsls	r3, r3, #3
 800dab6:	485a      	ldr	r0, [pc, #360]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800dab8:	4684      	mov	ip, r0
 800daba:	4463      	add	r3, ip
 800dabc:	430a      	orrs	r2, r1
 800dabe:	601a      	str	r2, [r3, #0]
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	785b      	ldrb	r3, [r3, #1]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d162      	bne.n	800db8e <USB_EPStartXfer+0xf8e>
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	00db      	lsls	r3, r3, #3
 800dace:	4a54      	ldr	r2, [pc, #336]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800dad0:	4694      	mov	ip, r2
 800dad2:	4463      	add	r3, ip
 800dad4:	685a      	ldr	r2, [r3, #4]
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	00db      	lsls	r3, r3, #3
 800dadc:	4950      	ldr	r1, [pc, #320]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800dade:	468c      	mov	ip, r1
 800dae0:	4463      	add	r3, ip
 800dae2:	0192      	lsls	r2, r2, #6
 800dae4:	0992      	lsrs	r2, r2, #6
 800dae6:	605a      	str	r2, [r3, #4]
 800dae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daea:	2b3e      	cmp	r3, #62	@ 0x3e
 800daec:	d91e      	bls.n	800db2c <USB_EPStartXfer+0xf2c>
 800daee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daf0:	095b      	lsrs	r3, r3, #5
 800daf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800daf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daf6:	221f      	movs	r2, #31
 800daf8:	4013      	ands	r3, r2
 800dafa:	d102      	bne.n	800db02 <USB_EPStartXfer+0xf02>
 800dafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dafe:	3b01      	subs	r3, #1
 800db00:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	00db      	lsls	r3, r3, #3
 800db08:	4a45      	ldr	r2, [pc, #276]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800db0a:	4694      	mov	ip, r2
 800db0c:	4463      	add	r3, ip
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db12:	069b      	lsls	r3, r3, #26
 800db14:	431a      	orrs	r2, r3
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	00db      	lsls	r3, r3, #3
 800db1c:	4940      	ldr	r1, [pc, #256]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800db1e:	468c      	mov	ip, r1
 800db20:	4463      	add	r3, ip
 800db22:	2180      	movs	r1, #128	@ 0x80
 800db24:	0609      	lsls	r1, r1, #24
 800db26:	430a      	orrs	r2, r1
 800db28:	605a      	str	r2, [r3, #4]
 800db2a:	e058      	b.n	800dbde <USB_EPStartXfer+0xfde>
 800db2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d111      	bne.n	800db56 <USB_EPStartXfer+0xf56>
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	00db      	lsls	r3, r3, #3
 800db38:	4a39      	ldr	r2, [pc, #228]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800db3a:	4694      	mov	ip, r2
 800db3c:	4463      	add	r3, ip
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	00db      	lsls	r3, r3, #3
 800db46:	4936      	ldr	r1, [pc, #216]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800db48:	468c      	mov	ip, r1
 800db4a:	4463      	add	r3, ip
 800db4c:	2180      	movs	r1, #128	@ 0x80
 800db4e:	0609      	lsls	r1, r1, #24
 800db50:	430a      	orrs	r2, r1
 800db52:	605a      	str	r2, [r3, #4]
 800db54:	e043      	b.n	800dbde <USB_EPStartXfer+0xfde>
 800db56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db58:	085b      	lsrs	r3, r3, #1
 800db5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db5e:	2201      	movs	r2, #1
 800db60:	4013      	ands	r3, r2
 800db62:	d002      	beq.n	800db6a <USB_EPStartXfer+0xf6a>
 800db64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db66:	3301      	adds	r3, #1
 800db68:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	00db      	lsls	r3, r3, #3
 800db70:	4a2b      	ldr	r2, [pc, #172]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800db72:	4694      	mov	ip, r2
 800db74:	4463      	add	r3, ip
 800db76:	6859      	ldr	r1, [r3, #4]
 800db78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7a:	069a      	lsls	r2, r3, #26
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	00db      	lsls	r3, r3, #3
 800db82:	4827      	ldr	r0, [pc, #156]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800db84:	4684      	mov	ip, r0
 800db86:	4463      	add	r3, ip
 800db88:	430a      	orrs	r2, r1
 800db8a:	605a      	str	r2, [r3, #4]
 800db8c:	e027      	b.n	800dbde <USB_EPStartXfer+0xfde>
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	785b      	ldrb	r3, [r3, #1]
 800db92:	2b01      	cmp	r3, #1
 800db94:	d123      	bne.n	800dbde <USB_EPStartXfer+0xfde>
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	00db      	lsls	r3, r3, #3
 800db9c:	4a20      	ldr	r2, [pc, #128]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800db9e:	4694      	mov	ip, r2
 800dba0:	4463      	add	r3, ip
 800dba2:	685a      	ldr	r2, [r3, #4]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	00db      	lsls	r3, r3, #3
 800dbaa:	491d      	ldr	r1, [pc, #116]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800dbac:	468c      	mov	ip, r1
 800dbae:	4463      	add	r3, ip
 800dbb0:	0412      	lsls	r2, r2, #16
 800dbb2:	0c12      	lsrs	r2, r2, #16
 800dbb4:	605a      	str	r2, [r3, #4]
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	4a18      	ldr	r2, [pc, #96]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800dbbe:	4694      	mov	ip, r2
 800dbc0:	4463      	add	r3, ip
 800dbc2:	6859      	ldr	r1, [r3, #4]
 800dbc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbc6:	041a      	lsls	r2, r3, #16
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	00db      	lsls	r3, r3, #3
 800dbce:	4814      	ldr	r0, [pc, #80]	@ (800dc20 <USB_EPStartXfer+0x1020>)
 800dbd0:	4684      	mov	ip, r0
 800dbd2:	4463      	add	r3, ip
 800dbd4:	430a      	orrs	r2, r1
 800dbd6:	605a      	str	r2, [r3, #4]
 800dbd8:	e001      	b.n	800dbde <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	e01c      	b.n	800dc18 <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	18d3      	adds	r3, r2, r3
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a0e      	ldr	r2, [pc, #56]	@ (800dc24 <USB_EPStartXfer+0x1024>)
 800dbec:	4013      	ands	r3, r2
 800dbee:	61fb      	str	r3, [r7, #28]
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	2280      	movs	r2, #128	@ 0x80
 800dbf4:	0152      	lsls	r2, r2, #5
 800dbf6:	4053      	eors	r3, r2
 800dbf8:	61fb      	str	r3, [r7, #28]
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	2280      	movs	r2, #128	@ 0x80
 800dbfe:	0192      	lsls	r2, r2, #6
 800dc00:	4053      	eors	r3, r2
 800dc02:	61fb      	str	r3, [r7, #28]
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	18d3      	adds	r3, r2, r3
 800dc0e:	69fa      	ldr	r2, [r7, #28]
 800dc10:	4905      	ldr	r1, [pc, #20]	@ (800dc28 <USB_EPStartXfer+0x1028>)
 800dc12:	430a      	orrs	r2, r1
 800dc14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	0018      	movs	r0, r3
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	b017      	add	sp, #92	@ 0x5c
 800dc1e:	bd90      	pop	{r4, r7, pc}
 800dc20:	40009800 	.word	0x40009800
 800dc24:	07ffbf8f 	.word	0x07ffbf8f
 800dc28:	00008080 	.word	0x00008080

0800dc2c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	785b      	ldrb	r3, [r3, #1]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d016      	beq.n	800dc6c <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	18d3      	adds	r3, r2, r3
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a16      	ldr	r2, [pc, #88]	@ (800dca4 <USB_EPSetStall+0x78>)
 800dc4c:	4013      	ands	r3, r2
 800dc4e:	60bb      	str	r3, [r7, #8]
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	2210      	movs	r2, #16
 800dc54:	4053      	eors	r3, r2
 800dc56:	60bb      	str	r3, [r7, #8]
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	18d3      	adds	r3, r2, r3
 800dc62:	68ba      	ldr	r2, [r7, #8]
 800dc64:	4910      	ldr	r1, [pc, #64]	@ (800dca8 <USB_EPSetStall+0x7c>)
 800dc66:	430a      	orrs	r2, r1
 800dc68:	601a      	str	r2, [r3, #0]
 800dc6a:	e016      	b.n	800dc9a <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	18d3      	adds	r3, r2, r3
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a0c      	ldr	r2, [pc, #48]	@ (800dcac <USB_EPSetStall+0x80>)
 800dc7a:	4013      	ands	r3, r2
 800dc7c:	60fb      	str	r3, [r7, #12]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2280      	movs	r2, #128	@ 0x80
 800dc82:	0152      	lsls	r2, r2, #5
 800dc84:	4053      	eors	r3, r2
 800dc86:	60fb      	str	r3, [r7, #12]
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	18d3      	adds	r3, r2, r3
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	4904      	ldr	r1, [pc, #16]	@ (800dca8 <USB_EPSetStall+0x7c>)
 800dc96:	430a      	orrs	r2, r1
 800dc98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	0018      	movs	r0, r3
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	b004      	add	sp, #16
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	07ff8fbf 	.word	0x07ff8fbf
 800dca8:	00008080 	.word	0x00008080
 800dcac:	07ffbf8f 	.word	0x07ffbf8f

0800dcb0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcbc:	2280      	movs	r2, #128	@ 0x80
 800dcbe:	0212      	lsls	r2, r2, #8
 800dcc0:	431a      	orrs	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	0018      	movs	r0, r3
 800dcca:	46bd      	mov	sp, r7
 800dccc:	b002      	add	sp, #8
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b08a      	sub	sp, #40	@ 0x28
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	0019      	movs	r1, r3
 800dcdc:	1dbb      	adds	r3, r7, #6
 800dcde:	801a      	strh	r2, [r3, #0]
 800dce0:	1d3b      	adds	r3, r7, #4
 800dce2:	1c0a      	adds	r2, r1, #0
 800dce4:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800dce6:	1d3b      	adds	r3, r7, #4
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	3303      	adds	r3, #3
 800dcec:	089b      	lsrs	r3, r3, #2
 800dcee:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800dcf0:	2016      	movs	r0, #22
 800dcf2:	183b      	adds	r3, r7, r0
 800dcf4:	1d3a      	adds	r2, r7, #4
 800dcf6:	8812      	ldrh	r2, [r2, #0]
 800dcf8:	2103      	movs	r1, #3
 800dcfa:	400a      	ands	r2, r1
 800dcfc:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800dd02:	183b      	adds	r3, r7, r0
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d002      	beq.n	800dd10 <USB_WritePMA+0x40>
  {
    NbWords--;
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800dd10:	1dbb      	adds	r3, r7, #6
 800dd12:	881b      	ldrh	r3, [r3, #0]
 800dd14:	4a28      	ldr	r2, [pc, #160]	@ (800ddb8 <USB_WritePMA+0xe8>)
 800dd16:	4694      	mov	ip, r2
 800dd18:	4463      	add	r3, ip
 800dd1a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	623b      	str	r3, [r7, #32]
 800dd20:	e01f      	b.n	800dd62 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	781a      	ldrb	r2, [r3, #0]
 800dd26:	7859      	ldrb	r1, [r3, #1]
 800dd28:	0209      	lsls	r1, r1, #8
 800dd2a:	430a      	orrs	r2, r1
 800dd2c:	7899      	ldrb	r1, [r3, #2]
 800dd2e:	0409      	lsls	r1, r1, #16
 800dd30:	430a      	orrs	r2, r1
 800dd32:	78db      	ldrb	r3, [r3, #3]
 800dd34:	061b      	lsls	r3, r3, #24
 800dd36:	4313      	orrs	r3, r2
 800dd38:	001a      	movs	r2, r3
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	3304      	adds	r3, #4
 800dd42:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	3301      	adds	r3, #1
 800dd48:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	3301      	adds	r3, #1
 800dd54:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800dd5c:	6a3b      	ldr	r3, [r7, #32]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	623b      	str	r3, [r7, #32]
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1dc      	bne.n	800dd22 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800dd68:	2316      	movs	r3, #22
 800dd6a:	18fb      	adds	r3, r7, r3
 800dd6c:	881b      	ldrh	r3, [r3, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d01e      	beq.n	800ddb0 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800dd72:	2300      	movs	r3, #0
 800dd74:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	001a      	movs	r2, r3
 800dd7c:	6a3b      	ldr	r3, [r7, #32]
 800dd7e:	00db      	lsls	r3, r3, #3
 800dd80:	409a      	lsls	r2, r3
 800dd82:	0013      	movs	r3, r2
 800dd84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd86:	4313      	orrs	r3, r2
 800dd88:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800dd8a:	6a3b      	ldr	r3, [r7, #32]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	623b      	str	r3, [r7, #32]
      pBuf++;
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	3301      	adds	r3, #1
 800dd94:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800dd96:	2116      	movs	r1, #22
 800dd98:	187b      	adds	r3, r7, r1
 800dd9a:	881a      	ldrh	r2, [r3, #0]
 800dd9c:	187b      	adds	r3, r7, r1
 800dd9e:	3a01      	subs	r2, #1
 800dda0:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800dda2:	187b      	adds	r3, r7, r1
 800dda4:	881b      	ldrh	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d1e5      	bne.n	800dd76 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddae:	601a      	str	r2, [r3, #0]
  }
}
 800ddb0:	46c0      	nop			@ (mov r8, r8)
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	b00a      	add	sp, #40	@ 0x28
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	40009800 	.word	0x40009800

0800ddbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	000a      	movs	r2, r1
 800ddc6:	1cfb      	adds	r3, r7, #3
 800ddc8:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ddca:	2387      	movs	r3, #135	@ 0x87
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	0018      	movs	r0, r3
 800ddd0:	f001 fa7c 	bl	800f2cc <USBD_static_malloc>
 800ddd4:	0003      	movs	r3, r0
 800ddd6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d10a      	bne.n	800ddf4 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	23b5      	movs	r3, #181	@ 0xb5
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	58d2      	ldr	r2, [r2, r3]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	32b0      	adds	r2, #176	@ 0xb0
 800ddea:	0092      	lsls	r2, r2, #2
 800ddec:	2100      	movs	r1, #0
 800ddee:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 800ddf0:	2302      	movs	r3, #2
 800ddf2:	e0e9      	b.n	800dfc8 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ddf4:	2387      	movs	r3, #135	@ 0x87
 800ddf6:	009a      	lsls	r2, r3, #2
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	0018      	movs	r0, r3
 800ddfe:	f001 fea2 	bl	800fb46 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	23b5      	movs	r3, #181	@ 0xb5
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	58d2      	ldr	r2, [r2, r3]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	32b0      	adds	r2, #176	@ 0xb0
 800de0e:	0092      	lsls	r2, r2, #2
 800de10:	68f9      	ldr	r1, [r7, #12]
 800de12:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	23b5      	movs	r3, #181	@ 0xb5
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	58d2      	ldr	r2, [r2, r3]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	32b0      	adds	r2, #176	@ 0xb0
 800de20:	0092      	lsls	r2, r2, #2
 800de22:	58d1      	ldr	r1, [r2, r3]
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	23af      	movs	r3, #175	@ 0xaf
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	7c1b      	ldrb	r3, [r3, #16]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d13c      	bne.n	800deae <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de34:	4b66      	ldr	r3, [pc, #408]	@ (800dfd0 <USBD_CDC_Init+0x214>)
 800de36:	7819      	ldrb	r1, [r3, #0]
 800de38:	2380      	movs	r3, #128	@ 0x80
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	2202      	movs	r2, #2
 800de40:	f001 f941 	bl	800f0c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de44:	4b62      	ldr	r3, [pc, #392]	@ (800dfd0 <USBD_CDC_Init+0x214>)
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	001a      	movs	r2, r3
 800de4a:	230f      	movs	r3, #15
 800de4c:	401a      	ands	r2, r3
 800de4e:	6879      	ldr	r1, [r7, #4]
 800de50:	0013      	movs	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	189b      	adds	r3, r3, r2
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	18cb      	adds	r3, r1, r3
 800de5a:	3324      	adds	r3, #36	@ 0x24
 800de5c:	2201      	movs	r2, #1
 800de5e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800de60:	4b5c      	ldr	r3, [pc, #368]	@ (800dfd4 <USBD_CDC_Init+0x218>)
 800de62:	7819      	ldrb	r1, [r3, #0]
 800de64:	2380      	movs	r3, #128	@ 0x80
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	2202      	movs	r2, #2
 800de6c:	f001 f92b 	bl	800f0c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800de70:	4b58      	ldr	r3, [pc, #352]	@ (800dfd4 <USBD_CDC_Init+0x218>)
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	001a      	movs	r2, r3
 800de76:	230f      	movs	r3, #15
 800de78:	401a      	ands	r2, r3
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	23b2      	movs	r3, #178	@ 0xb2
 800de7e:	0059      	lsls	r1, r3, #1
 800de80:	0013      	movs	r3, r2
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	189b      	adds	r3, r3, r2
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	18c3      	adds	r3, r0, r3
 800de8a:	185b      	adds	r3, r3, r1
 800de8c:	2201      	movs	r2, #1
 800de8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800de90:	4b51      	ldr	r3, [pc, #324]	@ (800dfd8 <USBD_CDC_Init+0x21c>)
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	001a      	movs	r2, r3
 800de96:	230f      	movs	r3, #15
 800de98:	401a      	ands	r2, r3
 800de9a:	6879      	ldr	r1, [r7, #4]
 800de9c:	0013      	movs	r3, r2
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	189b      	adds	r3, r3, r2
 800dea2:	009b      	lsls	r3, r3, #2
 800dea4:	18cb      	adds	r3, r1, r3
 800dea6:	3326      	adds	r3, #38	@ 0x26
 800dea8:	2210      	movs	r2, #16
 800deaa:	801a      	strh	r2, [r3, #0]
 800deac:	e039      	b.n	800df22 <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800deae:	4b48      	ldr	r3, [pc, #288]	@ (800dfd0 <USBD_CDC_Init+0x214>)
 800deb0:	7819      	ldrb	r1, [r3, #0]
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	2340      	movs	r3, #64	@ 0x40
 800deb6:	2202      	movs	r2, #2
 800deb8:	f001 f905 	bl	800f0c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800debc:	4b44      	ldr	r3, [pc, #272]	@ (800dfd0 <USBD_CDC_Init+0x214>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	001a      	movs	r2, r3
 800dec2:	230f      	movs	r3, #15
 800dec4:	401a      	ands	r2, r3
 800dec6:	6879      	ldr	r1, [r7, #4]
 800dec8:	0013      	movs	r3, r2
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	189b      	adds	r3, r3, r2
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	18cb      	adds	r3, r1, r3
 800ded2:	3324      	adds	r3, #36	@ 0x24
 800ded4:	2201      	movs	r2, #1
 800ded6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ded8:	4b3e      	ldr	r3, [pc, #248]	@ (800dfd4 <USBD_CDC_Init+0x218>)
 800deda:	7819      	ldrb	r1, [r3, #0]
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	2340      	movs	r3, #64	@ 0x40
 800dee0:	2202      	movs	r2, #2
 800dee2:	f001 f8f0 	bl	800f0c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dee6:	4b3b      	ldr	r3, [pc, #236]	@ (800dfd4 <USBD_CDC_Init+0x218>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	001a      	movs	r2, r3
 800deec:	230f      	movs	r3, #15
 800deee:	401a      	ands	r2, r3
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	23b2      	movs	r3, #178	@ 0xb2
 800def4:	0059      	lsls	r1, r3, #1
 800def6:	0013      	movs	r3, r2
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	189b      	adds	r3, r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	18c3      	adds	r3, r0, r3
 800df00:	185b      	adds	r3, r3, r1
 800df02:	2201      	movs	r2, #1
 800df04:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df06:	4b34      	ldr	r3, [pc, #208]	@ (800dfd8 <USBD_CDC_Init+0x21c>)
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	001a      	movs	r2, r3
 800df0c:	230f      	movs	r3, #15
 800df0e:	401a      	ands	r2, r3
 800df10:	6879      	ldr	r1, [r7, #4]
 800df12:	0013      	movs	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	189b      	adds	r3, r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	18cb      	adds	r3, r1, r3
 800df1c:	3326      	adds	r3, #38	@ 0x26
 800df1e:	2210      	movs	r2, #16
 800df20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df22:	4b2d      	ldr	r3, [pc, #180]	@ (800dfd8 <USBD_CDC_Init+0x21c>)
 800df24:	7819      	ldrb	r1, [r3, #0]
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	2308      	movs	r3, #8
 800df2a:	2203      	movs	r2, #3
 800df2c:	f001 f8cb 	bl	800f0c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800df30:	4b29      	ldr	r3, [pc, #164]	@ (800dfd8 <USBD_CDC_Init+0x21c>)
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	001a      	movs	r2, r3
 800df36:	230f      	movs	r3, #15
 800df38:	401a      	ands	r2, r3
 800df3a:	6879      	ldr	r1, [r7, #4]
 800df3c:	0013      	movs	r3, r2
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	189b      	adds	r3, r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	18cb      	adds	r3, r1, r3
 800df46:	3324      	adds	r3, #36	@ 0x24
 800df48:	2201      	movs	r2, #1
 800df4a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	2381      	movs	r3, #129	@ 0x81
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	2100      	movs	r1, #0
 800df54:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	23b5      	movs	r3, #181	@ 0xb5
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	58d3      	ldr	r3, [r2, r3]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	33b0      	adds	r3, #176	@ 0xb0
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	18d3      	adds	r3, r2, r3
 800df66:	3304      	adds	r3, #4
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	2385      	movs	r3, #133	@ 0x85
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	2100      	movs	r1, #0
 800df76:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	2386      	movs	r3, #134	@ 0x86
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	2100      	movs	r1, #0
 800df80:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 800df82:	68fa      	ldr	r2, [r7, #12]
 800df84:	2381      	movs	r3, #129	@ 0x81
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	58d3      	ldr	r3, [r2, r3]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d101      	bne.n	800df92 <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 800df8e:	2302      	movs	r3, #2
 800df90:	e01a      	b.n	800dfc8 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	7c1b      	ldrb	r3, [r3, #16]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10b      	bne.n	800dfb2 <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df9a:	4b0e      	ldr	r3, [pc, #56]	@ (800dfd4 <USBD_CDC_Init+0x218>)
 800df9c:	7819      	ldrb	r1, [r3, #0]
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	2381      	movs	r3, #129	@ 0x81
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	58d2      	ldr	r2, [r2, r3]
 800dfa6:	2380      	movs	r3, #128	@ 0x80
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f001 f948 	bl	800f240 <USBD_LL_PrepareReceive>
 800dfb0:	e009      	b.n	800dfc6 <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dfb2:	4b08      	ldr	r3, [pc, #32]	@ (800dfd4 <USBD_CDC_Init+0x218>)
 800dfb4:	7819      	ldrb	r1, [r3, #0]
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	2381      	movs	r3, #129	@ 0x81
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	58d2      	ldr	r2, [r2, r3]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	2340      	movs	r3, #64	@ 0x40
 800dfc2:	f001 f93d 	bl	800f240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	0018      	movs	r0, r3
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	b004      	add	sp, #16
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	2000032b 	.word	0x2000032b
 800dfd4:	2000032c 	.word	0x2000032c
 800dfd8:	2000032d 	.word	0x2000032d

0800dfdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	000a      	movs	r2, r1
 800dfe6:	1cfb      	adds	r3, r7, #3
 800dfe8:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dfea:	4b41      	ldr	r3, [pc, #260]	@ (800e0f0 <USBD_CDC_DeInit+0x114>)
 800dfec:	781a      	ldrb	r2, [r3, #0]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	0011      	movs	r1, r2
 800dff2:	0018      	movs	r0, r3
 800dff4:	f001 f89e 	bl	800f134 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dff8:	4b3d      	ldr	r3, [pc, #244]	@ (800e0f0 <USBD_CDC_DeInit+0x114>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	001a      	movs	r2, r3
 800dffe:	230f      	movs	r3, #15
 800e000:	401a      	ands	r2, r3
 800e002:	6879      	ldr	r1, [r7, #4]
 800e004:	0013      	movs	r3, r2
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	189b      	adds	r3, r3, r2
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	18cb      	adds	r3, r1, r3
 800e00e:	3324      	adds	r3, #36	@ 0x24
 800e010:	2200      	movs	r2, #0
 800e012:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e014:	4b37      	ldr	r3, [pc, #220]	@ (800e0f4 <USBD_CDC_DeInit+0x118>)
 800e016:	781a      	ldrb	r2, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	0011      	movs	r1, r2
 800e01c:	0018      	movs	r0, r3
 800e01e:	f001 f889 	bl	800f134 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e022:	4b34      	ldr	r3, [pc, #208]	@ (800e0f4 <USBD_CDC_DeInit+0x118>)
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	001a      	movs	r2, r3
 800e028:	230f      	movs	r3, #15
 800e02a:	401a      	ands	r2, r3
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	23b2      	movs	r3, #178	@ 0xb2
 800e030:	0059      	lsls	r1, r3, #1
 800e032:	0013      	movs	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	189b      	adds	r3, r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	18c3      	adds	r3, r0, r3
 800e03c:	185b      	adds	r3, r3, r1
 800e03e:	2200      	movs	r2, #0
 800e040:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e042:	4b2d      	ldr	r3, [pc, #180]	@ (800e0f8 <USBD_CDC_DeInit+0x11c>)
 800e044:	781a      	ldrb	r2, [r3, #0]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	0011      	movs	r1, r2
 800e04a:	0018      	movs	r0, r3
 800e04c:	f001 f872 	bl	800f134 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e050:	4b29      	ldr	r3, [pc, #164]	@ (800e0f8 <USBD_CDC_DeInit+0x11c>)
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	001a      	movs	r2, r3
 800e056:	230f      	movs	r3, #15
 800e058:	401a      	ands	r2, r3
 800e05a:	6879      	ldr	r1, [r7, #4]
 800e05c:	0013      	movs	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	189b      	adds	r3, r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	18cb      	adds	r3, r1, r3
 800e066:	3324      	adds	r3, #36	@ 0x24
 800e068:	2200      	movs	r2, #0
 800e06a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e06c:	4b22      	ldr	r3, [pc, #136]	@ (800e0f8 <USBD_CDC_DeInit+0x11c>)
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	001a      	movs	r2, r3
 800e072:	230f      	movs	r3, #15
 800e074:	401a      	ands	r2, r3
 800e076:	6879      	ldr	r1, [r7, #4]
 800e078:	0013      	movs	r3, r2
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	189b      	adds	r3, r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	18cb      	adds	r3, r1, r3
 800e082:	3326      	adds	r3, #38	@ 0x26
 800e084:	2200      	movs	r2, #0
 800e086:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	23b5      	movs	r3, #181	@ 0xb5
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	58d2      	ldr	r2, [r2, r3]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	32b0      	adds	r2, #176	@ 0xb0
 800e094:	0092      	lsls	r2, r2, #2
 800e096:	58d3      	ldr	r3, [r2, r3]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d024      	beq.n	800e0e6 <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	23b5      	movs	r3, #181	@ 0xb5
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	58d3      	ldr	r3, [r2, r3]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	33b0      	adds	r3, #176	@ 0xb0
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	18d3      	adds	r3, r2, r3
 800e0ac:	3304      	adds	r3, #4
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	23b5      	movs	r3, #181	@ 0xb5
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	58d2      	ldr	r2, [r2, r3]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	32b0      	adds	r2, #176	@ 0xb0
 800e0c0:	0092      	lsls	r2, r2, #2
 800e0c2:	58d3      	ldr	r3, [r2, r3]
 800e0c4:	0018      	movs	r0, r3
 800e0c6:	f001 f90d 	bl	800f2e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	23b5      	movs	r3, #181	@ 0xb5
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	58d2      	ldr	r2, [r2, r3]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	32b0      	adds	r2, #176	@ 0xb0
 800e0d6:	0092      	lsls	r2, r2, #2
 800e0d8:	2100      	movs	r1, #0
 800e0da:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	23af      	movs	r3, #175	@ 0xaf
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	0018      	movs	r0, r3
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	b002      	add	sp, #8
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	2000032b 	.word	0x2000032b
 800e0f4:	2000032c 	.word	0x2000032c
 800e0f8:	2000032d 	.word	0x2000032d

0800e0fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	23b5      	movs	r3, #181	@ 0xb5
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	58d2      	ldr	r2, [r2, r3]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	32b0      	adds	r2, #176	@ 0xb0
 800e112:	0092      	lsls	r2, r2, #2
 800e114:	58d3      	ldr	r3, [r2, r3]
 800e116:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e118:	230d      	movs	r3, #13
 800e11a:	18fb      	adds	r3, r7, r3
 800e11c:	2200      	movs	r2, #0
 800e11e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800e120:	230a      	movs	r3, #10
 800e122:	18fb      	adds	r3, r7, r3
 800e124:	2200      	movs	r2, #0
 800e126:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e128:	2317      	movs	r3, #23
 800e12a:	18fb      	adds	r3, r7, r3
 800e12c:	2200      	movs	r2, #0
 800e12e:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d101      	bne.n	800e13a <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 800e136:	2303      	movs	r3, #3
 800e138:	e0d1      	b.n	800e2de <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	001a      	movs	r2, r3
 800e140:	2360      	movs	r3, #96	@ 0x60
 800e142:	4013      	ands	r3, r2
 800e144:	d05b      	beq.n	800e1fe <USBD_CDC_Setup+0x102>
 800e146:	2b20      	cmp	r3, #32
 800e148:	d000      	beq.n	800e14c <USBD_CDC_Setup+0x50>
 800e14a:	e0ba      	b.n	800e2c2 <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	88db      	ldrh	r3, [r3, #6]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d043      	beq.n	800e1dc <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	b25b      	sxtb	r3, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	da22      	bge.n	800e1a4 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	23b5      	movs	r3, #181	@ 0xb5
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	58d3      	ldr	r3, [r2, r3]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	33b0      	adds	r3, #176	@ 0xb0
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	18d3      	adds	r3, r2, r3
 800e16e:	3304      	adds	r3, #4
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	683a      	ldr	r2, [r7, #0]
 800e176:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e178:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e17a:	683a      	ldr	r2, [r7, #0]
 800e17c:	88d2      	ldrh	r2, [r2, #6]
 800e17e:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	88db      	ldrh	r3, [r3, #6]
 800e184:	220e      	movs	r2, #14
 800e186:	18ba      	adds	r2, r7, r2
 800e188:	b299      	uxth	r1, r3
 800e18a:	2907      	cmp	r1, #7
 800e18c:	d900      	bls.n	800e190 <USBD_CDC_Setup+0x94>
 800e18e:	2307      	movs	r3, #7
 800e190:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e192:	6939      	ldr	r1, [r7, #16]
 800e194:	230e      	movs	r3, #14
 800e196:	18fb      	adds	r3, r7, r3
 800e198:	881a      	ldrh	r2, [r3, #0]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	0018      	movs	r0, r3
 800e19e:	f000 fca3 	bl	800eae8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e1a2:	e099      	b.n	800e2d8 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	7859      	ldrb	r1, [r3, #1]
 800e1a8:	693a      	ldr	r2, [r7, #16]
 800e1aa:	2380      	movs	r3, #128	@ 0x80
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	88db      	ldrh	r3, [r3, #6]
 800e1b4:	2b3f      	cmp	r3, #63	@ 0x3f
 800e1b6:	d803      	bhi.n	800e1c0 <USBD_CDC_Setup+0xc4>
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	88db      	ldrh	r3, [r3, #6]
 800e1bc:	b2da      	uxtb	r2, r3
 800e1be:	e000      	b.n	800e1c2 <USBD_CDC_Setup+0xc6>
 800e1c0:	2240      	movs	r2, #64	@ 0x40
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	4948      	ldr	r1, [pc, #288]	@ (800e2e8 <USBD_CDC_Setup+0x1ec>)
 800e1c6:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e1c8:	6939      	ldr	r1, [r7, #16]
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	4a46      	ldr	r2, [pc, #280]	@ (800e2e8 <USBD_CDC_Setup+0x1ec>)
 800e1ce:	5c9b      	ldrb	r3, [r3, r2]
 800e1d0:	001a      	movs	r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	0018      	movs	r0, r3
 800e1d6:	f000 fca3 	bl	800eb20 <USBD_CtlPrepareRx>
      break;
 800e1da:	e07d      	b.n	800e2d8 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	23b5      	movs	r3, #181	@ 0xb5
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	58d3      	ldr	r3, [r2, r3]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	33b0      	adds	r3, #176	@ 0xb0
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	18d3      	adds	r3, r2, r3
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	7850      	ldrb	r0, [r2, #1]
 800e1f6:	6839      	ldr	r1, [r7, #0]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	4798      	blx	r3
      break;
 800e1fc:	e06c      	b.n	800e2d8 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	785b      	ldrb	r3, [r3, #1]
 800e202:	2b0b      	cmp	r3, #11
 800e204:	d03c      	beq.n	800e280 <USBD_CDC_Setup+0x184>
 800e206:	dc4d      	bgt.n	800e2a4 <USBD_CDC_Setup+0x1a8>
 800e208:	2b0a      	cmp	r3, #10
 800e20a:	d01f      	beq.n	800e24c <USBD_CDC_Setup+0x150>
 800e20c:	dc4a      	bgt.n	800e2a4 <USBD_CDC_Setup+0x1a8>
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d002      	beq.n	800e218 <USBD_CDC_Setup+0x11c>
 800e212:	2b01      	cmp	r3, #1
 800e214:	d051      	beq.n	800e2ba <USBD_CDC_Setup+0x1be>
 800e216:	e045      	b.n	800e2a4 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	23a7      	movs	r3, #167	@ 0xa7
 800e21c:	009b      	lsls	r3, r3, #2
 800e21e:	5cd3      	ldrb	r3, [r2, r3]
 800e220:	b2db      	uxtb	r3, r3
 800e222:	2b03      	cmp	r3, #3
 800e224:	d107      	bne.n	800e236 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e226:	230a      	movs	r3, #10
 800e228:	18f9      	adds	r1, r7, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2202      	movs	r2, #2
 800e22e:	0018      	movs	r0, r3
 800e230:	f000 fc5a 	bl	800eae8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e234:	e044      	b.n	800e2c0 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	0011      	movs	r1, r2
 800e23c:	0018      	movs	r0, r3
 800e23e:	f000 fbcb 	bl	800e9d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e242:	2317      	movs	r3, #23
 800e244:	18fb      	adds	r3, r7, r3
 800e246:	2203      	movs	r2, #3
 800e248:	701a      	strb	r2, [r3, #0]
          break;
 800e24a:	e039      	b.n	800e2c0 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	23a7      	movs	r3, #167	@ 0xa7
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	5cd3      	ldrb	r3, [r2, r3]
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b03      	cmp	r3, #3
 800e258:	d107      	bne.n	800e26a <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e25a:	230d      	movs	r3, #13
 800e25c:	18f9      	adds	r1, r7, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2201      	movs	r2, #1
 800e262:	0018      	movs	r0, r3
 800e264:	f000 fc40 	bl	800eae8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e268:	e02a      	b.n	800e2c0 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800e26a:	683a      	ldr	r2, [r7, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	0011      	movs	r1, r2
 800e270:	0018      	movs	r0, r3
 800e272:	f000 fbb1 	bl	800e9d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e276:	2317      	movs	r3, #23
 800e278:	18fb      	adds	r3, r7, r3
 800e27a:	2203      	movs	r2, #3
 800e27c:	701a      	strb	r2, [r3, #0]
          break;
 800e27e:	e01f      	b.n	800e2c0 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	23a7      	movs	r3, #167	@ 0xa7
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	5cd3      	ldrb	r3, [r2, r3]
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b03      	cmp	r3, #3
 800e28c:	d017      	beq.n	800e2be <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	0011      	movs	r1, r2
 800e294:	0018      	movs	r0, r3
 800e296:	f000 fb9f 	bl	800e9d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e29a:	2317      	movs	r3, #23
 800e29c:	18fb      	adds	r3, r7, r3
 800e29e:	2203      	movs	r2, #3
 800e2a0:	701a      	strb	r2, [r3, #0]
          }
          break;
 800e2a2:	e00c      	b.n	800e2be <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	0011      	movs	r1, r2
 800e2aa:	0018      	movs	r0, r3
 800e2ac:	f000 fb94 	bl	800e9d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800e2b0:	2317      	movs	r3, #23
 800e2b2:	18fb      	adds	r3, r7, r3
 800e2b4:	2203      	movs	r2, #3
 800e2b6:	701a      	strb	r2, [r3, #0]
          break;
 800e2b8:	e002      	b.n	800e2c0 <USBD_CDC_Setup+0x1c4>
          break;
 800e2ba:	46c0      	nop			@ (mov r8, r8)
 800e2bc:	e00c      	b.n	800e2d8 <USBD_CDC_Setup+0x1dc>
          break;
 800e2be:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800e2c0:	e00a      	b.n	800e2d8 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	0011      	movs	r1, r2
 800e2c8:	0018      	movs	r0, r3
 800e2ca:	f000 fb85 	bl	800e9d8 <USBD_CtlError>
      ret = USBD_FAIL;
 800e2ce:	2317      	movs	r3, #23
 800e2d0:	18fb      	adds	r3, r7, r3
 800e2d2:	2203      	movs	r2, #3
 800e2d4:	701a      	strb	r2, [r3, #0]
      break;
 800e2d6:	46c0      	nop			@ (mov r8, r8)
  }

  return (uint8_t)ret;
 800e2d8:	2317      	movs	r3, #23
 800e2da:	18fb      	adds	r3, r7, r3
 800e2dc:	781b      	ldrb	r3, [r3, #0]
}
 800e2de:	0018      	movs	r0, r3
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	b006      	add	sp, #24
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	46c0      	nop			@ (mov r8, r8)
 800e2e8:	00000201 	.word	0x00000201

0800e2ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2ec:	b590      	push	{r4, r7, lr}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	000a      	movs	r2, r1
 800e2f6:	1cfb      	adds	r3, r7, #3
 800e2f8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	23b2      	movs	r3, #178	@ 0xb2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	58d3      	ldr	r3, [r2, r3]
 800e302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	23b5      	movs	r3, #181	@ 0xb5
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	58d2      	ldr	r2, [r2, r3]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	32b0      	adds	r2, #176	@ 0xb0
 800e310:	0092      	lsls	r2, r2, #2
 800e312:	58d3      	ldr	r3, [r2, r3]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d101      	bne.n	800e31c <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e318:	2303      	movs	r3, #3
 800e31a:	e072      	b.n	800e402 <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	23b5      	movs	r3, #181	@ 0xb5
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	58d2      	ldr	r2, [r2, r3]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	32b0      	adds	r2, #176	@ 0xb0
 800e328:	0092      	lsls	r2, r2, #2
 800e32a:	58d3      	ldr	r3, [r2, r3]
 800e32c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e32e:	1cfb      	adds	r3, r7, #3
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	220f      	movs	r2, #15
 800e334:	401a      	ands	r2, r3
 800e336:	6879      	ldr	r1, [r7, #4]
 800e338:	0013      	movs	r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	189b      	adds	r3, r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	18cb      	adds	r3, r1, r3
 800e342:	3318      	adds	r3, #24
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d031      	beq.n	800e3ae <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e34a:	1cfb      	adds	r3, r7, #3
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	220f      	movs	r2, #15
 800e350:	401a      	ands	r2, r3
 800e352:	6879      	ldr	r1, [r7, #4]
 800e354:	0013      	movs	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	189b      	adds	r3, r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	18cb      	adds	r3, r1, r3
 800e35e:	3318      	adds	r3, #24
 800e360:	6818      	ldr	r0, [r3, #0]
 800e362:	1cfb      	adds	r3, r7, #3
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	220f      	movs	r2, #15
 800e368:	401a      	ands	r2, r3
 800e36a:	68f9      	ldr	r1, [r7, #12]
 800e36c:	0013      	movs	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	189b      	adds	r3, r3, r2
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	18cb      	adds	r3, r1, r3
 800e376:	3324      	adds	r3, #36	@ 0x24
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	0019      	movs	r1, r3
 800e37c:	f7f1 ff5c 	bl	8000238 <__aeabi_uidivmod>
 800e380:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e382:	d114      	bne.n	800e3ae <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e384:	1cfb      	adds	r3, r7, #3
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	220f      	movs	r2, #15
 800e38a:	401a      	ands	r2, r3
 800e38c:	6879      	ldr	r1, [r7, #4]
 800e38e:	0013      	movs	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	189b      	adds	r3, r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	18cb      	adds	r3, r1, r3
 800e398:	3318      	adds	r3, #24
 800e39a:	2200      	movs	r2, #0
 800e39c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e39e:	1cfb      	adds	r3, r7, #3
 800e3a0:	7819      	ldrb	r1, [r3, #0]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f000 ff1a 	bl	800f1e0 <USBD_LL_Transmit>
 800e3ac:	e028      	b.n	800e400 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 800e3ae:	68ba      	ldr	r2, [r7, #8]
 800e3b0:	2385      	movs	r3, #133	@ 0x85
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	23b5      	movs	r3, #181	@ 0xb5
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	58d3      	ldr	r3, [r2, r3]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	33b0      	adds	r3, #176	@ 0xb0
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	18d3      	adds	r3, r2, r3
 800e3c8:	3304      	adds	r3, #4
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	691b      	ldr	r3, [r3, #16]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d016      	beq.n	800e400 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	23b5      	movs	r3, #181	@ 0xb5
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	58d3      	ldr	r3, [r2, r3]
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	33b0      	adds	r3, #176	@ 0xb0
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	18d3      	adds	r3, r2, r3
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	691c      	ldr	r4, [r3, #16]
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	2382      	movs	r3, #130	@ 0x82
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	58d0      	ldr	r0, [r2, r3]
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	2284      	movs	r2, #132	@ 0x84
 800e3f4:	0092      	lsls	r2, r2, #2
 800e3f6:	1899      	adds	r1, r3, r2
 800e3f8:	1cfb      	adds	r3, r7, #3
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	001a      	movs	r2, r3
 800e3fe:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	0018      	movs	r0, r3
 800e404:	46bd      	mov	sp, r7
 800e406:	b005      	add	sp, #20
 800e408:	bd90      	pop	{r4, r7, pc}

0800e40a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
 800e412:	000a      	movs	r2, r1
 800e414:	1cfb      	adds	r3, r7, #3
 800e416:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	23b5      	movs	r3, #181	@ 0xb5
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	58d2      	ldr	r2, [r2, r3]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	32b0      	adds	r2, #176	@ 0xb0
 800e424:	0092      	lsls	r2, r2, #2
 800e426:	58d3      	ldr	r3, [r2, r3]
 800e428:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	23b5      	movs	r3, #181	@ 0xb5
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	58d2      	ldr	r2, [r2, r3]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	32b0      	adds	r2, #176	@ 0xb0
 800e436:	0092      	lsls	r2, r2, #2
 800e438:	58d3      	ldr	r3, [r2, r3]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d101      	bne.n	800e442 <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 800e43e:	2303      	movs	r3, #3
 800e440:	e022      	b.n	800e488 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e442:	1cfb      	adds	r3, r7, #3
 800e444:	781a      	ldrb	r2, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	0011      	movs	r1, r2
 800e44a:	0018      	movs	r0, r3
 800e44c:	f000 ff28 	bl	800f2a0 <USBD_LL_GetRxDataSize>
 800e450:	0001      	movs	r1, r0
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	2383      	movs	r3, #131	@ 0x83
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	23b5      	movs	r3, #181	@ 0xb5
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	58d3      	ldr	r3, [r2, r3]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	33b0      	adds	r3, #176	@ 0xb0
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	18d3      	adds	r3, r2, r3
 800e46a:	3304      	adds	r3, #4
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	68da      	ldr	r2, [r3, #12]
 800e470:	68f9      	ldr	r1, [r7, #12]
 800e472:	2381      	movs	r3, #129	@ 0x81
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	58c8      	ldr	r0, [r1, r3]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2183      	movs	r1, #131	@ 0x83
 800e47c:	0089      	lsls	r1, r1, #2
 800e47e:	468c      	mov	ip, r1
 800e480:	4463      	add	r3, ip
 800e482:	0019      	movs	r1, r3
 800e484:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 800e486:	2300      	movs	r3, #0
}
 800e488:	0018      	movs	r0, r3
 800e48a:	46bd      	mov	sp, r7
 800e48c:	b004      	add	sp, #16
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	23b5      	movs	r3, #181	@ 0xb5
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	58d2      	ldr	r2, [r2, r3]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	32b0      	adds	r2, #176	@ 0xb0
 800e4a4:	0092      	lsls	r2, r2, #2
 800e4a6:	58d3      	ldr	r3, [r2, r3]
 800e4a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d101      	bne.n	800e4b4 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e4b0:	2303      	movs	r3, #3
 800e4b2:	e02b      	b.n	800e50c <USBD_CDC_EP0_RxReady+0x7c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	23b5      	movs	r3, #181	@ 0xb5
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	58d3      	ldr	r3, [r2, r3]
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	33b0      	adds	r3, #176	@ 0xb0
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	18d3      	adds	r3, r2, r3
 800e4c4:	3304      	adds	r3, #4
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d01e      	beq.n	800e50a <USBD_CDC_EP0_RxReady+0x7a>
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	2380      	movs	r3, #128	@ 0x80
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	5cd3      	ldrb	r3, [r2, r3]
 800e4d4:	2bff      	cmp	r3, #255	@ 0xff
 800e4d6:	d018      	beq.n	800e50a <USBD_CDC_EP0_RxReady+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	23b5      	movs	r3, #181	@ 0xb5
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	58d3      	ldr	r3, [r2, r3]
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	33b0      	adds	r3, #176	@ 0xb0
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	18d3      	adds	r3, r2, r3
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	689b      	ldr	r3, [r3, #8]
 800e4ee:	68f9      	ldr	r1, [r7, #12]
 800e4f0:	2280      	movs	r2, #128	@ 0x80
 800e4f2:	0092      	lsls	r2, r2, #2
 800e4f4:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 800e4f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	4c06      	ldr	r4, [pc, #24]	@ (800e514 <USBD_CDC_EP0_RxReady+0x84>)
 800e4fc:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e4fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	2380      	movs	r3, #128	@ 0x80
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	21ff      	movs	r1, #255	@ 0xff
 800e508:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800e50a:	2300      	movs	r3, #0
}
 800e50c:	0018      	movs	r0, r3
 800e50e:	46bd      	mov	sp, r7
 800e510:	b005      	add	sp, #20
 800e512:	bd90      	pop	{r4, r7, pc}
 800e514:	00000201 	.word	0x00000201

0800e518 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e520:	4b20      	ldr	r3, [pc, #128]	@ (800e5a4 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800e522:	2182      	movs	r1, #130	@ 0x82
 800e524:	0018      	movs	r0, r3
 800e526:	f000 f9f6 	bl	800e916 <USBD_GetEpDesc>
 800e52a:	0003      	movs	r3, r0
 800e52c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e52e:	4b1d      	ldr	r3, [pc, #116]	@ (800e5a4 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800e530:	2101      	movs	r1, #1
 800e532:	0018      	movs	r0, r3
 800e534:	f000 f9ef 	bl	800e916 <USBD_GetEpDesc>
 800e538:	0003      	movs	r3, r0
 800e53a:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e53c:	4b19      	ldr	r3, [pc, #100]	@ (800e5a4 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800e53e:	2181      	movs	r1, #129	@ 0x81
 800e540:	0018      	movs	r0, r3
 800e542:	f000 f9e8 	bl	800e916 <USBD_GetEpDesc>
 800e546:	0003      	movs	r3, r0
 800e548:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	2210      	movs	r2, #16
 800e554:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00b      	beq.n	800e574 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	791a      	ldrb	r2, [r3, #4]
 800e560:	2100      	movs	r1, #0
 800e562:	400a      	ands	r2, r1
 800e564:	1c11      	adds	r1, r2, #0
 800e566:	2240      	movs	r2, #64	@ 0x40
 800e568:	430a      	orrs	r2, r1
 800e56a:	711a      	strb	r2, [r3, #4]
 800e56c:	795a      	ldrb	r2, [r3, #5]
 800e56e:	2100      	movs	r1, #0
 800e570:	400a      	ands	r2, r1
 800e572:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00b      	beq.n	800e592 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	791a      	ldrb	r2, [r3, #4]
 800e57e:	2100      	movs	r1, #0
 800e580:	400a      	ands	r2, r1
 800e582:	1c11      	adds	r1, r2, #0
 800e584:	2240      	movs	r2, #64	@ 0x40
 800e586:	430a      	orrs	r2, r1
 800e588:	711a      	strb	r2, [r3, #4]
 800e58a:	795a      	ldrb	r2, [r3, #5]
 800e58c:	2100      	movs	r1, #0
 800e58e:	400a      	ands	r2, r1
 800e590:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2243      	movs	r2, #67	@ 0x43
 800e596:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e598:	4b02      	ldr	r3, [pc, #8]	@ (800e5a4 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 800e59a:	0018      	movs	r0, r3
 800e59c:	46bd      	mov	sp, r7
 800e59e:	b006      	add	sp, #24
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	46c0      	nop			@ (mov r8, r8)
 800e5a4:	200002e8 	.word	0x200002e8

0800e5a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b086      	sub	sp, #24
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5b0:	4b20      	ldr	r3, [pc, #128]	@ (800e634 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800e5b2:	2182      	movs	r1, #130	@ 0x82
 800e5b4:	0018      	movs	r0, r3
 800e5b6:	f000 f9ae 	bl	800e916 <USBD_GetEpDesc>
 800e5ba:	0003      	movs	r3, r0
 800e5bc:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5be:	4b1d      	ldr	r3, [pc, #116]	@ (800e634 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800e5c0:	2101      	movs	r1, #1
 800e5c2:	0018      	movs	r0, r3
 800e5c4:	f000 f9a7 	bl	800e916 <USBD_GetEpDesc>
 800e5c8:	0003      	movs	r3, r0
 800e5ca:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5cc:	4b19      	ldr	r3, [pc, #100]	@ (800e634 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800e5ce:	2181      	movs	r1, #129	@ 0x81
 800e5d0:	0018      	movs	r0, r3
 800e5d2:	f000 f9a0 	bl	800e916 <USBD_GetEpDesc>
 800e5d6:	0003      	movs	r3, r0
 800e5d8:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d002      	beq.n	800e5e6 <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	2210      	movs	r2, #16
 800e5e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00b      	beq.n	800e604 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	791a      	ldrb	r2, [r3, #4]
 800e5f0:	2100      	movs	r1, #0
 800e5f2:	400a      	ands	r2, r1
 800e5f4:	711a      	strb	r2, [r3, #4]
 800e5f6:	795a      	ldrb	r2, [r3, #5]
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	400a      	ands	r2, r1
 800e5fc:	1c11      	adds	r1, r2, #0
 800e5fe:	2202      	movs	r2, #2
 800e600:	430a      	orrs	r2, r1
 800e602:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00b      	beq.n	800e622 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	791a      	ldrb	r2, [r3, #4]
 800e60e:	2100      	movs	r1, #0
 800e610:	400a      	ands	r2, r1
 800e612:	711a      	strb	r2, [r3, #4]
 800e614:	795a      	ldrb	r2, [r3, #5]
 800e616:	2100      	movs	r1, #0
 800e618:	400a      	ands	r2, r1
 800e61a:	1c11      	adds	r1, r2, #0
 800e61c:	2202      	movs	r2, #2
 800e61e:	430a      	orrs	r2, r1
 800e620:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2243      	movs	r2, #67	@ 0x43
 800e626:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e628:	4b02      	ldr	r3, [pc, #8]	@ (800e634 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 800e62a:	0018      	movs	r0, r3
 800e62c:	46bd      	mov	sp, r7
 800e62e:	b006      	add	sp, #24
 800e630:	bd80      	pop	{r7, pc}
 800e632:	46c0      	nop			@ (mov r8, r8)
 800e634:	200002e8 	.word	0x200002e8

0800e638 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e640:	4b20      	ldr	r3, [pc, #128]	@ (800e6c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800e642:	2182      	movs	r1, #130	@ 0x82
 800e644:	0018      	movs	r0, r3
 800e646:	f000 f966 	bl	800e916 <USBD_GetEpDesc>
 800e64a:	0003      	movs	r3, r0
 800e64c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e64e:	4b1d      	ldr	r3, [pc, #116]	@ (800e6c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800e650:	2101      	movs	r1, #1
 800e652:	0018      	movs	r0, r3
 800e654:	f000 f95f 	bl	800e916 <USBD_GetEpDesc>
 800e658:	0003      	movs	r3, r0
 800e65a:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e65c:	4b19      	ldr	r3, [pc, #100]	@ (800e6c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800e65e:	2181      	movs	r1, #129	@ 0x81
 800e660:	0018      	movs	r0, r3
 800e662:	f000 f958 	bl	800e916 <USBD_GetEpDesc>
 800e666:	0003      	movs	r3, r0
 800e668:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d002      	beq.n	800e676 <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	2210      	movs	r2, #16
 800e674:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00b      	beq.n	800e694 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	791a      	ldrb	r2, [r3, #4]
 800e680:	2100      	movs	r1, #0
 800e682:	400a      	ands	r2, r1
 800e684:	1c11      	adds	r1, r2, #0
 800e686:	2240      	movs	r2, #64	@ 0x40
 800e688:	430a      	orrs	r2, r1
 800e68a:	711a      	strb	r2, [r3, #4]
 800e68c:	795a      	ldrb	r2, [r3, #5]
 800e68e:	2100      	movs	r1, #0
 800e690:	400a      	ands	r2, r1
 800e692:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d00b      	beq.n	800e6b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	791a      	ldrb	r2, [r3, #4]
 800e69e:	2100      	movs	r1, #0
 800e6a0:	400a      	ands	r2, r1
 800e6a2:	1c11      	adds	r1, r2, #0
 800e6a4:	2240      	movs	r2, #64	@ 0x40
 800e6a6:	430a      	orrs	r2, r1
 800e6a8:	711a      	strb	r2, [r3, #4]
 800e6aa:	795a      	ldrb	r2, [r3, #5]
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	400a      	ands	r2, r1
 800e6b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2243      	movs	r2, #67	@ 0x43
 800e6b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e6b8:	4b02      	ldr	r3, [pc, #8]	@ (800e6c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 800e6ba:	0018      	movs	r0, r3
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	b006      	add	sp, #24
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	46c0      	nop			@ (mov r8, r8)
 800e6c4:	200002e8 	.word	0x200002e8

0800e6c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	220a      	movs	r2, #10
 800e6d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e6d6:	4b02      	ldr	r3, [pc, #8]	@ (800e6e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800e6d8:	0018      	movs	r0, r3
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	b002      	add	sp, #8
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	200002a4 	.word	0x200002a4

0800e6e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d101      	bne.n	800e6f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e6f4:	2303      	movs	r3, #3
 800e6f6:	e00b      	b.n	800e710 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	23b5      	movs	r3, #181	@ 0xb5
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	58d3      	ldr	r3, [r2, r3]
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	33b0      	adds	r3, #176	@ 0xb0
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	18d3      	adds	r3, r2, r3
 800e708:	3304      	adds	r3, #4
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	0018      	movs	r0, r3
 800e712:	46bd      	mov	sp, r7
 800e714:	b002      	add	sp, #8
 800e716:	bd80      	pop	{r7, pc}

0800e718 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	23b5      	movs	r3, #181	@ 0xb5
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	58d2      	ldr	r2, [r2, r3]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	32b0      	adds	r2, #176	@ 0xb0
 800e730:	0092      	lsls	r2, r2, #2
 800e732:	58d3      	ldr	r3, [r2, r3]
 800e734:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d101      	bne.n	800e740 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e73c:	2303      	movs	r3, #3
 800e73e:	e00a      	b.n	800e756 <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 800e740:	697a      	ldr	r2, [r7, #20]
 800e742:	2382      	movs	r3, #130	@ 0x82
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	68b9      	ldr	r1, [r7, #8]
 800e748:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	2384      	movs	r3, #132	@ 0x84
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	6879      	ldr	r1, [r7, #4]
 800e752:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800e754:	2300      	movs	r3, #0
}
 800e756:	0018      	movs	r0, r3
 800e758:	46bd      	mov	sp, r7
 800e75a:	b006      	add	sp, #24
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b084      	sub	sp, #16
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	23b5      	movs	r3, #181	@ 0xb5
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	58d2      	ldr	r2, [r2, r3]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	32b0      	adds	r2, #176	@ 0xb0
 800e774:	0092      	lsls	r2, r2, #2
 800e776:	58d3      	ldr	r3, [r2, r3]
 800e778:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d101      	bne.n	800e784 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e780:	2303      	movs	r3, #3
 800e782:	e005      	b.n	800e790 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	2381      	movs	r3, #129	@ 0x81
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	6839      	ldr	r1, [r7, #0]
 800e78c:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800e78e:	2300      	movs	r3, #0
}
 800e790:	0018      	movs	r0, r3
 800e792:	46bd      	mov	sp, r7
 800e794:	b004      	add	sp, #16
 800e796:	bd80      	pop	{r7, pc}

0800e798 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	23b5      	movs	r3, #181	@ 0xb5
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	58d2      	ldr	r2, [r2, r3]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	32b0      	adds	r2, #176	@ 0xb0
 800e7ac:	0092      	lsls	r2, r2, #2
 800e7ae:	58d3      	ldr	r3, [r2, r3]
 800e7b0:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	23b5      	movs	r3, #181	@ 0xb5
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	58d2      	ldr	r2, [r2, r3]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	32b0      	adds	r2, #176	@ 0xb0
 800e7be:	0092      	lsls	r2, r2, #2
 800e7c0:	58d3      	ldr	r3, [r2, r3]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d101      	bne.n	800e7ca <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e7c6:	2303      	movs	r3, #3
 800e7c8:	e01a      	b.n	800e800 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	7c1b      	ldrb	r3, [r3, #16]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d10b      	bne.n	800e7ea <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e808 <USBD_CDC_ReceivePacket+0x70>)
 800e7d4:	7819      	ldrb	r1, [r3, #0]
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	2381      	movs	r3, #129	@ 0x81
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	58d2      	ldr	r2, [r2, r3]
 800e7de:	2380      	movs	r3, #128	@ 0x80
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 fd2c 	bl	800f240 <USBD_LL_PrepareReceive>
 800e7e8:	e009      	b.n	800e7fe <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7ea:	4b07      	ldr	r3, [pc, #28]	@ (800e808 <USBD_CDC_ReceivePacket+0x70>)
 800e7ec:	7819      	ldrb	r1, [r3, #0]
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	2381      	movs	r3, #129	@ 0x81
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	58d2      	ldr	r2, [r2, r3]
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	2340      	movs	r3, #64	@ 0x40
 800e7fa:	f000 fd21 	bl	800f240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	0018      	movs	r0, r3
 800e802:	46bd      	mov	sp, r7
 800e804:	b004      	add	sp, #16
 800e806:	bd80      	pop	{r7, pc}
 800e808:	2000032c 	.word	0x2000032c

0800e80c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e80c:	b5b0      	push	{r4, r5, r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	1dfb      	adds	r3, r7, #7
 800e818:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e820:	2303      	movs	r3, #3
 800e822:	e029      	b.n	800e878 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	23ae      	movs	r3, #174	@ 0xae
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	2100      	movs	r1, #0
 800e82c:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	23b1      	movs	r3, #177	@ 0xb1
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	2100      	movs	r1, #0
 800e836:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	23b4      	movs	r3, #180	@ 0xb4
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	2100      	movs	r1, #0
 800e840:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d004      	beq.n	800e852 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 800e848:	68fa      	ldr	r2, [r7, #12]
 800e84a:	23ad      	movs	r3, #173	@ 0xad
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	68b9      	ldr	r1, [r7, #8]
 800e850:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e852:	68fa      	ldr	r2, [r7, #12]
 800e854:	23a7      	movs	r3, #167	@ 0xa7
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	2101      	movs	r1, #1
 800e85a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	1dfa      	adds	r2, r7, #7
 800e860:	7812      	ldrb	r2, [r2, #0]
 800e862:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e864:	2517      	movs	r5, #23
 800e866:	197c      	adds	r4, r7, r5
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	0018      	movs	r0, r3
 800e86c:	f000 fb94 	bl	800ef98 <USBD_LL_Init>
 800e870:	0003      	movs	r3, r0
 800e872:	7023      	strb	r3, [r4, #0]

  return ret;
 800e874:	197b      	adds	r3, r7, r5
 800e876:	781b      	ldrb	r3, [r3, #0]
}
 800e878:	0018      	movs	r0, r3
 800e87a:	46bd      	mov	sp, r7
 800e87c:	b006      	add	sp, #24
 800e87e:	bdb0      	pop	{r4, r5, r7, pc}

0800e880 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e88a:	230e      	movs	r3, #14
 800e88c:	18fb      	adds	r3, r7, r3
 800e88e:	2200      	movs	r2, #0
 800e890:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d101      	bne.n	800e89c <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e898:	2303      	movs	r3, #3
 800e89a:	e02b      	b.n	800e8f4 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	23ae      	movs	r3, #174	@ 0xae
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	6839      	ldr	r1, [r7, #0]
 800e8a4:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	23b5      	movs	r3, #181	@ 0xb5
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	58d2      	ldr	r2, [r2, r3]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	32ae      	adds	r2, #174	@ 0xae
 800e8b2:	0092      	lsls	r2, r2, #2
 800e8b4:	58d3      	ldr	r3, [r2, r3]
 800e8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d011      	beq.n	800e8e0 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	23b5      	movs	r3, #181	@ 0xb5
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	58d2      	ldr	r2, [r2, r3]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	32ae      	adds	r2, #174	@ 0xae
 800e8c8:	0092      	lsls	r2, r2, #2
 800e8ca:	58d3      	ldr	r3, [r2, r3]
 800e8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ce:	220e      	movs	r2, #14
 800e8d0:	18ba      	adds	r2, r7, r2
 800e8d2:	0010      	movs	r0, r2
 800e8d4:	4798      	blx	r3
 800e8d6:	0001      	movs	r1, r0
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	23b4      	movs	r3, #180	@ 0xb4
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	23b6      	movs	r3, #182	@ 0xb6
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	58d3      	ldr	r3, [r2, r3]
 800e8e8:	1c59      	adds	r1, r3, #1
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	23b6      	movs	r3, #182	@ 0xb6
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	0018      	movs	r0, r3
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	b004      	add	sp, #16
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	0018      	movs	r0, r3
 800e908:	f000 fbb8 	bl	800f07c <USBD_LL_Start>
 800e90c:	0003      	movs	r3, r0
}
 800e90e:	0018      	movs	r0, r3
 800e910:	46bd      	mov	sp, r7
 800e912:	b002      	add	sp, #8
 800e914:	bd80      	pop	{r7, pc}

0800e916 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b086      	sub	sp, #24
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
 800e91e:	000a      	movs	r2, r1
 800e920:	1cfb      	adds	r3, r7, #3
 800e922:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e92c:	2300      	movs	r3, #0
 800e92e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	789a      	ldrb	r2, [r3, #2]
 800e934:	78db      	ldrb	r3, [r3, #3]
 800e936:	021b      	lsls	r3, r3, #8
 800e938:	4313      	orrs	r3, r2
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	7812      	ldrb	r2, [r2, #0]
 800e940:	4293      	cmp	r3, r2
 800e942:	d92a      	bls.n	800e99a <USBD_GetEpDesc+0x84>
  {
    ptr = desc->bLength;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	001a      	movs	r2, r3
 800e94a:	230a      	movs	r3, #10
 800e94c:	18fb      	adds	r3, r7, r3
 800e94e:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 800e950:	e016      	b.n	800e980 <USBD_GetEpDesc+0x6a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e952:	230a      	movs	r3, #10
 800e954:	18fa      	adds	r2, r7, r3
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	0011      	movs	r1, r2
 800e95a:	0018      	movs	r0, r3
 800e95c:	f000 f822 	bl	800e9a4 <USBD_GetNextDesc>
 800e960:	0003      	movs	r3, r0
 800e962:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	785b      	ldrb	r3, [r3, #1]
 800e968:	2b05      	cmp	r3, #5
 800e96a:	d109      	bne.n	800e980 <USBD_GetEpDesc+0x6a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	789b      	ldrb	r3, [r3, #2]
 800e974:	1cfa      	adds	r2, r7, #3
 800e976:	7812      	ldrb	r2, [r2, #0]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d00d      	beq.n	800e998 <USBD_GetEpDesc+0x82>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e97c:	2300      	movs	r3, #0
 800e97e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	789a      	ldrb	r2, [r3, #2]
 800e984:	78db      	ldrb	r3, [r3, #3]
 800e986:	021b      	lsls	r3, r3, #8
 800e988:	4313      	orrs	r3, r2
 800e98a:	b29a      	uxth	r2, r3
 800e98c:	230a      	movs	r3, #10
 800e98e:	18fb      	adds	r3, r7, r3
 800e990:	881b      	ldrh	r3, [r3, #0]
 800e992:	429a      	cmp	r2, r3
 800e994:	d8dd      	bhi.n	800e952 <USBD_GetEpDesc+0x3c>
 800e996:	e000      	b.n	800e99a <USBD_GetEpDesc+0x84>
          break;
 800e998:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e99a:	693b      	ldr	r3, [r7, #16]
}
 800e99c:	0018      	movs	r0, r3
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	b006      	add	sp, #24
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	881b      	ldrh	r3, [r3, #0]
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	7812      	ldrb	r2, [r2, #0]
 800e9ba:	189b      	adds	r3, r3, r2
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	001a      	movs	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	189b      	adds	r3, r3, r2
 800e9cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
}
 800e9d0:	0018      	movs	r0, r3
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	b004      	add	sp, #16
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2180      	movs	r1, #128	@ 0x80
 800e9e6:	0018      	movs	r0, r3
 800e9e8:	f000 fbcf 	bl	800f18a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2100      	movs	r1, #0
 800e9f0:	0018      	movs	r0, r3
 800e9f2:	f000 fbca 	bl	800f18a <USBD_LL_StallEP>
}
 800e9f6:	46c0      	nop			@ (mov r8, r8)
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	b002      	add	sp, #8
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e9fe:	b590      	push	{r4, r7, lr}
 800ea00:	b087      	sub	sp, #28
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	60f8      	str	r0, [r7, #12]
 800ea06:	60b9      	str	r1, [r7, #8]
 800ea08:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea0a:	2417      	movs	r4, #23
 800ea0c:	193b      	adds	r3, r7, r4
 800ea0e:	2200      	movs	r2, #0
 800ea10:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d044      	beq.n	800eaa2 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	0018      	movs	r0, r3
 800ea20:	f000 f843 	bl	800eaaa <USBD_GetLen>
 800ea24:	0003      	movs	r3, r0
 800ea26:	3301      	adds	r3, #1
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	18db      	adds	r3, r3, r3
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ea32:	193b      	adds	r3, r7, r4
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	18d3      	adds	r3, r2, r3
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	7812      	ldrb	r2, [r2, #0]
 800ea3e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea40:	193b      	adds	r3, r7, r4
 800ea42:	781a      	ldrb	r2, [r3, #0]
 800ea44:	193b      	adds	r3, r7, r4
 800ea46:	3201      	adds	r2, #1
 800ea48:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ea4a:	193b      	adds	r3, r7, r4
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	18d3      	adds	r3, r2, r3
 800ea52:	2203      	movs	r2, #3
 800ea54:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea56:	193b      	adds	r3, r7, r4
 800ea58:	781a      	ldrb	r2, [r3, #0]
 800ea5a:	193b      	adds	r3, r7, r4
 800ea5c:	3201      	adds	r2, #1
 800ea5e:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800ea60:	e01a      	b.n	800ea98 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 800ea62:	2117      	movs	r1, #23
 800ea64:	187b      	adds	r3, r7, r1
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	68ba      	ldr	r2, [r7, #8]
 800ea6a:	18d3      	adds	r3, r2, r3
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	7812      	ldrb	r2, [r2, #0]
 800ea70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	3301      	adds	r3, #1
 800ea76:	613b      	str	r3, [r7, #16]
    idx++;
 800ea78:	187b      	adds	r3, r7, r1
 800ea7a:	781a      	ldrb	r2, [r3, #0]
 800ea7c:	187b      	adds	r3, r7, r1
 800ea7e:	3201      	adds	r2, #1
 800ea80:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 800ea82:	187b      	adds	r3, r7, r1
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	68ba      	ldr	r2, [r7, #8]
 800ea88:	18d3      	adds	r3, r2, r3
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	701a      	strb	r2, [r3, #0]
    idx++;
 800ea8e:	187b      	adds	r3, r7, r1
 800ea90:	781a      	ldrb	r2, [r3, #0]
 800ea92:	187b      	adds	r3, r7, r1
 800ea94:	3201      	adds	r2, #1
 800ea96:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1e0      	bne.n	800ea62 <USBD_GetString+0x64>
 800eaa0:	e000      	b.n	800eaa4 <USBD_GetString+0xa6>
    return;
 800eaa2:	46c0      	nop			@ (mov r8, r8)
  }
}
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	b007      	add	sp, #28
 800eaa8:	bd90      	pop	{r4, r7, pc}

0800eaaa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b084      	sub	sp, #16
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eab2:	230f      	movs	r3, #15
 800eab4:	18fb      	adds	r3, r7, r3
 800eab6:	2200      	movs	r2, #0
 800eab8:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eabe:	e008      	b.n	800ead2 <USBD_GetLen+0x28>
  {
    len++;
 800eac0:	210f      	movs	r1, #15
 800eac2:	187b      	adds	r3, r7, r1
 800eac4:	781a      	ldrb	r2, [r3, #0]
 800eac6:	187b      	adds	r3, r7, r1
 800eac8:	3201      	adds	r2, #1
 800eaca:	701a      	strb	r2, [r3, #0]
    pbuff++;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	3301      	adds	r3, #1
 800ead0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d1f2      	bne.n	800eac0 <USBD_GetLen+0x16>
  }

  return len;
 800eada:	230f      	movs	r3, #15
 800eadc:	18fb      	adds	r3, r7, r3
 800eade:	781b      	ldrb	r3, [r3, #0]
}
 800eae0:	0018      	movs	r0, r3
 800eae2:	46bd      	mov	sp, r7
 800eae4:	b004      	add	sp, #16
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	23a5      	movs	r3, #165	@ 0xa5
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	2102      	movs	r1, #2
 800eafc:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	68ba      	ldr	r2, [r7, #8]
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	2100      	movs	r1, #0
 800eb12:	f000 fb65 	bl	800f1e0 <USBD_LL_Transmit>

  return USBD_OK;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	0018      	movs	r0, r3
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	b004      	add	sp, #16
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb2c:	68fa      	ldr	r2, [r7, #12]
 800eb2e:	23a5      	movs	r3, #165	@ 0xa5
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	2103      	movs	r1, #3
 800eb34:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800eb36:	68fa      	ldr	r2, [r7, #12]
 800eb38:	23ac      	movs	r3, #172	@ 0xac
 800eb3a:	005b      	lsls	r3, r3, #1
 800eb3c:	6879      	ldr	r1, [r7, #4]
 800eb3e:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	23ae      	movs	r3, #174	@ 0xae
 800eb44:	005b      	lsls	r3, r3, #1
 800eb46:	6879      	ldr	r1, [r7, #4]
 800eb48:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	2100      	movs	r1, #0
 800eb52:	f000 fb75 	bl	800f240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb56:	2300      	movs	r3, #0
}
 800eb58:	0018      	movs	r0, r3
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	b004      	add	sp, #16
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800eb64:	4914      	ldr	r1, [pc, #80]	@ (800ebb8 <MX_USB_Device_Init+0x58>)
 800eb66:	4b15      	ldr	r3, [pc, #84]	@ (800ebbc <MX_USB_Device_Init+0x5c>)
 800eb68:	2200      	movs	r2, #0
 800eb6a:	0018      	movs	r0, r3
 800eb6c:	f7ff fe4e 	bl	800e80c <USBD_Init>
 800eb70:	1e03      	subs	r3, r0, #0
 800eb72:	d001      	beq.n	800eb78 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800eb74:	f7f9 ff98 	bl	8008aa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800eb78:	4a11      	ldr	r2, [pc, #68]	@ (800ebc0 <MX_USB_Device_Init+0x60>)
 800eb7a:	4b10      	ldr	r3, [pc, #64]	@ (800ebbc <MX_USB_Device_Init+0x5c>)
 800eb7c:	0011      	movs	r1, r2
 800eb7e:	0018      	movs	r0, r3
 800eb80:	f7ff fe7e 	bl	800e880 <USBD_RegisterClass>
 800eb84:	1e03      	subs	r3, r0, #0
 800eb86:	d001      	beq.n	800eb8c <MX_USB_Device_Init+0x2c>
    Error_Handler();
 800eb88:	f7f9 ff8e 	bl	8008aa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800eb8c:	4a0d      	ldr	r2, [pc, #52]	@ (800ebc4 <MX_USB_Device_Init+0x64>)
 800eb8e:	4b0b      	ldr	r3, [pc, #44]	@ (800ebbc <MX_USB_Device_Init+0x5c>)
 800eb90:	0011      	movs	r1, r2
 800eb92:	0018      	movs	r0, r3
 800eb94:	f7ff fda6 	bl	800e6e4 <USBD_CDC_RegisterInterface>
 800eb98:	1e03      	subs	r3, r0, #0
 800eb9a:	d001      	beq.n	800eba0 <MX_USB_Device_Init+0x40>
    Error_Handler();
 800eb9c:	f7f9 ff84 	bl	8008aa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800eba0:	4b06      	ldr	r3, [pc, #24]	@ (800ebbc <MX_USB_Device_Init+0x5c>)
 800eba2:	0018      	movs	r0, r3
 800eba4:	f7ff feaa 	bl	800e8fc <USBD_Start>
 800eba8:	1e03      	subs	r3, r0, #0
 800ebaa:	d001      	beq.n	800ebb0 <MX_USB_Device_Init+0x50>
    Error_Handler();
 800ebac:	f7f9 ff7c 	bl	8008aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ebb0:	46c0      	nop			@ (mov r8, r8)
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	46c0      	nop			@ (mov r8, r8)
 800ebb8:	20000344 	.word	0x20000344
 800ebbc:	20000638 	.word	0x20000638
 800ebc0:	200002b0 	.word	0x200002b0
 800ebc4:	20000330 	.word	0x20000330

0800ebc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ebcc:	4907      	ldr	r1, [pc, #28]	@ (800ebec <CDC_Init_FS+0x24>)
 800ebce:	4b08      	ldr	r3, [pc, #32]	@ (800ebf0 <CDC_Init_FS+0x28>)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	0018      	movs	r0, r3
 800ebd4:	f7ff fda0 	bl	800e718 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ebd8:	4a06      	ldr	r2, [pc, #24]	@ (800ebf4 <CDC_Init_FS+0x2c>)
 800ebda:	4b05      	ldr	r3, [pc, #20]	@ (800ebf0 <CDC_Init_FS+0x28>)
 800ebdc:	0011      	movs	r1, r2
 800ebde:	0018      	movs	r0, r3
 800ebe0:	f7ff fdbd 	bl	800e75e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ebe4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ebe6:	0018      	movs	r0, r3
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	20001114 	.word	0x20001114
 800ebf0:	20000638 	.word	0x20000638
 800ebf4:	20000914 	.word	0x20000914

0800ebf8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ebfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ebfe:	0018      	movs	r0, r3
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6039      	str	r1, [r7, #0]
 800ec0c:	0011      	movs	r1, r2
 800ec0e:	1dfb      	adds	r3, r7, #7
 800ec10:	1c02      	adds	r2, r0, #0
 800ec12:	701a      	strb	r2, [r3, #0]
 800ec14:	1d3b      	adds	r3, r7, #4
 800ec16:	1c0a      	adds	r2, r1, #0
 800ec18:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ec1a:	1dfb      	adds	r3, r7, #7
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	2b23      	cmp	r3, #35	@ 0x23
 800ec20:	d804      	bhi.n	800ec2c <CDC_Control_FS+0x28>
 800ec22:	009a      	lsls	r2, r3, #2
 800ec24:	4b04      	ldr	r3, [pc, #16]	@ (800ec38 <CDC_Control_FS+0x34>)
 800ec26:	18d3      	adds	r3, r2, r3
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ec2c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800ec2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ec30:	0018      	movs	r0, r3
 800ec32:	46bd      	mov	sp, r7
 800ec34:	b002      	add	sp, #8
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	08010c80 	.word	0x08010c80

0800ec3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	4b06      	ldr	r3, [pc, #24]	@ (800ec64 <CDC_Receive_FS+0x28>)
 800ec4a:	0011      	movs	r1, r2
 800ec4c:	0018      	movs	r0, r3
 800ec4e:	f7ff fd86 	bl	800e75e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ec52:	4b04      	ldr	r3, [pc, #16]	@ (800ec64 <CDC_Receive_FS+0x28>)
 800ec54:	0018      	movs	r0, r3
 800ec56:	f7ff fd9f 	bl	800e798 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ec5a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ec5c:	0018      	movs	r0, r3
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	b002      	add	sp, #8
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	20000638 	.word	0x20000638

0800ec68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b086      	sub	sp, #24
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	1dfb      	adds	r3, r7, #7
 800ec74:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800ec76:	2117      	movs	r1, #23
 800ec78:	187b      	adds	r3, r7, r1
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ec7e:	187b      	adds	r3, r7, r1
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	b25b      	sxtb	r3, r3
}
 800ec84:	0018      	movs	r0, r3
 800ec86:	46bd      	mov	sp, r7
 800ec88:	b006      	add	sp, #24
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	0002      	movs	r2, r0
 800ec94:	6039      	str	r1, [r7, #0]
 800ec96:	1dfb      	adds	r3, r7, #7
 800ec98:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	2212      	movs	r2, #18
 800ec9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800eca0:	4b02      	ldr	r3, [pc, #8]	@ (800ecac <USBD_CDC_DeviceDescriptor+0x20>)
}
 800eca2:	0018      	movs	r0, r3
 800eca4:	46bd      	mov	sp, r7
 800eca6:	b002      	add	sp, #8
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	46c0      	nop			@ (mov r8, r8)
 800ecac:	20000364 	.word	0x20000364

0800ecb0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	0002      	movs	r2, r0
 800ecb8:	6039      	str	r1, [r7, #0]
 800ecba:	1dfb      	adds	r3, r7, #7
 800ecbc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	2204      	movs	r2, #4
 800ecc2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ecc4:	4b02      	ldr	r3, [pc, #8]	@ (800ecd0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ecc6:	0018      	movs	r0, r3
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	b002      	add	sp, #8
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	46c0      	nop			@ (mov r8, r8)
 800ecd0:	20000378 	.word	0x20000378

0800ecd4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	0002      	movs	r2, r0
 800ecdc:	6039      	str	r1, [r7, #0]
 800ecde:	1dfb      	adds	r3, r7, #7
 800ece0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ece2:	1dfb      	adds	r3, r7, #7
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d106      	bne.n	800ecf8 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	4908      	ldr	r1, [pc, #32]	@ (800ed10 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800ecee:	4b09      	ldr	r3, [pc, #36]	@ (800ed14 <USBD_CDC_ProductStrDescriptor+0x40>)
 800ecf0:	0018      	movs	r0, r3
 800ecf2:	f7ff fe84 	bl	800e9fe <USBD_GetString>
 800ecf6:	e005      	b.n	800ed04 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ecf8:	683a      	ldr	r2, [r7, #0]
 800ecfa:	4905      	ldr	r1, [pc, #20]	@ (800ed10 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800ecfc:	4b05      	ldr	r3, [pc, #20]	@ (800ed14 <USBD_CDC_ProductStrDescriptor+0x40>)
 800ecfe:	0018      	movs	r0, r3
 800ed00:	f7ff fe7d 	bl	800e9fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed04:	4b02      	ldr	r3, [pc, #8]	@ (800ed10 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800ed06:	0018      	movs	r0, r3
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	b002      	add	sp, #8
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	46c0      	nop			@ (mov r8, r8)
 800ed10:	20001914 	.word	0x20001914
 800ed14:	080105c8 	.word	0x080105c8

0800ed18 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	0002      	movs	r2, r0
 800ed20:	6039      	str	r1, [r7, #0]
 800ed22:	1dfb      	adds	r3, r7, #7
 800ed24:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ed26:	683a      	ldr	r2, [r7, #0]
 800ed28:	4904      	ldr	r1, [pc, #16]	@ (800ed3c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ed2a:	4b05      	ldr	r3, [pc, #20]	@ (800ed40 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 800ed2c:	0018      	movs	r0, r3
 800ed2e:	f7ff fe66 	bl	800e9fe <USBD_GetString>
  return USBD_StrDesc;
 800ed32:	4b02      	ldr	r3, [pc, #8]	@ (800ed3c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 800ed34:	0018      	movs	r0, r3
 800ed36:	46bd      	mov	sp, r7
 800ed38:	b002      	add	sp, #8
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	20001914 	.word	0x20001914
 800ed40:	080105e0 	.word	0x080105e0

0800ed44 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	0002      	movs	r2, r0
 800ed4c:	6039      	str	r1, [r7, #0]
 800ed4e:	1dfb      	adds	r3, r7, #7
 800ed50:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	221a      	movs	r2, #26
 800ed56:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ed58:	f000 f84c 	bl	800edf4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ed5c:	4b02      	ldr	r3, [pc, #8]	@ (800ed68 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 800ed5e:	0018      	movs	r0, r3
 800ed60:	46bd      	mov	sp, r7
 800ed62:	b002      	add	sp, #8
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	46c0      	nop			@ (mov r8, r8)
 800ed68:	2000037c 	.word	0x2000037c

0800ed6c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	0002      	movs	r2, r0
 800ed74:	6039      	str	r1, [r7, #0]
 800ed76:	1dfb      	adds	r3, r7, #7
 800ed78:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800ed7a:	1dfb      	adds	r3, r7, #7
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d106      	bne.n	800ed90 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	4908      	ldr	r1, [pc, #32]	@ (800eda8 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800ed86:	4b09      	ldr	r3, [pc, #36]	@ (800edac <USBD_CDC_ConfigStrDescriptor+0x40>)
 800ed88:	0018      	movs	r0, r3
 800ed8a:	f7ff fe38 	bl	800e9fe <USBD_GetString>
 800ed8e:	e005      	b.n	800ed9c <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ed90:	683a      	ldr	r2, [r7, #0]
 800ed92:	4905      	ldr	r1, [pc, #20]	@ (800eda8 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800ed94:	4b05      	ldr	r3, [pc, #20]	@ (800edac <USBD_CDC_ConfigStrDescriptor+0x40>)
 800ed96:	0018      	movs	r0, r3
 800ed98:	f7ff fe31 	bl	800e9fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed9c:	4b02      	ldr	r3, [pc, #8]	@ (800eda8 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 800ed9e:	0018      	movs	r0, r3
 800eda0:	46bd      	mov	sp, r7
 800eda2:	b002      	add	sp, #8
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	46c0      	nop			@ (mov r8, r8)
 800eda8:	20001914 	.word	0x20001914
 800edac:	080105f4 	.word	0x080105f4

0800edb0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	0002      	movs	r2, r0
 800edb8:	6039      	str	r1, [r7, #0]
 800edba:	1dfb      	adds	r3, r7, #7
 800edbc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800edbe:	1dfb      	adds	r3, r7, #7
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d106      	bne.n	800edd4 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800edc6:	683a      	ldr	r2, [r7, #0]
 800edc8:	4908      	ldr	r1, [pc, #32]	@ (800edec <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800edca:	4b09      	ldr	r3, [pc, #36]	@ (800edf0 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800edcc:	0018      	movs	r0, r3
 800edce:	f7ff fe16 	bl	800e9fe <USBD_GetString>
 800edd2:	e005      	b.n	800ede0 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800edd4:	683a      	ldr	r2, [r7, #0]
 800edd6:	4905      	ldr	r1, [pc, #20]	@ (800edec <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800edd8:	4b05      	ldr	r3, [pc, #20]	@ (800edf0 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800edda:	0018      	movs	r0, r3
 800eddc:	f7ff fe0f 	bl	800e9fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800ede0:	4b02      	ldr	r3, [pc, #8]	@ (800edec <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 800ede2:	0018      	movs	r0, r3
 800ede4:	46bd      	mov	sp, r7
 800ede6:	b002      	add	sp, #8
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	46c0      	nop			@ (mov r8, r8)
 800edec:	20001914 	.word	0x20001914
 800edf0:	08010600 	.word	0x08010600

0800edf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800edfa:	4b10      	ldr	r3, [pc, #64]	@ (800ee3c <Get_SerialNum+0x48>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ee00:	4b0f      	ldr	r3, [pc, #60]	@ (800ee40 <Get_SerialNum+0x4c>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ee06:	4b0f      	ldr	r3, [pc, #60]	@ (800ee44 <Get_SerialNum+0x50>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	18d3      	adds	r3, r2, r3
 800ee12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00b      	beq.n	800ee32 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ee1a:	490b      	ldr	r1, [pc, #44]	@ (800ee48 <Get_SerialNum+0x54>)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2208      	movs	r2, #8
 800ee20:	0018      	movs	r0, r3
 800ee22:	f000 f815 	bl	800ee50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ee26:	4909      	ldr	r1, [pc, #36]	@ (800ee4c <Get_SerialNum+0x58>)
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	2204      	movs	r2, #4
 800ee2c:	0018      	movs	r0, r3
 800ee2e:	f000 f80f 	bl	800ee50 <IntToUnicode>
  }
}
 800ee32:	46c0      	nop			@ (mov r8, r8)
 800ee34:	46bd      	mov	sp, r7
 800ee36:	b004      	add	sp, #16
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	46c0      	nop			@ (mov r8, r8)
 800ee3c:	1fff7590 	.word	0x1fff7590
 800ee40:	1fff7594 	.word	0x1fff7594
 800ee44:	1fff7598 	.word	0x1fff7598
 800ee48:	2000037e 	.word	0x2000037e
 800ee4c:	2000038e 	.word	0x2000038e

0800ee50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b086      	sub	sp, #24
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	1dfb      	adds	r3, r7, #7
 800ee5c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800ee5e:	2117      	movs	r1, #23
 800ee60:	187b      	adds	r3, r7, r1
 800ee62:	2200      	movs	r2, #0
 800ee64:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800ee66:	187b      	adds	r3, r7, r1
 800ee68:	2200      	movs	r2, #0
 800ee6a:	701a      	strb	r2, [r3, #0]
 800ee6c:	e02f      	b.n	800eece <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	0f1b      	lsrs	r3, r3, #28
 800ee72:	2b09      	cmp	r3, #9
 800ee74:	d80d      	bhi.n	800ee92 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	0f1b      	lsrs	r3, r3, #28
 800ee7a:	b2da      	uxtb	r2, r3
 800ee7c:	2317      	movs	r3, #23
 800ee7e:	18fb      	adds	r3, r7, r3
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	0019      	movs	r1, r3
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	185b      	adds	r3, r3, r1
 800ee8a:	3230      	adds	r2, #48	@ 0x30
 800ee8c:	b2d2      	uxtb	r2, r2
 800ee8e:	701a      	strb	r2, [r3, #0]
 800ee90:	e00c      	b.n	800eeac <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	0f1b      	lsrs	r3, r3, #28
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	2317      	movs	r3, #23
 800ee9a:	18fb      	adds	r3, r7, r3
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	005b      	lsls	r3, r3, #1
 800eea0:	0019      	movs	r1, r3
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	185b      	adds	r3, r3, r1
 800eea6:	3237      	adds	r2, #55	@ 0x37
 800eea8:	b2d2      	uxtb	r2, r2
 800eeaa:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	011b      	lsls	r3, r3, #4
 800eeb0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eeb2:	2117      	movs	r1, #23
 800eeb4:	187b      	adds	r3, r7, r1
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	005b      	lsls	r3, r3, #1
 800eeba:	3301      	adds	r3, #1
 800eebc:	68ba      	ldr	r2, [r7, #8]
 800eebe:	18d3      	adds	r3, r2, r3
 800eec0:	2200      	movs	r2, #0
 800eec2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eec4:	187b      	adds	r3, r7, r1
 800eec6:	781a      	ldrb	r2, [r3, #0]
 800eec8:	187b      	adds	r3, r7, r1
 800eeca:	3201      	adds	r2, #1
 800eecc:	701a      	strb	r2, [r3, #0]
 800eece:	2317      	movs	r3, #23
 800eed0:	18fa      	adds	r2, r7, r3
 800eed2:	1dfb      	adds	r3, r7, #7
 800eed4:	7812      	ldrb	r2, [r2, #0]
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d3c8      	bcc.n	800ee6e <IntToUnicode+0x1e>
  }
}
 800eedc:	46c0      	nop			@ (mov r8, r8)
 800eede:	46c0      	nop			@ (mov r8, r8)
 800eee0:	46bd      	mov	sp, r7
 800eee2:	b006      	add	sp, #24
 800eee4:	bd80      	pop	{r7, pc}
	...

0800eee8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eee8:	b590      	push	{r4, r7, lr}
 800eeea:	b099      	sub	sp, #100	@ 0x64
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800eef0:	2414      	movs	r4, #20
 800eef2:	193b      	adds	r3, r7, r4
 800eef4:	0018      	movs	r0, r3
 800eef6:	234c      	movs	r3, #76	@ 0x4c
 800eef8:	001a      	movs	r2, r3
 800eefa:	2100      	movs	r1, #0
 800eefc:	f000 fe23 	bl	800fb46 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a21      	ldr	r2, [pc, #132]	@ (800ef8c <HAL_PCD_MspInit+0xa4>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d13b      	bne.n	800ef82 <HAL_PCD_MspInit+0x9a>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ef0a:	193b      	adds	r3, r7, r4
 800ef0c:	2280      	movs	r2, #128	@ 0x80
 800ef0e:	0452      	lsls	r2, r2, #17
 800ef10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ef12:	193b      	adds	r3, r7, r4
 800ef14:	2200      	movs	r2, #0
 800ef16:	645a      	str	r2, [r3, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ef18:	193b      	adds	r3, r7, r4
 800ef1a:	0018      	movs	r0, r3
 800ef1c:	f7fc fbec 	bl	800b6f8 <HAL_RCCEx_PeriphCLKConfig>
 800ef20:	1e03      	subs	r3, r0, #0
 800ef22:	d001      	beq.n	800ef28 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800ef24:	f7f9 fdc0 	bl	8008aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ef28:	4b19      	ldr	r3, [pc, #100]	@ (800ef90 <HAL_PCD_MspInit+0xa8>)
 800ef2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef2c:	4b18      	ldr	r3, [pc, #96]	@ (800ef90 <HAL_PCD_MspInit+0xa8>)
 800ef2e:	2180      	movs	r1, #128	@ 0x80
 800ef30:	0189      	lsls	r1, r1, #6
 800ef32:	430a      	orrs	r2, r1
 800ef34:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ef36:	4b16      	ldr	r3, [pc, #88]	@ (800ef90 <HAL_PCD_MspInit+0xa8>)
 800ef38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef3a:	2380      	movs	r3, #128	@ 0x80
 800ef3c:	019b      	lsls	r3, r3, #6
 800ef3e:	4013      	ands	r3, r2
 800ef40:	613b      	str	r3, [r7, #16]
 800ef42:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ef44:	4b12      	ldr	r3, [pc, #72]	@ (800ef90 <HAL_PCD_MspInit+0xa8>)
 800ef46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef48:	2380      	movs	r3, #128	@ 0x80
 800ef4a:	055b      	lsls	r3, r3, #21
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	d116      	bne.n	800ef7e <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ef50:	4b0f      	ldr	r3, [pc, #60]	@ (800ef90 <HAL_PCD_MspInit+0xa8>)
 800ef52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef54:	4b0e      	ldr	r3, [pc, #56]	@ (800ef90 <HAL_PCD_MspInit+0xa8>)
 800ef56:	2180      	movs	r1, #128	@ 0x80
 800ef58:	0549      	lsls	r1, r1, #21
 800ef5a:	430a      	orrs	r2, r1
 800ef5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ef5e:	4b0c      	ldr	r3, [pc, #48]	@ (800ef90 <HAL_PCD_MspInit+0xa8>)
 800ef60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef62:	2380      	movs	r3, #128	@ 0x80
 800ef64:	055b      	lsls	r3, r3, #21
 800ef66:	4013      	ands	r3, r2
 800ef68:	60fb      	str	r3, [r7, #12]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800ef6c:	f7fb fe8c 	bl	800ac88 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ef70:	4b07      	ldr	r3, [pc, #28]	@ (800ef90 <HAL_PCD_MspInit+0xa8>)
 800ef72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef74:	4b06      	ldr	r3, [pc, #24]	@ (800ef90 <HAL_PCD_MspInit+0xa8>)
 800ef76:	4907      	ldr	r1, [pc, #28]	@ (800ef94 <HAL_PCD_MspInit+0xac>)
 800ef78:	400a      	ands	r2, r1
 800ef7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 800ef7c:	e001      	b.n	800ef82 <HAL_PCD_MspInit+0x9a>
      HAL_PWREx_EnableVddUSB();
 800ef7e:	f7fb fe83 	bl	800ac88 <HAL_PWREx_EnableVddUSB>
}
 800ef82:	46c0      	nop			@ (mov r8, r8)
 800ef84:	46bd      	mov	sp, r7
 800ef86:	b019      	add	sp, #100	@ 0x64
 800ef88:	bd90      	pop	{r4, r7, pc}
 800ef8a:	46c0      	nop			@ (mov r8, r8)
 800ef8c:	40005c00 	.word	0x40005c00
 800ef90:	40021000 	.word	0x40021000
 800ef94:	efffffff 	.word	0xefffffff

0800ef98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 800efa0:	4a34      	ldr	r2, [pc, #208]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efa2:	23b7      	movs	r3, #183	@ 0xb7
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	6879      	ldr	r1, [r7, #4]
 800efa8:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	23b2      	movs	r3, #178	@ 0xb2
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	4930      	ldr	r1, [pc, #192]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efb2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800efb4:	4b2f      	ldr	r3, [pc, #188]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efb6:	4a30      	ldr	r2, [pc, #192]	@ (800f078 <USBD_LL_Init+0xe0>)
 800efb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800efba:	4b2e      	ldr	r3, [pc, #184]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efbc:	2208      	movs	r2, #8
 800efbe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800efc0:	4b2c      	ldr	r3, [pc, #176]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efc2:	2208      	movs	r2, #8
 800efc4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 800efc6:	4b2b      	ldr	r3, [pc, #172]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efc8:	2202      	movs	r2, #2
 800efca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800efcc:	4b29      	ldr	r3, [pc, #164]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efce:	2202      	movs	r2, #2
 800efd0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800efd2:	4b28      	ldr	r3, [pc, #160]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efd4:	2200      	movs	r2, #0
 800efd6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800efd8:	4b26      	ldr	r3, [pc, #152]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efda:	2200      	movs	r2, #0
 800efdc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800efde:	4b25      	ldr	r3, [pc, #148]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efe0:	2200      	movs	r2, #0
 800efe2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800efe4:	4b23      	ldr	r3, [pc, #140]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efe6:	2200      	movs	r2, #0
 800efe8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800efea:	4b22      	ldr	r3, [pc, #136]	@ (800f074 <USBD_LL_Init+0xdc>)
 800efec:	2200      	movs	r2, #0
 800efee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800eff0:	4b20      	ldr	r3, [pc, #128]	@ (800f074 <USBD_LL_Init+0xdc>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800eff6:	4b1f      	ldr	r3, [pc, #124]	@ (800f074 <USBD_LL_Init+0xdc>)
 800eff8:	2200      	movs	r2, #0
 800effa:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800effc:	4b1d      	ldr	r3, [pc, #116]	@ (800f074 <USBD_LL_Init+0xdc>)
 800effe:	0018      	movs	r0, r3
 800f000:	f7fb fb00 	bl	800a604 <HAL_PCD_Init>
 800f004:	1e03      	subs	r3, r0, #0
 800f006:	d001      	beq.n	800f00c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800f008:	f7f9 fd4e 	bl	8008aa8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	23b2      	movs	r3, #178	@ 0xb2
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	58d0      	ldr	r0, [r2, r3]
 800f014:	2318      	movs	r3, #24
 800f016:	2200      	movs	r2, #0
 800f018:	2100      	movs	r1, #0
 800f01a:	f7fb fdc2 	bl	800aba2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	23b2      	movs	r3, #178	@ 0xb2
 800f022:	009b      	lsls	r3, r3, #2
 800f024:	58d0      	ldr	r0, [r2, r3]
 800f026:	2358      	movs	r3, #88	@ 0x58
 800f028:	2200      	movs	r2, #0
 800f02a:	2180      	movs	r1, #128	@ 0x80
 800f02c:	f7fb fdb9 	bl	800aba2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	23b2      	movs	r3, #178	@ 0xb2
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	58d0      	ldr	r0, [r2, r3]
 800f038:	23c0      	movs	r3, #192	@ 0xc0
 800f03a:	2200      	movs	r2, #0
 800f03c:	2181      	movs	r1, #129	@ 0x81
 800f03e:	f7fb fdb0 	bl	800aba2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	23b2      	movs	r3, #178	@ 0xb2
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	58d0      	ldr	r0, [r2, r3]
 800f04a:	2388      	movs	r3, #136	@ 0x88
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	2200      	movs	r2, #0
 800f050:	2101      	movs	r1, #1
 800f052:	f7fb fda6 	bl	800aba2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	23b2      	movs	r3, #178	@ 0xb2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	58d0      	ldr	r0, [r2, r3]
 800f05e:	2380      	movs	r3, #128	@ 0x80
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	2200      	movs	r2, #0
 800f064:	2182      	movs	r1, #130	@ 0x82
 800f066:	f7fb fd9c 	bl	800aba2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	0018      	movs	r0, r3
 800f06e:	46bd      	mov	sp, r7
 800f070:	b002      	add	sp, #8
 800f072:	bd80      	pop	{r7, pc}
 800f074:	20001b14 	.word	0x20001b14
 800f078:	40005c00 	.word	0x40005c00

0800f07c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f07e:	b085      	sub	sp, #20
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f084:	210f      	movs	r1, #15
 800f086:	187b      	adds	r3, r7, r1
 800f088:	2200      	movs	r2, #0
 800f08a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f08c:	260e      	movs	r6, #14
 800f08e:	19bb      	adds	r3, r7, r6
 800f090:	2200      	movs	r2, #0
 800f092:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	23b2      	movs	r3, #178	@ 0xb2
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	58d3      	ldr	r3, [r2, r3]
 800f09c:	000d      	movs	r5, r1
 800f09e:	187c      	adds	r4, r7, r1
 800f0a0:	0018      	movs	r0, r3
 800f0a2:	f7fb fba9 	bl	800a7f8 <HAL_PCD_Start>
 800f0a6:	0003      	movs	r3, r0
 800f0a8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0aa:	19bc      	adds	r4, r7, r6
 800f0ac:	197b      	adds	r3, r7, r5
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	0018      	movs	r0, r3
 800f0b2:	f000 f91f 	bl	800f2f4 <USBD_Get_USB_Status>
 800f0b6:	0003      	movs	r3, r0
 800f0b8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f0ba:	19bb      	adds	r3, r7, r6
 800f0bc:	781b      	ldrb	r3, [r3, #0]
}
 800f0be:	0018      	movs	r0, r3
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	b005      	add	sp, #20
 800f0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f0c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c8:	b085      	sub	sp, #20
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
 800f0ce:	000c      	movs	r4, r1
 800f0d0:	0010      	movs	r0, r2
 800f0d2:	0019      	movs	r1, r3
 800f0d4:	1cfb      	adds	r3, r7, #3
 800f0d6:	1c22      	adds	r2, r4, #0
 800f0d8:	701a      	strb	r2, [r3, #0]
 800f0da:	1cbb      	adds	r3, r7, #2
 800f0dc:	1c02      	adds	r2, r0, #0
 800f0de:	701a      	strb	r2, [r3, #0]
 800f0e0:	003b      	movs	r3, r7
 800f0e2:	1c0a      	adds	r2, r1, #0
 800f0e4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0e6:	260f      	movs	r6, #15
 800f0e8:	19bb      	adds	r3, r7, r6
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0ee:	250e      	movs	r5, #14
 800f0f0:	197b      	adds	r3, r7, r5
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	23b2      	movs	r3, #178	@ 0xb2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	58d0      	ldr	r0, [r2, r3]
 800f0fe:	19bc      	adds	r4, r7, r6
 800f100:	1cbb      	adds	r3, r7, #2
 800f102:	781d      	ldrb	r5, [r3, #0]
 800f104:	003b      	movs	r3, r7
 800f106:	881a      	ldrh	r2, [r3, #0]
 800f108:	1cfb      	adds	r3, r7, #3
 800f10a:	7819      	ldrb	r1, [r3, #0]
 800f10c:	002b      	movs	r3, r5
 800f10e:	f7fb fb98 	bl	800a842 <HAL_PCD_EP_Open>
 800f112:	0003      	movs	r3, r0
 800f114:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f116:	250e      	movs	r5, #14
 800f118:	197c      	adds	r4, r7, r5
 800f11a:	19bb      	adds	r3, r7, r6
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	0018      	movs	r0, r3
 800f120:	f000 f8e8 	bl	800f2f4 <USBD_Get_USB_Status>
 800f124:	0003      	movs	r3, r0
 800f126:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f128:	197b      	adds	r3, r7, r5
 800f12a:	781b      	ldrb	r3, [r3, #0]
}
 800f12c:	0018      	movs	r0, r3
 800f12e:	46bd      	mov	sp, r7
 800f130:	b005      	add	sp, #20
 800f132:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f134 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	000a      	movs	r2, r1
 800f13e:	1cfb      	adds	r3, r7, #3
 800f140:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f142:	210f      	movs	r1, #15
 800f144:	187b      	adds	r3, r7, r1
 800f146:	2200      	movs	r2, #0
 800f148:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f14a:	260e      	movs	r6, #14
 800f14c:	19bb      	adds	r3, r7, r6
 800f14e:	2200      	movs	r2, #0
 800f150:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	23b2      	movs	r3, #178	@ 0xb2
 800f156:	009b      	lsls	r3, r3, #2
 800f158:	58d2      	ldr	r2, [r2, r3]
 800f15a:	000d      	movs	r5, r1
 800f15c:	187c      	adds	r4, r7, r1
 800f15e:	1cfb      	adds	r3, r7, #3
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	0019      	movs	r1, r3
 800f164:	0010      	movs	r0, r2
 800f166:	f7fb fbdd 	bl	800a924 <HAL_PCD_EP_Close>
 800f16a:	0003      	movs	r3, r0
 800f16c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f16e:	19bc      	adds	r4, r7, r6
 800f170:	197b      	adds	r3, r7, r5
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	0018      	movs	r0, r3
 800f176:	f000 f8bd 	bl	800f2f4 <USBD_Get_USB_Status>
 800f17a:	0003      	movs	r3, r0
 800f17c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f17e:	19bb      	adds	r3, r7, r6
 800f180:	781b      	ldrb	r3, [r3, #0]
}
 800f182:	0018      	movs	r0, r3
 800f184:	46bd      	mov	sp, r7
 800f186:	b005      	add	sp, #20
 800f188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f18a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f18a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f18c:	b085      	sub	sp, #20
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
 800f192:	000a      	movs	r2, r1
 800f194:	1cfb      	adds	r3, r7, #3
 800f196:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f198:	210f      	movs	r1, #15
 800f19a:	187b      	adds	r3, r7, r1
 800f19c:	2200      	movs	r2, #0
 800f19e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1a0:	260e      	movs	r6, #14
 800f1a2:	19bb      	adds	r3, r7, r6
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	23b2      	movs	r3, #178	@ 0xb2
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	58d2      	ldr	r2, [r2, r3]
 800f1b0:	000d      	movs	r5, r1
 800f1b2:	187c      	adds	r4, r7, r1
 800f1b4:	1cfb      	adds	r3, r7, #3
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	0019      	movs	r1, r3
 800f1ba:	0010      	movs	r0, r2
 800f1bc:	f7fb fc93 	bl	800aae6 <HAL_PCD_EP_SetStall>
 800f1c0:	0003      	movs	r3, r0
 800f1c2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1c4:	19bc      	adds	r4, r7, r6
 800f1c6:	197b      	adds	r3, r7, r5
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	0018      	movs	r0, r3
 800f1cc:	f000 f892 	bl	800f2f4 <USBD_Get_USB_Status>
 800f1d0:	0003      	movs	r3, r0
 800f1d2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f1d4:	19bb      	adds	r3, r7, r6
 800f1d6:	781b      	ldrb	r3, [r3, #0]
}
 800f1d8:	0018      	movs	r0, r3
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	b005      	add	sp, #20
 800f1de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f1e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1e2:	b087      	sub	sp, #28
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	607a      	str	r2, [r7, #4]
 800f1ea:	603b      	str	r3, [r7, #0]
 800f1ec:	230b      	movs	r3, #11
 800f1ee:	18fb      	adds	r3, r7, r3
 800f1f0:	1c0a      	adds	r2, r1, #0
 800f1f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1f4:	2617      	movs	r6, #23
 800f1f6:	19bb      	adds	r3, r7, r6
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1fc:	2516      	movs	r5, #22
 800f1fe:	197b      	adds	r3, r7, r5
 800f200:	2200      	movs	r2, #0
 800f202:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	23b2      	movs	r3, #178	@ 0xb2
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	58d0      	ldr	r0, [r2, r3]
 800f20c:	19bc      	adds	r4, r7, r6
 800f20e:	683d      	ldr	r5, [r7, #0]
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	230b      	movs	r3, #11
 800f214:	18fb      	adds	r3, r7, r3
 800f216:	7819      	ldrb	r1, [r3, #0]
 800f218:	002b      	movs	r3, r5
 800f21a:	f7fb fc27 	bl	800aa6c <HAL_PCD_EP_Transmit>
 800f21e:	0003      	movs	r3, r0
 800f220:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f222:	2516      	movs	r5, #22
 800f224:	197c      	adds	r4, r7, r5
 800f226:	19bb      	adds	r3, r7, r6
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	0018      	movs	r0, r3
 800f22c:	f000 f862 	bl	800f2f4 <USBD_Get_USB_Status>
 800f230:	0003      	movs	r3, r0
 800f232:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f234:	197b      	adds	r3, r7, r5
 800f236:	781b      	ldrb	r3, [r3, #0]
}
 800f238:	0018      	movs	r0, r3
 800f23a:	46bd      	mov	sp, r7
 800f23c:	b007      	add	sp, #28
 800f23e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f240 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f242:	b087      	sub	sp, #28
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	607a      	str	r2, [r7, #4]
 800f24a:	603b      	str	r3, [r7, #0]
 800f24c:	230b      	movs	r3, #11
 800f24e:	18fb      	adds	r3, r7, r3
 800f250:	1c0a      	adds	r2, r1, #0
 800f252:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f254:	2617      	movs	r6, #23
 800f256:	19bb      	adds	r3, r7, r6
 800f258:	2200      	movs	r2, #0
 800f25a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f25c:	2516      	movs	r5, #22
 800f25e:	197b      	adds	r3, r7, r5
 800f260:	2200      	movs	r2, #0
 800f262:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	23b2      	movs	r3, #178	@ 0xb2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	58d0      	ldr	r0, [r2, r3]
 800f26c:	19bc      	adds	r4, r7, r6
 800f26e:	683d      	ldr	r5, [r7, #0]
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	230b      	movs	r3, #11
 800f274:	18fb      	adds	r3, r7, r3
 800f276:	7819      	ldrb	r1, [r3, #0]
 800f278:	002b      	movs	r3, r5
 800f27a:	f7fb fba6 	bl	800a9ca <HAL_PCD_EP_Receive>
 800f27e:	0003      	movs	r3, r0
 800f280:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f282:	2516      	movs	r5, #22
 800f284:	197c      	adds	r4, r7, r5
 800f286:	19bb      	adds	r3, r7, r6
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	0018      	movs	r0, r3
 800f28c:	f000 f832 	bl	800f2f4 <USBD_Get_USB_Status>
 800f290:	0003      	movs	r3, r0
 800f292:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f294:	197b      	adds	r3, r7, r5
 800f296:	781b      	ldrb	r3, [r3, #0]
}
 800f298:	0018      	movs	r0, r3
 800f29a:	46bd      	mov	sp, r7
 800f29c:	b007      	add	sp, #28
 800f29e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	000a      	movs	r2, r1
 800f2aa:	1cfb      	adds	r3, r7, #3
 800f2ac:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	23b2      	movs	r3, #178	@ 0xb2
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	58d2      	ldr	r2, [r2, r3]
 800f2b6:	1cfb      	adds	r3, r7, #3
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	0019      	movs	r1, r3
 800f2bc:	0010      	movs	r0, r2
 800f2be:	f7fb fbbc 	bl	800aa3a <HAL_PCD_EP_GetRxCount>
 800f2c2:	0003      	movs	r3, r0
}
 800f2c4:	0018      	movs	r0, r3
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	b002      	add	sp, #8
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f2d4:	4b02      	ldr	r3, [pc, #8]	@ (800f2e0 <USBD_static_malloc+0x14>)
}
 800f2d6:	0018      	movs	r0, r3
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	b002      	add	sp, #8
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	46c0      	nop			@ (mov r8, r8)
 800f2e0:	20001df4 	.word	0x20001df4

0800f2e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]

}
 800f2ec:	46c0      	nop			@ (mov r8, r8)
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	b002      	add	sp, #8
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	0002      	movs	r2, r0
 800f2fc:	1dfb      	adds	r3, r7, #7
 800f2fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f300:	230f      	movs	r3, #15
 800f302:	18fb      	adds	r3, r7, r3
 800f304:	2200      	movs	r2, #0
 800f306:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800f308:	1dfb      	adds	r3, r7, #7
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	2b03      	cmp	r3, #3
 800f30e:	d017      	beq.n	800f340 <USBD_Get_USB_Status+0x4c>
 800f310:	dc1b      	bgt.n	800f34a <USBD_Get_USB_Status+0x56>
 800f312:	2b02      	cmp	r3, #2
 800f314:	d00f      	beq.n	800f336 <USBD_Get_USB_Status+0x42>
 800f316:	dc18      	bgt.n	800f34a <USBD_Get_USB_Status+0x56>
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d002      	beq.n	800f322 <USBD_Get_USB_Status+0x2e>
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d005      	beq.n	800f32c <USBD_Get_USB_Status+0x38>
 800f320:	e013      	b.n	800f34a <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f322:	230f      	movs	r3, #15
 800f324:	18fb      	adds	r3, r7, r3
 800f326:	2200      	movs	r2, #0
 800f328:	701a      	strb	r2, [r3, #0]
    break;
 800f32a:	e013      	b.n	800f354 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f32c:	230f      	movs	r3, #15
 800f32e:	18fb      	adds	r3, r7, r3
 800f330:	2203      	movs	r2, #3
 800f332:	701a      	strb	r2, [r3, #0]
    break;
 800f334:	e00e      	b.n	800f354 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f336:	230f      	movs	r3, #15
 800f338:	18fb      	adds	r3, r7, r3
 800f33a:	2201      	movs	r2, #1
 800f33c:	701a      	strb	r2, [r3, #0]
    break;
 800f33e:	e009      	b.n	800f354 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f340:	230f      	movs	r3, #15
 800f342:	18fb      	adds	r3, r7, r3
 800f344:	2203      	movs	r2, #3
 800f346:	701a      	strb	r2, [r3, #0]
    break;
 800f348:	e004      	b.n	800f354 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800f34a:	230f      	movs	r3, #15
 800f34c:	18fb      	adds	r3, r7, r3
 800f34e:	2203      	movs	r2, #3
 800f350:	701a      	strb	r2, [r3, #0]
    break;
 800f352:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800f354:	230f      	movs	r3, #15
 800f356:	18fb      	adds	r3, r7, r3
 800f358:	781b      	ldrb	r3, [r3, #0]
}
 800f35a:	0018      	movs	r0, r3
 800f35c:	46bd      	mov	sp, r7
 800f35e:	b004      	add	sp, #16
 800f360:	bd80      	pop	{r7, pc}
	...

0800f364 <calloc>:
 800f364:	b510      	push	{r4, lr}
 800f366:	4b03      	ldr	r3, [pc, #12]	@ (800f374 <calloc+0x10>)
 800f368:	000a      	movs	r2, r1
 800f36a:	0001      	movs	r1, r0
 800f36c:	6818      	ldr	r0, [r3, #0]
 800f36e:	f000 f803 	bl	800f378 <_calloc_r>
 800f372:	bd10      	pop	{r4, pc}
 800f374:	200003a4 	.word	0x200003a4

0800f378 <_calloc_r>:
 800f378:	b570      	push	{r4, r5, r6, lr}
 800f37a:	0c0b      	lsrs	r3, r1, #16
 800f37c:	0c15      	lsrs	r5, r2, #16
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d11e      	bne.n	800f3c0 <_calloc_r+0x48>
 800f382:	2d00      	cmp	r5, #0
 800f384:	d10c      	bne.n	800f3a0 <_calloc_r+0x28>
 800f386:	b289      	uxth	r1, r1
 800f388:	b294      	uxth	r4, r2
 800f38a:	434c      	muls	r4, r1
 800f38c:	0021      	movs	r1, r4
 800f38e:	f000 f84d 	bl	800f42c <_malloc_r>
 800f392:	1e05      	subs	r5, r0, #0
 800f394:	d01a      	beq.n	800f3cc <_calloc_r+0x54>
 800f396:	0022      	movs	r2, r4
 800f398:	2100      	movs	r1, #0
 800f39a:	f000 fbd4 	bl	800fb46 <memset>
 800f39e:	e016      	b.n	800f3ce <_calloc_r+0x56>
 800f3a0:	1c2b      	adds	r3, r5, #0
 800f3a2:	1c0c      	adds	r4, r1, #0
 800f3a4:	b289      	uxth	r1, r1
 800f3a6:	b292      	uxth	r2, r2
 800f3a8:	434a      	muls	r2, r1
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	b2a1      	uxth	r1, r4
 800f3ae:	4359      	muls	r1, r3
 800f3b0:	0c14      	lsrs	r4, r2, #16
 800f3b2:	190c      	adds	r4, r1, r4
 800f3b4:	0c23      	lsrs	r3, r4, #16
 800f3b6:	d107      	bne.n	800f3c8 <_calloc_r+0x50>
 800f3b8:	0424      	lsls	r4, r4, #16
 800f3ba:	b292      	uxth	r2, r2
 800f3bc:	4314      	orrs	r4, r2
 800f3be:	e7e5      	b.n	800f38c <_calloc_r+0x14>
 800f3c0:	2d00      	cmp	r5, #0
 800f3c2:	d101      	bne.n	800f3c8 <_calloc_r+0x50>
 800f3c4:	1c14      	adds	r4, r2, #0
 800f3c6:	e7ed      	b.n	800f3a4 <_calloc_r+0x2c>
 800f3c8:	230c      	movs	r3, #12
 800f3ca:	6003      	str	r3, [r0, #0]
 800f3cc:	2500      	movs	r5, #0
 800f3ce:	0028      	movs	r0, r5
 800f3d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f3d4 <free>:
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	4b03      	ldr	r3, [pc, #12]	@ (800f3e4 <free+0x10>)
 800f3d8:	0001      	movs	r1, r0
 800f3da:	6818      	ldr	r0, [r3, #0]
 800f3dc:	f000 fc52 	bl	800fc84 <_free_r>
 800f3e0:	bd10      	pop	{r4, pc}
 800f3e2:	46c0      	nop			@ (mov r8, r8)
 800f3e4:	200003a4 	.word	0x200003a4

0800f3e8 <sbrk_aligned>:
 800f3e8:	b570      	push	{r4, r5, r6, lr}
 800f3ea:	4e0f      	ldr	r6, [pc, #60]	@ (800f428 <sbrk_aligned+0x40>)
 800f3ec:	000d      	movs	r5, r1
 800f3ee:	6831      	ldr	r1, [r6, #0]
 800f3f0:	0004      	movs	r4, r0
 800f3f2:	2900      	cmp	r1, #0
 800f3f4:	d102      	bne.n	800f3fc <sbrk_aligned+0x14>
 800f3f6:	f000 fbe9 	bl	800fbcc <_sbrk_r>
 800f3fa:	6030      	str	r0, [r6, #0]
 800f3fc:	0029      	movs	r1, r5
 800f3fe:	0020      	movs	r0, r4
 800f400:	f000 fbe4 	bl	800fbcc <_sbrk_r>
 800f404:	1c43      	adds	r3, r0, #1
 800f406:	d103      	bne.n	800f410 <sbrk_aligned+0x28>
 800f408:	2501      	movs	r5, #1
 800f40a:	426d      	negs	r5, r5
 800f40c:	0028      	movs	r0, r5
 800f40e:	bd70      	pop	{r4, r5, r6, pc}
 800f410:	2303      	movs	r3, #3
 800f412:	1cc5      	adds	r5, r0, #3
 800f414:	439d      	bics	r5, r3
 800f416:	42a8      	cmp	r0, r5
 800f418:	d0f8      	beq.n	800f40c <sbrk_aligned+0x24>
 800f41a:	1a29      	subs	r1, r5, r0
 800f41c:	0020      	movs	r0, r4
 800f41e:	f000 fbd5 	bl	800fbcc <_sbrk_r>
 800f422:	3001      	adds	r0, #1
 800f424:	d1f2      	bne.n	800f40c <sbrk_aligned+0x24>
 800f426:	e7ef      	b.n	800f408 <sbrk_aligned+0x20>
 800f428:	20002014 	.word	0x20002014

0800f42c <_malloc_r>:
 800f42c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f42e:	2203      	movs	r2, #3
 800f430:	1ccb      	adds	r3, r1, #3
 800f432:	4393      	bics	r3, r2
 800f434:	3308      	adds	r3, #8
 800f436:	0005      	movs	r5, r0
 800f438:	001f      	movs	r7, r3
 800f43a:	2b0c      	cmp	r3, #12
 800f43c:	d234      	bcs.n	800f4a8 <_malloc_r+0x7c>
 800f43e:	270c      	movs	r7, #12
 800f440:	42b9      	cmp	r1, r7
 800f442:	d833      	bhi.n	800f4ac <_malloc_r+0x80>
 800f444:	0028      	movs	r0, r5
 800f446:	f000 f871 	bl	800f52c <__malloc_lock>
 800f44a:	4e37      	ldr	r6, [pc, #220]	@ (800f528 <_malloc_r+0xfc>)
 800f44c:	6833      	ldr	r3, [r6, #0]
 800f44e:	001c      	movs	r4, r3
 800f450:	2c00      	cmp	r4, #0
 800f452:	d12f      	bne.n	800f4b4 <_malloc_r+0x88>
 800f454:	0039      	movs	r1, r7
 800f456:	0028      	movs	r0, r5
 800f458:	f7ff ffc6 	bl	800f3e8 <sbrk_aligned>
 800f45c:	0004      	movs	r4, r0
 800f45e:	1c43      	adds	r3, r0, #1
 800f460:	d15f      	bne.n	800f522 <_malloc_r+0xf6>
 800f462:	6834      	ldr	r4, [r6, #0]
 800f464:	9400      	str	r4, [sp, #0]
 800f466:	9b00      	ldr	r3, [sp, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d14a      	bne.n	800f502 <_malloc_r+0xd6>
 800f46c:	2c00      	cmp	r4, #0
 800f46e:	d052      	beq.n	800f516 <_malloc_r+0xea>
 800f470:	6823      	ldr	r3, [r4, #0]
 800f472:	0028      	movs	r0, r5
 800f474:	18e3      	adds	r3, r4, r3
 800f476:	9900      	ldr	r1, [sp, #0]
 800f478:	9301      	str	r3, [sp, #4]
 800f47a:	f000 fba7 	bl	800fbcc <_sbrk_r>
 800f47e:	9b01      	ldr	r3, [sp, #4]
 800f480:	4283      	cmp	r3, r0
 800f482:	d148      	bne.n	800f516 <_malloc_r+0xea>
 800f484:	6823      	ldr	r3, [r4, #0]
 800f486:	0028      	movs	r0, r5
 800f488:	1aff      	subs	r7, r7, r3
 800f48a:	0039      	movs	r1, r7
 800f48c:	f7ff ffac 	bl	800f3e8 <sbrk_aligned>
 800f490:	3001      	adds	r0, #1
 800f492:	d040      	beq.n	800f516 <_malloc_r+0xea>
 800f494:	6823      	ldr	r3, [r4, #0]
 800f496:	19db      	adds	r3, r3, r7
 800f498:	6023      	str	r3, [r4, #0]
 800f49a:	6833      	ldr	r3, [r6, #0]
 800f49c:	685a      	ldr	r2, [r3, #4]
 800f49e:	2a00      	cmp	r2, #0
 800f4a0:	d133      	bne.n	800f50a <_malloc_r+0xde>
 800f4a2:	9b00      	ldr	r3, [sp, #0]
 800f4a4:	6033      	str	r3, [r6, #0]
 800f4a6:	e019      	b.n	800f4dc <_malloc_r+0xb0>
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	dac9      	bge.n	800f440 <_malloc_r+0x14>
 800f4ac:	230c      	movs	r3, #12
 800f4ae:	602b      	str	r3, [r5, #0]
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f4b4:	6821      	ldr	r1, [r4, #0]
 800f4b6:	1bc9      	subs	r1, r1, r7
 800f4b8:	d420      	bmi.n	800f4fc <_malloc_r+0xd0>
 800f4ba:	290b      	cmp	r1, #11
 800f4bc:	d90a      	bls.n	800f4d4 <_malloc_r+0xa8>
 800f4be:	19e2      	adds	r2, r4, r7
 800f4c0:	6027      	str	r7, [r4, #0]
 800f4c2:	42a3      	cmp	r3, r4
 800f4c4:	d104      	bne.n	800f4d0 <_malloc_r+0xa4>
 800f4c6:	6032      	str	r2, [r6, #0]
 800f4c8:	6863      	ldr	r3, [r4, #4]
 800f4ca:	6011      	str	r1, [r2, #0]
 800f4cc:	6053      	str	r3, [r2, #4]
 800f4ce:	e005      	b.n	800f4dc <_malloc_r+0xb0>
 800f4d0:	605a      	str	r2, [r3, #4]
 800f4d2:	e7f9      	b.n	800f4c8 <_malloc_r+0x9c>
 800f4d4:	6862      	ldr	r2, [r4, #4]
 800f4d6:	42a3      	cmp	r3, r4
 800f4d8:	d10e      	bne.n	800f4f8 <_malloc_r+0xcc>
 800f4da:	6032      	str	r2, [r6, #0]
 800f4dc:	0028      	movs	r0, r5
 800f4de:	f000 f82d 	bl	800f53c <__malloc_unlock>
 800f4e2:	0020      	movs	r0, r4
 800f4e4:	2207      	movs	r2, #7
 800f4e6:	300b      	adds	r0, #11
 800f4e8:	1d23      	adds	r3, r4, #4
 800f4ea:	4390      	bics	r0, r2
 800f4ec:	1ac2      	subs	r2, r0, r3
 800f4ee:	4298      	cmp	r0, r3
 800f4f0:	d0df      	beq.n	800f4b2 <_malloc_r+0x86>
 800f4f2:	1a1b      	subs	r3, r3, r0
 800f4f4:	50a3      	str	r3, [r4, r2]
 800f4f6:	e7dc      	b.n	800f4b2 <_malloc_r+0x86>
 800f4f8:	605a      	str	r2, [r3, #4]
 800f4fa:	e7ef      	b.n	800f4dc <_malloc_r+0xb0>
 800f4fc:	0023      	movs	r3, r4
 800f4fe:	6864      	ldr	r4, [r4, #4]
 800f500:	e7a6      	b.n	800f450 <_malloc_r+0x24>
 800f502:	9c00      	ldr	r4, [sp, #0]
 800f504:	6863      	ldr	r3, [r4, #4]
 800f506:	9300      	str	r3, [sp, #0]
 800f508:	e7ad      	b.n	800f466 <_malloc_r+0x3a>
 800f50a:	001a      	movs	r2, r3
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	42a3      	cmp	r3, r4
 800f510:	d1fb      	bne.n	800f50a <_malloc_r+0xde>
 800f512:	2300      	movs	r3, #0
 800f514:	e7da      	b.n	800f4cc <_malloc_r+0xa0>
 800f516:	230c      	movs	r3, #12
 800f518:	0028      	movs	r0, r5
 800f51a:	602b      	str	r3, [r5, #0]
 800f51c:	f000 f80e 	bl	800f53c <__malloc_unlock>
 800f520:	e7c6      	b.n	800f4b0 <_malloc_r+0x84>
 800f522:	6007      	str	r7, [r0, #0]
 800f524:	e7da      	b.n	800f4dc <_malloc_r+0xb0>
 800f526:	46c0      	nop			@ (mov r8, r8)
 800f528:	20002018 	.word	0x20002018

0800f52c <__malloc_lock>:
 800f52c:	b510      	push	{r4, lr}
 800f52e:	4802      	ldr	r0, [pc, #8]	@ (800f538 <__malloc_lock+0xc>)
 800f530:	f000 fb9d 	bl	800fc6e <__retarget_lock_acquire_recursive>
 800f534:	bd10      	pop	{r4, pc}
 800f536:	46c0      	nop			@ (mov r8, r8)
 800f538:	2000215c 	.word	0x2000215c

0800f53c <__malloc_unlock>:
 800f53c:	b510      	push	{r4, lr}
 800f53e:	4802      	ldr	r0, [pc, #8]	@ (800f548 <__malloc_unlock+0xc>)
 800f540:	f000 fb96 	bl	800fc70 <__retarget_lock_release_recursive>
 800f544:	bd10      	pop	{r4, pc}
 800f546:	46c0      	nop			@ (mov r8, r8)
 800f548:	2000215c 	.word	0x2000215c

0800f54c <__sflush_r>:
 800f54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f54e:	220c      	movs	r2, #12
 800f550:	5e8b      	ldrsh	r3, [r1, r2]
 800f552:	0005      	movs	r5, r0
 800f554:	000c      	movs	r4, r1
 800f556:	071a      	lsls	r2, r3, #28
 800f558:	d456      	bmi.n	800f608 <__sflush_r+0xbc>
 800f55a:	684a      	ldr	r2, [r1, #4]
 800f55c:	2a00      	cmp	r2, #0
 800f55e:	dc02      	bgt.n	800f566 <__sflush_r+0x1a>
 800f560:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f562:	2a00      	cmp	r2, #0
 800f564:	dd4e      	ble.n	800f604 <__sflush_r+0xb8>
 800f566:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f568:	2f00      	cmp	r7, #0
 800f56a:	d04b      	beq.n	800f604 <__sflush_r+0xb8>
 800f56c:	2200      	movs	r2, #0
 800f56e:	2080      	movs	r0, #128	@ 0x80
 800f570:	682e      	ldr	r6, [r5, #0]
 800f572:	602a      	str	r2, [r5, #0]
 800f574:	001a      	movs	r2, r3
 800f576:	0140      	lsls	r0, r0, #5
 800f578:	6a21      	ldr	r1, [r4, #32]
 800f57a:	4002      	ands	r2, r0
 800f57c:	4203      	tst	r3, r0
 800f57e:	d033      	beq.n	800f5e8 <__sflush_r+0x9c>
 800f580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f582:	89a3      	ldrh	r3, [r4, #12]
 800f584:	075b      	lsls	r3, r3, #29
 800f586:	d506      	bpl.n	800f596 <__sflush_r+0x4a>
 800f588:	6863      	ldr	r3, [r4, #4]
 800f58a:	1ad2      	subs	r2, r2, r3
 800f58c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <__sflush_r+0x4a>
 800f592:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f594:	1ad2      	subs	r2, r2, r3
 800f596:	2300      	movs	r3, #0
 800f598:	0028      	movs	r0, r5
 800f59a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f59c:	6a21      	ldr	r1, [r4, #32]
 800f59e:	47b8      	blx	r7
 800f5a0:	89a2      	ldrh	r2, [r4, #12]
 800f5a2:	1c43      	adds	r3, r0, #1
 800f5a4:	d106      	bne.n	800f5b4 <__sflush_r+0x68>
 800f5a6:	6829      	ldr	r1, [r5, #0]
 800f5a8:	291d      	cmp	r1, #29
 800f5aa:	d846      	bhi.n	800f63a <__sflush_r+0xee>
 800f5ac:	4b29      	ldr	r3, [pc, #164]	@ (800f654 <__sflush_r+0x108>)
 800f5ae:	410b      	asrs	r3, r1
 800f5b0:	07db      	lsls	r3, r3, #31
 800f5b2:	d442      	bmi.n	800f63a <__sflush_r+0xee>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	6063      	str	r3, [r4, #4]
 800f5b8:	6923      	ldr	r3, [r4, #16]
 800f5ba:	6023      	str	r3, [r4, #0]
 800f5bc:	04d2      	lsls	r2, r2, #19
 800f5be:	d505      	bpl.n	800f5cc <__sflush_r+0x80>
 800f5c0:	1c43      	adds	r3, r0, #1
 800f5c2:	d102      	bne.n	800f5ca <__sflush_r+0x7e>
 800f5c4:	682b      	ldr	r3, [r5, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d100      	bne.n	800f5cc <__sflush_r+0x80>
 800f5ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5ce:	602e      	str	r6, [r5, #0]
 800f5d0:	2900      	cmp	r1, #0
 800f5d2:	d017      	beq.n	800f604 <__sflush_r+0xb8>
 800f5d4:	0023      	movs	r3, r4
 800f5d6:	3344      	adds	r3, #68	@ 0x44
 800f5d8:	4299      	cmp	r1, r3
 800f5da:	d002      	beq.n	800f5e2 <__sflush_r+0x96>
 800f5dc:	0028      	movs	r0, r5
 800f5de:	f000 fb51 	bl	800fc84 <_free_r>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5e6:	e00d      	b.n	800f604 <__sflush_r+0xb8>
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	0028      	movs	r0, r5
 800f5ec:	47b8      	blx	r7
 800f5ee:	0002      	movs	r2, r0
 800f5f0:	1c43      	adds	r3, r0, #1
 800f5f2:	d1c6      	bne.n	800f582 <__sflush_r+0x36>
 800f5f4:	682b      	ldr	r3, [r5, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d0c3      	beq.n	800f582 <__sflush_r+0x36>
 800f5fa:	2b1d      	cmp	r3, #29
 800f5fc:	d001      	beq.n	800f602 <__sflush_r+0xb6>
 800f5fe:	2b16      	cmp	r3, #22
 800f600:	d11a      	bne.n	800f638 <__sflush_r+0xec>
 800f602:	602e      	str	r6, [r5, #0]
 800f604:	2000      	movs	r0, #0
 800f606:	e01e      	b.n	800f646 <__sflush_r+0xfa>
 800f608:	690e      	ldr	r6, [r1, #16]
 800f60a:	2e00      	cmp	r6, #0
 800f60c:	d0fa      	beq.n	800f604 <__sflush_r+0xb8>
 800f60e:	680f      	ldr	r7, [r1, #0]
 800f610:	600e      	str	r6, [r1, #0]
 800f612:	1bba      	subs	r2, r7, r6
 800f614:	9201      	str	r2, [sp, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	079b      	lsls	r3, r3, #30
 800f61a:	d100      	bne.n	800f61e <__sflush_r+0xd2>
 800f61c:	694a      	ldr	r2, [r1, #20]
 800f61e:	60a2      	str	r2, [r4, #8]
 800f620:	9b01      	ldr	r3, [sp, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	ddee      	ble.n	800f604 <__sflush_r+0xb8>
 800f626:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f628:	0032      	movs	r2, r6
 800f62a:	001f      	movs	r7, r3
 800f62c:	0028      	movs	r0, r5
 800f62e:	9b01      	ldr	r3, [sp, #4]
 800f630:	6a21      	ldr	r1, [r4, #32]
 800f632:	47b8      	blx	r7
 800f634:	2800      	cmp	r0, #0
 800f636:	dc07      	bgt.n	800f648 <__sflush_r+0xfc>
 800f638:	89a2      	ldrh	r2, [r4, #12]
 800f63a:	2340      	movs	r3, #64	@ 0x40
 800f63c:	2001      	movs	r0, #1
 800f63e:	4313      	orrs	r3, r2
 800f640:	b21b      	sxth	r3, r3
 800f642:	81a3      	strh	r3, [r4, #12]
 800f644:	4240      	negs	r0, r0
 800f646:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f648:	9b01      	ldr	r3, [sp, #4]
 800f64a:	1836      	adds	r6, r6, r0
 800f64c:	1a1b      	subs	r3, r3, r0
 800f64e:	9301      	str	r3, [sp, #4]
 800f650:	e7e6      	b.n	800f620 <__sflush_r+0xd4>
 800f652:	46c0      	nop			@ (mov r8, r8)
 800f654:	dfbffffe 	.word	0xdfbffffe

0800f658 <_fflush_r>:
 800f658:	690b      	ldr	r3, [r1, #16]
 800f65a:	b570      	push	{r4, r5, r6, lr}
 800f65c:	0005      	movs	r5, r0
 800f65e:	000c      	movs	r4, r1
 800f660:	2b00      	cmp	r3, #0
 800f662:	d102      	bne.n	800f66a <_fflush_r+0x12>
 800f664:	2500      	movs	r5, #0
 800f666:	0028      	movs	r0, r5
 800f668:	bd70      	pop	{r4, r5, r6, pc}
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d004      	beq.n	800f678 <_fflush_r+0x20>
 800f66e:	6a03      	ldr	r3, [r0, #32]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d101      	bne.n	800f678 <_fflush_r+0x20>
 800f674:	f000 f8c4 	bl	800f800 <__sinit>
 800f678:	220c      	movs	r2, #12
 800f67a:	5ea3      	ldrsh	r3, [r4, r2]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d0f1      	beq.n	800f664 <_fflush_r+0xc>
 800f680:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f682:	07d2      	lsls	r2, r2, #31
 800f684:	d404      	bmi.n	800f690 <_fflush_r+0x38>
 800f686:	059b      	lsls	r3, r3, #22
 800f688:	d402      	bmi.n	800f690 <_fflush_r+0x38>
 800f68a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f68c:	f000 faef 	bl	800fc6e <__retarget_lock_acquire_recursive>
 800f690:	0028      	movs	r0, r5
 800f692:	0021      	movs	r1, r4
 800f694:	f7ff ff5a 	bl	800f54c <__sflush_r>
 800f698:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f69a:	0005      	movs	r5, r0
 800f69c:	07db      	lsls	r3, r3, #31
 800f69e:	d4e2      	bmi.n	800f666 <_fflush_r+0xe>
 800f6a0:	89a3      	ldrh	r3, [r4, #12]
 800f6a2:	059b      	lsls	r3, r3, #22
 800f6a4:	d4df      	bmi.n	800f666 <_fflush_r+0xe>
 800f6a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6a8:	f000 fae2 	bl	800fc70 <__retarget_lock_release_recursive>
 800f6ac:	e7db      	b.n	800f666 <_fflush_r+0xe>
	...

0800f6b0 <fflush>:
 800f6b0:	0001      	movs	r1, r0
 800f6b2:	b510      	push	{r4, lr}
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d105      	bne.n	800f6c4 <fflush+0x14>
 800f6b8:	4a05      	ldr	r2, [pc, #20]	@ (800f6d0 <fflush+0x20>)
 800f6ba:	4906      	ldr	r1, [pc, #24]	@ (800f6d4 <fflush+0x24>)
 800f6bc:	4806      	ldr	r0, [pc, #24]	@ (800f6d8 <fflush+0x28>)
 800f6be:	f000 f8b7 	bl	800f830 <_fwalk_sglue>
 800f6c2:	bd10      	pop	{r4, pc}
 800f6c4:	4b05      	ldr	r3, [pc, #20]	@ (800f6dc <fflush+0x2c>)
 800f6c6:	6818      	ldr	r0, [r3, #0]
 800f6c8:	f7ff ffc6 	bl	800f658 <_fflush_r>
 800f6cc:	e7f9      	b.n	800f6c2 <fflush+0x12>
 800f6ce:	46c0      	nop			@ (mov r8, r8)
 800f6d0:	20000398 	.word	0x20000398
 800f6d4:	0800f659 	.word	0x0800f659
 800f6d8:	200003a8 	.word	0x200003a8
 800f6dc:	200003a4 	.word	0x200003a4

0800f6e0 <std>:
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	b510      	push	{r4, lr}
 800f6e4:	0004      	movs	r4, r0
 800f6e6:	6003      	str	r3, [r0, #0]
 800f6e8:	6043      	str	r3, [r0, #4]
 800f6ea:	6083      	str	r3, [r0, #8]
 800f6ec:	8181      	strh	r1, [r0, #12]
 800f6ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800f6f0:	81c2      	strh	r2, [r0, #14]
 800f6f2:	6103      	str	r3, [r0, #16]
 800f6f4:	6143      	str	r3, [r0, #20]
 800f6f6:	6183      	str	r3, [r0, #24]
 800f6f8:	0019      	movs	r1, r3
 800f6fa:	2208      	movs	r2, #8
 800f6fc:	305c      	adds	r0, #92	@ 0x5c
 800f6fe:	f000 fa22 	bl	800fb46 <memset>
 800f702:	4b0b      	ldr	r3, [pc, #44]	@ (800f730 <std+0x50>)
 800f704:	6224      	str	r4, [r4, #32]
 800f706:	6263      	str	r3, [r4, #36]	@ 0x24
 800f708:	4b0a      	ldr	r3, [pc, #40]	@ (800f734 <std+0x54>)
 800f70a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f70c:	4b0a      	ldr	r3, [pc, #40]	@ (800f738 <std+0x58>)
 800f70e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f710:	4b0a      	ldr	r3, [pc, #40]	@ (800f73c <std+0x5c>)
 800f712:	6323      	str	r3, [r4, #48]	@ 0x30
 800f714:	4b0a      	ldr	r3, [pc, #40]	@ (800f740 <std+0x60>)
 800f716:	429c      	cmp	r4, r3
 800f718:	d005      	beq.n	800f726 <std+0x46>
 800f71a:	4b0a      	ldr	r3, [pc, #40]	@ (800f744 <std+0x64>)
 800f71c:	429c      	cmp	r4, r3
 800f71e:	d002      	beq.n	800f726 <std+0x46>
 800f720:	4b09      	ldr	r3, [pc, #36]	@ (800f748 <std+0x68>)
 800f722:	429c      	cmp	r4, r3
 800f724:	d103      	bne.n	800f72e <std+0x4e>
 800f726:	0020      	movs	r0, r4
 800f728:	3058      	adds	r0, #88	@ 0x58
 800f72a:	f000 fa9f 	bl	800fc6c <__retarget_lock_init_recursive>
 800f72e:	bd10      	pop	{r4, pc}
 800f730:	0800f949 	.word	0x0800f949
 800f734:	0800f971 	.word	0x0800f971
 800f738:	0800f9a9 	.word	0x0800f9a9
 800f73c:	0800f9d5 	.word	0x0800f9d5
 800f740:	2000201c 	.word	0x2000201c
 800f744:	20002084 	.word	0x20002084
 800f748:	200020ec 	.word	0x200020ec

0800f74c <stdio_exit_handler>:
 800f74c:	b510      	push	{r4, lr}
 800f74e:	4a03      	ldr	r2, [pc, #12]	@ (800f75c <stdio_exit_handler+0x10>)
 800f750:	4903      	ldr	r1, [pc, #12]	@ (800f760 <stdio_exit_handler+0x14>)
 800f752:	4804      	ldr	r0, [pc, #16]	@ (800f764 <stdio_exit_handler+0x18>)
 800f754:	f000 f86c 	bl	800f830 <_fwalk_sglue>
 800f758:	bd10      	pop	{r4, pc}
 800f75a:	46c0      	nop			@ (mov r8, r8)
 800f75c:	20000398 	.word	0x20000398
 800f760:	0800f659 	.word	0x0800f659
 800f764:	200003a8 	.word	0x200003a8

0800f768 <cleanup_stdio>:
 800f768:	6841      	ldr	r1, [r0, #4]
 800f76a:	4b0b      	ldr	r3, [pc, #44]	@ (800f798 <cleanup_stdio+0x30>)
 800f76c:	b510      	push	{r4, lr}
 800f76e:	0004      	movs	r4, r0
 800f770:	4299      	cmp	r1, r3
 800f772:	d001      	beq.n	800f778 <cleanup_stdio+0x10>
 800f774:	f7ff ff70 	bl	800f658 <_fflush_r>
 800f778:	68a1      	ldr	r1, [r4, #8]
 800f77a:	4b08      	ldr	r3, [pc, #32]	@ (800f79c <cleanup_stdio+0x34>)
 800f77c:	4299      	cmp	r1, r3
 800f77e:	d002      	beq.n	800f786 <cleanup_stdio+0x1e>
 800f780:	0020      	movs	r0, r4
 800f782:	f7ff ff69 	bl	800f658 <_fflush_r>
 800f786:	68e1      	ldr	r1, [r4, #12]
 800f788:	4b05      	ldr	r3, [pc, #20]	@ (800f7a0 <cleanup_stdio+0x38>)
 800f78a:	4299      	cmp	r1, r3
 800f78c:	d002      	beq.n	800f794 <cleanup_stdio+0x2c>
 800f78e:	0020      	movs	r0, r4
 800f790:	f7ff ff62 	bl	800f658 <_fflush_r>
 800f794:	bd10      	pop	{r4, pc}
 800f796:	46c0      	nop			@ (mov r8, r8)
 800f798:	2000201c 	.word	0x2000201c
 800f79c:	20002084 	.word	0x20002084
 800f7a0:	200020ec 	.word	0x200020ec

0800f7a4 <global_stdio_init.part.0>:
 800f7a4:	b510      	push	{r4, lr}
 800f7a6:	4b09      	ldr	r3, [pc, #36]	@ (800f7cc <global_stdio_init.part.0+0x28>)
 800f7a8:	4a09      	ldr	r2, [pc, #36]	@ (800f7d0 <global_stdio_init.part.0+0x2c>)
 800f7aa:	2104      	movs	r1, #4
 800f7ac:	601a      	str	r2, [r3, #0]
 800f7ae:	4809      	ldr	r0, [pc, #36]	@ (800f7d4 <global_stdio_init.part.0+0x30>)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	f7ff ff95 	bl	800f6e0 <std>
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	2109      	movs	r1, #9
 800f7ba:	4807      	ldr	r0, [pc, #28]	@ (800f7d8 <global_stdio_init.part.0+0x34>)
 800f7bc:	f7ff ff90 	bl	800f6e0 <std>
 800f7c0:	2202      	movs	r2, #2
 800f7c2:	2112      	movs	r1, #18
 800f7c4:	4805      	ldr	r0, [pc, #20]	@ (800f7dc <global_stdio_init.part.0+0x38>)
 800f7c6:	f7ff ff8b 	bl	800f6e0 <std>
 800f7ca:	bd10      	pop	{r4, pc}
 800f7cc:	20002154 	.word	0x20002154
 800f7d0:	0800f74d 	.word	0x0800f74d
 800f7d4:	2000201c 	.word	0x2000201c
 800f7d8:	20002084 	.word	0x20002084
 800f7dc:	200020ec 	.word	0x200020ec

0800f7e0 <__sfp_lock_acquire>:
 800f7e0:	b510      	push	{r4, lr}
 800f7e2:	4802      	ldr	r0, [pc, #8]	@ (800f7ec <__sfp_lock_acquire+0xc>)
 800f7e4:	f000 fa43 	bl	800fc6e <__retarget_lock_acquire_recursive>
 800f7e8:	bd10      	pop	{r4, pc}
 800f7ea:	46c0      	nop			@ (mov r8, r8)
 800f7ec:	2000215d 	.word	0x2000215d

0800f7f0 <__sfp_lock_release>:
 800f7f0:	b510      	push	{r4, lr}
 800f7f2:	4802      	ldr	r0, [pc, #8]	@ (800f7fc <__sfp_lock_release+0xc>)
 800f7f4:	f000 fa3c 	bl	800fc70 <__retarget_lock_release_recursive>
 800f7f8:	bd10      	pop	{r4, pc}
 800f7fa:	46c0      	nop			@ (mov r8, r8)
 800f7fc:	2000215d 	.word	0x2000215d

0800f800 <__sinit>:
 800f800:	b510      	push	{r4, lr}
 800f802:	0004      	movs	r4, r0
 800f804:	f7ff ffec 	bl	800f7e0 <__sfp_lock_acquire>
 800f808:	6a23      	ldr	r3, [r4, #32]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d002      	beq.n	800f814 <__sinit+0x14>
 800f80e:	f7ff ffef 	bl	800f7f0 <__sfp_lock_release>
 800f812:	bd10      	pop	{r4, pc}
 800f814:	4b04      	ldr	r3, [pc, #16]	@ (800f828 <__sinit+0x28>)
 800f816:	6223      	str	r3, [r4, #32]
 800f818:	4b04      	ldr	r3, [pc, #16]	@ (800f82c <__sinit+0x2c>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d1f6      	bne.n	800f80e <__sinit+0xe>
 800f820:	f7ff ffc0 	bl	800f7a4 <global_stdio_init.part.0>
 800f824:	e7f3      	b.n	800f80e <__sinit+0xe>
 800f826:	46c0      	nop			@ (mov r8, r8)
 800f828:	0800f769 	.word	0x0800f769
 800f82c:	20002154 	.word	0x20002154

0800f830 <_fwalk_sglue>:
 800f830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f832:	0014      	movs	r4, r2
 800f834:	2600      	movs	r6, #0
 800f836:	9000      	str	r0, [sp, #0]
 800f838:	9101      	str	r1, [sp, #4]
 800f83a:	68a5      	ldr	r5, [r4, #8]
 800f83c:	6867      	ldr	r7, [r4, #4]
 800f83e:	3f01      	subs	r7, #1
 800f840:	d504      	bpl.n	800f84c <_fwalk_sglue+0x1c>
 800f842:	6824      	ldr	r4, [r4, #0]
 800f844:	2c00      	cmp	r4, #0
 800f846:	d1f8      	bne.n	800f83a <_fwalk_sglue+0xa>
 800f848:	0030      	movs	r0, r6
 800f84a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f84c:	89ab      	ldrh	r3, [r5, #12]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d908      	bls.n	800f864 <_fwalk_sglue+0x34>
 800f852:	220e      	movs	r2, #14
 800f854:	5eab      	ldrsh	r3, [r5, r2]
 800f856:	3301      	adds	r3, #1
 800f858:	d004      	beq.n	800f864 <_fwalk_sglue+0x34>
 800f85a:	0029      	movs	r1, r5
 800f85c:	9800      	ldr	r0, [sp, #0]
 800f85e:	9b01      	ldr	r3, [sp, #4]
 800f860:	4798      	blx	r3
 800f862:	4306      	orrs	r6, r0
 800f864:	3568      	adds	r5, #104	@ 0x68
 800f866:	e7ea      	b.n	800f83e <_fwalk_sglue+0xe>

0800f868 <iprintf>:
 800f868:	b40f      	push	{r0, r1, r2, r3}
 800f86a:	b507      	push	{r0, r1, r2, lr}
 800f86c:	4905      	ldr	r1, [pc, #20]	@ (800f884 <iprintf+0x1c>)
 800f86e:	ab04      	add	r3, sp, #16
 800f870:	6808      	ldr	r0, [r1, #0]
 800f872:	cb04      	ldmia	r3!, {r2}
 800f874:	6881      	ldr	r1, [r0, #8]
 800f876:	9301      	str	r3, [sp, #4]
 800f878:	f000 fa76 	bl	800fd68 <_vfiprintf_r>
 800f87c:	b003      	add	sp, #12
 800f87e:	bc08      	pop	{r3}
 800f880:	b004      	add	sp, #16
 800f882:	4718      	bx	r3
 800f884:	200003a4 	.word	0x200003a4

0800f888 <_puts_r>:
 800f888:	6a03      	ldr	r3, [r0, #32]
 800f88a:	b570      	push	{r4, r5, r6, lr}
 800f88c:	0005      	movs	r5, r0
 800f88e:	000e      	movs	r6, r1
 800f890:	6884      	ldr	r4, [r0, #8]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d101      	bne.n	800f89a <_puts_r+0x12>
 800f896:	f7ff ffb3 	bl	800f800 <__sinit>
 800f89a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f89c:	07db      	lsls	r3, r3, #31
 800f89e:	d405      	bmi.n	800f8ac <_puts_r+0x24>
 800f8a0:	89a3      	ldrh	r3, [r4, #12]
 800f8a2:	059b      	lsls	r3, r3, #22
 800f8a4:	d402      	bmi.n	800f8ac <_puts_r+0x24>
 800f8a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8a8:	f000 f9e1 	bl	800fc6e <__retarget_lock_acquire_recursive>
 800f8ac:	89a3      	ldrh	r3, [r4, #12]
 800f8ae:	071b      	lsls	r3, r3, #28
 800f8b0:	d502      	bpl.n	800f8b8 <_puts_r+0x30>
 800f8b2:	6923      	ldr	r3, [r4, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d11f      	bne.n	800f8f8 <_puts_r+0x70>
 800f8b8:	0021      	movs	r1, r4
 800f8ba:	0028      	movs	r0, r5
 800f8bc:	f000 f8d2 	bl	800fa64 <__swsetup_r>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d019      	beq.n	800f8f8 <_puts_r+0x70>
 800f8c4:	2501      	movs	r5, #1
 800f8c6:	426d      	negs	r5, r5
 800f8c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f8ca:	07db      	lsls	r3, r3, #31
 800f8cc:	d405      	bmi.n	800f8da <_puts_r+0x52>
 800f8ce:	89a3      	ldrh	r3, [r4, #12]
 800f8d0:	059b      	lsls	r3, r3, #22
 800f8d2:	d402      	bmi.n	800f8da <_puts_r+0x52>
 800f8d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8d6:	f000 f9cb 	bl	800fc70 <__retarget_lock_release_recursive>
 800f8da:	0028      	movs	r0, r5
 800f8dc:	bd70      	pop	{r4, r5, r6, pc}
 800f8de:	3601      	adds	r6, #1
 800f8e0:	60a3      	str	r3, [r4, #8]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	da04      	bge.n	800f8f0 <_puts_r+0x68>
 800f8e6:	69a2      	ldr	r2, [r4, #24]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	dc16      	bgt.n	800f91a <_puts_r+0x92>
 800f8ec:	290a      	cmp	r1, #10
 800f8ee:	d014      	beq.n	800f91a <_puts_r+0x92>
 800f8f0:	6823      	ldr	r3, [r4, #0]
 800f8f2:	1c5a      	adds	r2, r3, #1
 800f8f4:	6022      	str	r2, [r4, #0]
 800f8f6:	7019      	strb	r1, [r3, #0]
 800f8f8:	68a3      	ldr	r3, [r4, #8]
 800f8fa:	7831      	ldrb	r1, [r6, #0]
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	2900      	cmp	r1, #0
 800f900:	d1ed      	bne.n	800f8de <_puts_r+0x56>
 800f902:	60a3      	str	r3, [r4, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	da0f      	bge.n	800f928 <_puts_r+0xa0>
 800f908:	0022      	movs	r2, r4
 800f90a:	0028      	movs	r0, r5
 800f90c:	310a      	adds	r1, #10
 800f90e:	f000 f867 	bl	800f9e0 <__swbuf_r>
 800f912:	3001      	adds	r0, #1
 800f914:	d0d6      	beq.n	800f8c4 <_puts_r+0x3c>
 800f916:	250a      	movs	r5, #10
 800f918:	e7d6      	b.n	800f8c8 <_puts_r+0x40>
 800f91a:	0022      	movs	r2, r4
 800f91c:	0028      	movs	r0, r5
 800f91e:	f000 f85f 	bl	800f9e0 <__swbuf_r>
 800f922:	3001      	adds	r0, #1
 800f924:	d1e8      	bne.n	800f8f8 <_puts_r+0x70>
 800f926:	e7cd      	b.n	800f8c4 <_puts_r+0x3c>
 800f928:	6823      	ldr	r3, [r4, #0]
 800f92a:	1c5a      	adds	r2, r3, #1
 800f92c:	6022      	str	r2, [r4, #0]
 800f92e:	220a      	movs	r2, #10
 800f930:	701a      	strb	r2, [r3, #0]
 800f932:	e7f0      	b.n	800f916 <_puts_r+0x8e>

0800f934 <puts>:
 800f934:	b510      	push	{r4, lr}
 800f936:	4b03      	ldr	r3, [pc, #12]	@ (800f944 <puts+0x10>)
 800f938:	0001      	movs	r1, r0
 800f93a:	6818      	ldr	r0, [r3, #0]
 800f93c:	f7ff ffa4 	bl	800f888 <_puts_r>
 800f940:	bd10      	pop	{r4, pc}
 800f942:	46c0      	nop			@ (mov r8, r8)
 800f944:	200003a4 	.word	0x200003a4

0800f948 <__sread>:
 800f948:	b570      	push	{r4, r5, r6, lr}
 800f94a:	000c      	movs	r4, r1
 800f94c:	250e      	movs	r5, #14
 800f94e:	5f49      	ldrsh	r1, [r1, r5]
 800f950:	f000 f928 	bl	800fba4 <_read_r>
 800f954:	2800      	cmp	r0, #0
 800f956:	db03      	blt.n	800f960 <__sread+0x18>
 800f958:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f95a:	181b      	adds	r3, r3, r0
 800f95c:	6563      	str	r3, [r4, #84]	@ 0x54
 800f95e:	bd70      	pop	{r4, r5, r6, pc}
 800f960:	89a3      	ldrh	r3, [r4, #12]
 800f962:	4a02      	ldr	r2, [pc, #8]	@ (800f96c <__sread+0x24>)
 800f964:	4013      	ands	r3, r2
 800f966:	81a3      	strh	r3, [r4, #12]
 800f968:	e7f9      	b.n	800f95e <__sread+0x16>
 800f96a:	46c0      	nop			@ (mov r8, r8)
 800f96c:	ffffefff 	.word	0xffffefff

0800f970 <__swrite>:
 800f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f972:	001f      	movs	r7, r3
 800f974:	898b      	ldrh	r3, [r1, #12]
 800f976:	0005      	movs	r5, r0
 800f978:	000c      	movs	r4, r1
 800f97a:	0016      	movs	r6, r2
 800f97c:	05db      	lsls	r3, r3, #23
 800f97e:	d505      	bpl.n	800f98c <__swrite+0x1c>
 800f980:	230e      	movs	r3, #14
 800f982:	5ec9      	ldrsh	r1, [r1, r3]
 800f984:	2200      	movs	r2, #0
 800f986:	2302      	movs	r3, #2
 800f988:	f000 f8f8 	bl	800fb7c <_lseek_r>
 800f98c:	89a3      	ldrh	r3, [r4, #12]
 800f98e:	4a05      	ldr	r2, [pc, #20]	@ (800f9a4 <__swrite+0x34>)
 800f990:	0028      	movs	r0, r5
 800f992:	4013      	ands	r3, r2
 800f994:	81a3      	strh	r3, [r4, #12]
 800f996:	0032      	movs	r2, r6
 800f998:	230e      	movs	r3, #14
 800f99a:	5ee1      	ldrsh	r1, [r4, r3]
 800f99c:	003b      	movs	r3, r7
 800f99e:	f000 f927 	bl	800fbf0 <_write_r>
 800f9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9a4:	ffffefff 	.word	0xffffefff

0800f9a8 <__sseek>:
 800f9a8:	b570      	push	{r4, r5, r6, lr}
 800f9aa:	000c      	movs	r4, r1
 800f9ac:	250e      	movs	r5, #14
 800f9ae:	5f49      	ldrsh	r1, [r1, r5]
 800f9b0:	f000 f8e4 	bl	800fb7c <_lseek_r>
 800f9b4:	89a3      	ldrh	r3, [r4, #12]
 800f9b6:	1c42      	adds	r2, r0, #1
 800f9b8:	d103      	bne.n	800f9c2 <__sseek+0x1a>
 800f9ba:	4a05      	ldr	r2, [pc, #20]	@ (800f9d0 <__sseek+0x28>)
 800f9bc:	4013      	ands	r3, r2
 800f9be:	81a3      	strh	r3, [r4, #12]
 800f9c0:	bd70      	pop	{r4, r5, r6, pc}
 800f9c2:	2280      	movs	r2, #128	@ 0x80
 800f9c4:	0152      	lsls	r2, r2, #5
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	81a3      	strh	r3, [r4, #12]
 800f9ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800f9cc:	e7f8      	b.n	800f9c0 <__sseek+0x18>
 800f9ce:	46c0      	nop			@ (mov r8, r8)
 800f9d0:	ffffefff 	.word	0xffffefff

0800f9d4 <__sclose>:
 800f9d4:	b510      	push	{r4, lr}
 800f9d6:	230e      	movs	r3, #14
 800f9d8:	5ec9      	ldrsh	r1, [r1, r3]
 800f9da:	f000 f8bd 	bl	800fb58 <_close_r>
 800f9de:	bd10      	pop	{r4, pc}

0800f9e0 <__swbuf_r>:
 800f9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9e2:	0006      	movs	r6, r0
 800f9e4:	000d      	movs	r5, r1
 800f9e6:	0014      	movs	r4, r2
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	d004      	beq.n	800f9f6 <__swbuf_r+0x16>
 800f9ec:	6a03      	ldr	r3, [r0, #32]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d101      	bne.n	800f9f6 <__swbuf_r+0x16>
 800f9f2:	f7ff ff05 	bl	800f800 <__sinit>
 800f9f6:	69a3      	ldr	r3, [r4, #24]
 800f9f8:	60a3      	str	r3, [r4, #8]
 800f9fa:	89a3      	ldrh	r3, [r4, #12]
 800f9fc:	071b      	lsls	r3, r3, #28
 800f9fe:	d502      	bpl.n	800fa06 <__swbuf_r+0x26>
 800fa00:	6923      	ldr	r3, [r4, #16]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d109      	bne.n	800fa1a <__swbuf_r+0x3a>
 800fa06:	0021      	movs	r1, r4
 800fa08:	0030      	movs	r0, r6
 800fa0a:	f000 f82b 	bl	800fa64 <__swsetup_r>
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d003      	beq.n	800fa1a <__swbuf_r+0x3a>
 800fa12:	2501      	movs	r5, #1
 800fa14:	426d      	negs	r5, r5
 800fa16:	0028      	movs	r0, r5
 800fa18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa1a:	6923      	ldr	r3, [r4, #16]
 800fa1c:	6820      	ldr	r0, [r4, #0]
 800fa1e:	b2ef      	uxtb	r7, r5
 800fa20:	1ac0      	subs	r0, r0, r3
 800fa22:	6963      	ldr	r3, [r4, #20]
 800fa24:	b2ed      	uxtb	r5, r5
 800fa26:	4283      	cmp	r3, r0
 800fa28:	dc05      	bgt.n	800fa36 <__swbuf_r+0x56>
 800fa2a:	0021      	movs	r1, r4
 800fa2c:	0030      	movs	r0, r6
 800fa2e:	f7ff fe13 	bl	800f658 <_fflush_r>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d1ed      	bne.n	800fa12 <__swbuf_r+0x32>
 800fa36:	68a3      	ldr	r3, [r4, #8]
 800fa38:	3001      	adds	r0, #1
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	60a3      	str	r3, [r4, #8]
 800fa3e:	6823      	ldr	r3, [r4, #0]
 800fa40:	1c5a      	adds	r2, r3, #1
 800fa42:	6022      	str	r2, [r4, #0]
 800fa44:	701f      	strb	r7, [r3, #0]
 800fa46:	6963      	ldr	r3, [r4, #20]
 800fa48:	4283      	cmp	r3, r0
 800fa4a:	d004      	beq.n	800fa56 <__swbuf_r+0x76>
 800fa4c:	89a3      	ldrh	r3, [r4, #12]
 800fa4e:	07db      	lsls	r3, r3, #31
 800fa50:	d5e1      	bpl.n	800fa16 <__swbuf_r+0x36>
 800fa52:	2d0a      	cmp	r5, #10
 800fa54:	d1df      	bne.n	800fa16 <__swbuf_r+0x36>
 800fa56:	0021      	movs	r1, r4
 800fa58:	0030      	movs	r0, r6
 800fa5a:	f7ff fdfd 	bl	800f658 <_fflush_r>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	d0d9      	beq.n	800fa16 <__swbuf_r+0x36>
 800fa62:	e7d6      	b.n	800fa12 <__swbuf_r+0x32>

0800fa64 <__swsetup_r>:
 800fa64:	4b2d      	ldr	r3, [pc, #180]	@ (800fb1c <__swsetup_r+0xb8>)
 800fa66:	b570      	push	{r4, r5, r6, lr}
 800fa68:	0005      	movs	r5, r0
 800fa6a:	6818      	ldr	r0, [r3, #0]
 800fa6c:	000c      	movs	r4, r1
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	d004      	beq.n	800fa7c <__swsetup_r+0x18>
 800fa72:	6a03      	ldr	r3, [r0, #32]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d101      	bne.n	800fa7c <__swsetup_r+0x18>
 800fa78:	f7ff fec2 	bl	800f800 <__sinit>
 800fa7c:	230c      	movs	r3, #12
 800fa7e:	5ee2      	ldrsh	r2, [r4, r3]
 800fa80:	0713      	lsls	r3, r2, #28
 800fa82:	d423      	bmi.n	800facc <__swsetup_r+0x68>
 800fa84:	06d3      	lsls	r3, r2, #27
 800fa86:	d407      	bmi.n	800fa98 <__swsetup_r+0x34>
 800fa88:	2309      	movs	r3, #9
 800fa8a:	602b      	str	r3, [r5, #0]
 800fa8c:	2340      	movs	r3, #64	@ 0x40
 800fa8e:	2001      	movs	r0, #1
 800fa90:	4313      	orrs	r3, r2
 800fa92:	81a3      	strh	r3, [r4, #12]
 800fa94:	4240      	negs	r0, r0
 800fa96:	e03a      	b.n	800fb0e <__swsetup_r+0xaa>
 800fa98:	0752      	lsls	r2, r2, #29
 800fa9a:	d513      	bpl.n	800fac4 <__swsetup_r+0x60>
 800fa9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa9e:	2900      	cmp	r1, #0
 800faa0:	d008      	beq.n	800fab4 <__swsetup_r+0x50>
 800faa2:	0023      	movs	r3, r4
 800faa4:	3344      	adds	r3, #68	@ 0x44
 800faa6:	4299      	cmp	r1, r3
 800faa8:	d002      	beq.n	800fab0 <__swsetup_r+0x4c>
 800faaa:	0028      	movs	r0, r5
 800faac:	f000 f8ea 	bl	800fc84 <_free_r>
 800fab0:	2300      	movs	r3, #0
 800fab2:	6363      	str	r3, [r4, #52]	@ 0x34
 800fab4:	2224      	movs	r2, #36	@ 0x24
 800fab6:	89a3      	ldrh	r3, [r4, #12]
 800fab8:	4393      	bics	r3, r2
 800faba:	81a3      	strh	r3, [r4, #12]
 800fabc:	2300      	movs	r3, #0
 800fabe:	6063      	str	r3, [r4, #4]
 800fac0:	6923      	ldr	r3, [r4, #16]
 800fac2:	6023      	str	r3, [r4, #0]
 800fac4:	2308      	movs	r3, #8
 800fac6:	89a2      	ldrh	r2, [r4, #12]
 800fac8:	4313      	orrs	r3, r2
 800faca:	81a3      	strh	r3, [r4, #12]
 800facc:	6923      	ldr	r3, [r4, #16]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10b      	bne.n	800faea <__swsetup_r+0x86>
 800fad2:	21a0      	movs	r1, #160	@ 0xa0
 800fad4:	2280      	movs	r2, #128	@ 0x80
 800fad6:	89a3      	ldrh	r3, [r4, #12]
 800fad8:	0089      	lsls	r1, r1, #2
 800fada:	0092      	lsls	r2, r2, #2
 800fadc:	400b      	ands	r3, r1
 800fade:	4293      	cmp	r3, r2
 800fae0:	d003      	beq.n	800faea <__swsetup_r+0x86>
 800fae2:	0021      	movs	r1, r4
 800fae4:	0028      	movs	r0, r5
 800fae6:	f000 fc03 	bl	80102f0 <__smakebuf_r>
 800faea:	230c      	movs	r3, #12
 800faec:	5ee2      	ldrsh	r2, [r4, r3]
 800faee:	2101      	movs	r1, #1
 800faf0:	0013      	movs	r3, r2
 800faf2:	400b      	ands	r3, r1
 800faf4:	420a      	tst	r2, r1
 800faf6:	d00b      	beq.n	800fb10 <__swsetup_r+0xac>
 800faf8:	2300      	movs	r3, #0
 800fafa:	60a3      	str	r3, [r4, #8]
 800fafc:	6963      	ldr	r3, [r4, #20]
 800fafe:	425b      	negs	r3, r3
 800fb00:	61a3      	str	r3, [r4, #24]
 800fb02:	2000      	movs	r0, #0
 800fb04:	6923      	ldr	r3, [r4, #16]
 800fb06:	4283      	cmp	r3, r0
 800fb08:	d101      	bne.n	800fb0e <__swsetup_r+0xaa>
 800fb0a:	0613      	lsls	r3, r2, #24
 800fb0c:	d4be      	bmi.n	800fa8c <__swsetup_r+0x28>
 800fb0e:	bd70      	pop	{r4, r5, r6, pc}
 800fb10:	0791      	lsls	r1, r2, #30
 800fb12:	d400      	bmi.n	800fb16 <__swsetup_r+0xb2>
 800fb14:	6963      	ldr	r3, [r4, #20]
 800fb16:	60a3      	str	r3, [r4, #8]
 800fb18:	e7f3      	b.n	800fb02 <__swsetup_r+0x9e>
 800fb1a:	46c0      	nop			@ (mov r8, r8)
 800fb1c:	200003a4 	.word	0x200003a4

0800fb20 <memmove>:
 800fb20:	b510      	push	{r4, lr}
 800fb22:	4288      	cmp	r0, r1
 800fb24:	d806      	bhi.n	800fb34 <memmove+0x14>
 800fb26:	2300      	movs	r3, #0
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d008      	beq.n	800fb3e <memmove+0x1e>
 800fb2c:	5ccc      	ldrb	r4, [r1, r3]
 800fb2e:	54c4      	strb	r4, [r0, r3]
 800fb30:	3301      	adds	r3, #1
 800fb32:	e7f9      	b.n	800fb28 <memmove+0x8>
 800fb34:	188b      	adds	r3, r1, r2
 800fb36:	4298      	cmp	r0, r3
 800fb38:	d2f5      	bcs.n	800fb26 <memmove+0x6>
 800fb3a:	3a01      	subs	r2, #1
 800fb3c:	d200      	bcs.n	800fb40 <memmove+0x20>
 800fb3e:	bd10      	pop	{r4, pc}
 800fb40:	5c8b      	ldrb	r3, [r1, r2]
 800fb42:	5483      	strb	r3, [r0, r2]
 800fb44:	e7f9      	b.n	800fb3a <memmove+0x1a>

0800fb46 <memset>:
 800fb46:	0003      	movs	r3, r0
 800fb48:	1882      	adds	r2, r0, r2
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d100      	bne.n	800fb50 <memset+0xa>
 800fb4e:	4770      	bx	lr
 800fb50:	7019      	strb	r1, [r3, #0]
 800fb52:	3301      	adds	r3, #1
 800fb54:	e7f9      	b.n	800fb4a <memset+0x4>
	...

0800fb58 <_close_r>:
 800fb58:	2300      	movs	r3, #0
 800fb5a:	b570      	push	{r4, r5, r6, lr}
 800fb5c:	4d06      	ldr	r5, [pc, #24]	@ (800fb78 <_close_r+0x20>)
 800fb5e:	0004      	movs	r4, r0
 800fb60:	0008      	movs	r0, r1
 800fb62:	602b      	str	r3, [r5, #0]
 800fb64:	f7f9 f907 	bl	8008d76 <_close>
 800fb68:	1c43      	adds	r3, r0, #1
 800fb6a:	d103      	bne.n	800fb74 <_close_r+0x1c>
 800fb6c:	682b      	ldr	r3, [r5, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d000      	beq.n	800fb74 <_close_r+0x1c>
 800fb72:	6023      	str	r3, [r4, #0]
 800fb74:	bd70      	pop	{r4, r5, r6, pc}
 800fb76:	46c0      	nop			@ (mov r8, r8)
 800fb78:	20002158 	.word	0x20002158

0800fb7c <_lseek_r>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	0004      	movs	r4, r0
 800fb80:	0008      	movs	r0, r1
 800fb82:	0011      	movs	r1, r2
 800fb84:	001a      	movs	r2, r3
 800fb86:	2300      	movs	r3, #0
 800fb88:	4d05      	ldr	r5, [pc, #20]	@ (800fba0 <_lseek_r+0x24>)
 800fb8a:	602b      	str	r3, [r5, #0]
 800fb8c:	f7f9 f914 	bl	8008db8 <_lseek>
 800fb90:	1c43      	adds	r3, r0, #1
 800fb92:	d103      	bne.n	800fb9c <_lseek_r+0x20>
 800fb94:	682b      	ldr	r3, [r5, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d000      	beq.n	800fb9c <_lseek_r+0x20>
 800fb9a:	6023      	str	r3, [r4, #0]
 800fb9c:	bd70      	pop	{r4, r5, r6, pc}
 800fb9e:	46c0      	nop			@ (mov r8, r8)
 800fba0:	20002158 	.word	0x20002158

0800fba4 <_read_r>:
 800fba4:	b570      	push	{r4, r5, r6, lr}
 800fba6:	0004      	movs	r4, r0
 800fba8:	0008      	movs	r0, r1
 800fbaa:	0011      	movs	r1, r2
 800fbac:	001a      	movs	r2, r3
 800fbae:	2300      	movs	r3, #0
 800fbb0:	4d05      	ldr	r5, [pc, #20]	@ (800fbc8 <_read_r+0x24>)
 800fbb2:	602b      	str	r3, [r5, #0]
 800fbb4:	f7f9 f8a6 	bl	8008d04 <_read>
 800fbb8:	1c43      	adds	r3, r0, #1
 800fbba:	d103      	bne.n	800fbc4 <_read_r+0x20>
 800fbbc:	682b      	ldr	r3, [r5, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d000      	beq.n	800fbc4 <_read_r+0x20>
 800fbc2:	6023      	str	r3, [r4, #0]
 800fbc4:	bd70      	pop	{r4, r5, r6, pc}
 800fbc6:	46c0      	nop			@ (mov r8, r8)
 800fbc8:	20002158 	.word	0x20002158

0800fbcc <_sbrk_r>:
 800fbcc:	2300      	movs	r3, #0
 800fbce:	b570      	push	{r4, r5, r6, lr}
 800fbd0:	4d06      	ldr	r5, [pc, #24]	@ (800fbec <_sbrk_r+0x20>)
 800fbd2:	0004      	movs	r4, r0
 800fbd4:	0008      	movs	r0, r1
 800fbd6:	602b      	str	r3, [r5, #0]
 800fbd8:	f7f9 f8fa 	bl	8008dd0 <_sbrk>
 800fbdc:	1c43      	adds	r3, r0, #1
 800fbde:	d103      	bne.n	800fbe8 <_sbrk_r+0x1c>
 800fbe0:	682b      	ldr	r3, [r5, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d000      	beq.n	800fbe8 <_sbrk_r+0x1c>
 800fbe6:	6023      	str	r3, [r4, #0]
 800fbe8:	bd70      	pop	{r4, r5, r6, pc}
 800fbea:	46c0      	nop			@ (mov r8, r8)
 800fbec:	20002158 	.word	0x20002158

0800fbf0 <_write_r>:
 800fbf0:	b570      	push	{r4, r5, r6, lr}
 800fbf2:	0004      	movs	r4, r0
 800fbf4:	0008      	movs	r0, r1
 800fbf6:	0011      	movs	r1, r2
 800fbf8:	001a      	movs	r2, r3
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	4d05      	ldr	r5, [pc, #20]	@ (800fc14 <_write_r+0x24>)
 800fbfe:	602b      	str	r3, [r5, #0]
 800fc00:	f7f9 f89d 	bl	8008d3e <_write>
 800fc04:	1c43      	adds	r3, r0, #1
 800fc06:	d103      	bne.n	800fc10 <_write_r+0x20>
 800fc08:	682b      	ldr	r3, [r5, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d000      	beq.n	800fc10 <_write_r+0x20>
 800fc0e:	6023      	str	r3, [r4, #0]
 800fc10:	bd70      	pop	{r4, r5, r6, pc}
 800fc12:	46c0      	nop			@ (mov r8, r8)
 800fc14:	20002158 	.word	0x20002158

0800fc18 <__errno>:
 800fc18:	4b01      	ldr	r3, [pc, #4]	@ (800fc20 <__errno+0x8>)
 800fc1a:	6818      	ldr	r0, [r3, #0]
 800fc1c:	4770      	bx	lr
 800fc1e:	46c0      	nop			@ (mov r8, r8)
 800fc20:	200003a4 	.word	0x200003a4

0800fc24 <__libc_init_array>:
 800fc24:	b570      	push	{r4, r5, r6, lr}
 800fc26:	2600      	movs	r6, #0
 800fc28:	4c0c      	ldr	r4, [pc, #48]	@ (800fc5c <__libc_init_array+0x38>)
 800fc2a:	4d0d      	ldr	r5, [pc, #52]	@ (800fc60 <__libc_init_array+0x3c>)
 800fc2c:	1b64      	subs	r4, r4, r5
 800fc2e:	10a4      	asrs	r4, r4, #2
 800fc30:	42a6      	cmp	r6, r4
 800fc32:	d109      	bne.n	800fc48 <__libc_init_array+0x24>
 800fc34:	2600      	movs	r6, #0
 800fc36:	f000 fbcd 	bl	80103d4 <_init>
 800fc3a:	4c0a      	ldr	r4, [pc, #40]	@ (800fc64 <__libc_init_array+0x40>)
 800fc3c:	4d0a      	ldr	r5, [pc, #40]	@ (800fc68 <__libc_init_array+0x44>)
 800fc3e:	1b64      	subs	r4, r4, r5
 800fc40:	10a4      	asrs	r4, r4, #2
 800fc42:	42a6      	cmp	r6, r4
 800fc44:	d105      	bne.n	800fc52 <__libc_init_array+0x2e>
 800fc46:	bd70      	pop	{r4, r5, r6, pc}
 800fc48:	00b3      	lsls	r3, r6, #2
 800fc4a:	58eb      	ldr	r3, [r5, r3]
 800fc4c:	4798      	blx	r3
 800fc4e:	3601      	adds	r6, #1
 800fc50:	e7ee      	b.n	800fc30 <__libc_init_array+0xc>
 800fc52:	00b3      	lsls	r3, r6, #2
 800fc54:	58eb      	ldr	r3, [r5, r3]
 800fc56:	4798      	blx	r3
 800fc58:	3601      	adds	r6, #1
 800fc5a:	e7f2      	b.n	800fc42 <__libc_init_array+0x1e>
 800fc5c:	08010d44 	.word	0x08010d44
 800fc60:	08010d44 	.word	0x08010d44
 800fc64:	08010d48 	.word	0x08010d48
 800fc68:	08010d44 	.word	0x08010d44

0800fc6c <__retarget_lock_init_recursive>:
 800fc6c:	4770      	bx	lr

0800fc6e <__retarget_lock_acquire_recursive>:
 800fc6e:	4770      	bx	lr

0800fc70 <__retarget_lock_release_recursive>:
 800fc70:	4770      	bx	lr

0800fc72 <memcpy>:
 800fc72:	2300      	movs	r3, #0
 800fc74:	b510      	push	{r4, lr}
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d100      	bne.n	800fc7c <memcpy+0xa>
 800fc7a:	bd10      	pop	{r4, pc}
 800fc7c:	5ccc      	ldrb	r4, [r1, r3]
 800fc7e:	54c4      	strb	r4, [r0, r3]
 800fc80:	3301      	adds	r3, #1
 800fc82:	e7f8      	b.n	800fc76 <memcpy+0x4>

0800fc84 <_free_r>:
 800fc84:	b570      	push	{r4, r5, r6, lr}
 800fc86:	0005      	movs	r5, r0
 800fc88:	1e0c      	subs	r4, r1, #0
 800fc8a:	d010      	beq.n	800fcae <_free_r+0x2a>
 800fc8c:	3c04      	subs	r4, #4
 800fc8e:	6823      	ldr	r3, [r4, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	da00      	bge.n	800fc96 <_free_r+0x12>
 800fc94:	18e4      	adds	r4, r4, r3
 800fc96:	0028      	movs	r0, r5
 800fc98:	f7ff fc48 	bl	800f52c <__malloc_lock>
 800fc9c:	4a1d      	ldr	r2, [pc, #116]	@ (800fd14 <_free_r+0x90>)
 800fc9e:	6813      	ldr	r3, [r2, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d105      	bne.n	800fcb0 <_free_r+0x2c>
 800fca4:	6063      	str	r3, [r4, #4]
 800fca6:	6014      	str	r4, [r2, #0]
 800fca8:	0028      	movs	r0, r5
 800fcaa:	f7ff fc47 	bl	800f53c <__malloc_unlock>
 800fcae:	bd70      	pop	{r4, r5, r6, pc}
 800fcb0:	42a3      	cmp	r3, r4
 800fcb2:	d908      	bls.n	800fcc6 <_free_r+0x42>
 800fcb4:	6820      	ldr	r0, [r4, #0]
 800fcb6:	1821      	adds	r1, r4, r0
 800fcb8:	428b      	cmp	r3, r1
 800fcba:	d1f3      	bne.n	800fca4 <_free_r+0x20>
 800fcbc:	6819      	ldr	r1, [r3, #0]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	1809      	adds	r1, r1, r0
 800fcc2:	6021      	str	r1, [r4, #0]
 800fcc4:	e7ee      	b.n	800fca4 <_free_r+0x20>
 800fcc6:	001a      	movs	r2, r3
 800fcc8:	685b      	ldr	r3, [r3, #4]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d001      	beq.n	800fcd2 <_free_r+0x4e>
 800fcce:	42a3      	cmp	r3, r4
 800fcd0:	d9f9      	bls.n	800fcc6 <_free_r+0x42>
 800fcd2:	6811      	ldr	r1, [r2, #0]
 800fcd4:	1850      	adds	r0, r2, r1
 800fcd6:	42a0      	cmp	r0, r4
 800fcd8:	d10b      	bne.n	800fcf2 <_free_r+0x6e>
 800fcda:	6820      	ldr	r0, [r4, #0]
 800fcdc:	1809      	adds	r1, r1, r0
 800fcde:	1850      	adds	r0, r2, r1
 800fce0:	6011      	str	r1, [r2, #0]
 800fce2:	4283      	cmp	r3, r0
 800fce4:	d1e0      	bne.n	800fca8 <_free_r+0x24>
 800fce6:	6818      	ldr	r0, [r3, #0]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	1841      	adds	r1, r0, r1
 800fcec:	6011      	str	r1, [r2, #0]
 800fcee:	6053      	str	r3, [r2, #4]
 800fcf0:	e7da      	b.n	800fca8 <_free_r+0x24>
 800fcf2:	42a0      	cmp	r0, r4
 800fcf4:	d902      	bls.n	800fcfc <_free_r+0x78>
 800fcf6:	230c      	movs	r3, #12
 800fcf8:	602b      	str	r3, [r5, #0]
 800fcfa:	e7d5      	b.n	800fca8 <_free_r+0x24>
 800fcfc:	6820      	ldr	r0, [r4, #0]
 800fcfe:	1821      	adds	r1, r4, r0
 800fd00:	428b      	cmp	r3, r1
 800fd02:	d103      	bne.n	800fd0c <_free_r+0x88>
 800fd04:	6819      	ldr	r1, [r3, #0]
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	1809      	adds	r1, r1, r0
 800fd0a:	6021      	str	r1, [r4, #0]
 800fd0c:	6063      	str	r3, [r4, #4]
 800fd0e:	6054      	str	r4, [r2, #4]
 800fd10:	e7ca      	b.n	800fca8 <_free_r+0x24>
 800fd12:	46c0      	nop			@ (mov r8, r8)
 800fd14:	20002018 	.word	0x20002018

0800fd18 <__sfputc_r>:
 800fd18:	6893      	ldr	r3, [r2, #8]
 800fd1a:	b510      	push	{r4, lr}
 800fd1c:	3b01      	subs	r3, #1
 800fd1e:	6093      	str	r3, [r2, #8]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	da04      	bge.n	800fd2e <__sfputc_r+0x16>
 800fd24:	6994      	ldr	r4, [r2, #24]
 800fd26:	42a3      	cmp	r3, r4
 800fd28:	db07      	blt.n	800fd3a <__sfputc_r+0x22>
 800fd2a:	290a      	cmp	r1, #10
 800fd2c:	d005      	beq.n	800fd3a <__sfputc_r+0x22>
 800fd2e:	6813      	ldr	r3, [r2, #0]
 800fd30:	1c58      	adds	r0, r3, #1
 800fd32:	6010      	str	r0, [r2, #0]
 800fd34:	7019      	strb	r1, [r3, #0]
 800fd36:	0008      	movs	r0, r1
 800fd38:	bd10      	pop	{r4, pc}
 800fd3a:	f7ff fe51 	bl	800f9e0 <__swbuf_r>
 800fd3e:	0001      	movs	r1, r0
 800fd40:	e7f9      	b.n	800fd36 <__sfputc_r+0x1e>

0800fd42 <__sfputs_r>:
 800fd42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd44:	0006      	movs	r6, r0
 800fd46:	000f      	movs	r7, r1
 800fd48:	0014      	movs	r4, r2
 800fd4a:	18d5      	adds	r5, r2, r3
 800fd4c:	42ac      	cmp	r4, r5
 800fd4e:	d101      	bne.n	800fd54 <__sfputs_r+0x12>
 800fd50:	2000      	movs	r0, #0
 800fd52:	e007      	b.n	800fd64 <__sfputs_r+0x22>
 800fd54:	7821      	ldrb	r1, [r4, #0]
 800fd56:	003a      	movs	r2, r7
 800fd58:	0030      	movs	r0, r6
 800fd5a:	f7ff ffdd 	bl	800fd18 <__sfputc_r>
 800fd5e:	3401      	adds	r4, #1
 800fd60:	1c43      	adds	r3, r0, #1
 800fd62:	d1f3      	bne.n	800fd4c <__sfputs_r+0xa>
 800fd64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd68 <_vfiprintf_r>:
 800fd68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd6a:	b0a1      	sub	sp, #132	@ 0x84
 800fd6c:	000f      	movs	r7, r1
 800fd6e:	0015      	movs	r5, r2
 800fd70:	001e      	movs	r6, r3
 800fd72:	9003      	str	r0, [sp, #12]
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d004      	beq.n	800fd82 <_vfiprintf_r+0x1a>
 800fd78:	6a03      	ldr	r3, [r0, #32]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d101      	bne.n	800fd82 <_vfiprintf_r+0x1a>
 800fd7e:	f7ff fd3f 	bl	800f800 <__sinit>
 800fd82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd84:	07db      	lsls	r3, r3, #31
 800fd86:	d405      	bmi.n	800fd94 <_vfiprintf_r+0x2c>
 800fd88:	89bb      	ldrh	r3, [r7, #12]
 800fd8a:	059b      	lsls	r3, r3, #22
 800fd8c:	d402      	bmi.n	800fd94 <_vfiprintf_r+0x2c>
 800fd8e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fd90:	f7ff ff6d 	bl	800fc6e <__retarget_lock_acquire_recursive>
 800fd94:	89bb      	ldrh	r3, [r7, #12]
 800fd96:	071b      	lsls	r3, r3, #28
 800fd98:	d502      	bpl.n	800fda0 <_vfiprintf_r+0x38>
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d113      	bne.n	800fdc8 <_vfiprintf_r+0x60>
 800fda0:	0039      	movs	r1, r7
 800fda2:	9803      	ldr	r0, [sp, #12]
 800fda4:	f7ff fe5e 	bl	800fa64 <__swsetup_r>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	d00d      	beq.n	800fdc8 <_vfiprintf_r+0x60>
 800fdac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fdae:	07db      	lsls	r3, r3, #31
 800fdb0:	d503      	bpl.n	800fdba <_vfiprintf_r+0x52>
 800fdb2:	2001      	movs	r0, #1
 800fdb4:	4240      	negs	r0, r0
 800fdb6:	b021      	add	sp, #132	@ 0x84
 800fdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdba:	89bb      	ldrh	r3, [r7, #12]
 800fdbc:	059b      	lsls	r3, r3, #22
 800fdbe:	d4f8      	bmi.n	800fdb2 <_vfiprintf_r+0x4a>
 800fdc0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fdc2:	f7ff ff55 	bl	800fc70 <__retarget_lock_release_recursive>
 800fdc6:	e7f4      	b.n	800fdb2 <_vfiprintf_r+0x4a>
 800fdc8:	2300      	movs	r3, #0
 800fdca:	ac08      	add	r4, sp, #32
 800fdcc:	6163      	str	r3, [r4, #20]
 800fdce:	3320      	adds	r3, #32
 800fdd0:	7663      	strb	r3, [r4, #25]
 800fdd2:	3310      	adds	r3, #16
 800fdd4:	76a3      	strb	r3, [r4, #26]
 800fdd6:	9607      	str	r6, [sp, #28]
 800fdd8:	002e      	movs	r6, r5
 800fdda:	7833      	ldrb	r3, [r6, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d001      	beq.n	800fde4 <_vfiprintf_r+0x7c>
 800fde0:	2b25      	cmp	r3, #37	@ 0x25
 800fde2:	d148      	bne.n	800fe76 <_vfiprintf_r+0x10e>
 800fde4:	1b73      	subs	r3, r6, r5
 800fde6:	9305      	str	r3, [sp, #20]
 800fde8:	42ae      	cmp	r6, r5
 800fdea:	d00b      	beq.n	800fe04 <_vfiprintf_r+0x9c>
 800fdec:	002a      	movs	r2, r5
 800fdee:	0039      	movs	r1, r7
 800fdf0:	9803      	ldr	r0, [sp, #12]
 800fdf2:	f7ff ffa6 	bl	800fd42 <__sfputs_r>
 800fdf6:	3001      	adds	r0, #1
 800fdf8:	d100      	bne.n	800fdfc <_vfiprintf_r+0x94>
 800fdfa:	e0ae      	b.n	800ff5a <_vfiprintf_r+0x1f2>
 800fdfc:	6963      	ldr	r3, [r4, #20]
 800fdfe:	9a05      	ldr	r2, [sp, #20]
 800fe00:	189b      	adds	r3, r3, r2
 800fe02:	6163      	str	r3, [r4, #20]
 800fe04:	7833      	ldrb	r3, [r6, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d100      	bne.n	800fe0c <_vfiprintf_r+0xa4>
 800fe0a:	e0a6      	b.n	800ff5a <_vfiprintf_r+0x1f2>
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	2300      	movs	r3, #0
 800fe10:	4252      	negs	r2, r2
 800fe12:	6062      	str	r2, [r4, #4]
 800fe14:	a904      	add	r1, sp, #16
 800fe16:	3254      	adds	r2, #84	@ 0x54
 800fe18:	1852      	adds	r2, r2, r1
 800fe1a:	1c75      	adds	r5, r6, #1
 800fe1c:	6023      	str	r3, [r4, #0]
 800fe1e:	60e3      	str	r3, [r4, #12]
 800fe20:	60a3      	str	r3, [r4, #8]
 800fe22:	7013      	strb	r3, [r2, #0]
 800fe24:	65a3      	str	r3, [r4, #88]	@ 0x58
 800fe26:	4b59      	ldr	r3, [pc, #356]	@ (800ff8c <_vfiprintf_r+0x224>)
 800fe28:	2205      	movs	r2, #5
 800fe2a:	0018      	movs	r0, r3
 800fe2c:	7829      	ldrb	r1, [r5, #0]
 800fe2e:	9305      	str	r3, [sp, #20]
 800fe30:	f000 fac4 	bl	80103bc <memchr>
 800fe34:	1c6e      	adds	r6, r5, #1
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d11f      	bne.n	800fe7a <_vfiprintf_r+0x112>
 800fe3a:	6822      	ldr	r2, [r4, #0]
 800fe3c:	06d3      	lsls	r3, r2, #27
 800fe3e:	d504      	bpl.n	800fe4a <_vfiprintf_r+0xe2>
 800fe40:	2353      	movs	r3, #83	@ 0x53
 800fe42:	a904      	add	r1, sp, #16
 800fe44:	185b      	adds	r3, r3, r1
 800fe46:	2120      	movs	r1, #32
 800fe48:	7019      	strb	r1, [r3, #0]
 800fe4a:	0713      	lsls	r3, r2, #28
 800fe4c:	d504      	bpl.n	800fe58 <_vfiprintf_r+0xf0>
 800fe4e:	2353      	movs	r3, #83	@ 0x53
 800fe50:	a904      	add	r1, sp, #16
 800fe52:	185b      	adds	r3, r3, r1
 800fe54:	212b      	movs	r1, #43	@ 0x2b
 800fe56:	7019      	strb	r1, [r3, #0]
 800fe58:	782b      	ldrb	r3, [r5, #0]
 800fe5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe5c:	d016      	beq.n	800fe8c <_vfiprintf_r+0x124>
 800fe5e:	002e      	movs	r6, r5
 800fe60:	2100      	movs	r1, #0
 800fe62:	200a      	movs	r0, #10
 800fe64:	68e3      	ldr	r3, [r4, #12]
 800fe66:	7832      	ldrb	r2, [r6, #0]
 800fe68:	1c75      	adds	r5, r6, #1
 800fe6a:	3a30      	subs	r2, #48	@ 0x30
 800fe6c:	2a09      	cmp	r2, #9
 800fe6e:	d950      	bls.n	800ff12 <_vfiprintf_r+0x1aa>
 800fe70:	2900      	cmp	r1, #0
 800fe72:	d111      	bne.n	800fe98 <_vfiprintf_r+0x130>
 800fe74:	e017      	b.n	800fea6 <_vfiprintf_r+0x13e>
 800fe76:	3601      	adds	r6, #1
 800fe78:	e7af      	b.n	800fdda <_vfiprintf_r+0x72>
 800fe7a:	9b05      	ldr	r3, [sp, #20]
 800fe7c:	6822      	ldr	r2, [r4, #0]
 800fe7e:	1ac0      	subs	r0, r0, r3
 800fe80:	2301      	movs	r3, #1
 800fe82:	4083      	lsls	r3, r0
 800fe84:	4313      	orrs	r3, r2
 800fe86:	0035      	movs	r5, r6
 800fe88:	6023      	str	r3, [r4, #0]
 800fe8a:	e7cc      	b.n	800fe26 <_vfiprintf_r+0xbe>
 800fe8c:	9b07      	ldr	r3, [sp, #28]
 800fe8e:	1d19      	adds	r1, r3, #4
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	9107      	str	r1, [sp, #28]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	db01      	blt.n	800fe9c <_vfiprintf_r+0x134>
 800fe98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe9a:	e004      	b.n	800fea6 <_vfiprintf_r+0x13e>
 800fe9c:	425b      	negs	r3, r3
 800fe9e:	60e3      	str	r3, [r4, #12]
 800fea0:	2302      	movs	r3, #2
 800fea2:	4313      	orrs	r3, r2
 800fea4:	6023      	str	r3, [r4, #0]
 800fea6:	7833      	ldrb	r3, [r6, #0]
 800fea8:	2b2e      	cmp	r3, #46	@ 0x2e
 800feaa:	d10c      	bne.n	800fec6 <_vfiprintf_r+0x15e>
 800feac:	7873      	ldrb	r3, [r6, #1]
 800feae:	2b2a      	cmp	r3, #42	@ 0x2a
 800feb0:	d134      	bne.n	800ff1c <_vfiprintf_r+0x1b4>
 800feb2:	9b07      	ldr	r3, [sp, #28]
 800feb4:	3602      	adds	r6, #2
 800feb6:	1d1a      	adds	r2, r3, #4
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	9207      	str	r2, [sp, #28]
 800febc:	2b00      	cmp	r3, #0
 800febe:	da01      	bge.n	800fec4 <_vfiprintf_r+0x15c>
 800fec0:	2301      	movs	r3, #1
 800fec2:	425b      	negs	r3, r3
 800fec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fec6:	4d32      	ldr	r5, [pc, #200]	@ (800ff90 <_vfiprintf_r+0x228>)
 800fec8:	2203      	movs	r2, #3
 800feca:	0028      	movs	r0, r5
 800fecc:	7831      	ldrb	r1, [r6, #0]
 800fece:	f000 fa75 	bl	80103bc <memchr>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d006      	beq.n	800fee4 <_vfiprintf_r+0x17c>
 800fed6:	2340      	movs	r3, #64	@ 0x40
 800fed8:	1b40      	subs	r0, r0, r5
 800feda:	4083      	lsls	r3, r0
 800fedc:	6822      	ldr	r2, [r4, #0]
 800fede:	3601      	adds	r6, #1
 800fee0:	4313      	orrs	r3, r2
 800fee2:	6023      	str	r3, [r4, #0]
 800fee4:	7831      	ldrb	r1, [r6, #0]
 800fee6:	2206      	movs	r2, #6
 800fee8:	482a      	ldr	r0, [pc, #168]	@ (800ff94 <_vfiprintf_r+0x22c>)
 800feea:	1c75      	adds	r5, r6, #1
 800feec:	7621      	strb	r1, [r4, #24]
 800feee:	f000 fa65 	bl	80103bc <memchr>
 800fef2:	2800      	cmp	r0, #0
 800fef4:	d040      	beq.n	800ff78 <_vfiprintf_r+0x210>
 800fef6:	4b28      	ldr	r3, [pc, #160]	@ (800ff98 <_vfiprintf_r+0x230>)
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d122      	bne.n	800ff42 <_vfiprintf_r+0x1da>
 800fefc:	2207      	movs	r2, #7
 800fefe:	9b07      	ldr	r3, [sp, #28]
 800ff00:	3307      	adds	r3, #7
 800ff02:	4393      	bics	r3, r2
 800ff04:	3308      	adds	r3, #8
 800ff06:	9307      	str	r3, [sp, #28]
 800ff08:	6963      	ldr	r3, [r4, #20]
 800ff0a:	9a04      	ldr	r2, [sp, #16]
 800ff0c:	189b      	adds	r3, r3, r2
 800ff0e:	6163      	str	r3, [r4, #20]
 800ff10:	e762      	b.n	800fdd8 <_vfiprintf_r+0x70>
 800ff12:	4343      	muls	r3, r0
 800ff14:	002e      	movs	r6, r5
 800ff16:	2101      	movs	r1, #1
 800ff18:	189b      	adds	r3, r3, r2
 800ff1a:	e7a4      	b.n	800fe66 <_vfiprintf_r+0xfe>
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	200a      	movs	r0, #10
 800ff20:	0019      	movs	r1, r3
 800ff22:	3601      	adds	r6, #1
 800ff24:	6063      	str	r3, [r4, #4]
 800ff26:	7832      	ldrb	r2, [r6, #0]
 800ff28:	1c75      	adds	r5, r6, #1
 800ff2a:	3a30      	subs	r2, #48	@ 0x30
 800ff2c:	2a09      	cmp	r2, #9
 800ff2e:	d903      	bls.n	800ff38 <_vfiprintf_r+0x1d0>
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d0c8      	beq.n	800fec6 <_vfiprintf_r+0x15e>
 800ff34:	9109      	str	r1, [sp, #36]	@ 0x24
 800ff36:	e7c6      	b.n	800fec6 <_vfiprintf_r+0x15e>
 800ff38:	4341      	muls	r1, r0
 800ff3a:	002e      	movs	r6, r5
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	1889      	adds	r1, r1, r2
 800ff40:	e7f1      	b.n	800ff26 <_vfiprintf_r+0x1be>
 800ff42:	aa07      	add	r2, sp, #28
 800ff44:	9200      	str	r2, [sp, #0]
 800ff46:	0021      	movs	r1, r4
 800ff48:	003a      	movs	r2, r7
 800ff4a:	4b14      	ldr	r3, [pc, #80]	@ (800ff9c <_vfiprintf_r+0x234>)
 800ff4c:	9803      	ldr	r0, [sp, #12]
 800ff4e:	e000      	b.n	800ff52 <_vfiprintf_r+0x1ea>
 800ff50:	bf00      	nop
 800ff52:	9004      	str	r0, [sp, #16]
 800ff54:	9b04      	ldr	r3, [sp, #16]
 800ff56:	3301      	adds	r3, #1
 800ff58:	d1d6      	bne.n	800ff08 <_vfiprintf_r+0x1a0>
 800ff5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff5c:	07db      	lsls	r3, r3, #31
 800ff5e:	d405      	bmi.n	800ff6c <_vfiprintf_r+0x204>
 800ff60:	89bb      	ldrh	r3, [r7, #12]
 800ff62:	059b      	lsls	r3, r3, #22
 800ff64:	d402      	bmi.n	800ff6c <_vfiprintf_r+0x204>
 800ff66:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ff68:	f7ff fe82 	bl	800fc70 <__retarget_lock_release_recursive>
 800ff6c:	89bb      	ldrh	r3, [r7, #12]
 800ff6e:	065b      	lsls	r3, r3, #25
 800ff70:	d500      	bpl.n	800ff74 <_vfiprintf_r+0x20c>
 800ff72:	e71e      	b.n	800fdb2 <_vfiprintf_r+0x4a>
 800ff74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ff76:	e71e      	b.n	800fdb6 <_vfiprintf_r+0x4e>
 800ff78:	aa07      	add	r2, sp, #28
 800ff7a:	9200      	str	r2, [sp, #0]
 800ff7c:	0021      	movs	r1, r4
 800ff7e:	003a      	movs	r2, r7
 800ff80:	4b06      	ldr	r3, [pc, #24]	@ (800ff9c <_vfiprintf_r+0x234>)
 800ff82:	9803      	ldr	r0, [sp, #12]
 800ff84:	f000 f87c 	bl	8010080 <_printf_i>
 800ff88:	e7e3      	b.n	800ff52 <_vfiprintf_r+0x1ea>
 800ff8a:	46c0      	nop			@ (mov r8, r8)
 800ff8c:	08010d10 	.word	0x08010d10
 800ff90:	08010d16 	.word	0x08010d16
 800ff94:	08010d1a 	.word	0x08010d1a
 800ff98:	00000000 	.word	0x00000000
 800ff9c:	0800fd43 	.word	0x0800fd43

0800ffa0 <_printf_common>:
 800ffa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffa2:	0016      	movs	r6, r2
 800ffa4:	9301      	str	r3, [sp, #4]
 800ffa6:	688a      	ldr	r2, [r1, #8]
 800ffa8:	690b      	ldr	r3, [r1, #16]
 800ffaa:	000c      	movs	r4, r1
 800ffac:	9000      	str	r0, [sp, #0]
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	da00      	bge.n	800ffb4 <_printf_common+0x14>
 800ffb2:	0013      	movs	r3, r2
 800ffb4:	0022      	movs	r2, r4
 800ffb6:	6033      	str	r3, [r6, #0]
 800ffb8:	3243      	adds	r2, #67	@ 0x43
 800ffba:	7812      	ldrb	r2, [r2, #0]
 800ffbc:	2a00      	cmp	r2, #0
 800ffbe:	d001      	beq.n	800ffc4 <_printf_common+0x24>
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	6033      	str	r3, [r6, #0]
 800ffc4:	6823      	ldr	r3, [r4, #0]
 800ffc6:	069b      	lsls	r3, r3, #26
 800ffc8:	d502      	bpl.n	800ffd0 <_printf_common+0x30>
 800ffca:	6833      	ldr	r3, [r6, #0]
 800ffcc:	3302      	adds	r3, #2
 800ffce:	6033      	str	r3, [r6, #0]
 800ffd0:	6822      	ldr	r2, [r4, #0]
 800ffd2:	2306      	movs	r3, #6
 800ffd4:	0015      	movs	r5, r2
 800ffd6:	401d      	ands	r5, r3
 800ffd8:	421a      	tst	r2, r3
 800ffda:	d027      	beq.n	801002c <_printf_common+0x8c>
 800ffdc:	0023      	movs	r3, r4
 800ffde:	3343      	adds	r3, #67	@ 0x43
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	1e5a      	subs	r2, r3, #1
 800ffe4:	4193      	sbcs	r3, r2
 800ffe6:	6822      	ldr	r2, [r4, #0]
 800ffe8:	0692      	lsls	r2, r2, #26
 800ffea:	d430      	bmi.n	801004e <_printf_common+0xae>
 800ffec:	0022      	movs	r2, r4
 800ffee:	9901      	ldr	r1, [sp, #4]
 800fff0:	9800      	ldr	r0, [sp, #0]
 800fff2:	9d08      	ldr	r5, [sp, #32]
 800fff4:	3243      	adds	r2, #67	@ 0x43
 800fff6:	47a8      	blx	r5
 800fff8:	3001      	adds	r0, #1
 800fffa:	d025      	beq.n	8010048 <_printf_common+0xa8>
 800fffc:	2206      	movs	r2, #6
 800fffe:	6823      	ldr	r3, [r4, #0]
 8010000:	2500      	movs	r5, #0
 8010002:	4013      	ands	r3, r2
 8010004:	2b04      	cmp	r3, #4
 8010006:	d105      	bne.n	8010014 <_printf_common+0x74>
 8010008:	6833      	ldr	r3, [r6, #0]
 801000a:	68e5      	ldr	r5, [r4, #12]
 801000c:	1aed      	subs	r5, r5, r3
 801000e:	43eb      	mvns	r3, r5
 8010010:	17db      	asrs	r3, r3, #31
 8010012:	401d      	ands	r5, r3
 8010014:	68a3      	ldr	r3, [r4, #8]
 8010016:	6922      	ldr	r2, [r4, #16]
 8010018:	4293      	cmp	r3, r2
 801001a:	dd01      	ble.n	8010020 <_printf_common+0x80>
 801001c:	1a9b      	subs	r3, r3, r2
 801001e:	18ed      	adds	r5, r5, r3
 8010020:	2600      	movs	r6, #0
 8010022:	42b5      	cmp	r5, r6
 8010024:	d120      	bne.n	8010068 <_printf_common+0xc8>
 8010026:	2000      	movs	r0, #0
 8010028:	e010      	b.n	801004c <_printf_common+0xac>
 801002a:	3501      	adds	r5, #1
 801002c:	68e3      	ldr	r3, [r4, #12]
 801002e:	6832      	ldr	r2, [r6, #0]
 8010030:	1a9b      	subs	r3, r3, r2
 8010032:	42ab      	cmp	r3, r5
 8010034:	ddd2      	ble.n	800ffdc <_printf_common+0x3c>
 8010036:	0022      	movs	r2, r4
 8010038:	2301      	movs	r3, #1
 801003a:	9901      	ldr	r1, [sp, #4]
 801003c:	9800      	ldr	r0, [sp, #0]
 801003e:	9f08      	ldr	r7, [sp, #32]
 8010040:	3219      	adds	r2, #25
 8010042:	47b8      	blx	r7
 8010044:	3001      	adds	r0, #1
 8010046:	d1f0      	bne.n	801002a <_printf_common+0x8a>
 8010048:	2001      	movs	r0, #1
 801004a:	4240      	negs	r0, r0
 801004c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801004e:	2030      	movs	r0, #48	@ 0x30
 8010050:	18e1      	adds	r1, r4, r3
 8010052:	3143      	adds	r1, #67	@ 0x43
 8010054:	7008      	strb	r0, [r1, #0]
 8010056:	0021      	movs	r1, r4
 8010058:	1c5a      	adds	r2, r3, #1
 801005a:	3145      	adds	r1, #69	@ 0x45
 801005c:	7809      	ldrb	r1, [r1, #0]
 801005e:	18a2      	adds	r2, r4, r2
 8010060:	3243      	adds	r2, #67	@ 0x43
 8010062:	3302      	adds	r3, #2
 8010064:	7011      	strb	r1, [r2, #0]
 8010066:	e7c1      	b.n	800ffec <_printf_common+0x4c>
 8010068:	0022      	movs	r2, r4
 801006a:	2301      	movs	r3, #1
 801006c:	9901      	ldr	r1, [sp, #4]
 801006e:	9800      	ldr	r0, [sp, #0]
 8010070:	9f08      	ldr	r7, [sp, #32]
 8010072:	321a      	adds	r2, #26
 8010074:	47b8      	blx	r7
 8010076:	3001      	adds	r0, #1
 8010078:	d0e6      	beq.n	8010048 <_printf_common+0xa8>
 801007a:	3601      	adds	r6, #1
 801007c:	e7d1      	b.n	8010022 <_printf_common+0x82>
	...

08010080 <_printf_i>:
 8010080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010082:	b08b      	sub	sp, #44	@ 0x2c
 8010084:	9206      	str	r2, [sp, #24]
 8010086:	000a      	movs	r2, r1
 8010088:	3243      	adds	r2, #67	@ 0x43
 801008a:	9307      	str	r3, [sp, #28]
 801008c:	9005      	str	r0, [sp, #20]
 801008e:	9203      	str	r2, [sp, #12]
 8010090:	7e0a      	ldrb	r2, [r1, #24]
 8010092:	000c      	movs	r4, r1
 8010094:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010096:	2a78      	cmp	r2, #120	@ 0x78
 8010098:	d809      	bhi.n	80100ae <_printf_i+0x2e>
 801009a:	2a62      	cmp	r2, #98	@ 0x62
 801009c:	d80b      	bhi.n	80100b6 <_printf_i+0x36>
 801009e:	2a00      	cmp	r2, #0
 80100a0:	d100      	bne.n	80100a4 <_printf_i+0x24>
 80100a2:	e0bc      	b.n	801021e <_printf_i+0x19e>
 80100a4:	497b      	ldr	r1, [pc, #492]	@ (8010294 <_printf_i+0x214>)
 80100a6:	9104      	str	r1, [sp, #16]
 80100a8:	2a58      	cmp	r2, #88	@ 0x58
 80100aa:	d100      	bne.n	80100ae <_printf_i+0x2e>
 80100ac:	e090      	b.n	80101d0 <_printf_i+0x150>
 80100ae:	0025      	movs	r5, r4
 80100b0:	3542      	adds	r5, #66	@ 0x42
 80100b2:	702a      	strb	r2, [r5, #0]
 80100b4:	e022      	b.n	80100fc <_printf_i+0x7c>
 80100b6:	0010      	movs	r0, r2
 80100b8:	3863      	subs	r0, #99	@ 0x63
 80100ba:	2815      	cmp	r0, #21
 80100bc:	d8f7      	bhi.n	80100ae <_printf_i+0x2e>
 80100be:	f7f0 f82b 	bl	8000118 <__gnu_thumb1_case_shi>
 80100c2:	0016      	.short	0x0016
 80100c4:	fff6001f 	.word	0xfff6001f
 80100c8:	fff6fff6 	.word	0xfff6fff6
 80100cc:	001ffff6 	.word	0x001ffff6
 80100d0:	fff6fff6 	.word	0xfff6fff6
 80100d4:	fff6fff6 	.word	0xfff6fff6
 80100d8:	003600a1 	.word	0x003600a1
 80100dc:	fff60080 	.word	0xfff60080
 80100e0:	00b2fff6 	.word	0x00b2fff6
 80100e4:	0036fff6 	.word	0x0036fff6
 80100e8:	fff6fff6 	.word	0xfff6fff6
 80100ec:	0084      	.short	0x0084
 80100ee:	0025      	movs	r5, r4
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	3542      	adds	r5, #66	@ 0x42
 80100f4:	1d11      	adds	r1, r2, #4
 80100f6:	6019      	str	r1, [r3, #0]
 80100f8:	6813      	ldr	r3, [r2, #0]
 80100fa:	702b      	strb	r3, [r5, #0]
 80100fc:	2301      	movs	r3, #1
 80100fe:	e0a0      	b.n	8010242 <_printf_i+0x1c2>
 8010100:	6818      	ldr	r0, [r3, #0]
 8010102:	6809      	ldr	r1, [r1, #0]
 8010104:	1d02      	adds	r2, r0, #4
 8010106:	060d      	lsls	r5, r1, #24
 8010108:	d50b      	bpl.n	8010122 <_printf_i+0xa2>
 801010a:	6806      	ldr	r6, [r0, #0]
 801010c:	601a      	str	r2, [r3, #0]
 801010e:	2e00      	cmp	r6, #0
 8010110:	da03      	bge.n	801011a <_printf_i+0x9a>
 8010112:	232d      	movs	r3, #45	@ 0x2d
 8010114:	9a03      	ldr	r2, [sp, #12]
 8010116:	4276      	negs	r6, r6
 8010118:	7013      	strb	r3, [r2, #0]
 801011a:	4b5e      	ldr	r3, [pc, #376]	@ (8010294 <_printf_i+0x214>)
 801011c:	270a      	movs	r7, #10
 801011e:	9304      	str	r3, [sp, #16]
 8010120:	e018      	b.n	8010154 <_printf_i+0xd4>
 8010122:	6806      	ldr	r6, [r0, #0]
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	0649      	lsls	r1, r1, #25
 8010128:	d5f1      	bpl.n	801010e <_printf_i+0x8e>
 801012a:	b236      	sxth	r6, r6
 801012c:	e7ef      	b.n	801010e <_printf_i+0x8e>
 801012e:	6808      	ldr	r0, [r1, #0]
 8010130:	6819      	ldr	r1, [r3, #0]
 8010132:	c940      	ldmia	r1!, {r6}
 8010134:	0605      	lsls	r5, r0, #24
 8010136:	d402      	bmi.n	801013e <_printf_i+0xbe>
 8010138:	0640      	lsls	r0, r0, #25
 801013a:	d500      	bpl.n	801013e <_printf_i+0xbe>
 801013c:	b2b6      	uxth	r6, r6
 801013e:	6019      	str	r1, [r3, #0]
 8010140:	4b54      	ldr	r3, [pc, #336]	@ (8010294 <_printf_i+0x214>)
 8010142:	270a      	movs	r7, #10
 8010144:	9304      	str	r3, [sp, #16]
 8010146:	2a6f      	cmp	r2, #111	@ 0x6f
 8010148:	d100      	bne.n	801014c <_printf_i+0xcc>
 801014a:	3f02      	subs	r7, #2
 801014c:	0023      	movs	r3, r4
 801014e:	2200      	movs	r2, #0
 8010150:	3343      	adds	r3, #67	@ 0x43
 8010152:	701a      	strb	r2, [r3, #0]
 8010154:	6863      	ldr	r3, [r4, #4]
 8010156:	60a3      	str	r3, [r4, #8]
 8010158:	2b00      	cmp	r3, #0
 801015a:	db03      	blt.n	8010164 <_printf_i+0xe4>
 801015c:	2104      	movs	r1, #4
 801015e:	6822      	ldr	r2, [r4, #0]
 8010160:	438a      	bics	r2, r1
 8010162:	6022      	str	r2, [r4, #0]
 8010164:	2e00      	cmp	r6, #0
 8010166:	d102      	bne.n	801016e <_printf_i+0xee>
 8010168:	9d03      	ldr	r5, [sp, #12]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d00c      	beq.n	8010188 <_printf_i+0x108>
 801016e:	9d03      	ldr	r5, [sp, #12]
 8010170:	0030      	movs	r0, r6
 8010172:	0039      	movs	r1, r7
 8010174:	f7f0 f860 	bl	8000238 <__aeabi_uidivmod>
 8010178:	9b04      	ldr	r3, [sp, #16]
 801017a:	3d01      	subs	r5, #1
 801017c:	5c5b      	ldrb	r3, [r3, r1]
 801017e:	702b      	strb	r3, [r5, #0]
 8010180:	0033      	movs	r3, r6
 8010182:	0006      	movs	r6, r0
 8010184:	429f      	cmp	r7, r3
 8010186:	d9f3      	bls.n	8010170 <_printf_i+0xf0>
 8010188:	2f08      	cmp	r7, #8
 801018a:	d109      	bne.n	80101a0 <_printf_i+0x120>
 801018c:	6823      	ldr	r3, [r4, #0]
 801018e:	07db      	lsls	r3, r3, #31
 8010190:	d506      	bpl.n	80101a0 <_printf_i+0x120>
 8010192:	6862      	ldr	r2, [r4, #4]
 8010194:	6923      	ldr	r3, [r4, #16]
 8010196:	429a      	cmp	r2, r3
 8010198:	dc02      	bgt.n	80101a0 <_printf_i+0x120>
 801019a:	2330      	movs	r3, #48	@ 0x30
 801019c:	3d01      	subs	r5, #1
 801019e:	702b      	strb	r3, [r5, #0]
 80101a0:	9b03      	ldr	r3, [sp, #12]
 80101a2:	1b5b      	subs	r3, r3, r5
 80101a4:	6123      	str	r3, [r4, #16]
 80101a6:	9b07      	ldr	r3, [sp, #28]
 80101a8:	0021      	movs	r1, r4
 80101aa:	9300      	str	r3, [sp, #0]
 80101ac:	9805      	ldr	r0, [sp, #20]
 80101ae:	9b06      	ldr	r3, [sp, #24]
 80101b0:	aa09      	add	r2, sp, #36	@ 0x24
 80101b2:	f7ff fef5 	bl	800ffa0 <_printf_common>
 80101b6:	3001      	adds	r0, #1
 80101b8:	d148      	bne.n	801024c <_printf_i+0x1cc>
 80101ba:	2001      	movs	r0, #1
 80101bc:	4240      	negs	r0, r0
 80101be:	b00b      	add	sp, #44	@ 0x2c
 80101c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101c2:	2220      	movs	r2, #32
 80101c4:	6809      	ldr	r1, [r1, #0]
 80101c6:	430a      	orrs	r2, r1
 80101c8:	6022      	str	r2, [r4, #0]
 80101ca:	2278      	movs	r2, #120	@ 0x78
 80101cc:	4932      	ldr	r1, [pc, #200]	@ (8010298 <_printf_i+0x218>)
 80101ce:	9104      	str	r1, [sp, #16]
 80101d0:	0021      	movs	r1, r4
 80101d2:	3145      	adds	r1, #69	@ 0x45
 80101d4:	700a      	strb	r2, [r1, #0]
 80101d6:	6819      	ldr	r1, [r3, #0]
 80101d8:	6822      	ldr	r2, [r4, #0]
 80101da:	c940      	ldmia	r1!, {r6}
 80101dc:	0610      	lsls	r0, r2, #24
 80101de:	d402      	bmi.n	80101e6 <_printf_i+0x166>
 80101e0:	0650      	lsls	r0, r2, #25
 80101e2:	d500      	bpl.n	80101e6 <_printf_i+0x166>
 80101e4:	b2b6      	uxth	r6, r6
 80101e6:	6019      	str	r1, [r3, #0]
 80101e8:	07d3      	lsls	r3, r2, #31
 80101ea:	d502      	bpl.n	80101f2 <_printf_i+0x172>
 80101ec:	2320      	movs	r3, #32
 80101ee:	4313      	orrs	r3, r2
 80101f0:	6023      	str	r3, [r4, #0]
 80101f2:	2e00      	cmp	r6, #0
 80101f4:	d001      	beq.n	80101fa <_printf_i+0x17a>
 80101f6:	2710      	movs	r7, #16
 80101f8:	e7a8      	b.n	801014c <_printf_i+0xcc>
 80101fa:	2220      	movs	r2, #32
 80101fc:	6823      	ldr	r3, [r4, #0]
 80101fe:	4393      	bics	r3, r2
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	e7f8      	b.n	80101f6 <_printf_i+0x176>
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	680d      	ldr	r5, [r1, #0]
 8010208:	1d10      	adds	r0, r2, #4
 801020a:	6949      	ldr	r1, [r1, #20]
 801020c:	6018      	str	r0, [r3, #0]
 801020e:	6813      	ldr	r3, [r2, #0]
 8010210:	062e      	lsls	r6, r5, #24
 8010212:	d501      	bpl.n	8010218 <_printf_i+0x198>
 8010214:	6019      	str	r1, [r3, #0]
 8010216:	e002      	b.n	801021e <_printf_i+0x19e>
 8010218:	066d      	lsls	r5, r5, #25
 801021a:	d5fb      	bpl.n	8010214 <_printf_i+0x194>
 801021c:	8019      	strh	r1, [r3, #0]
 801021e:	2300      	movs	r3, #0
 8010220:	9d03      	ldr	r5, [sp, #12]
 8010222:	6123      	str	r3, [r4, #16]
 8010224:	e7bf      	b.n	80101a6 <_printf_i+0x126>
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	1d11      	adds	r1, r2, #4
 801022a:	6019      	str	r1, [r3, #0]
 801022c:	6815      	ldr	r5, [r2, #0]
 801022e:	2100      	movs	r1, #0
 8010230:	0028      	movs	r0, r5
 8010232:	6862      	ldr	r2, [r4, #4]
 8010234:	f000 f8c2 	bl	80103bc <memchr>
 8010238:	2800      	cmp	r0, #0
 801023a:	d001      	beq.n	8010240 <_printf_i+0x1c0>
 801023c:	1b40      	subs	r0, r0, r5
 801023e:	6060      	str	r0, [r4, #4]
 8010240:	6863      	ldr	r3, [r4, #4]
 8010242:	6123      	str	r3, [r4, #16]
 8010244:	2300      	movs	r3, #0
 8010246:	9a03      	ldr	r2, [sp, #12]
 8010248:	7013      	strb	r3, [r2, #0]
 801024a:	e7ac      	b.n	80101a6 <_printf_i+0x126>
 801024c:	002a      	movs	r2, r5
 801024e:	6923      	ldr	r3, [r4, #16]
 8010250:	9906      	ldr	r1, [sp, #24]
 8010252:	9805      	ldr	r0, [sp, #20]
 8010254:	9d07      	ldr	r5, [sp, #28]
 8010256:	47a8      	blx	r5
 8010258:	3001      	adds	r0, #1
 801025a:	d0ae      	beq.n	80101ba <_printf_i+0x13a>
 801025c:	6823      	ldr	r3, [r4, #0]
 801025e:	079b      	lsls	r3, r3, #30
 8010260:	d415      	bmi.n	801028e <_printf_i+0x20e>
 8010262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010264:	68e0      	ldr	r0, [r4, #12]
 8010266:	4298      	cmp	r0, r3
 8010268:	daa9      	bge.n	80101be <_printf_i+0x13e>
 801026a:	0018      	movs	r0, r3
 801026c:	e7a7      	b.n	80101be <_printf_i+0x13e>
 801026e:	0022      	movs	r2, r4
 8010270:	2301      	movs	r3, #1
 8010272:	9906      	ldr	r1, [sp, #24]
 8010274:	9805      	ldr	r0, [sp, #20]
 8010276:	9e07      	ldr	r6, [sp, #28]
 8010278:	3219      	adds	r2, #25
 801027a:	47b0      	blx	r6
 801027c:	3001      	adds	r0, #1
 801027e:	d09c      	beq.n	80101ba <_printf_i+0x13a>
 8010280:	3501      	adds	r5, #1
 8010282:	68e3      	ldr	r3, [r4, #12]
 8010284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010286:	1a9b      	subs	r3, r3, r2
 8010288:	42ab      	cmp	r3, r5
 801028a:	dcf0      	bgt.n	801026e <_printf_i+0x1ee>
 801028c:	e7e9      	b.n	8010262 <_printf_i+0x1e2>
 801028e:	2500      	movs	r5, #0
 8010290:	e7f7      	b.n	8010282 <_printf_i+0x202>
 8010292:	46c0      	nop			@ (mov r8, r8)
 8010294:	08010d21 	.word	0x08010d21
 8010298:	08010d32 	.word	0x08010d32

0801029c <__swhatbuf_r>:
 801029c:	b570      	push	{r4, r5, r6, lr}
 801029e:	000e      	movs	r6, r1
 80102a0:	001d      	movs	r5, r3
 80102a2:	230e      	movs	r3, #14
 80102a4:	5ec9      	ldrsh	r1, [r1, r3]
 80102a6:	0014      	movs	r4, r2
 80102a8:	b096      	sub	sp, #88	@ 0x58
 80102aa:	2900      	cmp	r1, #0
 80102ac:	da0c      	bge.n	80102c8 <__swhatbuf_r+0x2c>
 80102ae:	89b2      	ldrh	r2, [r6, #12]
 80102b0:	2380      	movs	r3, #128	@ 0x80
 80102b2:	0011      	movs	r1, r2
 80102b4:	4019      	ands	r1, r3
 80102b6:	421a      	tst	r2, r3
 80102b8:	d114      	bne.n	80102e4 <__swhatbuf_r+0x48>
 80102ba:	2380      	movs	r3, #128	@ 0x80
 80102bc:	00db      	lsls	r3, r3, #3
 80102be:	2000      	movs	r0, #0
 80102c0:	6029      	str	r1, [r5, #0]
 80102c2:	6023      	str	r3, [r4, #0]
 80102c4:	b016      	add	sp, #88	@ 0x58
 80102c6:	bd70      	pop	{r4, r5, r6, pc}
 80102c8:	466a      	mov	r2, sp
 80102ca:	f000 f853 	bl	8010374 <_fstat_r>
 80102ce:	2800      	cmp	r0, #0
 80102d0:	dbed      	blt.n	80102ae <__swhatbuf_r+0x12>
 80102d2:	23f0      	movs	r3, #240	@ 0xf0
 80102d4:	9901      	ldr	r1, [sp, #4]
 80102d6:	021b      	lsls	r3, r3, #8
 80102d8:	4019      	ands	r1, r3
 80102da:	4b04      	ldr	r3, [pc, #16]	@ (80102ec <__swhatbuf_r+0x50>)
 80102dc:	18c9      	adds	r1, r1, r3
 80102de:	424b      	negs	r3, r1
 80102e0:	4159      	adcs	r1, r3
 80102e2:	e7ea      	b.n	80102ba <__swhatbuf_r+0x1e>
 80102e4:	2100      	movs	r1, #0
 80102e6:	2340      	movs	r3, #64	@ 0x40
 80102e8:	e7e9      	b.n	80102be <__swhatbuf_r+0x22>
 80102ea:	46c0      	nop			@ (mov r8, r8)
 80102ec:	ffffe000 	.word	0xffffe000

080102f0 <__smakebuf_r>:
 80102f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102f2:	2602      	movs	r6, #2
 80102f4:	898b      	ldrh	r3, [r1, #12]
 80102f6:	0005      	movs	r5, r0
 80102f8:	000c      	movs	r4, r1
 80102fa:	b085      	sub	sp, #20
 80102fc:	4233      	tst	r3, r6
 80102fe:	d007      	beq.n	8010310 <__smakebuf_r+0x20>
 8010300:	0023      	movs	r3, r4
 8010302:	3347      	adds	r3, #71	@ 0x47
 8010304:	6023      	str	r3, [r4, #0]
 8010306:	6123      	str	r3, [r4, #16]
 8010308:	2301      	movs	r3, #1
 801030a:	6163      	str	r3, [r4, #20]
 801030c:	b005      	add	sp, #20
 801030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010310:	ab03      	add	r3, sp, #12
 8010312:	aa02      	add	r2, sp, #8
 8010314:	f7ff ffc2 	bl	801029c <__swhatbuf_r>
 8010318:	9f02      	ldr	r7, [sp, #8]
 801031a:	9001      	str	r0, [sp, #4]
 801031c:	0039      	movs	r1, r7
 801031e:	0028      	movs	r0, r5
 8010320:	f7ff f884 	bl	800f42c <_malloc_r>
 8010324:	2800      	cmp	r0, #0
 8010326:	d108      	bne.n	801033a <__smakebuf_r+0x4a>
 8010328:	220c      	movs	r2, #12
 801032a:	5ea3      	ldrsh	r3, [r4, r2]
 801032c:	059a      	lsls	r2, r3, #22
 801032e:	d4ed      	bmi.n	801030c <__smakebuf_r+0x1c>
 8010330:	2203      	movs	r2, #3
 8010332:	4393      	bics	r3, r2
 8010334:	431e      	orrs	r6, r3
 8010336:	81a6      	strh	r6, [r4, #12]
 8010338:	e7e2      	b.n	8010300 <__smakebuf_r+0x10>
 801033a:	2380      	movs	r3, #128	@ 0x80
 801033c:	89a2      	ldrh	r2, [r4, #12]
 801033e:	6020      	str	r0, [r4, #0]
 8010340:	4313      	orrs	r3, r2
 8010342:	81a3      	strh	r3, [r4, #12]
 8010344:	9b03      	ldr	r3, [sp, #12]
 8010346:	6120      	str	r0, [r4, #16]
 8010348:	6167      	str	r7, [r4, #20]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00c      	beq.n	8010368 <__smakebuf_r+0x78>
 801034e:	0028      	movs	r0, r5
 8010350:	230e      	movs	r3, #14
 8010352:	5ee1      	ldrsh	r1, [r4, r3]
 8010354:	f000 f820 	bl	8010398 <_isatty_r>
 8010358:	2800      	cmp	r0, #0
 801035a:	d005      	beq.n	8010368 <__smakebuf_r+0x78>
 801035c:	2303      	movs	r3, #3
 801035e:	89a2      	ldrh	r2, [r4, #12]
 8010360:	439a      	bics	r2, r3
 8010362:	3b02      	subs	r3, #2
 8010364:	4313      	orrs	r3, r2
 8010366:	81a3      	strh	r3, [r4, #12]
 8010368:	89a3      	ldrh	r3, [r4, #12]
 801036a:	9a01      	ldr	r2, [sp, #4]
 801036c:	4313      	orrs	r3, r2
 801036e:	81a3      	strh	r3, [r4, #12]
 8010370:	e7cc      	b.n	801030c <__smakebuf_r+0x1c>
	...

08010374 <_fstat_r>:
 8010374:	2300      	movs	r3, #0
 8010376:	b570      	push	{r4, r5, r6, lr}
 8010378:	4d06      	ldr	r5, [pc, #24]	@ (8010394 <_fstat_r+0x20>)
 801037a:	0004      	movs	r4, r0
 801037c:	0008      	movs	r0, r1
 801037e:	0011      	movs	r1, r2
 8010380:	602b      	str	r3, [r5, #0]
 8010382:	f7f8 fd02 	bl	8008d8a <_fstat>
 8010386:	1c43      	adds	r3, r0, #1
 8010388:	d103      	bne.n	8010392 <_fstat_r+0x1e>
 801038a:	682b      	ldr	r3, [r5, #0]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d000      	beq.n	8010392 <_fstat_r+0x1e>
 8010390:	6023      	str	r3, [r4, #0]
 8010392:	bd70      	pop	{r4, r5, r6, pc}
 8010394:	20002158 	.word	0x20002158

08010398 <_isatty_r>:
 8010398:	2300      	movs	r3, #0
 801039a:	b570      	push	{r4, r5, r6, lr}
 801039c:	4d06      	ldr	r5, [pc, #24]	@ (80103b8 <_isatty_r+0x20>)
 801039e:	0004      	movs	r4, r0
 80103a0:	0008      	movs	r0, r1
 80103a2:	602b      	str	r3, [r5, #0]
 80103a4:	f7f8 fcff 	bl	8008da6 <_isatty>
 80103a8:	1c43      	adds	r3, r0, #1
 80103aa:	d103      	bne.n	80103b4 <_isatty_r+0x1c>
 80103ac:	682b      	ldr	r3, [r5, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d000      	beq.n	80103b4 <_isatty_r+0x1c>
 80103b2:	6023      	str	r3, [r4, #0]
 80103b4:	bd70      	pop	{r4, r5, r6, pc}
 80103b6:	46c0      	nop			@ (mov r8, r8)
 80103b8:	20002158 	.word	0x20002158

080103bc <memchr>:
 80103bc:	b2c9      	uxtb	r1, r1
 80103be:	1882      	adds	r2, r0, r2
 80103c0:	4290      	cmp	r0, r2
 80103c2:	d101      	bne.n	80103c8 <memchr+0xc>
 80103c4:	2000      	movs	r0, #0
 80103c6:	4770      	bx	lr
 80103c8:	7803      	ldrb	r3, [r0, #0]
 80103ca:	428b      	cmp	r3, r1
 80103cc:	d0fb      	beq.n	80103c6 <memchr+0xa>
 80103ce:	3001      	adds	r0, #1
 80103d0:	e7f6      	b.n	80103c0 <memchr+0x4>
	...

080103d4 <_init>:
 80103d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d6:	46c0      	nop			@ (mov r8, r8)
 80103d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103da:	bc08      	pop	{r3}
 80103dc:	469e      	mov	lr, r3
 80103de:	4770      	bx	lr

080103e0 <_fini>:
 80103e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e2:	46c0      	nop			@ (mov r8, r8)
 80103e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103e6:	bc08      	pop	{r3}
 80103e8:	469e      	mov	lr, r3
 80103ea:	4770      	bx	lr
 80103ec:	0000      	movs	r0, r0
	...

080103f0 <__FLASH_Program_Fast_veneer>:
 80103f0:	b401      	push	{r0}
 80103f2:	4802      	ldr	r0, [pc, #8]	@ (80103fc <__FLASH_Program_Fast_veneer+0xc>)
 80103f4:	4684      	mov	ip, r0
 80103f6:	bc01      	pop	{r0}
 80103f8:	4760      	bx	ip
 80103fa:	bf00      	nop
 80103fc:	200003f5 	.word	0x200003f5

Disassembly of section .data:

20000000 <OD_PERSIST_COMM>:
20000000:	00000000 00000080 00000000 00000000     ................
20000010:	00000100 00000080 00080000 00000000     ................
	...
2000003c:	00000064 00000004 00000000 00000000     d...............
	...
20000058:	00000005 00000200 000000fe 00000008     ................
20000068:	60200008 00050008 00050008 00050008     .. `............
20000078:	00050008 00050008 00050008 00050008     ................
20000088:	00000006 40000180 000000fe 00000064     .......@....d...
20000098:	00000006 40000280 000000fe 000003e8     .......@........
200000a8:	00000007 60100008 60110008 60120010     .......`...`...`
200000b8:	60110008 60110008 60110008 60110008     ...`...`...`...`
200000c8:	00000000 00000005 60130020 60140008     ........ ..`...`
200000d8:	60110008 60150008 60160008 00000000     ...`...`...`....
	...

200000fc <OD_RAM>:
200000fc:	00000400 00000001 00000001 00000001     ................
2000010c:	00000001 00000004 00000001 00000001     ................
2000011c:	00000001 00000001                       ........

20000124 <ODList>:
20000124:	01011000 080108c8 00000000 01011001     ................
20000134:	080108d4 00000000 02111003 080108e0     ................
20000144:	00000000 01011005 080108f4 00000000     ................
20000154:	01011006 08010900 00000000 01011007     ................
20000164:	0801090c 00000000 02051010 08010918     ................
20000174:	00000000 02051011 0801092c 00000000     ........,.......
20000184:	01011012 08010940 00000000 01011014     ....@...........
20000194:	0801094c 00000000 01011015 08010958     L...........X...
200001a4:	00000000 02091016 08010964 00000000     ........d.......
200001b4:	01011017 08010978 00000000 03051018     ....x...........
200001c4:	08010984 00000000 01011019 080109c0     ................
200001d4:	00000000 03041400 080109cc 00000000     ................
200001e4:	03091600 080109fc 00000000 03061800     ................
200001f4:	08010a68 00000000 03061801 08010ab0     h...............
20000204:	00000000 03091a00 08010af8 00000000     ................
20000214:	03091a01 08010b64 00000000 01016010     ....d........`..
20000224:	08010bd0 00000000 01016011 08010bdc     .........`......
20000234:	00000000 01016012 08010be8 00000000     .....`..........
20000244:	01016013 08010bf4 00000000 01016014     .`...........`..
20000254:	08010c00 00000000 01016015 08010c0c     .........`......
20000264:	00000000 01016016 08010c18 00000000     .....`..........
20000274:	01016020 08010c24 00000000 00000000      `..$...........
	...

2000028c <_OD>:
2000028c:	0000001d 20000124                       ....$.. 

20000294 <OD>:
20000294:	2000028c                                ... 

20000298 <SystemCoreClock>:
20000298:	00f42400                                .$..

2000029c <uwTickPrio>:
2000029c:	00000004                                ....

200002a0 <uwTickFreq>:
200002a0:	00000001                                ....

200002a4 <USBD_CDC_DeviceQualifierDesc>:
200002a4:	0200060a 40000000 00000001              .......@....

200002b0 <USBD_CDC>:
200002b0:	0800ddbd 0800dfdd 0800e0fd 00000000     ................
200002c0:	0800e491 0800e2ed 0800e40b 00000000     ................
	...
200002d8:	0800e5a9 0800e519 0800e639 0800e6c9     ........9.......

200002e8 <USBD_CDC_CfgDesc>:
200002e8:	00430209 c0000102 00040932 02020100     ..C.....2.......
200002f8:	24050001 05011000 01000124 02022404     ...$....$....$..
20000308:	00062405 82050701 10000803 00010409     .$..............
20000318:	00000a02 01050700 00004002 02810507     .........@......
20000328:	                                         @..

2000032b <CDCInEpAdd>:
2000032b:	                                         .

2000032c <CDCOutEpAdd>:
2000032c:	                                         .

2000032d <CDCCmdEpAdd>:
2000032d:	                                         ...

20000330 <USBD_Interface_fops_FS>:
20000330:	0800ebc9 0800ebf9 0800ec05 0800ec3d     ............=...
20000340:	0800ec69                                i...

20000344 <CDC_Desc>:
20000344:	0800ec8d 0800ecb1 0800ed19 0800ecd5     ................
20000354:	0800ed45 0800ed6d 0800edb1 00000000     E...m...........

20000364 <USBD_CDC_DeviceDesc>:
20000364:	02000112 40000202 57400483 02010200     .......@..@W....
20000374:	00000103                                ....

20000378 <USBD_LangIDDesc>:
20000378:	04090304                                ....

2000037c <USBD_StringSerial>:
2000037c:	0000031a 00000000 00000000 00000000     ................
	...

20000398 <__sglue>:
20000398:	00000000 00000003 2000201c              ......... . 

200003a4 <_impure_ptr>:
200003a4:	200003a8                                ... 

200003a8 <_impure_data>:
200003a8:	00000000 2000201c 20002084 200020ec     ..... . . . . . 
	...

200003f4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200003f4:	b580      	push	{r7, lr}
200003f6:	b088      	sub	sp, #32
200003f8:	af00      	add	r7, sp, #0
200003fa:	6078      	str	r0, [r7, #4]
200003fc:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200003fe:	231f      	movs	r3, #31
20000400:	18fb      	adds	r3, r7, r3
20000402:	2200      	movs	r2, #0
20000404:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000406:	687b      	ldr	r3, [r7, #4]
20000408:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000040a:	683b      	ldr	r3, [r7, #0]
2000040c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000040e:	4b1a      	ldr	r3, [pc, #104]	@ (20000478 <FLASH_Program_Fast+0x84>)
20000410:	695a      	ldr	r2, [r3, #20]
20000412:	4b19      	ldr	r3, [pc, #100]	@ (20000478 <FLASH_Program_Fast+0x84>)
20000414:	2180      	movs	r1, #128	@ 0x80
20000416:	02c9      	lsls	r1, r1, #11
20000418:	430a      	orrs	r2, r1
2000041a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000041c:	f3ef 8310 	mrs	r3, PRIMASK
20000420:	60fb      	str	r3, [r7, #12]
  return(result);
20000422:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000426:	b672      	cpsid	i
}
20000428:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000042a:	e00f      	b.n	2000044c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000042c:	697a      	ldr	r2, [r7, #20]
2000042e:	69bb      	ldr	r3, [r7, #24]
20000430:	6812      	ldr	r2, [r2, #0]
20000432:	601a      	str	r2, [r3, #0]
    src += 4U;
20000434:	697b      	ldr	r3, [r7, #20]
20000436:	3304      	adds	r3, #4
20000438:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000043a:	69bb      	ldr	r3, [r7, #24]
2000043c:	3304      	adds	r3, #4
2000043e:	61bb      	str	r3, [r7, #24]
    index++;
20000440:	211f      	movs	r1, #31
20000442:	187b      	adds	r3, r7, r1
20000444:	781a      	ldrb	r2, [r3, #0]
20000446:	187b      	adds	r3, r7, r1
20000448:	3201      	adds	r2, #1
2000044a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000044c:	231f      	movs	r3, #31
2000044e:	18fb      	adds	r3, r7, r3
20000450:	781b      	ldrb	r3, [r3, #0]
20000452:	2b3f      	cmp	r3, #63	@ 0x3f
20000454:	d9ea      	bls.n	2000042c <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
20000456:	46c0      	nop			@ (mov r8, r8)
20000458:	4b07      	ldr	r3, [pc, #28]	@ (20000478 <FLASH_Program_Fast+0x84>)
2000045a:	691a      	ldr	r2, [r3, #16]
2000045c:	23c0      	movs	r3, #192	@ 0xc0
2000045e:	029b      	lsls	r3, r3, #10
20000460:	4013      	ands	r3, r2
20000462:	d1f9      	bne.n	20000458 <FLASH_Program_Fast+0x64>
20000464:	693b      	ldr	r3, [r7, #16]
20000466:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000468:	68bb      	ldr	r3, [r7, #8]
2000046a:	f383 8810 	msr	PRIMASK, r3
}
2000046e:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000470:	46c0      	nop			@ (mov r8, r8)
20000472:	46bd      	mov	sp, r7
20000474:	b008      	add	sp, #32
20000476:	bd80      	pop	{r7, pc}
20000478:	40022000 	.word	0x40022000
