
VDI_Tester_Prototyp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab18  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800adc8  0800adc8  0000bdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800afb8  0800afb8  0000bfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800afc0  0800afc0  0000bfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800afc4  0800afc4  0000bfc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  0800afc8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f0c  24000154  0800b11c  0000c154  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001060  0800b11c  0000d060  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c154  2**0
                  CONTENTS, READONLY
 10 .debug_info   000179ec  00000000  00000000  0000c182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003638  00000000  00000000  00023b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001238  00000000  00000000  000271a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000db1  00000000  00000000  000283e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003292e  00000000  00000000  00029191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017188  00000000  00000000  0005babf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a14f  00000000  00000000  00072c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001acd96  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000516c  00000000  00000000  001acddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000058  00000000  00000000  001b1f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000154 	.word	0x24000154
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800adb0 	.word	0x0800adb0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000158 	.word	0x24000158
 80002ec:	0800adb0 	.word	0x0800adb0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000394:	f000 fc72 	bl	8000c7c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000398:	f000 f812 	bl	80003c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800039c:	f000 f8ea 	bl	8000574 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80003a0:	f000 f884 	bl	80004ac <MX_FDCAN1_Init>
	MX_USB_DEVICE_Init();
 80003a4:	f009 fa70 	bl	8009888 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_FDCAN_Start(&hfdcan1);
 80003a8:	4804      	ldr	r0, [pc, #16]	@ (80003bc <main+0x2c>)
 80003aa:	f001 f80b 	bl	80013c4 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2101      	movs	r1, #1
 80003b2:	4802      	ldr	r0, [pc, #8]	@ (80003bc <main+0x2c>)
 80003b4:	f001 f9f8 	bl	80017a8 <HAL_FDCAN_ActivateNotification>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <main+0x28>
 80003bc:	24000170 	.word	0x24000170

080003c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b09c      	sub	sp, #112	@ 0x70
 80003c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003ca:	224c      	movs	r2, #76	@ 0x4c
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f00a f86e 	bl	800a4b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2220      	movs	r2, #32
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f00a f868 	bl	800a4b0 <memset>

	/*AXI clock gating */
	RCC->CKGAENR = 0xFFFFFFFF;
 80003e0:	4b30      	ldr	r3, [pc, #192]	@ (80004a4 <SystemClock_Config+0xe4>)
 80003e2:	f04f 32ff 	mov.w	r2, #4294967295
 80003e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003ea:	2004      	movs	r0, #4
 80003ec:	f003 fbde 	bl	8003bac <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003f0:	2300      	movs	r3, #0
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	4b2c      	ldr	r3, [pc, #176]	@ (80004a8 <SystemClock_Config+0xe8>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a2b      	ldr	r2, [pc, #172]	@ (80004a8 <SystemClock_Config+0xe8>)
 80003fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b29      	ldr	r3, [pc, #164]	@ (80004a8 <SystemClock_Config+0xe8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800040c:	bf00      	nop
 800040e:	4b26      	ldr	r3, [pc, #152]	@ (80004a8 <SystemClock_Config+0xe8>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800041a:	d1f8      	bne.n	800040e <SystemClock_Config+0x4e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 800041c:	2321      	movs	r3, #33	@ 0x21
 800041e:	627b      	str	r3, [r7, #36]	@ 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000420:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000424:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000426:	2301      	movs	r3, #1
 8000428:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042a:	2302      	movs	r3, #2
 800042c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042e:	2302      	movs	r3, #2
 8000430:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000432:	2301      	movs	r3, #1
 8000434:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 8000436:	2318      	movs	r3, #24
 8000438:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800043a:	2302      	movs	r3, #2
 800043c:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800043e:	2304      	movs	r3, #4
 8000440:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000442:	2302      	movs	r3, #2
 8000444:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000446:	230c      	movs	r3, #12
 8000448:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800044a:	2300      	movs	r3, #0
 800044c:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000456:	4618      	mov	r0, r3
 8000458:	f003 fc12 	bl	8003c80 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0xa6>
		Error_Handler();
 8000462:	f000 fa59 	bl	8000918 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000466:	233f      	movs	r3, #63	@ 0x3f
 8000468:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046a:	2303      	movs	r3, #3
 800046c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2102      	movs	r1, #2
 800048a:	4618      	mov	r0, r3
 800048c:	f004 f82a 	bl	80044e4 <HAL_RCC_ClockConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0xda>
		Error_Handler();
 8000496:	f000 fa3f 	bl	8000918 <Error_Handler>
	}
}
 800049a:	bf00      	nop
 800049c:	3770      	adds	r7, #112	@ 0x70
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	58024400 	.word	0x58024400
 80004a8:	58024800 	.word	0x58024800

080004ac <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 80004b0:	4b2e      	ldr	r3, [pc, #184]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000570 <MX_FDCAN1_Init+0xc4>)
 80004b4:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004b6:	4b2d      	ldr	r3, [pc, #180]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004bc:	4b2b      	ldr	r3, [pc, #172]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = ENABLE;
 80004c2:	4b2a      	ldr	r3, [pc, #168]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 80004c8:	4b28      	ldr	r3, [pc, #160]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 80004ce:	4b27      	ldr	r3, [pc, #156]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 16;
 80004d4:	4b25      	ldr	r3, [pc, #148]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004d6:	2210      	movs	r2, #16
 80004d8:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 80004da:	4b24      	ldr	r3, [pc, #144]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004dc:	2201      	movs	r2, #1
 80004de:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 16;
 80004e0:	4b22      	ldr	r3, [pc, #136]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004e2:	2210      	movs	r2, #16
 80004e4:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 7;
 80004e6:	4b21      	ldr	r3, [pc, #132]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004e8:	2207      	movs	r2, #7
 80004ea:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 80004ec:	4b1f      	ldr	r3, [pc, #124]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 80004f2:	4b1e      	ldr	r3, [pc, #120]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 80004fe:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 8000500:	2201      	movs	r2, #1
 8000502:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000504:	4b19      	ldr	r3, [pc, #100]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 800050a:	4b18      	ldr	r3, [pc, #96]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 800050c:	2200      	movs	r2, #0
 800050e:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 8000510:	4b16      	ldr	r3, [pc, #88]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 8000512:	2200      	movs	r2, #0
 8000514:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000516:	4b15      	ldr	r3, [pc, #84]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 8000518:	2201      	movs	r2, #1
 800051a:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 800051e:	2204      	movs	r2, #4
 8000520:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 8000524:	2200      	movs	r2, #0
 8000526:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000528:	4b10      	ldr	r3, [pc, #64]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 800052a:	2204      	movs	r2, #4
 800052c:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 800052e:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 8000530:	2200      	movs	r2, #0
 8000532:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 8000536:	2204      	movs	r2, #4
 8000538:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 800053a:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 800053c:	2200      	movs	r2, #0
 800053e:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000540:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 8000542:	2200      	movs	r2, #0
 8000544:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 8000548:	2201      	movs	r2, #1
 800054a:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 800054e:	2200      	movs	r2, #0
 8000550:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 8000554:	2204      	movs	r2, #4
 8000556:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <MX_FDCAN1_Init+0xc0>)
 800055a:	f000 fd55 	bl	8001008 <HAL_FDCAN_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_FDCAN1_Init+0xbc>
		Error_Handler();
 8000564:	f000 f9d8 	bl	8000918 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	24000170 	.word	0x24000170
 8000570:	4000a000 	.word	0x4000a000

08000574 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b08e      	sub	sp, #56	@ 0x38
 8000578:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800057a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b72      	ldr	r3, [pc, #456]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 800058c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000590:	4a70      	ldr	r2, [pc, #448]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800059a:	4b6e      	ldr	r3, [pc, #440]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 800059c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	623b      	str	r3, [r7, #32]
 80005a6:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005a8:	4b6a      	ldr	r3, [pc, #424]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 80005aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005ae:	4a69      	ldr	r2, [pc, #420]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 80005b0:	f043 0320 	orr.w	r3, r3, #32
 80005b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005b8:	4b66      	ldr	r3, [pc, #408]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 80005ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005be:	f003 0320 	and.w	r3, r3, #32
 80005c2:	61fb      	str	r3, [r7, #28]
 80005c4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	4b63      	ldr	r3, [pc, #396]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 80005c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005cc:	4a61      	ldr	r2, [pc, #388]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 80005ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005d6:	4b5f      	ldr	r3, [pc, #380]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 80005d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005e0:	61bb      	str	r3, [r7, #24]
 80005e2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 80005e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005ea:	4a5a      	ldr	r2, [pc, #360]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005f4:	4b57      	ldr	r3, [pc, #348]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 80005f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	4b54      	ldr	r3, [pc, #336]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 8000604:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000608:	4a52      	ldr	r2, [pc, #328]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000612:	4b50      	ldr	r3, [pc, #320]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 8000614:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000620:	4b4c      	ldr	r3, [pc, #304]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 8000622:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000626:	4a4b      	ldr	r2, [pc, #300]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 8000628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800062c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000630:	4b48      	ldr	r3, [pc, #288]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 8000632:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b45      	ldr	r3, [pc, #276]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 8000640:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000644:	4a43      	ldr	r2, [pc, #268]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800064e:	4b41      	ldr	r3, [pc, #260]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 8000650:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800065c:	4b3d      	ldr	r3, [pc, #244]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 800065e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000662:	4a3c      	ldr	r2, [pc, #240]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 8000664:	f043 0310 	orr.w	r3, r3, #16
 8000668:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800066c:	4b39      	ldr	r3, [pc, #228]	@ (8000754 <MX_GPIO_Init+0x1e0>)
 800066e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000680:	4835      	ldr	r0, [pc, #212]	@ (8000758 <MX_GPIO_Init+0x1e4>)
 8000682:	f001 ffc1 	bl	8002608 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f244 0101 	movw	r1, #16385	@ 0x4001
 800068c:	4833      	ldr	r0, [pc, #204]	@ (800075c <MX_GPIO_Init+0x1e8>)
 800068e:	f001 ffbb 	bl	8002608 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2102      	movs	r1, #2
 8000696:	4832      	ldr	r0, [pc, #200]	@ (8000760 <MX_GPIO_Init+0x1ec>)
 8000698:	f001 ffb6 	bl	8002608 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800069c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ae:	4619      	mov	r1, r3
 80006b0:	482c      	ldr	r0, [pc, #176]	@ (8000764 <MX_GPIO_Init+0x1f0>)
 80006b2:	f001 fdf9 	bl	80022a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80006b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ba:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006cc:	4619      	mov	r1, r3
 80006ce:	4822      	ldr	r0, [pc, #136]	@ (8000758 <MX_GPIO_Init+0x1e4>)
 80006d0:	f001 fdea 	bl	80022a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 80006d4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ea:	4619      	mov	r1, r3
 80006ec:	481b      	ldr	r0, [pc, #108]	@ (800075c <MX_GPIO_Init+0x1e8>)
 80006ee:	f001 fddb 	bl	80022a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 80006f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000704:	2307      	movs	r3, #7
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070c:	4619      	mov	r1, r3
 800070e:	4816      	ldr	r0, [pc, #88]	@ (8000768 <MX_GPIO_Init+0x1f4>)
 8000710:	f001 fdca 	bl	80022a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000714:	2380      	movs	r3, #128	@ 0x80
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000718:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000726:	4619      	mov	r1, r3
 8000728:	4810      	ldr	r0, [pc, #64]	@ (800076c <MX_GPIO_Init+0x1f8>)
 800072a:	f001 fdbd 	bl	80022a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800072e:	2302      	movs	r3, #2
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000742:	4619      	mov	r1, r3
 8000744:	4806      	ldr	r0, [pc, #24]	@ (8000760 <MX_GPIO_Init+0x1ec>)
 8000746:	f001 fdaf 	bl	80022a8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	3738      	adds	r7, #56	@ 0x38
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	58024400 	.word	0x58024400
 8000758:	58021400 	.word	0x58021400
 800075c:	58020400 	.word	0x58020400
 8000760:	58021000 	.word	0x58021000
 8000764:	58020800 	.word	0x58020800
 8000768:	58020c00 	.word	0x58020c00
 800076c:	58021800 	.word	0x58021800

08000770 <FDCAN_Send_Command>:

/* USER CODE BEGIN 4 */
void FDCAN_Send_Command(uint32_t CAN_Id, uint32_t dlc, uint8_t *pdata) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]

	//Kommando aufbauen
	TxHeader.Identifier = CAN_Id;
 800077c:	4a1d      	ldr	r2, [pc, #116]	@ (80007f4 <FDCAN_Send_Command+0x84>)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <FDCAN_Send_Command+0x84>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000788:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <FDCAN_Send_Command+0x84>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = dlc;
 800078e:	4a19      	ldr	r2, [pc, #100]	@ (80007f4 <FDCAN_Send_Command+0x84>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	60d3      	str	r3, [r2, #12]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000794:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <FDCAN_Send_Command+0x84>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]

//	TxData[0] = 0x1; // Laut VDI-RICHTLINIEN - Tabelle C4 - Seite 12-13

	for (int i = 0; i < dlc; ++i) {
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	e00b      	b.n	80007b8 <FDCAN_Send_Command+0x48>
		TxData[i] = pdata[i];
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	7819      	ldrb	r1, [r3, #0]
 80007a8:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <FDCAN_Send_Command+0x88>)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	4413      	add	r3, r2
 80007ae:	460a      	mov	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < dlc; ++i) {
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8ef      	bhi.n	80007a0 <FDCAN_Send_Command+0x30>
	}

// Fragen ob FDCan bereit zum senden, sonst warten, Led blinkt

	HAL_Delay(300);
 80007c0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007c4:	f000 faec 	bl	8000da0 <HAL_Delay>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK) {
 80007c8:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <FDCAN_Send_Command+0x88>)
 80007ca:	490a      	ldr	r1, [pc, #40]	@ (80007f4 <FDCAN_Send_Command+0x84>)
 80007cc:	480b      	ldr	r0, [pc, #44]	@ (80007fc <FDCAN_Send_Command+0x8c>)
 80007ce:	f000 fe24 	bl	800141a <HAL_FDCAN_AddMessageToTxFifoQ>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d105      	bne.n	80007e4 <FDCAN_Send_Command+0x74>
		// Kommando senden, Led Ein
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2102      	movs	r1, #2
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <FDCAN_Send_Command+0x90>)
 80007de:	f001 ff13 	bl	8002608 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
}
 80007e2:	e003      	b.n	80007ec <FDCAN_Send_Command+0x7c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007e4:	2102      	movs	r1, #2
 80007e6:	4806      	ldr	r0, [pc, #24]	@ (8000800 <FDCAN_Send_Command+0x90>)
 80007e8:	f001 ff27 	bl	800263a <HAL_GPIO_TogglePin>
}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000220 	.word	0x24000220
 80007f8:	24000210 	.word	0x24000210
 80007fc:	24000170 	.word	0x24000170
 8000800:	58021000 	.word	0x58021000

08000804 <FDCAN_Receive>:

void FDCAN_Receive() {
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData)
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <FDCAN_Receive+0x58>)
 800080c:	4a14      	ldr	r2, [pc, #80]	@ (8000860 <FDCAN_Receive+0x5c>)
 800080e:	2140      	movs	r1, #64	@ 0x40
 8000810:	4814      	ldr	r0, [pc, #80]	@ (8000864 <FDCAN_Receive+0x60>)
 8000812:	f000 fe5d 	bl	80014d0 <HAL_FDCAN_GetRxMessage>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d103      	bne.n	8000824 <FDCAN_Receive+0x20>
			== HAL_OK) {
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800081c:	2101      	movs	r1, #1
 800081e:	4812      	ldr	r0, [pc, #72]	@ (8000868 <FDCAN_Receive+0x64>)
 8000820:	f001 ff0b 	bl	800263a <HAL_GPIO_TogglePin>
	}

	char TX_Buffer[30];
	sprintf((char*) TX_Buffer, "ID:%d\n", (int) RxHeader.Identifier);
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <FDCAN_Receive+0x5c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	463b      	mov	r3, r7
 800082c:	490f      	ldr	r1, [pc, #60]	@ (800086c <FDCAN_Receive+0x68>)
 800082e:	4618      	mov	r0, r3
 8000830:	f009 fe1e 	bl	800a470 <siprintf>
	memset(TxData, 0, sizeof(TxData));
 8000834:	2208      	movs	r2, #8
 8000836:	2100      	movs	r1, #0
 8000838:	480d      	ldr	r0, [pc, #52]	@ (8000870 <FDCAN_Receive+0x6c>)
 800083a:	f009 fe39 	bl	800a4b0 <memset>
	memcpy(TxData, TX_Buffer, 8);
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <FDCAN_Receive+0x6c>)
 8000840:	461a      	mov	r2, r3
 8000842:	463b      	mov	r3, r7
 8000844:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000848:	e882 0003 	stmia.w	r2, {r0, r1}
	USB_Send_Command(TxData);
 800084c:	4808      	ldr	r0, [pc, #32]	@ (8000870 <FDCAN_Receive+0x6c>)
 800084e:	f000 f811 	bl	8000874 <USB_Send_Command>

}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000218 	.word	0x24000218
 8000860:	24000244 	.word	0x24000244
 8000864:	24000170 	.word	0x24000170
 8000868:	58020400 	.word	0x58020400
 800086c:	0800adc8 	.word	0x0800adc8
 8000870:	24000210 	.word	0x24000210

08000874 <USB_Send_Command>:

void USB_Send_Command(uint8_t *data) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
//	CDC_Transmit_HS(data, strlen( data));
	CDC_Transmit_HS(data, 10);
 800087c:	210a      	movs	r1, #10
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f009 f8d8 	bl	8009a34 <CDC_Transmit_HS>

}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <USB_Received>:

void USB_Received() {
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
//	uint8_t txID[4];
	uint32_t id = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
	uint32_t dlc = 8;
 8000896:	2308      	movs	r3, #8
 8000898:	613b      	str	r3, [r7, #16]
	uint8_t txData[8];
	char buff[4];
	for (int i = 0; i < 4; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
 800089e:	e00e      	b.n	80008be <USB_Received+0x32>
		sprintf(&buff[i], "%d", buffer[i]-'0');
 80008a0:	1d3a      	adds	r2, r7, #4
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	18d0      	adds	r0, r2, r3
 80008a6:	4a1a      	ldr	r2, [pc, #104]	@ (8000910 <USB_Received+0x84>)
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	3b30      	subs	r3, #48	@ 0x30
 80008b0:	461a      	mov	r2, r3
 80008b2:	4918      	ldr	r1, [pc, #96]	@ (8000914 <USB_Received+0x88>)
 80008b4:	f009 fddc 	bl	800a470 <siprintf>
	for (int i = 0; i < 4; i++) {
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	3301      	adds	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	dded      	ble.n	80008a0 <USB_Received+0x14>
	}
	id = (uint32_t) atoi(buff);
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f009 fd4a 	bl	800a360 <atoi>
 80008cc:	4603      	mov	r3, r0
 80008ce:	617b      	str	r3, [r7, #20]

	for (int i = 5; i < dlc + 5; i++) {
 80008d0:	2305      	movs	r3, #5
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	e00c      	b.n	80008f0 <USB_Received+0x64>
		txData[i - 5] = buffer[i];
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	3b05      	subs	r3, #5
 80008da:	490d      	ldr	r1, [pc, #52]	@ (8000910 <USB_Received+0x84>)
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	440a      	add	r2, r1
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	3320      	adds	r3, #32
 80008e4:	443b      	add	r3, r7
 80008e6:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (int i = 5; i < dlc + 5; i++) {
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	3301      	adds	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	1d5a      	adds	r2, r3, #5
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d8ed      	bhi.n	80008d6 <USB_Received+0x4a>
	}

	FDCAN_Send_Command(id, dlc, txData);
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	461a      	mov	r2, r3
 8000900:	6939      	ldr	r1, [r7, #16]
 8000902:	6978      	ldr	r0, [r7, #20]
 8000904:	f7ff ff34 	bl	8000770 <FDCAN_Send_Command>
}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2400026c 	.word	0x2400026c
 8000914:	0800add0 	.word	0x0800add0

08000918 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_MspInit+0x30>)
 800092c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000930:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <HAL_MspInit+0x30>)
 8000932:	f043 0302 	orr.w	r3, r3, #2
 8000936:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_MspInit+0x30>)
 800093c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	58024400 	.word	0x58024400

08000958 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0ba      	sub	sp, #232	@ 0xe8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	22c0      	movs	r2, #192	@ 0xc0
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f009 fd99 	bl	800a4b0 <memset>
  if(hfdcan->Instance==FDCAN1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a2b      	ldr	r2, [pc, #172]	@ (8000a30 <HAL_FDCAN_MspInit+0xd8>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d14e      	bne.n	8000a26 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000988:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800098c:	f04f 0300 	mov.w	r3, #0
 8000990:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000994:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4618      	mov	r0, r3
 80009a2:	f004 f8ff 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80009ac:	f7ff ffb4 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009b0:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <HAL_FDCAN_MspInit+0xdc>)
 80009b2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80009b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a34 <HAL_FDCAN_MspInit+0xdc>)
 80009b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009bc:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80009c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a34 <HAL_FDCAN_MspInit+0xdc>)
 80009c2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80009c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <HAL_FDCAN_MspInit+0xdc>)
 80009d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009d4:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <HAL_FDCAN_MspInit+0xdc>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_FDCAN_MspInit+0xdc>)
 80009e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ec:	2303      	movs	r3, #3
 80009ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a04:	2309      	movs	r3, #9
 8000a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <HAL_FDCAN_MspInit+0xe0>)
 8000a12:	f001 fc49 	bl	80022a8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2013      	movs	r0, #19
 8000a1c:	f000 fabf 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a20:	2013      	movs	r0, #19
 8000a22:	f000 fad6 	bl	8000fd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000a26:	bf00      	nop
 8000a28:	37e8      	adds	r7, #232	@ 0xe8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	4000a000 	.word	0x4000a000
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58020c00 	.word	0x58020c00

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <NMI_Handler+0x4>

08000a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <MemManage_Handler+0x4>

08000a54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a92:	f000 f965 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000aa0:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <FDCAN1_IT0_IRQHandler+0x14>)
 8000aa2:	f000 fefb 	bl	800189c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  FDCAN_Receive();
 8000aa6:	f7ff fead 	bl	8000804 <FDCAN_Receive>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	24000170 	.word	0x24000170

08000ab4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000ab8:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <OTG_HS_IRQHandler+0x14>)
 8000aba:	f001 ff19 	bl	80028f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */
   USB_Received();
 8000abe:	f7ff fee5 	bl	800088c <USB_Received>
  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	24000814 	.word	0x24000814

08000acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad4:	4a14      	ldr	r2, [pc, #80]	@ (8000b28 <_sbrk+0x5c>)
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <_sbrk+0x60>)
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <_sbrk+0x64>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <_sbrk+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d207      	bcs.n	8000b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000afc:	f009 fce0 	bl	800a4c0 <__errno>
 8000b00:	4603      	mov	r3, r0
 8000b02:	220c      	movs	r2, #12
 8000b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	e009      	b.n	8000b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <_sbrk+0x64>)
 8000b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	24100000 	.word	0x24100000
 8000b2c:	00000400 	.word	0x00000400
 8000b30:	240002ac 	.word	0x240002ac
 8000b34:	24001060 	.word	0x24001060

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <SystemInit+0xd0>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b42:	4a31      	ldr	r2, [pc, #196]	@ (8000c08 <SystemInit+0xd0>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <SystemInit+0xd4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d807      	bhi.n	8000b68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b58:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <SystemInit+0xd4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f023 030f 	bic.w	r3, r3, #15
 8000b60:	4a2a      	ldr	r2, [pc, #168]	@ (8000c0c <SystemInit+0xd4>)
 8000b62:	f043 0303 	orr.w	r3, r3, #3
 8000b66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b68:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <SystemInit+0xd8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a28      	ldr	r2, [pc, #160]	@ (8000c10 <SystemInit+0xd8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b74:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <SystemInit+0xd8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b7a:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <SystemInit+0xd8>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4924      	ldr	r1, [pc, #144]	@ (8000c10 <SystemInit+0xd8>)
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <SystemInit+0xdc>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <SystemInit+0xd4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 030c 	and.w	r3, r3, #12
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <SystemInit+0xd4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f023 030f 	bic.w	r3, r3, #15
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <SystemInit+0xd4>)
 8000b9c:	f043 0303 	orr.w	r3, r3, #3
 8000ba0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <SystemInit+0xd8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <SystemInit+0xd8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <SystemInit+0xd8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <SystemInit+0xd8>)
 8000bb6:	4a18      	ldr	r2, [pc, #96]	@ (8000c18 <SystemInit+0xe0>)
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <SystemInit+0xd8>)
 8000bbc:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <SystemInit+0xe4>)
 8000bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <SystemInit+0xd8>)
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <SystemInit+0xe8>)
 8000bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <SystemInit+0xd8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <SystemInit+0xd8>)
 8000bce:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <SystemInit+0xe8>)
 8000bd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <SystemInit+0xd8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <SystemInit+0xd8>)
 8000bda:	4a11      	ldr	r2, [pc, #68]	@ (8000c20 <SystemInit+0xe8>)
 8000bdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <SystemInit+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <SystemInit+0xd8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a09      	ldr	r2, [pc, #36]	@ (8000c10 <SystemInit+0xd8>)
 8000bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <SystemInit+0xd8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <SystemInit+0xec>)
 8000bf8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00
 8000c0c:	52002000 	.word	0x52002000
 8000c10:	58024400 	.word	0x58024400
 8000c14:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c18:	02020200 	.word	0x02020200
 8000c1c:	01ff0000 	.word	0x01ff0000
 8000c20:	01010280 	.word	0x01010280
 8000c24:	52004000 	.word	0x52004000

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c2c:	f7ff ff84 	bl	8000b38 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	@ (8000c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	@ (8000c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f009 fc39 	bl	800a4cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fb99 	bl	8000390 <main>
  bx  lr
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c68:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8000c6c:	0800afc8 	.word	0x0800afc8
  ldr r2, =_sbss
 8000c70:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8000c74:	24001060 	.word	0x24001060

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c82:	2003      	movs	r0, #3
 8000c84:	f000 f980 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000c88:	f003 fde2 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_Init+0x68>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	f003 030f 	and.w	r3, r3, #15
 8000c98:	4913      	ldr	r1, [pc, #76]	@ (8000ce8 <HAL_Init+0x6c>)
 8000c9a:	5ccb      	ldrb	r3, [r1, r3]
 8000c9c:	f003 031f 	and.w	r3, r3, #31
 8000ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <HAL_Init+0x68>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce8 <HAL_Init+0x6c>)
 8000cb0:	5cd3      	ldrb	r3, [r2, r3]
 8000cb2:	f003 031f 	and.w	r3, r3, #31
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <HAL_Init+0x70>)
 8000cbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf0 <HAL_Init+0x74>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f814 	bl	8000cf4 <HAL_InitTick>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e002      	b.n	8000cdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd6:	f7ff fe25 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	0800ae64 	.word	0x0800ae64
 8000cec:	24000004 	.word	0x24000004
 8000cf0:	24000000 	.word	0x24000000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_InitTick+0x60>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e021      	b.n	8000d4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_InitTick+0x64>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_InitTick+0x60>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f965 	bl	8000fee <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f000 f92f 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	@ (8000d5c <HAL_InitTick+0x68>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2400000c 	.word	0x2400000c
 8000d58:	24000000 	.word	0x24000000
 8000d5c:	24000008 	.word	0x24000008

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2400000c 	.word	0x2400000c
 8000d84:	240002b0 	.word	0x240002b0

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	240002b0 	.word	0x240002b0

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2400000c 	.word	0x2400000c

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	05fa0000 	.word	0x05fa0000

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db0b      	blt.n	8000e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	4907      	ldr	r1, [pc, #28]	@ (8000e84 <__NVIC_EnableIRQ+0x38>)
 8000e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	@ (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	@ (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	@ 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	@ 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff29 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff40 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff90 	bl	8000edc <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5f 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff33 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa4 	bl	8000f44 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b098      	sub	sp, #96	@ 0x60
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001010:	4a84      	ldr	r2, [pc, #528]	@ (8001224 <HAL_FDCAN_Init+0x21c>)
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	4611      	mov	r1, r2
 8001018:	224c      	movs	r2, #76	@ 0x4c
 800101a:	4618      	mov	r0, r3
 800101c:	f009 fa7c 	bl	800a518 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e1c6      	b.n	80013b8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a7e      	ldr	r2, [pc, #504]	@ (8001228 <HAL_FDCAN_Init+0x220>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d106      	bne.n	8001042 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d106      	bne.n	800105c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fc7e 	bl	8000958 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	699a      	ldr	r2, [r3, #24]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0210 	bic.w	r2, r2, #16
 800106a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800106c:	f7ff fe8c 	bl	8000d88 <HAL_GetTick>
 8001070:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001072:	e014      	b.n	800109e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001074:	f7ff fe88 	bl	8000d88 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b0a      	cmp	r3, #10
 8001080:	d90d      	bls.n	800109e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001088:	f043 0201 	orr.w	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2203      	movs	r2, #3
 8001096:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e18c      	b.n	80013b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d0e3      	beq.n	8001074 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	699a      	ldr	r2, [r3, #24]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010bc:	f7ff fe64 	bl	8000d88 <HAL_GetTick>
 80010c0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010c2:	e014      	b.n	80010ee <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010c4:	f7ff fe60 	bl	8000d88 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b0a      	cmp	r3, #10
 80010d0:	d90d      	bls.n	80010ee <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2203      	movs	r2, #3
 80010e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e164      	b.n	80013b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0e3      	beq.n	80010c4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	699a      	ldr	r2, [r3, #24]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0202 	orr.w	r2, r2, #2
 800110a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7c1b      	ldrb	r3, [r3, #16]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	699a      	ldr	r2, [r3, #24]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001122:	619a      	str	r2, [r3, #24]
 8001124:	e007      	b.n	8001136 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	699a      	ldr	r2, [r3, #24]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001134:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7c5b      	ldrb	r3, [r3, #17]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800114c:	619a      	str	r2, [r3, #24]
 800114e:	e007      	b.n	8001160 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800115e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7c9b      	ldrb	r3, [r3, #18]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699a      	ldr	r2, [r3, #24]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001176:	619a      	str	r2, [r3, #24]
 8001178:	e007      	b.n	800118a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001188:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	699a      	ldr	r2, [r3, #24]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80011ae:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0210 	bic.w	r2, r2, #16
 80011be:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d108      	bne.n	80011da <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0204 	orr.w	r2, r2, #4
 80011d6:	619a      	str	r2, [r3, #24]
 80011d8:	e030      	b.n	800123c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d02c      	beq.n	800123c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d020      	beq.n	800122c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011f8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0210 	orr.w	r2, r2, #16
 8001208:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d114      	bne.n	800123c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0220 	orr.w	r2, r2, #32
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	e00b      	b.n	800123c <HAL_FDCAN_Init+0x234>
 8001224:	0800add4 	.word	0x0800add4
 8001228:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	699a      	ldr	r2, [r3, #24]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0220 	orr.w	r2, r2, #32
 800123a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	3b01      	subs	r3, #1
 8001242:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	3b01      	subs	r3, #1
 800124a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800124c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001254:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	3b01      	subs	r3, #1
 800125e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001264:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001266:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001270:	d115      	bne.n	800129e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001276:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127c:	3b01      	subs	r3, #1
 800127e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001280:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	3b01      	subs	r3, #1
 8001288:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800128a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001292:	3b01      	subs	r3, #1
 8001294:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800129a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800129c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00a      	beq.n	80012bc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c4:	4413      	add	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d011      	beq.n	80012ee <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80012d2:	f023 0107 	bic.w	r1, r3, #7
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	3360      	adds	r3, #96	@ 0x60
 80012de:	443b      	add	r3, r7
 80012e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d011      	beq.n	800131a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80012fe:	f023 0107 	bic.w	r1, r3, #7
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	3360      	adds	r3, #96	@ 0x60
 800130a:	443b      	add	r3, r7
 800130c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800131e:	2b00      	cmp	r3, #0
 8001320:	d012      	beq.n	8001348 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800132a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	3360      	adds	r3, #96	@ 0x60
 8001336:	443b      	add	r3, r7
 8001338:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800133c:	011a      	lsls	r2, r3, #4
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800134c:	2b00      	cmp	r3, #0
 800134e:	d012      	beq.n	8001376 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001358:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	3360      	adds	r3, #96	@ 0x60
 8001364:	443b      	add	r3, r7
 8001366:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800136a:	021a      	lsls	r2, r3, #8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a11      	ldr	r2, [pc, #68]	@ (80013c0 <HAL_FDCAN_Init+0x3b8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d107      	bne.n	8001390 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f022 0203 	bic.w	r2, r2, #3
 800138e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fd79 	bl	8001ea0 <FDCAN_CalcultateRamBlockAddresses>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80013b4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3760      	adds	r7, #96	@ 0x60
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	4000a000 	.word	0x4000a000

080013c4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d111      	bne.n	80013fc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2202      	movs	r2, #2
 80013dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e008      	b.n	800140e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001402:	f043 0204 	orr.w	r2, r3, #4
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
  }
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d141      	bne.n	80014b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800143a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001448:	f043 0220 	orr.w	r2, r3, #32
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e038      	b.n	80014c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800145e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d009      	beq.n	800147a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800146c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e026      	b.n	80014c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001482:	0c1b      	lsrs	r3, r3, #16
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fe8b 	bl	80021ac <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2101      	movs	r1, #1
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	fa01 f202 	lsl.w	r2, r1, r2
 80014a2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80014a6:	2201      	movs	r2, #1
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e008      	b.n	80014c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014bc:	f043 0208 	orr.w	r2, r3, #8
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
  }
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b08b      	sub	sp, #44	@ 0x2c
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80014e8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80014ea:	7efb      	ldrb	r3, [r7, #27]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	f040 8149 	bne.w	8001784 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b40      	cmp	r3, #64	@ 0x40
 80014f6:	d14c      	bne.n	8001592 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001500:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d109      	bne.n	800151c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800150e:	f043 0220 	orr.w	r2, r3, #32
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e13c      	b.n	8001796 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001532:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e12a      	b.n	8001796 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001548:	0e1b      	lsrs	r3, r3, #24
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b01      	cmp	r3, #1
 8001550:	d10a      	bne.n	8001568 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800155a:	0fdb      	lsrs	r3, r3, #31
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	4413      	add	r3, r2
 800157a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001584:	69f9      	ldr	r1, [r7, #28]
 8001586:	fb01 f303 	mul.w	r3, r1, r3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001590:	e068      	b.n	8001664 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b41      	cmp	r3, #65	@ 0x41
 8001596:	d14c      	bne.n	8001632 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80015a0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d109      	bne.n	80015bc <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015ae:	f043 0220 	orr.w	r2, r3, #32
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0ec      	b.n	8001796 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80015c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0da      	b.n	8001796 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80015e8:	0e1b      	lsrs	r3, r3, #24
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d10a      	bne.n	8001608 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80015fa:	0fdb      	lsrs	r3, r3, #31
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001604:	2301      	movs	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	69f9      	ldr	r1, [r7, #28]
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001630:	e018      	b.n	8001664 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	429a      	cmp	r2, r3
 800163a:	d309      	bcc.n	8001650 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001642:	f043 0220 	orr.w	r2, r3, #32
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0a2      	b.n	8001796 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d107      	bne.n	8001688 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	0c9b      	lsrs	r3, r3, #18
 800167e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e005      	b.n	8001694 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	3304      	adds	r3, #4
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	f003 020f 	and.w	r2, r3, #15
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0e1b      	lsrs	r3, r3, #24
 80016e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0fda      	lsrs	r2, r3, #31
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	3304      	adds	r3, #4
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
 8001708:	e00a      	b.n	8001720 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	441a      	add	r2, r3
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	440b      	add	r3, r1
 8001716:	7812      	ldrb	r2, [r2, #0]
 8001718:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	3301      	adds	r3, #1
 800171e:	623b      	str	r3, [r7, #32]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4a1f      	ldr	r2, [pc, #124]	@ (80017a4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	461a      	mov	r2, r3
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	4293      	cmp	r3, r2
 800172e:	d3ec      	bcc.n	800170a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b40      	cmp	r3, #64	@ 0x40
 8001734:	d105      	bne.n	8001742 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8001740:	e01e      	b.n	8001780 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2b41      	cmp	r3, #65	@ 0x41
 8001746:	d105      	bne.n	8001754 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001752:	e015      	b.n	8001780 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b1f      	cmp	r3, #31
 8001758:	d808      	bhi.n	800176c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2101      	movs	r1, #1
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	fa01 f202 	lsl.w	r2, r1, r2
 8001766:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800176a:	e009      	b.n	8001780 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f003 021f 	and.w	r2, r3, #31
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2101      	movs	r1, #1
 8001778:	fa01 f202 	lsl.w	r2, r1, r2
 800177c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	e008      	b.n	8001796 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800178a:	f043 0208 	orr.w	r2, r3, #8
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
  }
}
 8001796:	4618      	mov	r0, r3
 8001798:	372c      	adds	r7, #44	@ 0x2c
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	0800ae74 	.word	0x0800ae74

080017a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80017ba:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d002      	beq.n	80017c8 <HAL_FDCAN_ActivateNotification+0x20>
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d155      	bne.n	8001874 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d108      	bne.n	80017e8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0201 	orr.w	r2, r2, #1
 80017e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017e6:	e014      	b.n	8001812 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	4013      	ands	r3, r2
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d108      	bne.n	800180a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0202 	orr.w	r2, r2, #2
 8001806:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001808:	e003      	b.n	8001812 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2203      	movs	r2, #3
 8001810:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001818:	2b00      	cmp	r3, #0
 800181a:	d009      	beq.n	8001830 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	430a      	orrs	r2, r1
 800182c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	430a      	orrs	r2, r1
 800184a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <HAL_FDCAN_ActivateNotification+0xec>)
 8001858:	4013      	ands	r3, r2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	430b      	orrs	r3, r1
 8001860:	6553      	str	r3, [r2, #84]	@ 0x54
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	0f9b      	lsrs	r3, r3, #30
 800186a:	490b      	ldr	r1, [pc, #44]	@ (8001898 <HAL_FDCAN_ActivateNotification+0xf0>)
 800186c:	4313      	orrs	r3, r2
 800186e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	e008      	b.n	8001886 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800187a:	f043 0202 	orr.w	r2, r3, #2
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
  }
}
 8001886:	4618      	mov	r0, r3
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	3fcfffff 	.word	0x3fcfffff
 8001898:	4000a800 	.word	0x4000a800

0800189c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b096      	sub	sp, #88	@ 0x58
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80018a4:	4b95      	ldr	r3, [pc, #596]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	079b      	lsls	r3, r3, #30
 80018aa:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80018ac:	4b93      	ldr	r3, [pc, #588]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	079b      	lsls	r3, r3, #30
 80018b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80018b4:	4013      	ands	r3, r2
 80018b6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018be:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80018c2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80018cc:	4013      	ands	r3, r2
 80018ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018e4:	4013      	ands	r3, r2
 80018e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018fc:	4013      	ands	r3, r2
 80018fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001906:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800190a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001914:	4013      	ands	r3, r2
 8001916:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800191e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8001922:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800192c:	4013      	ands	r3, r2
 800192e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800193e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00f      	beq.n	800196a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800194a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800194c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00a      	beq.n	800196a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800195c:	651a      	str	r2, [r3, #80]	@ 0x50
 800195e:	4b67      	ldr	r3, [pc, #412]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fa4f 	bl	8001e08 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800196a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800196c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01c      	beq.n	80019ae <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197a:	2b00      	cmp	r3, #0
 800197c:	d017      	beq.n	80019ae <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001992:	4013      	ands	r3, r2
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800199e:	651a      	str	r2, [r3, #80]	@ 0x50
 80019a0:	4b56      	ldr	r3, [pc, #344]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80019a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fa04 	bl	8001db6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80019ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00d      	beq.n	80019d0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80019ba:	4b51      	ldr	r3, [pc, #324]	@ (8001b00 <HAL_FDCAN_IRQHandler+0x264>)
 80019bc:	400b      	ands	r3, r1
 80019be:	6513      	str	r3, [r2, #80]	@ 0x50
 80019c0:	4a4e      	ldr	r2, [pc, #312]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 80019c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c4:	0f9b      	lsrs	r3, r3, #30
 80019c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80019c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f9b2 	bl	8001d34 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80019d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00d      	beq.n	80019f2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80019dc:	4b48      	ldr	r3, [pc, #288]	@ (8001b00 <HAL_FDCAN_IRQHandler+0x264>)
 80019de:	400b      	ands	r3, r1
 80019e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80019e2:	4a46      	ldr	r2, [pc, #280]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 80019e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019e6:	0f9b      	lsrs	r3, r3, #30
 80019e8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80019ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f9ac 	bl	8001d4a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80019f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80019fe:	4b40      	ldr	r3, [pc, #256]	@ (8001b00 <HAL_FDCAN_IRQHandler+0x264>)
 8001a00:	400b      	ands	r3, r1
 8001a02:	6513      	str	r3, [r2, #80]	@ 0x50
 8001a04:	4a3d      	ldr	r2, [pc, #244]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 8001a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a08:	0f9b      	lsrs	r3, r3, #30
 8001a0a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001a0c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f9a6 	bl	8001d60 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00d      	beq.n	8001a36 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001a20:	4b37      	ldr	r3, [pc, #220]	@ (8001b00 <HAL_FDCAN_IRQHandler+0x264>)
 8001a22:	400b      	ands	r3, r1
 8001a24:	6513      	str	r3, [r2, #80]	@ 0x50
 8001a26:	4a35      	ldr	r2, [pc, #212]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 8001a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a2a:	0f9b      	lsrs	r3, r3, #30
 8001a2c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a2e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f9a0 	bl	8001d76 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00f      	beq.n	8001a60 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00a      	beq.n	8001a60 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a52:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a54:	4b29      	ldr	r3, [pc, #164]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f996 	bl	8001d8c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01c      	beq.n	8001aa4 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d017      	beq.n	8001aa4 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a7c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a88:	4013      	ands	r3, r2
 8001a8a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a94:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f97e 	bl	8001da0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00f      	beq.n	8001ace <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ab0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00a      	beq.n	8001ace <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ac0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f97f 	bl	8001dcc <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d015      	beq.n	8001b04 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d010      	beq.n	8001b04 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001aea:	651a      	str	r2, [r3, #80]	@ 0x50
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <HAL_FDCAN_IRQHandler+0x260>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f974 	bl	8001de0 <HAL_FDCAN_TimestampWraparoundCallback>
 8001af8:	e004      	b.n	8001b04 <HAL_FDCAN_IRQHandler+0x268>
 8001afa:	bf00      	nop
 8001afc:	4000a800 	.word	0x4000a800
 8001b00:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00f      	beq.n	8001b2e <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00a      	beq.n	8001b2e <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b20:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b22:	4b81      	ldr	r3, [pc, #516]	@ (8001d28 <HAL_FDCAN_IRQHandler+0x48c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f963 	bl	8001df4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d014      	beq.n	8001b62 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00f      	beq.n	8001b62 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b4c:	4b76      	ldr	r3, [pc, #472]	@ (8001d28 <HAL_FDCAN_IRQHandler+0x48c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00d      	beq.n	8001b84 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b6e:	4b6f      	ldr	r3, [pc, #444]	@ (8001d2c <HAL_FDCAN_IRQHandler+0x490>)
 8001b70:	400b      	ands	r3, r1
 8001b72:	6513      	str	r3, [r2, #80]	@ 0x50
 8001b74:	4a6c      	ldr	r2, [pc, #432]	@ (8001d28 <HAL_FDCAN_IRQHandler+0x48c>)
 8001b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b78:	0f9b      	lsrs	r3, r3, #30
 8001b7a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001b7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f956 	bl	8001e30 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d011      	beq.n	8001bae <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001b90:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <HAL_FDCAN_IRQHandler+0x490>)
 8001b92:	400b      	ands	r3, r1
 8001b94:	6513      	str	r3, [r2, #80]	@ 0x50
 8001b96:	4a64      	ldr	r2, [pc, #400]	@ (8001d28 <HAL_FDCAN_IRQHandler+0x48c>)
 8001b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9a:	0f9b      	lsrs	r3, r3, #30
 8001b9c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d30 <HAL_FDCAN_IRQHandler+0x494>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	f040 80aa 	bne.w	8001d0e <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a2 	beq.w	8001d0e <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bde:	4013      	ands	r3, r2
 8001be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c0e:	4013      	ands	r3, r2
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8001c1c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	6a3a      	ldr	r2, [r7, #32]
 8001c26:	4013      	ands	r3, r2
 8001c28:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8001c34:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c5e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001c60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8ef 	bl	8001e46 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c74:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001c76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8ef 	bl	8001e5c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d019      	beq.n	8001cbc <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d014      	beq.n	8001cbc <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c98:	0c1b      	lsrs	r3, r3, #16
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ca8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2240      	movs	r2, #64	@ 0x40
 8001cb0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	6939      	ldr	r1, [r7, #16]
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8db 	bl	8001e72 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001cca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f8dc 	bl	8001e8a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	6a3a      	ldr	r2, [r7, #32]
 8001cde:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f87f 	bl	8001e1c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d1e:	bf00      	nop
 8001d20:	3758      	adds	r7, #88	@ 0x58
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	4000a800 	.word	0x4000a800
 8001d2c:	3fcfffff 	.word	0x3fcfffff
 8001d30:	4000a000 	.word	0x4000a000

08001d34 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eac:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001eb6:	4ba7      	ldr	r3, [pc, #668]	@ (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	0091      	lsls	r1, r2, #2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ed0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed8:	041a      	lsls	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	4413      	add	r3, r2
 8001eec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001ef6:	4b97      	ldr	r3, [pc, #604]	@ (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	0091      	lsls	r1, r2, #2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	430b      	orrs	r3, r1
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f10:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001f38:	4b86      	ldr	r3, [pc, #536]	@ (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	0091      	lsls	r1, r2, #2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001f52:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	041a      	lsls	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	4413      	add	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f80:	4b74      	ldr	r3, [pc, #464]	@ (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	0091      	lsls	r1, r2, #2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001f9a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa2:	041a      	lsls	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001fc8:	4b62      	ldr	r3, [pc, #392]	@ (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	0091      	lsls	r1, r2, #2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	4413      	add	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001ff4:	4b57      	ldr	r3, [pc, #348]	@ (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	0091      	lsls	r1, r2, #2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	430b      	orrs	r3, r1
 8002002:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800200e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	041a      	lsls	r2, r3, #16
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	4413      	add	r3, r2
 800202c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002036:	4b47      	ldr	r3, [pc, #284]	@ (8002154 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002038:	4013      	ands	r3, r2
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	0091      	lsls	r1, r2, #2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	430b      	orrs	r3, r1
 8002044:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002050:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800206c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002074:	061a      	lsls	r2, r3, #24
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002084:	4b34      	ldr	r3, [pc, #208]	@ (8002158 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002086:	4413      	add	r3, r2
 8002088:	009a      	lsls	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	441a      	add	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	441a      	add	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80020c0:	441a      	add	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80020d8:	441a      	add	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80020f0:	441a      	add	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	441a      	add	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	441a      	add	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800213c:	441a      	add	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	4a04      	ldr	r2, [pc, #16]	@ (800215c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d915      	bls.n	800217c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002150:	e006      	b.n	8002160 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002152:	bf00      	nop
 8002154:	ffff0003 	.word	0xffff0003
 8002158:	10002b00 	.word	0x10002b00
 800215c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002166:	f043 0220 	orr.w	r2, r3, #32
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2203      	movs	r2, #3
 8002174:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e010      	b.n	800219e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e005      	b.n	8002190 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3304      	adds	r3, #4
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d3f3      	bcc.n	8002184 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop

080021ac <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	@ 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80021ca:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	e00a      	b.n	80021ee <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80021e0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80021e6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80021ec:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80021f8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80021fe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002204:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800221a:	6839      	ldr	r1, [r7, #0]
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	3304      	adds	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	3304      	adds	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e020      	b.n	8002286 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3303      	adds	r3, #3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3302      	adds	r3, #2
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	440b      	add	r3, r1
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800225c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	440b      	add	r3, r1
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800226a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	440a      	add	r2, r1
 8002272:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002274:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	3304      	adds	r3, #4
 800227e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3304      	adds	r3, #4
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	4a06      	ldr	r2, [pc, #24]	@ (80022a4 <FDCAN_CopyMessageToRAM+0xf8>)
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	461a      	mov	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	4293      	cmp	r3, r2
 8002294:	d3d6      	bcc.n	8002244 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8002296:	bf00      	nop
 8002298:	bf00      	nop
 800229a:	3724      	adds	r7, #36	@ 0x24
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	0800ae74 	.word	0x0800ae74

080022a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	@ 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80022b6:	4b89      	ldr	r3, [pc, #548]	@ (80024dc <HAL_GPIO_Init+0x234>)
 80022b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022ba:	e194      	b.n	80025e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8186 	beq.w	80025e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d005      	beq.n	80022ec <HAL_GPIO_Init+0x44>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d130      	bne.n	800234e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002322:	2201      	movs	r2, #1
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 0201 	and.w	r2, r3, #1
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b03      	cmp	r3, #3
 8002358:	d017      	beq.n	800238a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d123      	bne.n	80023de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	69b9      	ldr	r1, [r7, #24]
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0203 	and.w	r2, r3, #3
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80e0 	beq.w	80025e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002420:	4b2f      	ldr	r3, [pc, #188]	@ (80024e0 <HAL_GPIO_Init+0x238>)
 8002422:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002426:	4a2e      	ldr	r2, [pc, #184]	@ (80024e0 <HAL_GPIO_Init+0x238>)
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002430:	4b2b      	ldr	r3, [pc, #172]	@ (80024e0 <HAL_GPIO_Init+0x238>)
 8002432:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a29      	ldr	r2, [pc, #164]	@ (80024e4 <HAL_GPIO_Init+0x23c>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a20      	ldr	r2, [pc, #128]	@ (80024e8 <HAL_GPIO_Init+0x240>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d052      	beq.n	8002510 <HAL_GPIO_Init+0x268>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1f      	ldr	r2, [pc, #124]	@ (80024ec <HAL_GPIO_Init+0x244>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d031      	beq.n	80024d6 <HAL_GPIO_Init+0x22e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1e      	ldr	r2, [pc, #120]	@ (80024f0 <HAL_GPIO_Init+0x248>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d02b      	beq.n	80024d2 <HAL_GPIO_Init+0x22a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1d      	ldr	r2, [pc, #116]	@ (80024f4 <HAL_GPIO_Init+0x24c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d025      	beq.n	80024ce <HAL_GPIO_Init+0x226>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1c      	ldr	r2, [pc, #112]	@ (80024f8 <HAL_GPIO_Init+0x250>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <HAL_GPIO_Init+0x222>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1b      	ldr	r2, [pc, #108]	@ (80024fc <HAL_GPIO_Init+0x254>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0x21e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1a      	ldr	r2, [pc, #104]	@ (8002500 <HAL_GPIO_Init+0x258>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x21a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a19      	ldr	r2, [pc, #100]	@ (8002504 <HAL_GPIO_Init+0x25c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x216>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a18      	ldr	r2, [pc, #96]	@ (8002508 <HAL_GPIO_Init+0x260>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x212>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_GPIO_Init+0x264>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x20e>
 80024b2:	2309      	movs	r3, #9
 80024b4:	e02d      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024b6:	230a      	movs	r3, #10
 80024b8:	e02b      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024ba:	2308      	movs	r3, #8
 80024bc:	e029      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024be:	2307      	movs	r3, #7
 80024c0:	e027      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024c2:	2306      	movs	r3, #6
 80024c4:	e025      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024c6:	2305      	movs	r3, #5
 80024c8:	e023      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024ca:	2304      	movs	r3, #4
 80024cc:	e021      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024ce:	2303      	movs	r3, #3
 80024d0:	e01f      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e01d      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e01b      	b.n	8002512 <HAL_GPIO_Init+0x26a>
 80024da:	bf00      	nop
 80024dc:	58000080 	.word	0x58000080
 80024e0:	58024400 	.word	0x58024400
 80024e4:	58000400 	.word	0x58000400
 80024e8:	58020000 	.word	0x58020000
 80024ec:	58020400 	.word	0x58020400
 80024f0:	58020800 	.word	0x58020800
 80024f4:	58020c00 	.word	0x58020c00
 80024f8:	58021000 	.word	0x58021000
 80024fc:	58021400 	.word	0x58021400
 8002500:	58021800 	.word	0x58021800
 8002504:	58021c00 	.word	0x58021c00
 8002508:	58022000 	.word	0x58022000
 800250c:	58022400 	.word	0x58022400
 8002510:	2300      	movs	r3, #0
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	f002 0203 	and.w	r2, r2, #3
 8002518:	0092      	lsls	r2, r2, #2
 800251a:	4093      	lsls	r3, r2
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002522:	4938      	ldr	r1, [pc, #224]	@ (8002604 <HAL_GPIO_Init+0x35c>)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002556:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002584:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3301      	adds	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f47f ae63 	bne.w	80022bc <HAL_GPIO_Init+0x14>
  }
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	3724      	adds	r7, #36	@ 0x24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	58000400 	.word	0x58000400

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800264c:	887a      	ldrh	r2, [r7, #2]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	041a      	lsls	r2, r3, #16
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43d9      	mvns	r1, r3
 8002658:	887b      	ldrh	r3, [r7, #2]
 800265a:	400b      	ands	r3, r1
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	619a      	str	r2, [r3, #24]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af02      	add	r7, sp, #8
 8002674:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0fe      	b.n	800287e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d106      	bne.n	800269a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f007 fb15 	bl	8009cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2203      	movs	r2, #3
 800269e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 fec3 	bl	8006432 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7c1a      	ldrb	r2, [r3, #16]
 80026b4:	f88d 2000 	strb.w	r2, [sp]
 80026b8:	3304      	adds	r3, #4
 80026ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026bc:	f003 fd94 	bl	80061e8 <USB_CoreInit>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0d5      	b.n	800287e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 febb 	bl	8006454 <USB_SetCurrentMode>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0c6      	b.n	800287e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e04a      	b.n	800278c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	3315      	adds	r3, #21
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3314      	adds	r3, #20
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	b298      	uxth	r0, r3
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	332e      	adds	r3, #46	@ 0x2e
 8002732:	4602      	mov	r2, r0
 8002734:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	3318      	adds	r3, #24
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	331c      	adds	r3, #28
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3320      	adds	r3, #32
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	3324      	adds	r3, #36	@ 0x24
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	3301      	adds	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	791b      	ldrb	r3, [r3, #4]
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	429a      	cmp	r2, r3
 8002794:	d3af      	bcc.n	80026f6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
 800279a:	e044      	b.n	8002826 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	3301      	adds	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	791b      	ldrb	r3, [r3, #4]
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	429a      	cmp	r2, r3
 800282e:	d3b5      	bcc.n	800279c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7c1a      	ldrb	r2, [r3, #16]
 8002838:	f88d 2000 	strb.w	r2, [sp]
 800283c:	3304      	adds	r3, #4
 800283e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002840:	f003 fe54 	bl	80064ec <USB_DevInit>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e013      	b.n	800287e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7b1b      	ldrb	r3, [r3, #12]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d102      	bne.n	8002872 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f001 f96d 	bl	8003b4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f004 fe93 	bl	80075a2 <USB_DevDisconnect>

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_PCD_Start+0x1c>
 800289e:	2302      	movs	r3, #2
 80028a0:	e022      	b.n	80028e8 <HAL_PCD_Start+0x62>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d105      	bne.n	80028ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 fd9e 	bl	8006410 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 fe41 	bl	8007560 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b08d      	sub	sp, #52	@ 0x34
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f004 feff 	bl	800770a <USB_GetMode>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 84b9 	bne.w	8003286 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fe63 	bl	80075e4 <USB_ReadInterrupts>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 84af 	beq.w	8003284 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f004 fe50 	bl	80075e4 <USB_ReadInterrupts>
 8002944:	4603      	mov	r3, r0
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b02      	cmp	r3, #2
 800294c:	d107      	bne.n	800295e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f002 0202 	and.w	r2, r2, #2
 800295c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f004 fe3e 	bl	80075e4 <USB_ReadInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b10      	cmp	r3, #16
 8002970:	d161      	bne.n	8002a36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0210 	bic.w	r2, r2, #16
 8002980:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f003 020f 	and.w	r2, r3, #15
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	3304      	adds	r3, #4
 80029a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	0c5b      	lsrs	r3, r3, #17
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d124      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d035      	beq.n	8002a26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	6a38      	ldr	r0, [r7, #32]
 80029ce:	f004 fc75 	bl	80072bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029de:	441a      	add	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f0:	441a      	add	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	615a      	str	r2, [r3, #20]
 80029f6:	e016      	b.n	8002a26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	0c5b      	lsrs	r3, r3, #17
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	2b06      	cmp	r3, #6
 8002a02:	d110      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6a38      	ldr	r0, [r7, #32]
 8002a10:	f004 fc54 	bl	80072bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a20:	441a      	add	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699a      	ldr	r2, [r3, #24]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0210 	orr.w	r2, r2, #16
 8002a34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fdd2 	bl	80075e4 <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a4a:	f040 80a7 	bne.w	8002b9c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f004 fdd7 	bl	800760a <USB_ReadDevAllOutEpInterrupt>
 8002a5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a5e:	e099      	b.n	8002b94 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 808e 	beq.w	8002b88 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f004 fdfb 	bl	8007672 <USB_ReadDevOutEPInterrupt>
 8002a7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00c      	beq.n	8002aa2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a94:	461a      	mov	r2, r3
 8002a96:	2301      	movs	r3, #1
 8002a98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fecf 	bl	8003840 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00c      	beq.n	8002ac6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2308      	movs	r3, #8
 8002abc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002abe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 ffa5 	bl	8003a10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002adc:	461a      	mov	r2, r3
 8002ade:	2310      	movs	r3, #16
 8002ae0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d030      	beq.n	8002b4e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af4:	2b80      	cmp	r3, #128	@ 0x80
 8002af6:	d109      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b0a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	78db      	ldrb	r3, [r3, #3]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d108      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4619      	mov	r1, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f007 f9fe 	bl	8009f38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b64:	461a      	mov	r2, r3
 8002b66:	2320      	movs	r3, #32
 8002b68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b80:	461a      	mov	r2, r3
 8002b82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f47f af62 	bne.w	8002a60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f004 fd1f 	bl	80075e4 <USB_ReadInterrupts>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bb0:	f040 80db 	bne.w	8002d6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 fd40 	bl	800763e <USB_ReadDevAllInEpInterrupt>
 8002bbe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002bc4:	e0cd      	b.n	8002d62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80c2 	beq.w	8002d56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f004 fd66 	bl	80076ae <USB_ReadDevInEPInterrupt>
 8002be2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d057      	beq.n	8002c9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69f9      	ldr	r1, [r7, #28]
 8002c0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c0e:	4013      	ands	r3, r2
 8002c10:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2301      	movs	r3, #1
 8002c22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	799b      	ldrb	r3, [r3, #6]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d132      	bne.n	8002c92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3320      	adds	r3, #32
 8002c3c:	6819      	ldr	r1, [r3, #0]
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4403      	add	r3, r0
 8002c4c:	331c      	adds	r3, #28
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4419      	add	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4403      	add	r3, r0
 8002c60:	3320      	adds	r3, #32
 8002c62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d113      	bne.n	8002c92 <HAL_PCD_IRQHandler+0x3a2>
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3324      	adds	r3, #36	@ 0x24
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d108      	bne.n	8002c92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	f004 fd6f 	bl	8007770 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f007 f8c8 	bl	8009e2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cec:	461a      	mov	r2, r3
 8002cee:	2340      	movs	r3, #64	@ 0x40
 8002cf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d023      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cfe:	6a38      	ldr	r0, [r7, #32]
 8002d00:	f003 fd52 	bl	80067a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	3310      	adds	r3, #16
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	3304      	adds	r3, #4
 8002d16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	78db      	ldrb	r3, [r3, #3]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d108      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2200      	movs	r2, #0
 8002d24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f007 f915 	bl	8009f5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2302      	movs	r3, #2
 8002d42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fce8 	bl	8003726 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	3301      	adds	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f47f af2e 	bne.w	8002bc6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 fc38 	bl	80075e4 <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d7e:	d122      	bne.n	8002dc6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d108      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002da6:	2100      	movs	r1, #0
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fef3 	bl	8003b94 <HAL_PCDEx_LPM_Callback>
 8002dae:	e002      	b.n	8002db6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f007 f8b3 	bl	8009f1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f004 fc0a 	bl	80075e4 <USB_ReadInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dda:	d112      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f007 f86f 	bl	8009ed0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f004 fbec 	bl	80075e4 <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e16:	d121      	bne.n	8002e5c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002e26:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d111      	bne.n	8002e56 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fea0 	bl	8003b94 <HAL_PCDEx_LPM_Callback>
 8002e54:	e002      	b.n	8002e5c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f007 f83a 	bl	8009ed0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f004 fbbf 	bl	80075e4 <USB_ReadInterrupts>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e70:	f040 80b7 	bne.w	8002fe2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2110      	movs	r1, #16
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fc8a 	bl	80067a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e98:	e046      	b.n	8002f28 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002eac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ebe:	0151      	lsls	r1, r2, #5
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	440a      	add	r2, r1
 8002ec4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002ec8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ecc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eda:	461a      	mov	r2, r3
 8002edc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ee0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ef2:	0151      	lsls	r1, r2, #5
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	440a      	add	r2, r1
 8002ef8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002efc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f12:	0151      	lsls	r1, r2, #5
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	440a      	add	r2, r1
 8002f18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002f20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f24:	3301      	adds	r3, #1
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	791b      	ldrb	r3, [r3, #4]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d3b2      	bcc.n	8002e9a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f42:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002f46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	7bdb      	ldrb	r3, [r3, #15]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d016      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f60:	f043 030b 	orr.w	r3, r3, #11
 8002f64:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f76:	f043 030b 	orr.w	r3, r3, #11
 8002f7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f7c:	e015      	b.n	8002faa <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002f92:	4313      	orrs	r3, r2
 8002f94:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fa4:	f043 030b 	orr.w	r3, r3, #11
 8002fa8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fb8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002fbc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f004 fbcf 	bl	8007770 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fafc 	bl	80075e4 <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff6:	d123      	bne.n	8003040 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f004 fb93 	bl	8007728 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fc47 	bl	800689a <USB_GetDevSpeed>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681c      	ldr	r4, [r3, #0]
 8003018:	f001 fd94 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 800301c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003022:	461a      	mov	r2, r3
 8003024:	4620      	mov	r0, r4
 8003026:	f003 f951 	bl	80062cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f006 ff27 	bl	8009e7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800303e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f004 facd 	bl	80075e4 <USB_ReadInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b08      	cmp	r3, #8
 8003052:	d10a      	bne.n	800306a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f006 ff04 	bl	8009e62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f002 0208 	and.w	r2, r2, #8
 8003068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f004 fab8 	bl	80075e4 <USB_ReadInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307a:	2b80      	cmp	r3, #128	@ 0x80
 800307c:	d123      	bne.n	80030c6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800308a:	2301      	movs	r3, #1
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
 800308e:	e014      	b.n	80030ba <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d105      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fb08 	bl	80036c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	3301      	adds	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	791b      	ldrb	r3, [r3, #4]
 80030be:	461a      	mov	r2, r3
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d3e4      	bcc.n	8003090 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 fa8a 	bl	80075e4 <USB_ReadInterrupts>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030da:	d13c      	bne.n	8003156 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030dc:	2301      	movs	r3, #1
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e0:	e02b      	b.n	800313a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3318      	adds	r3, #24
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d115      	bne.n	8003134 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003108:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	da12      	bge.n	8003134 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3317      	adds	r3, #23
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fac8 	bl	80036c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	3301      	adds	r3, #1
 8003138:	627b      	str	r3, [r7, #36]	@ 0x24
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	791b      	ldrb	r3, [r3, #4]
 800313e:	461a      	mov	r2, r3
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	4293      	cmp	r3, r2
 8003144:	d3cd      	bcc.n	80030e2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003154:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f004 fa42 	bl	80075e4 <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003166:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800316a:	d156      	bne.n	800321a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800316c:	2301      	movs	r3, #1
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003170:	e045      	b.n	80031fe <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d12e      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800319a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800319c:	2b00      	cmp	r3, #0
 800319e:	da2b      	bge.n	80031f8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80031ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d121      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031f4:	6053      	str	r3, [r2, #4]
            break;
 80031f6:	e008      	b.n	800320a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	3301      	adds	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	791b      	ldrb	r3, [r3, #4]
 8003202:	461a      	mov	r2, r3
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	4293      	cmp	r3, r2
 8003208:	d3b3      	bcc.n	8003172 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f004 f9e0 	bl	80075e4 <USB_ReadInterrupts>
 8003224:	4603      	mov	r3, r0
 8003226:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322e:	d10a      	bne.n	8003246 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f006 fea5 	bl	8009f80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f004 f9ca 	bl	80075e4 <USB_ReadInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b04      	cmp	r3, #4
 8003258:	d115      	bne.n	8003286 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f006 fe95 	bl	8009f9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	e000      	b.n	8003286 <HAL_PCD_IRQHandler+0x996>
      return;
 8003284:	bf00      	nop
    }
  }
}
 8003286:	3734      	adds	r7, #52	@ 0x34
 8003288:	46bd      	mov	sp, r7
 800328a:	bd90      	pop	{r4, r7, pc}

0800328c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_PCD_SetAddress+0x1a>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e012      	b.n	80032cc <HAL_PCD_SetAddress+0x40>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f004 f929 	bl	8007514 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	70fb      	strb	r3, [r7, #3]
 80032e6:	460b      	mov	r3, r1
 80032e8:	803b      	strh	r3, [r7, #0]
 80032ea:	4613      	mov	r3, r2
 80032ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da0f      	bge.n	800331a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	3310      	adds	r3, #16
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	705a      	strb	r2, [r3, #1]
 8003318:	e00f      	b.n	800333a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 020f 	and.w	r2, r3, #15
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	3304      	adds	r3, #4
 8003332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003346:	883a      	ldrh	r2, [r7, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	78ba      	ldrb	r2, [r7, #2]
 8003350:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003364:	78bb      	ldrb	r3, [r7, #2]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d102      	bne.n	8003370 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_PCD_EP_Open+0xaa>
 800337a:	2302      	movs	r3, #2
 800337c:	e00e      	b.n	800339c <HAL_PCD_EP_Open+0xc8>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68f9      	ldr	r1, [r7, #12]
 800338c:	4618      	mov	r0, r3
 800338e:	f003 faa9 	bl	80068e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800339a:	7afb      	ldrb	r3, [r7, #11]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	da0f      	bge.n	80033d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 020f 	and.w	r2, r3, #15
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	3310      	adds	r3, #16
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	705a      	strb	r2, [r3, #1]
 80033d6:	e00f      	b.n	80033f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	3304      	adds	r3, #4
 80033f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_PCD_EP_Close+0x6e>
 800340e:	2302      	movs	r3, #2
 8003410:	e00e      	b.n	8003430 <HAL_PCD_EP_Close+0x8c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68f9      	ldr	r1, [r7, #12]
 8003420:	4618      	mov	r0, r3
 8003422:	f003 fae7 	bl	80069f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	460b      	mov	r3, r1
 8003446:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	f003 020f 	and.w	r2, r3, #15
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	3304      	adds	r3, #4
 8003460:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2200      	movs	r2, #0
 8003478:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800347a:	7afb      	ldrb	r3, [r7, #11]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	b2da      	uxtb	r2, r3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	799b      	ldrb	r3, [r3, #6]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d102      	bne.n	8003494 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	799b      	ldrb	r3, [r3, #6]
 800349c:	461a      	mov	r2, r3
 800349e:	6979      	ldr	r1, [r7, #20]
 80034a0:	f003 fb84 	bl	8006bac <USB_EPStartXfer>

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	460b      	mov	r3, r1
 80034b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	f003 020f 	and.w	r2, r3, #15
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80034d0:	681b      	ldr	r3, [r3, #0]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	460b      	mov	r3, r1
 80034ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ee:	7afb      	ldrb	r3, [r7, #11]
 80034f0:	f003 020f 	and.w	r2, r3, #15
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	3310      	adds	r3, #16
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4413      	add	r3, r2
 8003502:	3304      	adds	r3, #4
 8003504:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2201      	movs	r2, #1
 800351c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	b2da      	uxtb	r2, r3
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	799b      	ldrb	r3, [r3, #6]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d102      	bne.n	8003538 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	799b      	ldrb	r3, [r3, #6]
 8003540:	461a      	mov	r2, r3
 8003542:	6979      	ldr	r1, [r7, #20]
 8003544:	f003 fb32 	bl	8006bac <USB_EPStartXfer>

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	7912      	ldrb	r2, [r2, #4]
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e04f      	b.n	8003610 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003574:	2b00      	cmp	r3, #0
 8003576:	da0f      	bge.n	8003598 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	f003 020f 	and.w	r2, r3, #15
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	3310      	adds	r3, #16
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	3304      	adds	r3, #4
 800358e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	705a      	strb	r2, [r3, #1]
 8003596:	e00d      	b.n	80035b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_PCD_EP_SetStall+0x82>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e01d      	b.n	8003610 <HAL_PCD_EP_SetStall+0xbe>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 fec2 	bl	800736c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7999      	ldrb	r1, [r3, #6]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003600:	461a      	mov	r2, r3
 8003602:	f004 f8b5 	bl	8007770 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	7912      	ldrb	r2, [r2, #4]
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e042      	b.n	80036bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800363a:	2b00      	cmp	r3, #0
 800363c:	da0f      	bge.n	800365e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	f003 020f 	and.w	r2, r3, #15
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	3310      	adds	r3, #16
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	3304      	adds	r3, #4
 8003654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	705a      	strb	r2, [r3, #1]
 800365c:	e00f      	b.n	800367e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	f003 020f 	and.w	r2, r3, #15
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	b2da      	uxtb	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_PCD_EP_ClrStall+0x86>
 800369a:	2302      	movs	r3, #2
 800369c:	e00e      	b.n	80036bc <HAL_PCD_EP_ClrStall+0xa4>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f003 fecb 	bl	8007448 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	da0c      	bge.n	80036f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 020f 	and.w	r2, r3, #15
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	3310      	adds	r3, #16
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e00c      	b.n	800370c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 020f 	and.w	r2, r3, #15
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	3304      	adds	r3, #4
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68f9      	ldr	r1, [r7, #12]
 8003712:	4618      	mov	r0, r3
 8003714:	f003 fcea 	bl	80070ec <USB_EPStopXfer>
 8003718:	4603      	mov	r3, r0
 800371a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800371c:	7afb      	ldrb	r3, [r7, #11]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b08a      	sub	sp, #40	@ 0x28
 800372a:	af02      	add	r7, sp, #8
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3310      	adds	r3, #16
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	429a      	cmp	r2, r3
 8003758:	d901      	bls.n	800375e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e06b      	b.n	8003836 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	429a      	cmp	r2, r3
 8003772:	d902      	bls.n	800377a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3303      	adds	r3, #3
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003782:	e02a      	b.n	80037da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	429a      	cmp	r2, r3
 8003798:	d902      	bls.n	80037a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3303      	adds	r3, #3
 80037a4:	089b      	lsrs	r3, r3, #2
 80037a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68d9      	ldr	r1, [r3, #12]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4603      	mov	r3, r0
 80037bc:	6978      	ldr	r0, [r7, #20]
 80037be:	f003 fd3f 	bl	8007240 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	441a      	add	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	441a      	add	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d809      	bhi.n	8003804 <PCD_WriteEmptyTxFifo+0xde>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d203      	bcs.n	8003804 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1bf      	bne.n	8003784 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	429a      	cmp	r2, r3
 800380e:	d811      	bhi.n	8003834 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	2201      	movs	r2, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	43db      	mvns	r3, r3
 800382a:	6939      	ldr	r1, [r7, #16]
 800382c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003830:	4013      	ands	r3, r2
 8003832:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	333c      	adds	r3, #60	@ 0x3c
 8003858:	3304      	adds	r3, #4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	799b      	ldrb	r3, [r3, #6]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d17b      	bne.n	800396e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	4a61      	ldr	r2, [pc, #388]	@ (8003a08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	f240 80b9 	bls.w	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80b3 	beq.w	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a2:	461a      	mov	r2, r3
 80038a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038a8:	6093      	str	r3, [r2, #8]
 80038aa:	e0a7      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c2:	461a      	mov	r2, r3
 80038c4:	2320      	movs	r3, #32
 80038c6:	6093      	str	r3, [r2, #8]
 80038c8:	e098      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 8093 	bne.w	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d90f      	bls.n	80038fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f4:	461a      	mov	r2, r3
 80038f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038fa:	6093      	str	r3, [r2, #8]
 80038fc:	e07e      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	3304      	adds	r3, #4
 8003912:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a1a      	ldr	r2, [r3, #32]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	0159      	lsls	r1, r3, #5
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	440b      	add	r3, r1
 8003920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800392a:	1ad2      	subs	r2, r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d114      	bne.n	8003960 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003948:	461a      	mov	r2, r3
 800394a:	2101      	movs	r1, #1
 800394c:	f003 ff10 	bl	8007770 <USB_EP0_OutStart>
 8003950:	e006      	b.n	8003960 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	441a      	add	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f006 fa46 	bl	8009df8 <HAL_PCD_DataOutStageCallback>
 800396c:	e046      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	4a26      	ldr	r2, [pc, #152]	@ (8003a0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d124      	bne.n	80039c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800398c:	461a      	mov	r2, r3
 800398e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003992:	6093      	str	r3, [r2, #8]
 8003994:	e032      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ac:	461a      	mov	r2, r3
 80039ae:	2320      	movs	r3, #32
 80039b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f006 fa1d 	bl	8009df8 <HAL_PCD_DataOutStageCallback>
 80039be:	e01d      	b.n	80039fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d114      	bne.n	80039f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d108      	bne.n	80039f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039e8:	461a      	mov	r2, r3
 80039ea:	2100      	movs	r1, #0
 80039ec:	f003 fec0 	bl	8007770 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f006 f9fe 	bl	8009df8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	4f54300a 	.word	0x4f54300a
 8003a0c:	4f54310a 	.word	0x4f54310a

08003a10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	333c      	adds	r3, #60	@ 0x3c
 8003a28:	3304      	adds	r3, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a15      	ldr	r2, [pc, #84]	@ (8003a98 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d90e      	bls.n	8003a64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f006 f9b5 	bl	8009dd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a98 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d90c      	bls.n	8003a8c <PCD_EP_OutSetupPacket_int+0x7c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	799b      	ldrb	r3, [r3, #6]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d108      	bne.n	8003a8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a84:	461a      	mov	r2, r3
 8003a86:	2101      	movs	r1, #1
 8003a88:	f003 fe72 	bl	8007770 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	4f54300a 	.word	0x4f54300a

08003a9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d107      	bne.n	8003aca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003aba:	883b      	ldrh	r3, [r7, #0]
 8003abc:	0419      	lsls	r1, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ac8:	e028      	b.n	8003b1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	e00d      	b.n	8003afa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	3340      	adds	r3, #64	@ 0x40
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	4413      	add	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	3301      	adds	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d3ec      	bcc.n	8003ade <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b04:	883b      	ldrh	r3, [r7, #0]
 8003b06:	0418      	lsls	r0, r3, #16
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	4302      	orrs	r2, r0
 8003b14:	3340      	adds	r3, #64	@ 0x40
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b7a:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	10000003 	.word	0x10000003

08003b94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003bb4:	4b29      	ldr	r3, [pc, #164]	@ (8003c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	2b06      	cmp	r3, #6
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003bc0:	4b26      	ldr	r3, [pc, #152]	@ (8003c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d001      	beq.n	8003bd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e040      	b.n	8003c54 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e03e      	b.n	8003c54 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bd6:	4b21      	ldr	r3, [pc, #132]	@ (8003c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003bde:	491f      	ldr	r1, [pc, #124]	@ (8003c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003be6:	f7fd f8cf 	bl	8000d88 <HAL_GetTick>
 8003bea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bec:	e009      	b.n	8003c02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bee:	f7fd f8cb 	bl	8000d88 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bfc:	d901      	bls.n	8003c02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e028      	b.n	8003c54 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c02:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c0e:	d1ee      	bne.n	8003bee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b1e      	cmp	r3, #30
 8003c14:	d008      	beq.n	8003c28 <HAL_PWREx_ConfigSupply+0x7c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c1a:	d005      	beq.n	8003c28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b1d      	cmp	r3, #29
 8003c20:	d002      	beq.n	8003c28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b2d      	cmp	r3, #45	@ 0x2d
 8003c26:	d114      	bne.n	8003c52 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003c28:	f7fd f8ae 	bl	8000d88 <HAL_GetTick>
 8003c2c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c2e:	e009      	b.n	8003c44 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c30:	f7fd f8aa 	bl	8000d88 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c3e:	d901      	bls.n	8003c44 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e007      	b.n	8003c54 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c50:	d1ee      	bne.n	8003c30 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	58024800 	.word	0x58024800

08003c60 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003c64:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a04      	ldr	r2, [pc, #16]	@ (8003c7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c6e:	60d3      	str	r3, [r2, #12]
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	58024800 	.word	0x58024800

08003c80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	@ 0x30
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f000 bc1f 	b.w	80044d2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80b3 	beq.w	8003e08 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca2:	4b95      	ldr	r3, [pc, #596]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cac:	4b92      	ldr	r3, [pc, #584]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d007      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x48>
 8003cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cba:	2b18      	cmp	r3, #24
 8003cbc:	d112      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x64>
 8003cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	4b8b      	ldr	r3, [pc, #556]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8098 	beq.w	8003e06 <HAL_RCC_OscConfig+0x186>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8093 	bne.w	8003e06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e3f6      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cec:	d106      	bne.n	8003cfc <HAL_RCC_OscConfig+0x7c>
 8003cee:	4b82      	ldr	r3, [pc, #520]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a81      	ldr	r2, [pc, #516]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e058      	b.n	8003dae <HAL_RCC_OscConfig+0x12e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d112      	bne.n	8003d2a <HAL_RCC_OscConfig+0xaa>
 8003d04:	4b7c      	ldr	r3, [pc, #496]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a7b      	ldr	r2, [pc, #492]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	4b79      	ldr	r3, [pc, #484]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a78      	ldr	r2, [pc, #480]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d16:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	4b76      	ldr	r3, [pc, #472]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a75      	ldr	r2, [pc, #468]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	e041      	b.n	8003dae <HAL_RCC_OscConfig+0x12e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d32:	d112      	bne.n	8003d5a <HAL_RCC_OscConfig+0xda>
 8003d34:	4b70      	ldr	r3, [pc, #448]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a6f      	ldr	r2, [pc, #444]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a6c      	ldr	r2, [pc, #432]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d46:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a69      	ldr	r2, [pc, #420]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	e029      	b.n	8003dae <HAL_RCC_OscConfig+0x12e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003d62:	d112      	bne.n	8003d8a <HAL_RCC_OscConfig+0x10a>
 8003d64:	4b64      	ldr	r3, [pc, #400]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a63      	ldr	r2, [pc, #396]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	4b61      	ldr	r3, [pc, #388]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a60      	ldr	r2, [pc, #384]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	e011      	b.n	8003dae <HAL_RCC_OscConfig+0x12e>
 8003d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b58      	ldr	r3, [pc, #352]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a57      	ldr	r2, [pc, #348]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003d9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b55      	ldr	r3, [pc, #340]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a54      	ldr	r2, [pc, #336]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003da8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003dac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d013      	beq.n	8003dde <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fc ffe7 	bl	8000d88 <HAL_GetTick>
 8003dba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dbe:	f7fc ffe3 	bl	8000d88 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b64      	cmp	r3, #100	@ 0x64
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e380      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dd0:	4b49      	ldr	r3, [pc, #292]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x13e>
 8003ddc:	e014      	b.n	8003e08 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fc ffd3 	bl	8000d88 <HAL_GetTick>
 8003de2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de6:	f7fc ffcf 	bl	8000d88 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b64      	cmp	r3, #100	@ 0x64
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e36c      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003df8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x166>
 8003e04:	e000      	b.n	8003e08 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 808c 	beq.w	8003f2e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e16:	4b38      	ldr	r3, [pc, #224]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e1e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e20:	4b35      	ldr	r3, [pc, #212]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <HAL_RCC_OscConfig+0x1bc>
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	2b18      	cmp	r3, #24
 8003e30:	d137      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x222>
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d132      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_OscConfig+0x1d4>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e33e      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e54:	4b28      	ldr	r3, [pc, #160]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 0219 	bic.w	r2, r3, #25
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4925      	ldr	r1, [pc, #148]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fc ff8f 	bl	8000d88 <HAL_GetTick>
 8003e6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fc ff8b 	bl	8000d88 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e328      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e80:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	4917      	ldr	r1, [pc, #92]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea0:	e045      	b.n	8003f2e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d028      	beq.n	8003efc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eaa:	4b13      	ldr	r3, [pc, #76]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 0219 	bic.w	r2, r3, #25
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4910      	ldr	r1, [pc, #64]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fc ff64 	bl	8000d88 <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec4:	f7fc ff60 	bl	8000d88 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e2fd      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed6:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee2:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	4901      	ldr	r1, [pc, #4]	@ (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
 8003ef6:	e01a      	b.n	8003f2e <HAL_RCC_OscConfig+0x2ae>
 8003ef8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003efc:	4b97      	ldr	r3, [pc, #604]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a96      	ldr	r2, [pc, #600]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fc ff3e 	bl	8000d88 <HAL_GetTick>
 8003f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fc ff3a 	bl	8000d88 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e2d7      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f22:	4b8e      	ldr	r3, [pc, #568]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d06a      	beq.n	8004010 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3a:	4b88      	ldr	r3, [pc, #544]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f44:	4b85      	ldr	r3, [pc, #532]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d007      	beq.n	8003f60 <HAL_RCC_OscConfig+0x2e0>
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b18      	cmp	r3, #24
 8003f54:	d11b      	bne.n	8003f8e <HAL_RCC_OscConfig+0x30e>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d116      	bne.n	8003f8e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f60:	4b7e      	ldr	r3, [pc, #504]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_OscConfig+0x2f8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	2b80      	cmp	r3, #128	@ 0x80
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e2ac      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f78:	4b78      	ldr	r3, [pc, #480]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	4975      	ldr	r1, [pc, #468]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f8c:	e040      	b.n	8004010 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d023      	beq.n	8003fde <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f96:	4b71      	ldr	r3, [pc, #452]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a70      	ldr	r2, [pc, #448]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fc fef1 	bl	8000d88 <HAL_GetTick>
 8003fa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003faa:	f7fc feed 	bl	8000d88 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e28a      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fbc:	4b67      	ldr	r3, [pc, #412]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fc8:	4b64      	ldr	r3, [pc, #400]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	061b      	lsls	r3, r3, #24
 8003fd6:	4961      	ldr	r1, [pc, #388]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60cb      	str	r3, [r1, #12]
 8003fdc:	e018      	b.n	8004010 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003fde:	4b5f      	ldr	r3, [pc, #380]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a5e      	ldr	r2, [pc, #376]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8003fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fc fecd 	bl	8000d88 <HAL_GetTick>
 8003fee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ff2:	f7fc fec9 	bl	8000d88 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e266      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004004:	4b55      	ldr	r3, [pc, #340]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f0      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d036      	beq.n	800408a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d019      	beq.n	8004058 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004024:	4b4d      	ldr	r3, [pc, #308]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8004026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004028:	4a4c      	ldr	r2, [pc, #304]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004030:	f7fc feaa 	bl	8000d88 <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004038:	f7fc fea6 	bl	8000d88 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e243      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800404a:	4b44      	ldr	r3, [pc, #272]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 800404c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x3b8>
 8004056:	e018      	b.n	800408a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004058:	4b40      	ldr	r3, [pc, #256]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 800405a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405c:	4a3f      	ldr	r2, [pc, #252]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fc fe90 	bl	8000d88 <HAL_GetTick>
 8004068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406c:	f7fc fe8c 	bl	8000d88 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e229      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800407e:	4b37      	ldr	r3, [pc, #220]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8004080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d036      	beq.n	8004104 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d019      	beq.n	80040d2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800409e:	4b2f      	ldr	r3, [pc, #188]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2e      	ldr	r2, [pc, #184]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 80040a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040aa:	f7fc fe6d 	bl	8000d88 <HAL_GetTick>
 80040ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040b2:	f7fc fe69 	bl	8000d88 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e206      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040c4:	4b25      	ldr	r3, [pc, #148]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x432>
 80040d0:	e018      	b.n	8004104 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040d2:	4b22      	ldr	r3, [pc, #136]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a21      	ldr	r2, [pc, #132]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 80040d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040de:	f7fc fe53 	bl	8000d88 <HAL_GetTick>
 80040e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040e6:	f7fc fe4f 	bl	8000d88 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e1ec      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040f8:	4b18      	ldr	r3, [pc, #96]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f0      	bne.n	80040e6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80af 	beq.w	8004270 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004112:	4b13      	ldr	r3, [pc, #76]	@ (8004160 <HAL_RCC_OscConfig+0x4e0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a12      	ldr	r2, [pc, #72]	@ (8004160 <HAL_RCC_OscConfig+0x4e0>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800411c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800411e:	f7fc fe33 	bl	8000d88 <HAL_GetTick>
 8004122:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004126:	f7fc fe2f 	bl	8000d88 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b64      	cmp	r3, #100	@ 0x64
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e1cc      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004138:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <HAL_RCC_OscConfig+0x4e0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d10b      	bne.n	8004164 <HAL_RCC_OscConfig+0x4e4>
 800414c:	4b03      	ldr	r3, [pc, #12]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004150:	4a02      	ldr	r2, [pc, #8]	@ (800415c <HAL_RCC_OscConfig+0x4dc>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6713      	str	r3, [r2, #112]	@ 0x70
 8004158:	e05b      	b.n	8004212 <HAL_RCC_OscConfig+0x592>
 800415a:	bf00      	nop
 800415c:	58024400 	.word	0x58024400
 8004160:	58024800 	.word	0x58024800
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d112      	bne.n	8004192 <HAL_RCC_OscConfig+0x512>
 800416c:	4b9d      	ldr	r3, [pc, #628]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004170:	4a9c      	ldr	r2, [pc, #624]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	6713      	str	r3, [r2, #112]	@ 0x70
 8004178:	4b9a      	ldr	r3, [pc, #616]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	4a99      	ldr	r2, [pc, #612]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800417e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004182:	6713      	str	r3, [r2, #112]	@ 0x70
 8004184:	4b97      	ldr	r3, [pc, #604]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004188:	4a96      	ldr	r2, [pc, #600]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800418a:	f023 0304 	bic.w	r3, r3, #4
 800418e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004190:	e03f      	b.n	8004212 <HAL_RCC_OscConfig+0x592>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b05      	cmp	r3, #5
 8004198:	d112      	bne.n	80041c0 <HAL_RCC_OscConfig+0x540>
 800419a:	4b92      	ldr	r3, [pc, #584]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419e:	4a91      	ldr	r2, [pc, #580]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041a0:	f043 0304 	orr.w	r3, r3, #4
 80041a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a6:	4b8f      	ldr	r3, [pc, #572]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041aa:	4a8e      	ldr	r2, [pc, #568]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b2:	4b8c      	ldr	r3, [pc, #560]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b6:	4a8b      	ldr	r2, [pc, #556]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80041be:	e028      	b.n	8004212 <HAL_RCC_OscConfig+0x592>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b85      	cmp	r3, #133	@ 0x85
 80041c6:	d112      	bne.n	80041ee <HAL_RCC_OscConfig+0x56e>
 80041c8:	4b86      	ldr	r3, [pc, #536]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041cc:	4a85      	ldr	r2, [pc, #532]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041ce:	f043 0304 	orr.w	r3, r3, #4
 80041d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d4:	4b83      	ldr	r3, [pc, #524]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d8:	4a82      	ldr	r2, [pc, #520]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041de:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e0:	4b80      	ldr	r3, [pc, #512]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e4:	4a7f      	ldr	r2, [pc, #508]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ec:	e011      	b.n	8004212 <HAL_RCC_OscConfig+0x592>
 80041ee:	4b7d      	ldr	r3, [pc, #500]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	4a7c      	ldr	r2, [pc, #496]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fa:	4b7a      	ldr	r3, [pc, #488]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fe:	4a79      	ldr	r2, [pc, #484]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004200:	f023 0304 	bic.w	r3, r3, #4
 8004204:	6713      	str	r3, [r2, #112]	@ 0x70
 8004206:	4b77      	ldr	r3, [pc, #476]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420a:	4a76      	ldr	r2, [pc, #472]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800420c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004210:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d015      	beq.n	8004246 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421a:	f7fc fdb5 	bl	8000d88 <HAL_GetTick>
 800421e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004220:	e00a      	b.n	8004238 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004222:	f7fc fdb1 	bl	8000d88 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e14c      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004238:	4b6a      	ldr	r3, [pc, #424]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ee      	beq.n	8004222 <HAL_RCC_OscConfig+0x5a2>
 8004244:	e014      	b.n	8004270 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fc fd9f 	bl	8000d88 <HAL_GetTick>
 800424a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fc fd9b 	bl	8000d88 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e136      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004264:	4b5f      	ldr	r3, [pc, #380]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ee      	bne.n	800424e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 812b 	beq.w	80044d0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800427a:	4b5a      	ldr	r3, [pc, #360]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004282:	2b18      	cmp	r3, #24
 8004284:	f000 80bb 	beq.w	80043fe <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	2b02      	cmp	r3, #2
 800428e:	f040 8095 	bne.w	80043bc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004292:	4b54      	ldr	r3, [pc, #336]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a53      	ldr	r2, [pc, #332]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004298:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800429c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fc fd73 	bl	8000d88 <HAL_GetTick>
 80042a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fc fd6f 	bl	8000d88 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e10c      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042b8:	4b4a      	ldr	r3, [pc, #296]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c4:	4b47      	ldr	r3, [pc, #284]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80042c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042c8:	4b47      	ldr	r3, [pc, #284]	@ (80043e8 <HAL_RCC_OscConfig+0x768>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042d4:	0112      	lsls	r2, r2, #4
 80042d6:	430a      	orrs	r2, r1
 80042d8:	4942      	ldr	r1, [pc, #264]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e2:	3b01      	subs	r3, #1
 80042e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ec:	3b01      	subs	r3, #1
 80042ee:	025b      	lsls	r3, r3, #9
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	3b01      	subs	r3, #1
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004306:	3b01      	subs	r3, #1
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800430e:	4935      	ldr	r1, [pc, #212]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004310:	4313      	orrs	r3, r2
 8004312:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004314:	4b33      	ldr	r3, [pc, #204]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004318:	4a32      	ldr	r2, [pc, #200]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004320:	4b30      	ldr	r3, [pc, #192]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004324:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <HAL_RCC_OscConfig+0x76c>)
 8004326:	4013      	ands	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800432c:	00d2      	lsls	r2, r2, #3
 800432e:	492d      	ldr	r1, [pc, #180]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004330:	4313      	orrs	r3, r2
 8004332:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004334:	4b2b      	ldr	r3, [pc, #172]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004338:	f023 020c 	bic.w	r2, r3, #12
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	4928      	ldr	r1, [pc, #160]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004342:	4313      	orrs	r3, r2
 8004344:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004346:	4b27      	ldr	r3, [pc, #156]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	f023 0202 	bic.w	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	4924      	ldr	r1, [pc, #144]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004354:	4313      	orrs	r3, r2
 8004356:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004358:	4b22      	ldr	r3, [pc, #136]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435c:	4a21      	ldr	r2, [pc, #132]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004364:	4b1f      	ldr	r3, [pc, #124]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	4a1e      	ldr	r2, [pc, #120]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800436a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800436e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004370:	4b1c      	ldr	r3, [pc, #112]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004374:	4a1b      	ldr	r2, [pc, #108]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004376:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800437a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800437c:	4b19      	ldr	r3, [pc, #100]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	4a18      	ldr	r2, [pc, #96]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004388:	4b16      	ldr	r3, [pc, #88]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a15      	ldr	r2, [pc, #84]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 800438e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fc fcf8 	bl	8000d88 <HAL_GetTick>
 8004398:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439c:	f7fc fcf4 	bl	8000d88 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e091      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x71c>
 80043ba:	e089      	b.n	80044d0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043bc:	4b09      	ldr	r3, [pc, #36]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a08      	ldr	r2, [pc, #32]	@ (80043e4 <HAL_RCC_OscConfig+0x764>)
 80043c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fc fcde 	bl	8000d88 <HAL_GetTick>
 80043cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043ce:	e00f      	b.n	80043f0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fc fcda 	bl	8000d88 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d908      	bls.n	80043f0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e077      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
 80043e2:	bf00      	nop
 80043e4:	58024400 	.word	0x58024400
 80043e8:	fffffc0c 	.word	0xfffffc0c
 80043ec:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043f0:	4b3a      	ldr	r3, [pc, #232]	@ (80044dc <HAL_RCC_OscConfig+0x85c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e9      	bne.n	80043d0 <HAL_RCC_OscConfig+0x750>
 80043fc:	e068      	b.n	80044d0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80043fe:	4b37      	ldr	r3, [pc, #220]	@ (80044dc <HAL_RCC_OscConfig+0x85c>)
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004404:	4b35      	ldr	r3, [pc, #212]	@ (80044dc <HAL_RCC_OscConfig+0x85c>)
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440e:	2b01      	cmp	r3, #1
 8004410:	d031      	beq.n	8004476 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f003 0203 	and.w	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d12a      	bne.n	8004476 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d122      	bne.n	8004476 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d11a      	bne.n	8004476 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	0a5b      	lsrs	r3, r3, #9
 8004444:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d111      	bne.n	8004476 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004460:	429a      	cmp	r2, r3
 8004462:	d108      	bne.n	8004476 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	0e1b      	lsrs	r3, r3, #24
 8004468:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004470:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d001      	beq.n	800447a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e02b      	b.n	80044d2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800447a:	4b18      	ldr	r3, [pc, #96]	@ (80044dc <HAL_RCC_OscConfig+0x85c>)
 800447c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447e:	08db      	lsrs	r3, r3, #3
 8004480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004484:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	429a      	cmp	r2, r3
 800448e:	d01f      	beq.n	80044d0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004490:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <HAL_RCC_OscConfig+0x85c>)
 8004492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004494:	4a11      	ldr	r2, [pc, #68]	@ (80044dc <HAL_RCC_OscConfig+0x85c>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800449c:	f7fc fc74 	bl	8000d88 <HAL_GetTick>
 80044a0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80044a2:	bf00      	nop
 80044a4:	f7fc fc70 	bl	8000d88 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d0f9      	beq.n	80044a4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044b0:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <HAL_RCC_OscConfig+0x85c>)
 80044b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044b4:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <HAL_RCC_OscConfig+0x860>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044bc:	00d2      	lsls	r2, r2, #3
 80044be:	4907      	ldr	r1, [pc, #28]	@ (80044dc <HAL_RCC_OscConfig+0x85c>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80044c4:	4b05      	ldr	r3, [pc, #20]	@ (80044dc <HAL_RCC_OscConfig+0x85c>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	4a04      	ldr	r2, [pc, #16]	@ (80044dc <HAL_RCC_OscConfig+0x85c>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3730      	adds	r7, #48	@ 0x30
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	58024400 	.word	0x58024400
 80044e0:	ffff0007 	.word	0xffff0007

080044e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e19c      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f8:	4b8a      	ldr	r3, [pc, #552]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d910      	bls.n	8004528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b87      	ldr	r3, [pc, #540]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 020f 	bic.w	r2, r3, #15
 800450e:	4985      	ldr	r1, [pc, #532]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b83      	ldr	r3, [pc, #524]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e184      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	4b7b      	ldr	r3, [pc, #492]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004540:	429a      	cmp	r2, r3
 8004542:	d908      	bls.n	8004556 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004544:	4b78      	ldr	r3, [pc, #480]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	4975      	ldr	r1, [pc, #468]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004552:	4313      	orrs	r3, r2
 8004554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d010      	beq.n	8004584 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	4b70      	ldr	r3, [pc, #448]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800456e:	429a      	cmp	r2, r3
 8004570:	d908      	bls.n	8004584 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004572:	4b6d      	ldr	r3, [pc, #436]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	496a      	ldr	r1, [pc, #424]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004580:	4313      	orrs	r3, r2
 8004582:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	d010      	beq.n	80045b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	4b64      	ldr	r3, [pc, #400]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800459c:	429a      	cmp	r2, r3
 800459e:	d908      	bls.n	80045b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045a0:	4b61      	ldr	r3, [pc, #388]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	495e      	ldr	r1, [pc, #376]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	4b59      	ldr	r3, [pc, #356]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d908      	bls.n	80045e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80045ce:	4b56      	ldr	r3, [pc, #344]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	4953      	ldr	r1, [pc, #332]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d908      	bls.n	800460e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f023 020f 	bic.w	r2, r3, #15
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4947      	ldr	r1, [pc, #284]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 800460a:	4313      	orrs	r3, r2
 800460c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d055      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800461a:	4b43      	ldr	r3, [pc, #268]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	4940      	ldr	r1, [pc, #256]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004628:	4313      	orrs	r3, r2
 800462a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d107      	bne.n	8004644 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004634:	4b3c      	ldr	r3, [pc, #240]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d121      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0f6      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d107      	bne.n	800465c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800464c:	4b36      	ldr	r3, [pc, #216]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d115      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0ea      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d107      	bne.n	8004674 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004664:	4b30      	ldr	r3, [pc, #192]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d109      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0de      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004674:	4b2c      	ldr	r3, [pc, #176]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0d6      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004684:	4b28      	ldr	r3, [pc, #160]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f023 0207 	bic.w	r2, r3, #7
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4925      	ldr	r1, [pc, #148]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 8004692:	4313      	orrs	r3, r2
 8004694:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fc fb77 	bl	8000d88 <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469e:	f7fc fb73 	bl	8000d88 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e0be      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d1eb      	bne.n	800469e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d010      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	4b14      	ldr	r3, [pc, #80]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	429a      	cmp	r2, r3
 80046e0:	d208      	bcs.n	80046f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e2:	4b11      	ldr	r3, [pc, #68]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f023 020f 	bic.w	r2, r3, #15
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	490e      	ldr	r1, [pc, #56]	@ (8004728 <HAL_RCC_ClockConfig+0x244>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d214      	bcs.n	800472c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b08      	ldr	r3, [pc, #32]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 020f 	bic.w	r2, r3, #15
 800470a:	4906      	ldr	r1, [pc, #24]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	4b04      	ldr	r3, [pc, #16]	@ (8004724 <HAL_RCC_ClockConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d005      	beq.n	800472c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e086      	b.n	8004832 <HAL_RCC_ClockConfig+0x34e>
 8004724:	52002000 	.word	0x52002000
 8004728:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d010      	beq.n	800475a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	4b3f      	ldr	r3, [pc, #252]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004744:	429a      	cmp	r2, r3
 8004746:	d208      	bcs.n	800475a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004748:	4b3c      	ldr	r3, [pc, #240]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	4939      	ldr	r1, [pc, #228]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 8004756:	4313      	orrs	r3, r2
 8004758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	4b34      	ldr	r3, [pc, #208]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004772:	429a      	cmp	r2, r3
 8004774:	d208      	bcs.n	8004788 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004776:	4b31      	ldr	r3, [pc, #196]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	492e      	ldr	r1, [pc, #184]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 8004784:	4313      	orrs	r3, r2
 8004786:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d010      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	4b28      	ldr	r3, [pc, #160]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d208      	bcs.n	80047b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047a4:	4b25      	ldr	r3, [pc, #148]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	4922      	ldr	r1, [pc, #136]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	4b1d      	ldr	r3, [pc, #116]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d208      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047d2:	4b1a      	ldr	r3, [pc, #104]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4917      	ldr	r1, [pc, #92]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80047e4:	f000 f834 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b14      	ldr	r3, [pc, #80]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	4912      	ldr	r1, [pc, #72]	@ (8004840 <HAL_RCC_ClockConfig+0x35c>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004802:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <HAL_RCC_ClockConfig+0x358>)
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	4a0d      	ldr	r2, [pc, #52]	@ (8004840 <HAL_RCC_ClockConfig+0x35c>)
 800480c:	5cd3      	ldrb	r3, [r2, r3]
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
 8004818:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <HAL_RCC_ClockConfig+0x360>)
 800481a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800481c:	4a0a      	ldr	r2, [pc, #40]	@ (8004848 <HAL_RCC_ClockConfig+0x364>)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004822:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <HAL_RCC_ClockConfig+0x368>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f7fc fa64 	bl	8000cf4 <HAL_InitTick>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	58024400 	.word	0x58024400
 8004840:	0800ae64 	.word	0x0800ae64
 8004844:	24000004 	.word	0x24000004
 8004848:	24000000 	.word	0x24000000
 800484c:	24000008 	.word	0x24000008

08004850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	@ 0x24
 8004854:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004856:	4bb3      	ldr	r3, [pc, #716]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800485e:	2b18      	cmp	r3, #24
 8004860:	f200 8155 	bhi.w	8004b0e <HAL_RCC_GetSysClockFreq+0x2be>
 8004864:	a201      	add	r2, pc, #4	@ (adr r2, 800486c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	080048d1 	.word	0x080048d1
 8004870:	08004b0f 	.word	0x08004b0f
 8004874:	08004b0f 	.word	0x08004b0f
 8004878:	08004b0f 	.word	0x08004b0f
 800487c:	08004b0f 	.word	0x08004b0f
 8004880:	08004b0f 	.word	0x08004b0f
 8004884:	08004b0f 	.word	0x08004b0f
 8004888:	08004b0f 	.word	0x08004b0f
 800488c:	080048f7 	.word	0x080048f7
 8004890:	08004b0f 	.word	0x08004b0f
 8004894:	08004b0f 	.word	0x08004b0f
 8004898:	08004b0f 	.word	0x08004b0f
 800489c:	08004b0f 	.word	0x08004b0f
 80048a0:	08004b0f 	.word	0x08004b0f
 80048a4:	08004b0f 	.word	0x08004b0f
 80048a8:	08004b0f 	.word	0x08004b0f
 80048ac:	080048fd 	.word	0x080048fd
 80048b0:	08004b0f 	.word	0x08004b0f
 80048b4:	08004b0f 	.word	0x08004b0f
 80048b8:	08004b0f 	.word	0x08004b0f
 80048bc:	08004b0f 	.word	0x08004b0f
 80048c0:	08004b0f 	.word	0x08004b0f
 80048c4:	08004b0f 	.word	0x08004b0f
 80048c8:	08004b0f 	.word	0x08004b0f
 80048cc:	08004903 	.word	0x08004903
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048d0:	4b94      	ldr	r3, [pc, #592]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048dc:	4b91      	ldr	r3, [pc, #580]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	08db      	lsrs	r3, r3, #3
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	4a90      	ldr	r2, [pc, #576]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80048ee:	e111      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80048f0:	4b8d      	ldr	r3, [pc, #564]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048f2:	61bb      	str	r3, [r7, #24]
      break;
 80048f4:	e10e      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80048f6:	4b8d      	ldr	r3, [pc, #564]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048f8:	61bb      	str	r3, [r7, #24]
      break;
 80048fa:	e10b      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80048fc:	4b8c      	ldr	r3, [pc, #560]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80048fe:	61bb      	str	r3, [r7, #24]
      break;
 8004900:	e108      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004902:	4b88      	ldr	r3, [pc, #544]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800490c:	4b85      	ldr	r3, [pc, #532]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004916:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004918:	4b82      	ldr	r3, [pc, #520]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004922:	4b80      	ldr	r3, [pc, #512]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004926:	08db      	lsrs	r3, r3, #3
 8004928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80e1 	beq.w	8004b08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b02      	cmp	r3, #2
 800494a:	f000 8083 	beq.w	8004a54 <HAL_RCC_GetSysClockFreq+0x204>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b02      	cmp	r3, #2
 8004952:	f200 80a1 	bhi.w	8004a98 <HAL_RCC_GetSysClockFreq+0x248>
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x114>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d056      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004962:	e099      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004964:	4b6f      	ldr	r3, [pc, #444]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02d      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004970:	4b6c      	ldr	r3, [pc, #432]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	08db      	lsrs	r3, r3, #3
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	4a6b      	ldr	r2, [pc, #428]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	ee07 3a90 	vmov	s15, r3
 8004988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499a:	4b62      	ldr	r3, [pc, #392]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80049ca:	e087      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004b38 <HAL_RCC_GetSysClockFreq+0x2e8>
 80049da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049de:	4b51      	ldr	r3, [pc, #324]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80049f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a0e:	e065      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a22:	4b40      	ldr	r3, [pc, #256]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a36:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a52:	e043      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004b40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b2f      	ldr	r3, [pc, #188]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a7a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a96:	e021      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004abe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ada:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004adc:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae0:	0a5b      	lsrs	r3, r3, #9
 8004ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b00:	ee17 3a90 	vmov	r3, s15
 8004b04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004b06:	e005      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
      break;
 8004b0c:	e002      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004b0e:	4b07      	ldr	r3, [pc, #28]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b10:	61bb      	str	r3, [r7, #24]
      break;
 8004b12:	bf00      	nop
  }

  return sysclockfreq;
 8004b14:	69bb      	ldr	r3, [r7, #24]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3724      	adds	r7, #36	@ 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
 8004b28:	03d09000 	.word	0x03d09000
 8004b2c:	003d0900 	.word	0x003d0900
 8004b30:	007a1200 	.word	0x007a1200
 8004b34:	46000000 	.word	0x46000000
 8004b38:	4c742400 	.word	0x4c742400
 8004b3c:	4a742400 	.word	0x4a742400
 8004b40:	4af42400 	.word	0x4af42400

08004b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004b4a:	f7ff fe81 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	490f      	ldr	r1, [pc, #60]	@ (8004b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b5c:	5ccb      	ldrb	r3, [r1, r3]
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	fa22 f303 	lsr.w	r3, r2, r3
 8004b66:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004b68:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	4a09      	ldr	r2, [pc, #36]	@ (8004b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b72:	5cd3      	ldrb	r3, [r2, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7e:	4a07      	ldr	r2, [pc, #28]	@ (8004b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8004b80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b82:	4a07      	ldr	r2, [pc, #28]	@ (8004ba0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b88:	4b04      	ldr	r3, [pc, #16]	@ (8004b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	58024400 	.word	0x58024400
 8004b98:	0800ae64 	.word	0x0800ae64
 8004b9c:	24000004 	.word	0x24000004
 8004ba0:	24000000 	.word	0x24000000

08004ba4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba8:	b0c8      	sub	sp, #288	@ 0x120
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004bc8:	2500      	movs	r5, #0
 8004bca:	ea54 0305 	orrs.w	r3, r4, r5
 8004bce:	d049      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bda:	d02f      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004bdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004be0:	d828      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004be2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004be6:	d01a      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004be8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bec:	d822      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004bf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bf6:	d007      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bf8:	e01c      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bfa:	4ba7      	ldr	r3, [pc, #668]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	4aa6      	ldr	r2, [pc, #664]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c06:	e01a      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f985 	bl	8005f20 <RCCEx_PLL2_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c1c:	e00f      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c22:	3328      	adds	r3, #40	@ 0x28
 8004c24:	2102      	movs	r1, #2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 fa2c 	bl	8006084 <RCCEx_PLL3_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c32:	e004      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c3a:	e000      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10a      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c46:	4b94      	ldr	r3, [pc, #592]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c54:	4a90      	ldr	r2, [pc, #576]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c5a:	e003      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004c70:	f04f 0900 	mov.w	r9, #0
 8004c74:	ea58 0309 	orrs.w	r3, r8, r9
 8004c78:	d047      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d82a      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004c84:	a201      	add	r2, pc, #4	@ (adr r2, 8004c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004ca1 	.word	0x08004ca1
 8004c90:	08004caf 	.word	0x08004caf
 8004c94:	08004cc5 	.word	0x08004cc5
 8004c98:	08004ce3 	.word	0x08004ce3
 8004c9c:	08004ce3 	.word	0x08004ce3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca0:	4b7d      	ldr	r3, [pc, #500]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	4a7c      	ldr	r2, [pc, #496]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cac:	e01a      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 f932 	bl	8005f20 <RCCEx_PLL2_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cc2:	e00f      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cc8:	3328      	adds	r3, #40	@ 0x28
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 f9d9 	bl	8006084 <RCCEx_PLL3_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cd8:	e004      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cec:	4b6a      	ldr	r3, [pc, #424]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf0:	f023 0107 	bic.w	r1, r3, #7
 8004cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfa:	4a67      	ldr	r2, [pc, #412]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d00:	e003      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004d16:	f04f 0b00 	mov.w	fp, #0
 8004d1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d1e:	d054      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d26:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d2a:	d036      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004d2c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d30:	d82f      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d36:	d032      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004d38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d3c:	d829      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d40:	d02f      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004d42:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d44:	d825      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d46:	2b80      	cmp	r3, #128	@ 0x80
 8004d48:	d018      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004d4a:	2b80      	cmp	r3, #128	@ 0x80
 8004d4c:	d821      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004d52:	2b40      	cmp	r3, #64	@ 0x40
 8004d54:	d007      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004d56:	e01c      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d58:	4b4f      	ldr	r3, [pc, #316]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004d64:	e01e      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f001 f8d6 	bl	8005f20 <RCCEx_PLL2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004d7a:	e013      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d80:	3328      	adds	r3, #40	@ 0x28
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 f97d 	bl	8006084 <RCCEx_PLL3_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004d90:	e008      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d98:	e004      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004d9a:	bf00      	nop
 8004d9c:	e002      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004d9e:	bf00      	nop
 8004da0:	e000      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004dac:	4b3a      	ldr	r3, [pc, #232]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dba:	4a37      	ldr	r2, [pc, #220]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dc0:	e003      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dc6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004dd6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004de0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004de4:	460b      	mov	r3, r1
 8004de6:	4313      	orrs	r3, r2
 8004de8:	d05c      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004df4:	d03b      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004df6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004dfa:	d834      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e00:	d037      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e06:	d82e      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004e08:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e0c:	d033      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004e0e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e12:	d828      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e18:	d01a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e1e:	d822      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e28:	d007      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004e2a:	e01c      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e30:	4a19      	ldr	r2, [pc, #100]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004e38:	e01e      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e3e:	3308      	adds	r3, #8
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 f86c 	bl	8005f20 <RCCEx_PLL2_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004e4e:	e013      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e54:	3328      	adds	r3, #40	@ 0x28
 8004e56:	2100      	movs	r1, #0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 f913 	bl	8006084 <RCCEx_PLL3_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004e64:	e008      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e6c:	e004      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004e6e:	bf00      	nop
 8004e70:	e002      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004e72:	bf00      	nop
 8004e74:	e000      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e84:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8e:	4a02      	ldr	r2, [pc, #8]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e94:	e006      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004e96:	bf00      	nop
 8004e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ea0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004eba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	d03a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eca:	2b30      	cmp	r3, #48	@ 0x30
 8004ecc:	d01f      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004ece:	2b30      	cmp	r3, #48	@ 0x30
 8004ed0:	d819      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d815      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d019      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d111      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee2:	4bae      	ldr	r3, [pc, #696]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	4aad      	ldr	r2, [pc, #692]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004eee:	e011      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 f811 	bl	8005f20 <RCCEx_PLL2_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004f04:	e006      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f0c:	e002      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f1c:	4b9f      	ldr	r3, [pc, #636]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	4a9c      	ldr	r2, [pc, #624]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f30:	e003      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004f46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4313      	orrs	r3, r2
 8004f58:	d051      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f64:	d035      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004f66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f6a:	d82e      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004f6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f70:	d031      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004f72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f76:	d828      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f7c:	d01a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f82:	d822      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f8c:	d007      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004f8e:	e01c      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f90:	4b82      	ldr	r3, [pc, #520]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	4a81      	ldr	r2, [pc, #516]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f9c:	e01c      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 ffba 	bl	8005f20 <RCCEx_PLL2_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004fb2:	e011      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fb8:	3328      	adds	r3, #40	@ 0x28
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 f861 	bl	8006084 <RCCEx_PLL3_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004fc8:	e006      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004fd0:	e002      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004fd2:	bf00      	nop
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004fe0:	4b6e      	ldr	r3, [pc, #440]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fee:	4a6b      	ldr	r2, [pc, #428]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ff4:	e003      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ffa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800500a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800500e:	2300      	movs	r3, #0
 8005010:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005014:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005018:	460b      	mov	r3, r1
 800501a:	4313      	orrs	r3, r2
 800501c:	d053      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800501e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005028:	d033      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800502a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800502e:	d82c      	bhi.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005030:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005034:	d02f      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005036:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800503a:	d826      	bhi.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800503c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005040:	d02b      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005042:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005046:	d820      	bhi.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800504c:	d012      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800504e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005052:	d81a      	bhi.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d022      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800505c:	d115      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800505e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005062:	3308      	adds	r3, #8
 8005064:	2101      	movs	r1, #1
 8005066:	4618      	mov	r0, r3
 8005068:	f000 ff5a 	bl	8005f20 <RCCEx_PLL2_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005072:	e015      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005078:	3328      	adds	r3, #40	@ 0x28
 800507a:	2101      	movs	r1, #1
 800507c:	4618      	mov	r0, r3
 800507e:	f001 f801 	bl	8006084 <RCCEx_PLL3_Config>
 8005082:	4603      	mov	r3, r0
 8005084:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005088:	e00a      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005090:	e006      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005092:	bf00      	nop
 8005094:	e004      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005096:	bf00      	nop
 8005098:	e002      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800509e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050a8:	4b3c      	ldr	r3, [pc, #240]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80050b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050b6:	4a39      	ldr	r2, [pc, #228]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80050bc:	e003      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80050d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050d6:	2300      	movs	r3, #0
 80050d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4313      	orrs	r3, r2
 80050e4:	d060      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80050e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050ee:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80050f2:	d039      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80050f4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80050f8:	d832      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80050fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050fe:	d035      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005100:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005104:	d82c      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510a:	d031      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005110:	d826      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005112:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005116:	d02d      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005118:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800511c:	d820      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800511e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005122:	d012      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005128:	d81a      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800512a:	2b00      	cmp	r3, #0
 800512c:	d024      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800512e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005132:	d115      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005134:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005138:	3308      	adds	r3, #8
 800513a:	2101      	movs	r1, #1
 800513c:	4618      	mov	r0, r3
 800513e:	f000 feef 	bl	8005f20 <RCCEx_PLL2_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005148:	e017      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800514a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800514e:	3328      	adds	r3, #40	@ 0x28
 8005150:	2101      	movs	r1, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f000 ff96 	bl	8006084 <RCCEx_PLL3_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800515e:	e00c      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005166:	e008      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005168:	bf00      	nop
 800516a:	e006      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800516c:	bf00      	nop
 800516e:	e004      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005170:	bf00      	nop
 8005172:	e002      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10e      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005182:	4b06      	ldr	r3, [pc, #24]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800518a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800518e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005192:	4a02      	ldr	r2, [pc, #8]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005194:	430b      	orrs	r3, r1
 8005196:	6593      	str	r3, [r2, #88]	@ 0x58
 8005198:	e006      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800519a:	bf00      	nop
 800519c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80051b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051b8:	2300      	movs	r3, #0
 80051ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80051be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051c2:	460b      	mov	r3, r1
 80051c4:	4313      	orrs	r3, r2
 80051c6:	d037      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80051c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051d2:	d00e      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80051d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051d8:	d816      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d018      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80051de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051e2:	d111      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e4:	4bc4      	ldr	r3, [pc, #784]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	4ac3      	ldr	r2, [pc, #780]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80051f0:	e00f      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051f6:	3308      	adds	r3, #8
 80051f8:	2101      	movs	r1, #1
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fe90 	bl	8005f20 <RCCEx_PLL2_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005206:	e004      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800520e:	e000      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005212:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800521a:	4bb7      	ldr	r3, [pc, #732]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800521c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005226:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005228:	4ab3      	ldr	r2, [pc, #716]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800522a:	430b      	orrs	r3, r1
 800522c:	6513      	str	r3, [r2, #80]	@ 0x50
 800522e:	e003      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005230:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005234:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005248:	2300      	movs	r3, #0
 800524a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800524e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005252:	460b      	mov	r3, r1
 8005254:	4313      	orrs	r3, r2
 8005256:	d039      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800525c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525e:	2b03      	cmp	r3, #3
 8005260:	d81c      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005262:	a201      	add	r2, pc, #4	@ (adr r2, 8005268 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	080052a5 	.word	0x080052a5
 800526c:	08005279 	.word	0x08005279
 8005270:	08005287 	.word	0x08005287
 8005274:	080052a5 	.word	0x080052a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005278:	4b9f      	ldr	r3, [pc, #636]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	4a9e      	ldr	r2, [pc, #632]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800527e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005284:	e00f      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800528a:	3308      	adds	r3, #8
 800528c:	2102      	movs	r1, #2
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fe46 	bl	8005f20 <RCCEx_PLL2_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800529a:	e004      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80052a2:	e000      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80052a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80052ae:	4b92      	ldr	r3, [pc, #584]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b2:	f023 0103 	bic.w	r1, r3, #3
 80052b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052bc:	4a8e      	ldr	r2, [pc, #568]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052be:	430b      	orrs	r3, r1
 80052c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052c2:	e003      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80052d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052dc:	2300      	movs	r3, #0
 80052de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80052e6:	460b      	mov	r3, r1
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f000 8099 	beq.w	8005420 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ee:	4b83      	ldr	r3, [pc, #524]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a82      	ldr	r2, [pc, #520]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80052f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052fa:	f7fb fd45 	bl	8000d88 <HAL_GetTick>
 80052fe:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005302:	e00b      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005304:	f7fb fd40 	bl	8000d88 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b64      	cmp	r3, #100	@ 0x64
 8005312:	d903      	bls.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800531a:	e005      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800531c:	4b77      	ldr	r3, [pc, #476]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ed      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005328:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800532c:	2b00      	cmp	r3, #0
 800532e:	d173      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005330:	4b71      	ldr	r3, [pc, #452]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005332:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005334:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800533c:	4053      	eors	r3, r2
 800533e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005342:	2b00      	cmp	r3, #0
 8005344:	d015      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005346:	4b6c      	ldr	r3, [pc, #432]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800534e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005352:	4b69      	ldr	r3, [pc, #420]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005356:	4a68      	ldr	r2, [pc, #416]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800535c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800535e:	4b66      	ldr	r3, [pc, #408]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	4a65      	ldr	r2, [pc, #404]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005368:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800536a:	4a63      	ldr	r2, [pc, #396]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800536c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005370:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800537a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800537e:	d118      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fb fd02 	bl	8000d88 <HAL_GetTick>
 8005384:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005388:	e00d      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538a:	f7fb fcfd 	bl	8000d88 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005394:	1ad2      	subs	r2, r2, r3
 8005396:	f241 3388 	movw	r3, #5000	@ 0x1388
 800539a:	429a      	cmp	r2, r3
 800539c:	d903      	bls.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80053a4:	e005      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053a6:	4b54      	ldr	r3, [pc, #336]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0eb      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80053b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d129      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053ca:	d10e      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x846>
 80053cc:	4b4a      	ldr	r3, [pc, #296]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80053d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053dc:	091a      	lsrs	r2, r3, #4
 80053de:	4b48      	ldr	r3, [pc, #288]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	4a45      	ldr	r2, [pc, #276]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6113      	str	r3, [r2, #16]
 80053e8:	e005      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80053ea:	4b43      	ldr	r3, [pc, #268]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	4a42      	ldr	r2, [pc, #264]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80053f4:	6113      	str	r3, [r2, #16]
 80053f6:	4b40      	ldr	r3, [pc, #256]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80053fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005406:	4a3c      	ldr	r2, [pc, #240]	@ (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005408:	430b      	orrs	r3, r1
 800540a:	6713      	str	r3, [r2, #112]	@ 0x70
 800540c:	e008      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800540e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005412:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005416:	e003      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005418:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800541c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f002 0301 	and.w	r3, r2, #1
 800542c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005430:	2300      	movs	r3, #0
 8005432:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005436:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800543a:	460b      	mov	r3, r1
 800543c:	4313      	orrs	r3, r2
 800543e:	f000 8090 	beq.w	8005562 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800544a:	2b28      	cmp	r3, #40	@ 0x28
 800544c:	d870      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800544e:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	08005539 	.word	0x08005539
 8005458:	08005531 	.word	0x08005531
 800545c:	08005531 	.word	0x08005531
 8005460:	08005531 	.word	0x08005531
 8005464:	08005531 	.word	0x08005531
 8005468:	08005531 	.word	0x08005531
 800546c:	08005531 	.word	0x08005531
 8005470:	08005531 	.word	0x08005531
 8005474:	08005505 	.word	0x08005505
 8005478:	08005531 	.word	0x08005531
 800547c:	08005531 	.word	0x08005531
 8005480:	08005531 	.word	0x08005531
 8005484:	08005531 	.word	0x08005531
 8005488:	08005531 	.word	0x08005531
 800548c:	08005531 	.word	0x08005531
 8005490:	08005531 	.word	0x08005531
 8005494:	0800551b 	.word	0x0800551b
 8005498:	08005531 	.word	0x08005531
 800549c:	08005531 	.word	0x08005531
 80054a0:	08005531 	.word	0x08005531
 80054a4:	08005531 	.word	0x08005531
 80054a8:	08005531 	.word	0x08005531
 80054ac:	08005531 	.word	0x08005531
 80054b0:	08005531 	.word	0x08005531
 80054b4:	08005539 	.word	0x08005539
 80054b8:	08005531 	.word	0x08005531
 80054bc:	08005531 	.word	0x08005531
 80054c0:	08005531 	.word	0x08005531
 80054c4:	08005531 	.word	0x08005531
 80054c8:	08005531 	.word	0x08005531
 80054cc:	08005531 	.word	0x08005531
 80054d0:	08005531 	.word	0x08005531
 80054d4:	08005539 	.word	0x08005539
 80054d8:	08005531 	.word	0x08005531
 80054dc:	08005531 	.word	0x08005531
 80054e0:	08005531 	.word	0x08005531
 80054e4:	08005531 	.word	0x08005531
 80054e8:	08005531 	.word	0x08005531
 80054ec:	08005531 	.word	0x08005531
 80054f0:	08005531 	.word	0x08005531
 80054f4:	08005539 	.word	0x08005539
 80054f8:	58024400 	.word	0x58024400
 80054fc:	58024800 	.word	0x58024800
 8005500:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005508:	3308      	adds	r3, #8
 800550a:	2101      	movs	r1, #1
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fd07 	bl	8005f20 <RCCEx_PLL2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005518:	e00f      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800551a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800551e:	3328      	adds	r3, #40	@ 0x28
 8005520:	2101      	movs	r1, #1
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fdae 	bl	8006084 <RCCEx_PLL3_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800552e:	e004      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005536:	e000      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10b      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005542:	4bc0      	ldr	r3, [pc, #768]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005546:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800554a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800554e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005552:	4abc      	ldr	r2, [pc, #752]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005554:	430b      	orrs	r3, r1
 8005556:	6553      	str	r3, [r2, #84]	@ 0x54
 8005558:	e003      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800555e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	f002 0302 	and.w	r3, r2, #2
 800556e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005572:	2300      	movs	r3, #0
 8005574:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005578:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800557c:	460b      	mov	r3, r1
 800557e:	4313      	orrs	r3, r2
 8005580:	d043      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800558a:	2b05      	cmp	r3, #5
 800558c:	d824      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800558e:	a201      	add	r2, pc, #4	@ (adr r2, 8005594 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055e1 	.word	0x080055e1
 8005598:	080055ad 	.word	0x080055ad
 800559c:	080055c3 	.word	0x080055c3
 80055a0:	080055e1 	.word	0x080055e1
 80055a4:	080055e1 	.word	0x080055e1
 80055a8:	080055e1 	.word	0x080055e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055b0:	3308      	adds	r3, #8
 80055b2:	2101      	movs	r1, #1
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fcb3 	bl	8005f20 <RCCEx_PLL2_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80055c0:	e00f      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c6:	3328      	adds	r3, #40	@ 0x28
 80055c8:	2101      	movs	r1, #1
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fd5a 	bl	8006084 <RCCEx_PLL3_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80055d6:	e004      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80055de:	e000      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80055e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10b      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80055ea:	4b96      	ldr	r3, [pc, #600]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ee:	f023 0107 	bic.w	r1, r3, #7
 80055f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055fa:	4a92      	ldr	r2, [pc, #584]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055fc:	430b      	orrs	r3, r1
 80055fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8005600:	e003      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005602:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005606:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800560a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f002 0304 	and.w	r3, r2, #4
 8005616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800561a:	2300      	movs	r3, #0
 800561c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005620:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005624:	460b      	mov	r3, r1
 8005626:	4313      	orrs	r3, r2
 8005628:	d043      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800562a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800562e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005632:	2b05      	cmp	r3, #5
 8005634:	d824      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005636:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	08005689 	.word	0x08005689
 8005640:	08005655 	.word	0x08005655
 8005644:	0800566b 	.word	0x0800566b
 8005648:	08005689 	.word	0x08005689
 800564c:	08005689 	.word	0x08005689
 8005650:	08005689 	.word	0x08005689
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005658:	3308      	adds	r3, #8
 800565a:	2101      	movs	r1, #1
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fc5f 	bl	8005f20 <RCCEx_PLL2_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005668:	e00f      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800566a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800566e:	3328      	adds	r3, #40	@ 0x28
 8005670:	2101      	movs	r1, #1
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fd06 	bl	8006084 <RCCEx_PLL3_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800567e:	e004      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005686:	e000      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10b      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005692:	4b6c      	ldr	r3, [pc, #432]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005696:	f023 0107 	bic.w	r1, r3, #7
 800569a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800569e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056a2:	4a68      	ldr	r2, [pc, #416]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80056a8:	e003      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f002 0320 	and.w	r3, r2, #32
 80056be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056c2:	2300      	movs	r3, #0
 80056c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056cc:	460b      	mov	r3, r1
 80056ce:	4313      	orrs	r3, r2
 80056d0:	d055      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80056d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056de:	d033      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80056e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056e4:	d82c      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ea:	d02f      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f0:	d826      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80056f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80056f6:	d02b      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80056f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80056fc:	d820      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80056fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005702:	d012      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005708:	d81a      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d022      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800570e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005712:	d115      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005718:	3308      	adds	r3, #8
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fbff 	bl	8005f20 <RCCEx_PLL2_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005728:	e015      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800572a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800572e:	3328      	adds	r3, #40	@ 0x28
 8005730:	2102      	movs	r1, #2
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fca6 	bl	8006084 <RCCEx_PLL3_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800573e:	e00a      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005746:	e006      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005748:	bf00      	nop
 800574a:	e004      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800574c:	bf00      	nop
 800574e:	e002      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005756:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800575e:	4b39      	ldr	r3, [pc, #228]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005762:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800576a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800576e:	4a35      	ldr	r2, [pc, #212]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005770:	430b      	orrs	r3, r1
 8005772:	6553      	str	r3, [r2, #84]	@ 0x54
 8005774:	e003      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800577a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800577e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800578a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800578e:	2300      	movs	r3, #0
 8005790:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005794:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005798:	460b      	mov	r3, r1
 800579a:	4313      	orrs	r3, r2
 800579c:	d058      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800579e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80057aa:	d033      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80057ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80057b0:	d82c      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b6:	d02f      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80057b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057bc:	d826      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80057be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057c2:	d02b      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80057c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057c8:	d820      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80057ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057ce:	d012      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80057d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057d4:	d81a      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d022      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057de:	d115      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057e4:	3308      	adds	r3, #8
 80057e6:	2100      	movs	r1, #0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fb99 	bl	8005f20 <RCCEx_PLL2_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80057f4:	e015      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057fa:	3328      	adds	r3, #40	@ 0x28
 80057fc:	2102      	movs	r1, #2
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fc40 	bl	8006084 <RCCEx_PLL3_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800580a:	e00a      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005812:	e006      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005814:	bf00      	nop
 8005816:	e004      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005818:	bf00      	nop
 800581a:	e002      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005822:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10e      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800582a:	4b06      	ldr	r3, [pc, #24]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800582c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005836:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800583a:	4a02      	ldr	r2, [pc, #8]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800583c:	430b      	orrs	r3, r1
 800583e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005840:	e006      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005842:	bf00      	nop
 8005844:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800584c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800585c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005860:	2300      	movs	r3, #0
 8005862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005866:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800586a:	460b      	mov	r3, r1
 800586c:	4313      	orrs	r3, r2
 800586e:	d055      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005874:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005878:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800587c:	d033      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800587e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005882:	d82c      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005888:	d02f      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800588a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800588e:	d826      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005890:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005894:	d02b      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005896:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800589a:	d820      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800589c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058a0:	d012      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80058a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058a6:	d81a      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d022      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80058ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058b0:	d115      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b6:	3308      	adds	r3, #8
 80058b8:	2100      	movs	r1, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fb30 	bl	8005f20 <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80058c6:	e015      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058cc:	3328      	adds	r3, #40	@ 0x28
 80058ce:	2102      	movs	r1, #2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fbd7 	bl	8006084 <RCCEx_PLL3_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80058dc:	e00a      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058e4:	e006      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80058e6:	bf00      	nop
 80058e8:	e004      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80058ea:	bf00      	nop
 80058ec:	e002      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80058f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80058fc:	4ba1      	ldr	r3, [pc, #644]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005900:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005908:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800590c:	4a9d      	ldr	r2, [pc, #628]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800590e:	430b      	orrs	r3, r1
 8005910:	6593      	str	r3, [r2, #88]	@ 0x58
 8005912:	e003      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005918:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800591c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f002 0308 	and.w	r3, r2, #8
 8005928:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800592c:	2300      	movs	r3, #0
 800592e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005932:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005936:	460b      	mov	r3, r1
 8005938:	4313      	orrs	r3, r2
 800593a:	d01e      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800593c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005948:	d10c      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800594a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800594e:	3328      	adds	r3, #40	@ 0x28
 8005950:	2102      	movs	r1, #2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fb96 	bl	8006084 <RCCEx_PLL3_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005964:	4b87      	ldr	r3, [pc, #540]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005968:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800596c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005974:	4a83      	ldr	r2, [pc, #524]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005976:	430b      	orrs	r3, r1
 8005978:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800597a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f002 0310 	and.w	r3, r2, #16
 8005986:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800598a:	2300      	movs	r3, #0
 800598c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005990:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005994:	460b      	mov	r3, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	d01e      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800599a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800599e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a6:	d10c      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ac:	3328      	adds	r3, #40	@ 0x28
 80059ae:	2102      	movs	r1, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fb67 	bl	8006084 <RCCEx_PLL3_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059c2:	4b70      	ldr	r3, [pc, #448]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059d2:	4a6c      	ldr	r2, [pc, #432]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059d4:	430b      	orrs	r3, r1
 80059d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80059e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059e8:	2300      	movs	r3, #0
 80059ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80059f2:	460b      	mov	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	d03e      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80059f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a04:	d022      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005a06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a0a:	d81b      	bhi.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a14:	d00b      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005a16:	e015      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fa7d 	bl	8005f20 <RCCEx_PLL2_Config>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a2c:	e00f      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a32:	3328      	adds	r3, #40	@ 0x28
 8005a34:	2102      	movs	r1, #2
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fb24 	bl	8006084 <RCCEx_PLL3_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a42:	e004      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a4a:	e000      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a56:	4b4b      	ldr	r3, [pc, #300]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a66:	4a47      	ldr	r2, [pc, #284]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a6c:	e003      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a72:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005a82:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a84:	2300      	movs	r3, #0
 8005a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	d03b      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a9e:	d01f      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005aa0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aa4:	d818      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aaa:	d003      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005aac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ab0:	d007      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005ab2:	e011      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab4:	4b33      	ldr	r3, [pc, #204]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	4a32      	ldr	r2, [pc, #200]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ac0:	e00f      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ac6:	3328      	adds	r3, #40	@ 0x28
 8005ac8:	2101      	movs	r1, #1
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fada 	bl	8006084 <RCCEx_PLL3_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ad6:	e004      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005ade:	e000      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aea:	4b26      	ldr	r3, [pc, #152]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afa:	4a22      	ldr	r2, [pc, #136]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b00:	e003      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005b16:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b18:	2300      	movs	r3, #0
 8005b1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005b20:	460b      	mov	r3, r1
 8005b22:	4313      	orrs	r3, r2
 8005b24:	d034      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b34:	d007      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005b36:	e011      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b38:	4b12      	ldr	r3, [pc, #72]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3c:	4a11      	ldr	r2, [pc, #68]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b44:	e00e      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f9e6 	bl	8005f20 <RCCEx_PLL2_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b5a:	e003      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10d      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b6c:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b70:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7a:	4a02      	ldr	r2, [pc, #8]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b80:	e006      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005b82:	bf00      	nop
 8005b84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ba2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	d00c      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bb0:	3328      	adds	r3, #40	@ 0x28
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fa65 	bl	8006084 <RCCEx_PLL3_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005bd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bd8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d038      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bee:	d018      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bf4:	d811      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bfa:	d014      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c00:	d80b      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d011      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c0a:	d106      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4bc3      	ldr	r3, [pc, #780]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c10:	4ac2      	ldr	r2, [pc, #776]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005c18:	e008      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c20:	e004      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005c22:	bf00      	nop
 8005c24:	e002      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005c26:	bf00      	nop
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c34:	4bb9      	ldr	r3, [pc, #740]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c38:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c44:	4ab5      	ldr	r2, [pc, #724]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c46:	430b      	orrs	r3, r1
 8005c48:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c4a:	e003      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005c60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c62:	2300      	movs	r3, #0
 8005c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c66:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	d009      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c70:	4baa      	ldr	r3, [pc, #680]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c7e:	4aa7      	ldr	r2, [pc, #668]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c90:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c92:	2300      	movs	r3, #0
 8005c94:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c96:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ca0:	4b9e      	ldr	r3, [pc, #632]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cae:	4a9b      	ldr	r2, [pc, #620]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cc6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	d009      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005cd0:	4b92      	ldr	r3, [pc, #584]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cde:	4a8f      	ldr	r2, [pc, #572]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cf6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	d00e      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d00:	4b86      	ldr	r3, [pc, #536]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	4a85      	ldr	r2, [pc, #532]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d0a:	6113      	str	r3, [r2, #16]
 8005d0c:	4b83      	ldr	r3, [pc, #524]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d0e:	6919      	ldr	r1, [r3, #16]
 8005d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d18:	4a80      	ldr	r2, [pc, #512]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d30:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005d34:	460b      	mov	r3, r1
 8005d36:	4313      	orrs	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d3a:	4b78      	ldr	r3, [pc, #480]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d48:	4a74      	ldr	r2, [pc, #464]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d60:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005d64:	460b      	mov	r3, r1
 8005d66:	4313      	orrs	r3, r2
 8005d68:	d00a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d6a:	4b6c      	ldr	r3, [pc, #432]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d7a:	4a68      	ldr	r2, [pc, #416]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	2100      	movs	r1, #0
 8005d8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d92:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005d96:	460b      	mov	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	d011      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005da0:	3308      	adds	r3, #8
 8005da2:	2100      	movs	r1, #0
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 f8bb 	bl	8005f20 <RCCEx_PLL2_Config>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005db0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dbc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	2100      	movs	r1, #0
 8005dca:	6239      	str	r1, [r7, #32]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dd2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	d011      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005de0:	3308      	adds	r3, #8
 8005de2:	2101      	movs	r1, #1
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f89b 	bl	8005f20 <RCCEx_PLL2_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005df0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dfc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	2100      	movs	r1, #0
 8005e0a:	61b9      	str	r1, [r7, #24]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d011      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e20:	3308      	adds	r3, #8
 8005e22:	2102      	movs	r1, #2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 f87b 	bl	8005f20 <RCCEx_PLL2_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005e30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	2100      	movs	r1, #0
 8005e4a:	6139      	str	r1, [r7, #16]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e56:	460b      	mov	r3, r1
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	d011      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e60:	3328      	adds	r3, #40	@ 0x28
 8005e62:	2100      	movs	r1, #0
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 f90d 	bl	8006084 <RCCEx_PLL3_Config>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005e70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	2100      	movs	r1, #0
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e96:	460b      	mov	r3, r1
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	d011      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ea0:	3328      	adds	r3, #40	@ 0x28
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 f8ed 	bl	8006084 <RCCEx_PLL3_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ebc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	6039      	str	r1, [r7, #0]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	d011      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ee0:	3328      	adds	r3, #40	@ 0x28
 8005ee2:	2102      	movs	r1, #2
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 f8cd 	bl	8006084 <RCCEx_PLL3_Config>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005efc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005f00:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e000      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005f14:	46bd      	mov	sp, r7
 8005f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f1a:	bf00      	nop
 8005f1c:	58024400 	.word	0x58024400

08005f20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f2e:	4b53      	ldr	r3, [pc, #332]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d101      	bne.n	8005f3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e099      	b.n	8006072 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a4e      	ldr	r2, [pc, #312]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f4a:	f7fa ff1d 	bl	8000d88 <HAL_GetTick>
 8005f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f50:	e008      	b.n	8005f64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f52:	f7fa ff19 	bl	8000d88 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e086      	b.n	8006072 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f64:	4b45      	ldr	r3, [pc, #276]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1f0      	bne.n	8005f52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f70:	4b42      	ldr	r3, [pc, #264]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	031b      	lsls	r3, r3, #12
 8005f7e:	493f      	ldr	r1, [pc, #252]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	628b      	str	r3, [r1, #40]	@ 0x28
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	025b      	lsls	r3, r3, #9
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	061b      	lsls	r3, r3, #24
 8005fb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005fb4:	4931      	ldr	r1, [pc, #196]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005fba:	4b30      	ldr	r3, [pc, #192]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	492d      	ldr	r1, [pc, #180]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd0:	f023 0220 	bic.w	r2, r3, #32
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	4928      	ldr	r1, [pc, #160]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005fde:	4b27      	ldr	r3, [pc, #156]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe2:	4a26      	ldr	r2, [pc, #152]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fe4:	f023 0310 	bic.w	r3, r3, #16
 8005fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005fea:	4b24      	ldr	r3, [pc, #144]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fee:	4b24      	ldr	r3, [pc, #144]	@ (8006080 <RCCEx_PLL2_Config+0x160>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	69d2      	ldr	r2, [r2, #28]
 8005ff6:	00d2      	lsls	r2, r2, #3
 8005ff8:	4920      	ldr	r1, [pc, #128]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	4a1e      	ldr	r2, [pc, #120]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006004:	f043 0310 	orr.w	r3, r3, #16
 8006008:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006010:	4b1a      	ldr	r3, [pc, #104]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006014:	4a19      	ldr	r2, [pc, #100]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006016:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800601a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800601c:	e00f      	b.n	800603e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d106      	bne.n	8006032 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006024:	4b15      	ldr	r3, [pc, #84]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	4a14      	ldr	r2, [pc, #80]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 800602a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800602e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006030:	e005      	b.n	800603e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006032:	4b12      	ldr	r3, [pc, #72]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006036:	4a11      	ldr	r2, [pc, #68]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800603c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800603e:	4b0f      	ldr	r3, [pc, #60]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a0e      	ldr	r2, [pc, #56]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006044:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800604a:	f7fa fe9d 	bl	8000d88 <HAL_GetTick>
 800604e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006050:	e008      	b.n	8006064 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006052:	f7fa fe99 	bl	8000d88 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e006      	b.n	8006072 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006064:	4b05      	ldr	r3, [pc, #20]	@ (800607c <RCCEx_PLL2_Config+0x15c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f0      	beq.n	8006052 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
 8006080:	ffff0007 	.word	0xffff0007

08006084 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006092:	4b53      	ldr	r3, [pc, #332]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b03      	cmp	r3, #3
 800609c:	d101      	bne.n	80060a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e099      	b.n	80061d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80060a2:	4b4f      	ldr	r3, [pc, #316]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a4e      	ldr	r2, [pc, #312]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ae:	f7fa fe6b 	bl	8000d88 <HAL_GetTick>
 80060b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060b4:	e008      	b.n	80060c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060b6:	f7fa fe67 	bl	8000d88 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e086      	b.n	80061d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060c8:	4b45      	ldr	r3, [pc, #276]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f0      	bne.n	80060b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80060d4:	4b42      	ldr	r3, [pc, #264]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	051b      	lsls	r3, r3, #20
 80060e2:	493f      	ldr	r1, [pc, #252]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	025b      	lsls	r3, r3, #9
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	3b01      	subs	r3, #1
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	3b01      	subs	r3, #1
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006118:	4931      	ldr	r1, [pc, #196]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800611a:	4313      	orrs	r3, r2
 800611c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800611e:	4b30      	ldr	r3, [pc, #192]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006122:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	492d      	ldr	r1, [pc, #180]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800612c:	4313      	orrs	r3, r2
 800612e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006130:	4b2b      	ldr	r3, [pc, #172]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	4928      	ldr	r1, [pc, #160]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800613e:	4313      	orrs	r3, r2
 8006140:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006142:	4b27      	ldr	r3, [pc, #156]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	4a26      	ldr	r2, [pc, #152]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800614c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800614e:	4b24      	ldr	r3, [pc, #144]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006152:	4b24      	ldr	r3, [pc, #144]	@ (80061e4 <RCCEx_PLL3_Config+0x160>)
 8006154:	4013      	ands	r3, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	69d2      	ldr	r2, [r2, #28]
 800615a:	00d2      	lsls	r2, r2, #3
 800615c:	4920      	ldr	r1, [pc, #128]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800615e:	4313      	orrs	r3, r2
 8006160:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006162:	4b1f      	ldr	r3, [pc, #124]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006166:	4a1e      	ldr	r2, [pc, #120]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800616c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006174:	4b1a      	ldr	r3, [pc, #104]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	4a19      	ldr	r2, [pc, #100]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800617a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800617e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006180:	e00f      	b.n	80061a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d106      	bne.n	8006196 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006188:	4b15      	ldr	r3, [pc, #84]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800618a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618c:	4a14      	ldr	r2, [pc, #80]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800618e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006192:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006194:	e005      	b.n	80061a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006196:	4b12      	ldr	r3, [pc, #72]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	4a11      	ldr	r2, [pc, #68]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800619c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80061a2:	4b0f      	ldr	r3, [pc, #60]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a0e      	ldr	r2, [pc, #56]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80061a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ae:	f7fa fdeb 	bl	8000d88 <HAL_GetTick>
 80061b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061b4:	e008      	b.n	80061c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061b6:	f7fa fde7 	bl	8000d88 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e006      	b.n	80061d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061c8:	4b05      	ldr	r3, [pc, #20]	@ (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0f0      	beq.n	80061b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	58024400 	.word	0x58024400
 80061e4:	ffff0007 	.word	0xffff0007

080061e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061e8:	b084      	sub	sp, #16
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	f107 001c 	add.w	r0, r7, #28
 80061f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d121      	bne.n	8006246 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006206:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	4b2c      	ldr	r3, [pc, #176]	@ (80062c4 <USB_CoreInit+0xdc>)
 8006214:	4013      	ands	r3, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006226:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800622a:	2b01      	cmp	r3, #1
 800622c:	d105      	bne.n	800623a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 faf6 	bl	800782c <USB_CoreReset>
 8006240:	4603      	mov	r3, r0
 8006242:	73fb      	strb	r3, [r7, #15]
 8006244:	e01b      	b.n	800627e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 faea 	bl	800782c <USB_CoreReset>
 8006258:	4603      	mov	r3, r0
 800625a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800625c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006260:	2b00      	cmp	r3, #0
 8006262:	d106      	bne.n	8006272 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006268:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006270:	e005      	b.n	800627e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006276:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800627e:	7fbb      	ldrb	r3, [r7, #30]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d116      	bne.n	80062b2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006288:	b29a      	uxth	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006292:	4b0d      	ldr	r3, [pc, #52]	@ (80062c8 <USB_CoreInit+0xe0>)
 8006294:	4313      	orrs	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f043 0206 	orr.w	r2, r3, #6
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062be:	b004      	add	sp, #16
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	ffbdffbf 	.word	0xffbdffbf
 80062c8:	03ee0000 	.word	0x03ee0000

080062cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d165      	bne.n	80063ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4a41      	ldr	r2, [pc, #260]	@ (80063e8 <USB_SetTurnaroundTime+0x11c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d906      	bls.n	80062f6 <USB_SetTurnaroundTime+0x2a>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4a40      	ldr	r2, [pc, #256]	@ (80063ec <USB_SetTurnaroundTime+0x120>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d202      	bcs.n	80062f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062f0:	230f      	movs	r3, #15
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	e062      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	4a3c      	ldr	r2, [pc, #240]	@ (80063ec <USB_SetTurnaroundTime+0x120>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d306      	bcc.n	800630c <USB_SetTurnaroundTime+0x40>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	4a3b      	ldr	r2, [pc, #236]	@ (80063f0 <USB_SetTurnaroundTime+0x124>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d202      	bcs.n	800630c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006306:	230e      	movs	r3, #14
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	e057      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4a38      	ldr	r2, [pc, #224]	@ (80063f0 <USB_SetTurnaroundTime+0x124>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d306      	bcc.n	8006322 <USB_SetTurnaroundTime+0x56>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4a37      	ldr	r2, [pc, #220]	@ (80063f4 <USB_SetTurnaroundTime+0x128>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d202      	bcs.n	8006322 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800631c:	230d      	movs	r3, #13
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	e04c      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4a33      	ldr	r2, [pc, #204]	@ (80063f4 <USB_SetTurnaroundTime+0x128>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d306      	bcc.n	8006338 <USB_SetTurnaroundTime+0x6c>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	4a32      	ldr	r2, [pc, #200]	@ (80063f8 <USB_SetTurnaroundTime+0x12c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d802      	bhi.n	8006338 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006332:	230c      	movs	r3, #12
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	e041      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4a2f      	ldr	r2, [pc, #188]	@ (80063f8 <USB_SetTurnaroundTime+0x12c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d906      	bls.n	800634e <USB_SetTurnaroundTime+0x82>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4a2e      	ldr	r2, [pc, #184]	@ (80063fc <USB_SetTurnaroundTime+0x130>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d802      	bhi.n	800634e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006348:	230b      	movs	r3, #11
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e036      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4a2a      	ldr	r2, [pc, #168]	@ (80063fc <USB_SetTurnaroundTime+0x130>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d906      	bls.n	8006364 <USB_SetTurnaroundTime+0x98>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	4a29      	ldr	r2, [pc, #164]	@ (8006400 <USB_SetTurnaroundTime+0x134>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d802      	bhi.n	8006364 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800635e:	230a      	movs	r3, #10
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e02b      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4a26      	ldr	r2, [pc, #152]	@ (8006400 <USB_SetTurnaroundTime+0x134>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d906      	bls.n	800637a <USB_SetTurnaroundTime+0xae>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4a25      	ldr	r2, [pc, #148]	@ (8006404 <USB_SetTurnaroundTime+0x138>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d202      	bcs.n	800637a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006374:	2309      	movs	r3, #9
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e020      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4a21      	ldr	r2, [pc, #132]	@ (8006404 <USB_SetTurnaroundTime+0x138>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d306      	bcc.n	8006390 <USB_SetTurnaroundTime+0xc4>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4a20      	ldr	r2, [pc, #128]	@ (8006408 <USB_SetTurnaroundTime+0x13c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d802      	bhi.n	8006390 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800638a:	2308      	movs	r3, #8
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e015      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4a1d      	ldr	r2, [pc, #116]	@ (8006408 <USB_SetTurnaroundTime+0x13c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d906      	bls.n	80063a6 <USB_SetTurnaroundTime+0xda>
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4a1c      	ldr	r2, [pc, #112]	@ (800640c <USB_SetTurnaroundTime+0x140>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d202      	bcs.n	80063a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063a0:	2307      	movs	r3, #7
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e00a      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063a6:	2306      	movs	r3, #6
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	e007      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063b2:	2309      	movs	r3, #9
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	e001      	b.n	80063bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063b8:	2309      	movs	r3, #9
 80063ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	029b      	lsls	r3, r3, #10
 80063d0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80063d4:	431a      	orrs	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	00d8acbf 	.word	0x00d8acbf
 80063ec:	00e4e1c0 	.word	0x00e4e1c0
 80063f0:	00f42400 	.word	0x00f42400
 80063f4:	01067380 	.word	0x01067380
 80063f8:	011a499f 	.word	0x011a499f
 80063fc:	01312cff 	.word	0x01312cff
 8006400:	014ca43f 	.word	0x014ca43f
 8006404:	016e3600 	.word	0x016e3600
 8006408:	01a6ab1f 	.word	0x01a6ab1f
 800640c:	01e84800 	.word	0x01e84800

08006410 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f043 0201 	orr.w	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f023 0201 	bic.w	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d115      	bne.n	80064a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006482:	200a      	movs	r0, #10
 8006484:	f7fa fc8c 	bl	8000da0 <HAL_Delay>
      ms += 10U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	330a      	adds	r3, #10
 800648c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 f93b 	bl	800770a <USB_GetMode>
 8006494:	4603      	mov	r3, r0
 8006496:	2b01      	cmp	r3, #1
 8006498:	d01e      	beq.n	80064d8 <USB_SetCurrentMode+0x84>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2bc7      	cmp	r3, #199	@ 0xc7
 800649e:	d9f0      	bls.n	8006482 <USB_SetCurrentMode+0x2e>
 80064a0:	e01a      	b.n	80064d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d115      	bne.n	80064d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064b4:	200a      	movs	r0, #10
 80064b6:	f7fa fc73 	bl	8000da0 <HAL_Delay>
      ms += 10U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	330a      	adds	r3, #10
 80064be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 f922 	bl	800770a <USB_GetMode>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <USB_SetCurrentMode+0x84>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80064d0:	d9f0      	bls.n	80064b4 <USB_SetCurrentMode+0x60>
 80064d2:	e001      	b.n	80064d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e005      	b.n	80064e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2bc8      	cmp	r3, #200	@ 0xc8
 80064dc:	d101      	bne.n	80064e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064ec:	b084      	sub	sp, #16
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b086      	sub	sp, #24
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80064fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	e009      	b.n	8006520 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	3340      	adds	r3, #64	@ 0x40
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	2200      	movs	r2, #0
 8006518:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	3301      	adds	r3, #1
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b0e      	cmp	r3, #14
 8006524:	d9f2      	bls.n	800650c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006526:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800652a:	2b00      	cmp	r3, #0
 800652c:	d11c      	bne.n	8006568 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800653c:	f043 0302 	orr.w	r3, r3, #2
 8006540:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006546:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	e005      	b.n	8006574 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800657a:	461a      	mov	r2, r3
 800657c:	2300      	movs	r3, #0
 800657e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006580:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006584:	2b01      	cmp	r3, #1
 8006586:	d10d      	bne.n	80065a4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006590:	2100      	movs	r1, #0
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f968 	bl	8006868 <USB_SetDevSpeed>
 8006598:	e008      	b.n	80065ac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800659a:	2101      	movs	r1, #1
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f963 	bl	8006868 <USB_SetDevSpeed>
 80065a2:	e003      	b.n	80065ac <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065a4:	2103      	movs	r1, #3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f95e 	bl	8006868 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065ac:	2110      	movs	r1, #16
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f8fa 	bl	80067a8 <USB_FlushTxFifo>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f924 	bl	800680c <USB_FlushRxFifo>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d4:	461a      	mov	r2, r3
 80065d6:	2300      	movs	r3, #0
 80065d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e0:	461a      	mov	r2, r3
 80065e2:	2300      	movs	r3, #0
 80065e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ec:	461a      	mov	r2, r3
 80065ee:	2300      	movs	r3, #0
 80065f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065f2:	2300      	movs	r3, #0
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	e043      	b.n	8006680 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800660a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800660e:	d118      	bne.n	8006642 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006622:	461a      	mov	r2, r3
 8006624:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	e013      	b.n	8006654 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006638:	461a      	mov	r2, r3
 800663a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	e008      	b.n	8006654 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800664e:	461a      	mov	r2, r3
 8006650:	2300      	movs	r3, #0
 8006652:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006660:	461a      	mov	r2, r3
 8006662:	2300      	movs	r3, #0
 8006664:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006672:	461a      	mov	r2, r3
 8006674:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006678:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	3301      	adds	r3, #1
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006684:	461a      	mov	r2, r3
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	4293      	cmp	r3, r2
 800668a:	d3b5      	bcc.n	80065f8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	e043      	b.n	800671a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066a8:	d118      	bne.n	80066dc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066bc:	461a      	mov	r2, r3
 80066be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	e013      	b.n	80066ee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d2:	461a      	mov	r2, r3
 80066d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e008      	b.n	80066ee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e8:	461a      	mov	r2, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fa:	461a      	mov	r2, r3
 80066fc:	2300      	movs	r3, #0
 80066fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800670c:	461a      	mov	r2, r3
 800670e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006712:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3301      	adds	r3, #1
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800671e:	461a      	mov	r2, r3
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4293      	cmp	r3, r2
 8006724:	d3b5      	bcc.n	8006692 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006738:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006746:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006748:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800674c:	2b00      	cmp	r3, #0
 800674e:	d105      	bne.n	800675c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f043 0210 	orr.w	r2, r3, #16
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	4b0f      	ldr	r3, [pc, #60]	@ (80067a0 <USB_DevInit+0x2b4>)
 8006762:	4313      	orrs	r3, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006768:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f043 0208 	orr.w	r2, r3, #8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800677c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006780:	2b01      	cmp	r3, #1
 8006782:	d105      	bne.n	8006790 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699a      	ldr	r2, [r3, #24]
 8006788:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <USB_DevInit+0x2b8>)
 800678a:	4313      	orrs	r3, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006790:	7dfb      	ldrb	r3, [r7, #23]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800679c:	b004      	add	sp, #16
 800679e:	4770      	bx	lr
 80067a0:	803c3800 	.word	0x803c3800
 80067a4:	40000004 	.word	0x40000004

080067a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3301      	adds	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067c2:	d901      	bls.n	80067c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e01b      	b.n	8006800 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	daf2      	bge.n	80067b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	019b      	lsls	r3, r3, #6
 80067d8:	f043 0220 	orr.w	r2, r3, #32
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3301      	adds	r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067ec:	d901      	bls.n	80067f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e006      	b.n	8006800 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d0f0      	beq.n	80067e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006824:	d901      	bls.n	800682a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e018      	b.n	800685c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	daf2      	bge.n	8006818 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2210      	movs	r2, #16
 800683a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3301      	adds	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006848:	d901      	bls.n	800684e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e006      	b.n	800685c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	2b10      	cmp	r3, #16
 8006858:	d0f0      	beq.n	800683c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006888:	4313      	orrs	r3, r2
 800688a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800689a:	b480      	push	{r7}
 800689c:	b087      	sub	sp, #28
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 0306 	and.w	r3, r3, #6
 80068b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d102      	bne.n	80068c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068ba:	2300      	movs	r3, #0
 80068bc:	75fb      	strb	r3, [r7, #23]
 80068be:	e00a      	b.n	80068d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d002      	beq.n	80068cc <USB_GetDevSpeed+0x32>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b06      	cmp	r3, #6
 80068ca:	d102      	bne.n	80068d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068cc:	2302      	movs	r3, #2
 80068ce:	75fb      	strb	r3, [r7, #23]
 80068d0:	e001      	b.n	80068d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068d2:	230f      	movs	r3, #15
 80068d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d139      	bne.n	8006974 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	2101      	movs	r1, #1
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	b29b      	uxth	r3, r3
 8006918:	68f9      	ldr	r1, [r7, #12]
 800691a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800691e:	4313      	orrs	r3, r2
 8006920:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d153      	bne.n	80069e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	791b      	ldrb	r3, [r3, #4]
 8006952:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006954:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	059b      	lsls	r3, r3, #22
 800695a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800695c:	431a      	orrs	r2, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	0159      	lsls	r1, r3, #5
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	440b      	add	r3, r1
 8006966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800696a:	4619      	mov	r1, r3
 800696c:	4b20      	ldr	r3, [pc, #128]	@ (80069f0 <USB_ActivateEndpoint+0x10c>)
 800696e:	4313      	orrs	r3, r2
 8006970:	600b      	str	r3, [r1, #0]
 8006972:	e035      	b.n	80069e0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	2101      	movs	r1, #1
 8006986:	fa01 f303 	lsl.w	r3, r1, r3
 800698a:	041b      	lsls	r3, r3, #16
 800698c:	68f9      	ldr	r1, [r7, #12]
 800698e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006992:	4313      	orrs	r3, r2
 8006994:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d119      	bne.n	80069e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	791b      	ldrb	r3, [r3, #4]
 80069c6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069c8:	430b      	orrs	r3, r1
 80069ca:	431a      	orrs	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	0159      	lsls	r1, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	440b      	add	r3, r1
 80069d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d8:	4619      	mov	r1, r3
 80069da:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <USB_ActivateEndpoint+0x10c>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	10008000 	.word	0x10008000

080069f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d161      	bne.n	8006ad4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a26:	d11f      	bne.n	8006a68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	f003 030f 	and.w	r3, r3, #15
 8006a78:	2101      	movs	r1, #1
 8006a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	43db      	mvns	r3, r3
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a88:	4013      	ands	r3, r2
 8006a8a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	43db      	mvns	r3, r3
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aac:	4013      	ands	r3, r2
 8006aae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	0159      	lsls	r1, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	440b      	add	r3, r1
 8006ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aca:	4619      	mov	r1, r3
 8006acc:	4b35      	ldr	r3, [pc, #212]	@ (8006ba4 <USB_DeactivateEndpoint+0x1b0>)
 8006ace:	4013      	ands	r3, r2
 8006ad0:	600b      	str	r3, [r1, #0]
 8006ad2:	e060      	b.n	8006b96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aea:	d11f      	bne.n	8006b2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	43db      	mvns	r3, r3
 8006b46:	68f9      	ldr	r1, [r7, #12]
 8006b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	2101      	movs	r1, #1
 8006b62:	fa01 f303 	lsl.w	r3, r1, r3
 8006b66:	041b      	lsls	r3, r3, #16
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b70:	4013      	ands	r3, r2
 8006b72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	0159      	lsls	r1, r3, #5
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	440b      	add	r3, r1
 8006b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4b05      	ldr	r3, [pc, #20]	@ (8006ba8 <USB_DeactivateEndpoint+0x1b4>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	ec337800 	.word	0xec337800
 8006ba8:	eff37800 	.word	0xeff37800

08006bac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	@ 0x28
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	785b      	ldrb	r3, [r3, #1]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	f040 8181 	bne.w	8006ed0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d132      	bne.n	8006c3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	0159      	lsls	r1, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	440b      	add	r3, r1
 8006bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4ba5      	ldr	r3, [pc, #660]	@ (8006e88 <USB_EPStartXfer+0x2dc>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	0159      	lsls	r1, r3, #5
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	440b      	add	r3, r1
 8006c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c32:	4619      	mov	r1, r3
 8006c34:	4b95      	ldr	r3, [pc, #596]	@ (8006e8c <USB_EPStartXfer+0x2e0>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	610b      	str	r3, [r1, #16]
 8006c3a:	e092      	b.n	8006d62 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	0159      	lsls	r1, r3, #5
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	440b      	add	r3, r1
 8006c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c56:	4619      	mov	r1, r3
 8006c58:	4b8c      	ldr	r3, [pc, #560]	@ (8006e8c <USB_EPStartXfer+0x2e0>)
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	0159      	lsls	r1, r3, #5
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	440b      	add	r3, r1
 8006c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4b83      	ldr	r3, [pc, #524]	@ (8006e88 <USB_EPStartXfer+0x2dc>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d11a      	bne.n	8006cbc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691a      	ldr	r2, [r3, #16]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d903      	bls.n	8006c9a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	0151      	lsls	r1, r2, #5
 8006cac:	69fa      	ldr	r2, [r7, #28]
 8006cae:	440a      	add	r2, r1
 8006cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cb8:	6113      	str	r3, [r2, #16]
 8006cba:	e01b      	b.n	8006cf4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	6919      	ldr	r1, [r3, #16]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	440b      	add	r3, r1
 8006cd4:	1e59      	subs	r1, r3, #1
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cde:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8006e90 <USB_EPStartXfer+0x2e4>)
 8006ce2:	400b      	ands	r3, r1
 8006ce4:	69b9      	ldr	r1, [r7, #24]
 8006ce6:	0148      	lsls	r0, r1, #5
 8006ce8:	69f9      	ldr	r1, [r7, #28]
 8006cea:	4401      	add	r1, r0
 8006cec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d00:	691a      	ldr	r2, [r3, #16]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d0a:	69b9      	ldr	r1, [r7, #24]
 8006d0c:	0148      	lsls	r0, r1, #5
 8006d0e:	69f9      	ldr	r1, [r7, #28]
 8006d10:	4401      	add	r1, r0
 8006d12:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d16:	4313      	orrs	r3, r2
 8006d18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	791b      	ldrb	r3, [r3, #4]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d11f      	bne.n	8006d62 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d3c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006d40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	69fa      	ldr	r2, [r7, #28]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d14b      	bne.n	8006e00 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	791b      	ldrb	r3, [r3, #4]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d128      	bne.n	8006dde <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d110      	bne.n	8006dbe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006db6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	e00f      	b.n	8006dde <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ddc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006df8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e16a      	b.n	80070d6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	791b      	ldrb	r3, [r3, #4]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d015      	beq.n	8006e54 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8152 	beq.w	80070d6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	2101      	movs	r1, #1
 8006e44:	fa01 f303 	lsl.w	r3, r1, r3
 8006e48:	69f9      	ldr	r1, [r7, #28]
 8006e4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	634b      	str	r3, [r1, #52]	@ 0x34
 8006e52:	e140      	b.n	80070d6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d117      	bne.n	8006e94 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	e016      	b.n	8006eb4 <USB_EPStartXfer+0x308>
 8006e86:	bf00      	nop
 8006e88:	e007ffff 	.word	0xe007ffff
 8006e8c:	fff80000 	.word	0xfff80000
 8006e90:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eb2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	68d9      	ldr	r1, [r3, #12]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	b298      	uxth	r0, r3
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 f9b9 	bl	8007240 <USB_WritePacket>
 8006ece:	e102      	b.n	80070d6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	0159      	lsls	r1, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	440b      	add	r3, r1
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eea:	4619      	mov	r1, r3
 8006eec:	4b7c      	ldr	r3, [pc, #496]	@ (80070e0 <USB_EPStartXfer+0x534>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	0159      	lsls	r1, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	440b      	add	r3, r1
 8006f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4b75      	ldr	r3, [pc, #468]	@ (80070e4 <USB_EPStartXfer+0x538>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d12f      	bne.n	8006f7a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f48:	69b9      	ldr	r1, [r7, #24]
 8006f4a:	0148      	lsls	r0, r1, #5
 8006f4c:	69f9      	ldr	r1, [r7, #28]
 8006f4e:	4401      	add	r1, r0
 8006f50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f54:	4313      	orrs	r3, r2
 8006f56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f76:	6113      	str	r3, [r2, #16]
 8006f78:	e05f      	b.n	800703a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d123      	bne.n	8006fca <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f98:	69b9      	ldr	r1, [r7, #24]
 8006f9a:	0148      	lsls	r0, r1, #5
 8006f9c:	69f9      	ldr	r1, [r7, #28]
 8006f9e:	4401      	add	r1, r0
 8006fa0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	0151      	lsls	r1, r2, #5
 8006fba:	69fa      	ldr	r2, [r7, #28]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fc6:	6113      	str	r3, [r2, #16]
 8006fc8:	e037      	b.n	800703a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	691a      	ldr	r2, [r3, #16]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	1e5a      	subs	r2, r3, #1
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fde:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	8afa      	ldrh	r2, [r7, #22]
 8006fe6:	fb03 f202 	mul.w	r2, r3, r2
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ffa:	691a      	ldr	r2, [r3, #16]
 8006ffc:	8afb      	ldrh	r3, [r7, #22]
 8006ffe:	04d9      	lsls	r1, r3, #19
 8007000:	4b39      	ldr	r3, [pc, #228]	@ (80070e8 <USB_EPStartXfer+0x53c>)
 8007002:	400b      	ands	r3, r1
 8007004:	69b9      	ldr	r1, [r7, #24]
 8007006:	0148      	lsls	r0, r1, #5
 8007008:	69f9      	ldr	r1, [r7, #28]
 800700a:	4401      	add	r1, r0
 800700c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007010:	4313      	orrs	r3, r2
 8007012:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800702a:	69b9      	ldr	r1, [r7, #24]
 800702c:	0148      	lsls	r0, r1, #5
 800702e:	69f9      	ldr	r1, [r7, #28]
 8007030:	4401      	add	r1, r0
 8007032:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007036:	4313      	orrs	r3, r2
 8007038:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d10d      	bne.n	800705c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d009      	beq.n	800705c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	68d9      	ldr	r1, [r3, #12]
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007058:	460a      	mov	r2, r1
 800705a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	791b      	ldrb	r3, [r3, #4]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d128      	bne.n	80070b6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007070:	2b00      	cmp	r3, #0
 8007072:	d110      	bne.n	8007096 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	0151      	lsls	r1, r2, #5
 8007086:	69fa      	ldr	r2, [r7, #28]
 8007088:	440a      	add	r2, r1
 800708a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800708e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	e00f      	b.n	80070b6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070b4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80070d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3720      	adds	r7, #32
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	fff80000 	.word	0xfff80000
 80070e4:	e007ffff 	.word	0xe007ffff
 80070e8:	1ff80000 	.word	0x1ff80000

080070ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d14a      	bne.n	80071a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800711e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007122:	f040 8086 	bne.w	8007232 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007144:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007148:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	7812      	ldrb	r2, [r2, #0]
 800715e:	0151      	lsls	r1, r2, #5
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	440a      	add	r2, r1
 8007164:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800716c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f242 7210 	movw	r2, #10000	@ 0x2710
 800717a:	4293      	cmp	r3, r2
 800717c:	d902      	bls.n	8007184 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]
          break;
 8007182:	e056      	b.n	8007232 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007198:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800719c:	d0e7      	beq.n	800716e <USB_EPStopXfer+0x82>
 800719e:	e048      	b.n	8007232 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071b8:	d13b      	bne.n	8007232 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	7812      	ldrb	r2, [r2, #0]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007200:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3301      	adds	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800720e:	4293      	cmp	r3, r2
 8007210:	d902      	bls.n	8007218 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	75fb      	strb	r3, [r7, #23]
          break;
 8007216:	e00c      	b.n	8007232 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800722c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007230:	d0e7      	beq.n	8007202 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007232:	7dfb      	ldrb	r3, [r7, #23]
}
 8007234:	4618      	mov	r0, r3
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007240:	b480      	push	{r7}
 8007242:	b089      	sub	sp, #36	@ 0x24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	460b      	mov	r3, r1
 8007250:	71fb      	strb	r3, [r7, #7]
 8007252:	4613      	mov	r3, r2
 8007254:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800725e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d123      	bne.n	80072ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007266:	88bb      	ldrh	r3, [r7, #4]
 8007268:	3303      	adds	r3, #3
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800726e:	2300      	movs	r3, #0
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	e018      	b.n	80072a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007274:	79fb      	ldrb	r3, [r7, #7]
 8007276:	031a      	lsls	r2, r3, #12
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	4413      	add	r3, r2
 800727c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007280:	461a      	mov	r2, r3
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	3301      	adds	r3, #1
 800728c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3301      	adds	r3, #1
 8007292:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	3301      	adds	r3, #1
 8007298:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	3301      	adds	r3, #1
 800729e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	3301      	adds	r3, #1
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d3e2      	bcc.n	8007274 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3724      	adds	r7, #36	@ 0x24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072bc:	b480      	push	{r7}
 80072be:	b08b      	sub	sp, #44	@ 0x2c
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	089b      	lsrs	r3, r3, #2
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072e2:	2300      	movs	r3, #0
 80072e4:	623b      	str	r3, [r7, #32]
 80072e6:	e014      	b.n	8007312 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	3301      	adds	r3, #1
 80072f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	3301      	adds	r3, #1
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	3301      	adds	r3, #1
 8007304:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	3301      	adds	r3, #1
 800730a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	3301      	adds	r3, #1
 8007310:	623b      	str	r3, [r7, #32]
 8007312:	6a3a      	ldr	r2, [r7, #32]
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	429a      	cmp	r2, r3
 8007318:	d3e6      	bcc.n	80072e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800731a:	8bfb      	ldrh	r3, [r7, #30]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01e      	beq.n	800735e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800732a:	461a      	mov	r2, r3
 800732c:	f107 0310 	add.w	r3, r7, #16
 8007330:	6812      	ldr	r2, [r2, #0]
 8007332:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	fa22 f303 	lsr.w	r3, r2, r3
 8007340:	b2da      	uxtb	r2, r3
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	701a      	strb	r2, [r3, #0]
      i++;
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	3301      	adds	r3, #1
 800734a:	623b      	str	r3, [r7, #32]
      pDest++;
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	3301      	adds	r3, #1
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007352:	8bfb      	ldrh	r3, [r7, #30]
 8007354:	3b01      	subs	r3, #1
 8007356:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007358:	8bfb      	ldrh	r3, [r7, #30]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1ea      	bne.n	8007334 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007360:	4618      	mov	r0, r3
 8007362:	372c      	adds	r7, #44	@ 0x2c
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d12c      	bne.n	80073e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	db12      	blt.n	80073c0 <USB_EPSetStall+0x54>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00f      	beq.n	80073c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80073be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	e02b      	b.n	800743a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	db12      	blt.n	800741a <USB_EPSetStall+0xae>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00f      	beq.n	800741a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	440a      	add	r2, r1
 8007410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007414:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007418:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	0151      	lsls	r1, r2, #5
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	440a      	add	r2, r1
 8007430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007434:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007438:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d128      	bne.n	80074b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800747e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007482:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	791b      	ldrb	r3, [r3, #4]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d003      	beq.n	8007494 <USB_EPClearStall+0x4c>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	791b      	ldrb	r3, [r3, #4]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d138      	bne.n	8007506 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074b2:	6013      	str	r3, [r2, #0]
 80074b4:	e027      	b.n	8007506 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	0151      	lsls	r1, r2, #5
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	440a      	add	r2, r1
 80074cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	791b      	ldrb	r3, [r3, #4]
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d003      	beq.n	80074e6 <USB_EPClearStall+0x9e>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	791b      	ldrb	r3, [r3, #4]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d10f      	bne.n	8007506 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007504:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007532:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007536:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007548:	68f9      	ldr	r1, [r7, #12]
 800754a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800754e:	4313      	orrs	r3, r2
 8007550:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800757a:	f023 0303 	bic.w	r3, r3, #3
 800757e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800758e:	f023 0302 	bic.w	r3, r3, #2
 8007592:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075bc:	f023 0303 	bic.w	r3, r3, #3
 80075c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d0:	f043 0302 	orr.w	r3, r3, #2
 80075d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4013      	ands	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075fc:	68fb      	ldr	r3, [r7, #12]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800760a:	b480      	push	{r7}
 800760c:	b085      	sub	sp, #20
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	4013      	ands	r3, r2
 800762c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	0c1b      	lsrs	r3, r3, #16
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800763e:	b480      	push	{r7}
 8007640:	b085      	sub	sp, #20
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	4013      	ands	r3, r2
 8007660:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	b29b      	uxth	r3, r3
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4013      	ands	r3, r2
 800769e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076a0:	68bb      	ldr	r3, [r7, #8]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b087      	sub	sp, #28
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	fa22 f303 	lsr.w	r3, r2, r3
 80076de:	01db      	lsls	r3, r3, #7
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4013      	ands	r3, r2
 80076fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076fc:	68bb      	ldr	r3, [r7, #8]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	371c      	adds	r7, #28
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	f003 0301 	and.w	r3, r3, #1
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
	...

08007728 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007742:	4619      	mov	r1, r3
 8007744:	4b09      	ldr	r3, [pc, #36]	@ (800776c <USB_ActivateSetup+0x44>)
 8007746:	4013      	ands	r3, r2
 8007748:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800775c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	fffff800 	.word	0xfffff800

08007770 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	460b      	mov	r3, r1
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	333c      	adds	r3, #60	@ 0x3c
 8007786:	3304      	adds	r3, #4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	4a26      	ldr	r2, [pc, #152]	@ (8007828 <USB_EP0_OutStart+0xb8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d90a      	bls.n	80077aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077a4:	d101      	bne.n	80077aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e037      	b.n	800781a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b0:	461a      	mov	r2, r3
 80077b2:	2300      	movs	r3, #0
 80077b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077d8:	f043 0318 	orr.w	r3, r3, #24
 80077dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80077f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d10f      	bne.n	8007818 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007812:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007816:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	371c      	adds	r7, #28
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	4f54300a 	.word	0x4f54300a

0800782c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007844:	d901      	bls.n	800784a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e01b      	b.n	8007882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	daf2      	bge.n	8007838 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f043 0201 	orr.w	r2, r3, #1
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3301      	adds	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800786e:	d901      	bls.n	8007874 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e006      	b.n	8007882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b01      	cmp	r3, #1
 800787e:	d0f0      	beq.n	8007862 <USB_CoreReset+0x36>

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
	...

08007890 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800789c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80078a0:	f002 fd1a 	bl	800a2d8 <USBD_static_malloc>
 80078a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d109      	bne.n	80078c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	32b0      	adds	r2, #176	@ 0xb0
 80078b6:	2100      	movs	r1, #0
 80078b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80078bc:	2302      	movs	r3, #2
 80078be:	e0d4      	b.n	8007a6a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80078c0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80078c4:	2100      	movs	r1, #0
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f002 fdf2 	bl	800a4b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	32b0      	adds	r2, #176	@ 0xb0
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	32b0      	adds	r2, #176	@ 0xb0
 80078e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7c1b      	ldrb	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d138      	bne.n	800796a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078f8:	4b5e      	ldr	r3, [pc, #376]	@ (8007a74 <USBD_CDC_Init+0x1e4>)
 80078fa:	7819      	ldrb	r1, [r3, #0]
 80078fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007900:	2202      	movs	r2, #2
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f002 fbc5 	bl	800a092 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007908:	4b5a      	ldr	r3, [pc, #360]	@ (8007a74 <USBD_CDC_Init+0x1e4>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	f003 020f 	and.w	r2, r3, #15
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	3324      	adds	r3, #36	@ 0x24
 800791e:	2201      	movs	r2, #1
 8007920:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007922:	4b55      	ldr	r3, [pc, #340]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 8007924:	7819      	ldrb	r1, [r3, #0]
 8007926:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800792a:	2202      	movs	r2, #2
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f002 fbb0 	bl	800a092 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007932:	4b51      	ldr	r3, [pc, #324]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	f003 020f 	and.w	r2, r3, #15
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800794a:	2201      	movs	r2, #1
 800794c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800794e:	4b4b      	ldr	r3, [pc, #300]	@ (8007a7c <USBD_CDC_Init+0x1ec>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f003 020f 	and.w	r2, r3, #15
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	440b      	add	r3, r1
 8007962:	3326      	adds	r3, #38	@ 0x26
 8007964:	2210      	movs	r2, #16
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	e035      	b.n	80079d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800796a:	4b42      	ldr	r3, [pc, #264]	@ (8007a74 <USBD_CDC_Init+0x1e4>)
 800796c:	7819      	ldrb	r1, [r3, #0]
 800796e:	2340      	movs	r3, #64	@ 0x40
 8007970:	2202      	movs	r2, #2
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f002 fb8d 	bl	800a092 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007978:	4b3e      	ldr	r3, [pc, #248]	@ (8007a74 <USBD_CDC_Init+0x1e4>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	f003 020f 	and.w	r2, r3, #15
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	4613      	mov	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	440b      	add	r3, r1
 800798c:	3324      	adds	r3, #36	@ 0x24
 800798e:	2201      	movs	r2, #1
 8007990:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007992:	4b39      	ldr	r3, [pc, #228]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 8007994:	7819      	ldrb	r1, [r3, #0]
 8007996:	2340      	movs	r3, #64	@ 0x40
 8007998:	2202      	movs	r2, #2
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f002 fb79 	bl	800a092 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079a0:	4b35      	ldr	r3, [pc, #212]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	f003 020f 	and.w	r2, r3, #15
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	440b      	add	r3, r1
 80079b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80079b8:	2201      	movs	r2, #1
 80079ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079bc:	4b2f      	ldr	r3, [pc, #188]	@ (8007a7c <USBD_CDC_Init+0x1ec>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	f003 020f 	and.w	r2, r3, #15
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	3326      	adds	r3, #38	@ 0x26
 80079d2:	2210      	movs	r2, #16
 80079d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079d6:	4b29      	ldr	r3, [pc, #164]	@ (8007a7c <USBD_CDC_Init+0x1ec>)
 80079d8:	7819      	ldrb	r1, [r3, #0]
 80079da:	2308      	movs	r3, #8
 80079dc:	2203      	movs	r2, #3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f002 fb57 	bl	800a092 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80079e4:	4b25      	ldr	r3, [pc, #148]	@ (8007a7c <USBD_CDC_Init+0x1ec>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	3324      	adds	r3, #36	@ 0x24
 80079fa:	2201      	movs	r2, #1
 80079fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	33b0      	adds	r3, #176	@ 0xb0
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007a34:	2302      	movs	r3, #2
 8007a36:	e018      	b.n	8007a6a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	7c1b      	ldrb	r3, [r3, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a40:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 8007a42:	7819      	ldrb	r1, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f002 fc0e 	bl	800a270 <USBD_LL_PrepareReceive>
 8007a54:	e008      	b.n	8007a68 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a56:	4b08      	ldr	r3, [pc, #32]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 8007a58:	7819      	ldrb	r1, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a60:	2340      	movs	r3, #64	@ 0x40
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f002 fc04 	bl	800a270 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	24000097 	.word	0x24000097
 8007a78:	24000098 	.word	0x24000098
 8007a7c:	24000099 	.word	0x24000099

08007a80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8007b78 <USBD_CDC_DeInit+0xf8>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f002 fb23 	bl	800a0de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007a98:	4b37      	ldr	r3, [pc, #220]	@ (8007b78 <USBD_CDC_DeInit+0xf8>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f003 020f 	and.w	r2, r3, #15
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	3324      	adds	r3, #36	@ 0x24
 8007aae:	2200      	movs	r2, #0
 8007ab0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007ab2:	4b32      	ldr	r3, [pc, #200]	@ (8007b7c <USBD_CDC_DeInit+0xfc>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f002 fb10 	bl	800a0de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007abe:	4b2f      	ldr	r3, [pc, #188]	@ (8007b7c <USBD_CDC_DeInit+0xfc>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f003 020f 	and.w	r2, r3, #15
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007ada:	4b29      	ldr	r3, [pc, #164]	@ (8007b80 <USBD_CDC_DeInit+0x100>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f002 fafc 	bl	800a0de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007ae6:	4b26      	ldr	r3, [pc, #152]	@ (8007b80 <USBD_CDC_DeInit+0x100>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	f003 020f 	and.w	r2, r3, #15
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	3324      	adds	r3, #36	@ 0x24
 8007afc:	2200      	movs	r2, #0
 8007afe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007b00:	4b1f      	ldr	r3, [pc, #124]	@ (8007b80 <USBD_CDC_DeInit+0x100>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	f003 020f 	and.w	r2, r3, #15
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	3326      	adds	r3, #38	@ 0x26
 8007b16:	2200      	movs	r2, #0
 8007b18:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	32b0      	adds	r2, #176	@ 0xb0
 8007b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01f      	beq.n	8007b6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	33b0      	adds	r3, #176	@ 0xb0
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	32b0      	adds	r2, #176	@ 0xb0
 8007b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f002 fbd0 	bl	800a2f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	32b0      	adds	r2, #176	@ 0xb0
 8007b5e:	2100      	movs	r1, #0
 8007b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	24000097 	.word	0x24000097
 8007b7c:	24000098 	.word	0x24000098
 8007b80:	24000099 	.word	0x24000099

08007b84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	32b0      	adds	r2, #176	@ 0xb0
 8007b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e0bf      	b.n	8007d34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d050      	beq.n	8007c62 <USBD_CDC_Setup+0xde>
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	f040 80af 	bne.w	8007d24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	88db      	ldrh	r3, [r3, #6]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d03a      	beq.n	8007c44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	b25b      	sxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da1b      	bge.n	8007c10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	33b0      	adds	r3, #176	@ 0xb0
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007bee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	88d2      	ldrh	r2, [r2, #6]
 8007bf4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	88db      	ldrh	r3, [r3, #6]
 8007bfa:	2b07      	cmp	r3, #7
 8007bfc:	bf28      	it	cs
 8007bfe:	2307      	movcs	r3, #7
 8007c00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	89fa      	ldrh	r2, [r7, #14]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 fdbd 	bl	8009788 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007c0e:	e090      	b.n	8007d32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	785a      	ldrb	r2, [r3, #1]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	88db      	ldrh	r3, [r3, #6]
 8007c1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007c20:	d803      	bhi.n	8007c2a <USBD_CDC_Setup+0xa6>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	88db      	ldrh	r3, [r3, #6]
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	e000      	b.n	8007c2c <USBD_CDC_Setup+0xa8>
 8007c2a:	2240      	movs	r2, #64	@ 0x40
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007c32:	6939      	ldr	r1, [r7, #16]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 fdcf 	bl	80097e0 <USBD_CtlPrepareRx>
      break;
 8007c42:	e076      	b.n	8007d32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	33b0      	adds	r3, #176	@ 0xb0
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	7850      	ldrb	r0, [r2, #1]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	4798      	blx	r3
      break;
 8007c60:	e067      	b.n	8007d32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b0b      	cmp	r3, #11
 8007c68:	d851      	bhi.n	8007d0e <USBD_CDC_Setup+0x18a>
 8007c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <USBD_CDC_Setup+0xec>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007ca1 	.word	0x08007ca1
 8007c74:	08007d1d 	.word	0x08007d1d
 8007c78:	08007d0f 	.word	0x08007d0f
 8007c7c:	08007d0f 	.word	0x08007d0f
 8007c80:	08007d0f 	.word	0x08007d0f
 8007c84:	08007d0f 	.word	0x08007d0f
 8007c88:	08007d0f 	.word	0x08007d0f
 8007c8c:	08007d0f 	.word	0x08007d0f
 8007c90:	08007d0f 	.word	0x08007d0f
 8007c94:	08007d0f 	.word	0x08007d0f
 8007c98:	08007ccb 	.word	0x08007ccb
 8007c9c:	08007cf5 	.word	0x08007cf5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d107      	bne.n	8007cbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007cac:	f107 030a 	add.w	r3, r7, #10
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 fd67 	bl	8009788 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cba:	e032      	b.n	8007d22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fce5 	bl	800968e <USBD_CtlError>
            ret = USBD_FAIL;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	75fb      	strb	r3, [r7, #23]
          break;
 8007cc8:	e02b      	b.n	8007d22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d107      	bne.n	8007ce6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007cd6:	f107 030d 	add.w	r3, r7, #13
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fd52 	bl	8009788 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ce4:	e01d      	b.n	8007d22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 fcd0 	bl	800968e <USBD_CtlError>
            ret = USBD_FAIL;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8007cf2:	e016      	b.n	8007d22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d00f      	beq.n	8007d20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fcc3 	bl	800968e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d0c:	e008      	b.n	8007d20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 fcbc 	bl	800968e <USBD_CtlError>
          ret = USBD_FAIL;
 8007d16:	2303      	movs	r3, #3
 8007d18:	75fb      	strb	r3, [r7, #23]
          break;
 8007d1a:	e002      	b.n	8007d22 <USBD_CDC_Setup+0x19e>
          break;
 8007d1c:	bf00      	nop
 8007d1e:	e008      	b.n	8007d32 <USBD_CDC_Setup+0x1ae>
          break;
 8007d20:	bf00      	nop
      }
      break;
 8007d22:	e006      	b.n	8007d32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 fcb1 	bl	800968e <USBD_CtlError>
      ret = USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d30:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32b0      	adds	r2, #176	@ 0xb0
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e065      	b.n	8007e32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	32b0      	adds	r2, #176	@ 0xb0
 8007d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	f003 020f 	and.w	r2, r3, #15
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	3318      	adds	r3, #24
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d02f      	beq.n	8007df0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	f003 020f 	and.w	r2, r3, #15
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	3318      	adds	r3, #24
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	f003 010f 	and.w	r1, r3, #15
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	460b      	mov	r3, r1
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	440b      	add	r3, r1
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4403      	add	r3, r0
 8007db8:	331c      	adds	r3, #28
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d112      	bne.n	8007df0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	f003 020f 	and.w	r2, r3, #15
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	3318      	adds	r3, #24
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007de2:	78f9      	ldrb	r1, [r7, #3]
 8007de4:	2300      	movs	r3, #0
 8007de6:	2200      	movs	r2, #0
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f002 fa20 	bl	800a22e <USBD_LL_Transmit>
 8007dee:	e01f      	b.n	8007e30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	33b0      	adds	r3, #176	@ 0xb0
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d010      	beq.n	8007e30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	33b0      	adds	r3, #176	@ 0xb0
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	32b0      	adds	r2, #176	@ 0xb0
 8007e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	32b0      	adds	r2, #176	@ 0xb0
 8007e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e01a      	b.n	8007ea2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f002 fa1e 	bl	800a2b2 <USBD_LL_GetRxDataSize>
 8007e76:	4602      	mov	r2, r0
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	33b0      	adds	r3, #176	@ 0xb0
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	32b0      	adds	r2, #176	@ 0xb0
 8007ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e024      	b.n	8007f16 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	33b0      	adds	r3, #176	@ 0xb0
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d019      	beq.n	8007f14 <USBD_CDC_EP0_RxReady+0x6a>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007ee6:	2bff      	cmp	r3, #255	@ 0xff
 8007ee8:	d014      	beq.n	8007f14 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	33b0      	adds	r3, #176	@ 0xb0
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007f02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	22ff      	movs	r2, #255	@ 0xff
 8007f10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f28:	2182      	movs	r1, #130	@ 0x82
 8007f2a:	4818      	ldr	r0, [pc, #96]	@ (8007f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f2c:	f000 fd4f 	bl	80089ce <USBD_GetEpDesc>
 8007f30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f32:	2101      	movs	r1, #1
 8007f34:	4815      	ldr	r0, [pc, #84]	@ (8007f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f36:	f000 fd4a 	bl	80089ce <USBD_GetEpDesc>
 8007f3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f3c:	2181      	movs	r1, #129	@ 0x81
 8007f3e:	4813      	ldr	r0, [pc, #76]	@ (8007f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f40:	f000 fd45 	bl	80089ce <USBD_GetEpDesc>
 8007f44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2210      	movs	r2, #16
 8007f50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d006      	beq.n	8007f66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f60:	711a      	strb	r2, [r3, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d006      	beq.n	8007f7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f74:	711a      	strb	r2, [r3, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2243      	movs	r2, #67	@ 0x43
 8007f7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f80:	4b02      	ldr	r3, [pc, #8]	@ (8007f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	24000054 	.word	0x24000054

08007f90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f98:	2182      	movs	r1, #130	@ 0x82
 8007f9a:	4818      	ldr	r0, [pc, #96]	@ (8007ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f9c:	f000 fd17 	bl	80089ce <USBD_GetEpDesc>
 8007fa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4815      	ldr	r0, [pc, #84]	@ (8007ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fa6:	f000 fd12 	bl	80089ce <USBD_GetEpDesc>
 8007faa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fac:	2181      	movs	r1, #129	@ 0x81
 8007fae:	4813      	ldr	r0, [pc, #76]	@ (8007ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fb0:	f000 fd0d 	bl	80089ce <USBD_GetEpDesc>
 8007fb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d006      	beq.n	8007fd6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	711a      	strb	r2, [r3, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f042 0202 	orr.w	r2, r2, #2
 8007fd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	711a      	strb	r2, [r3, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f042 0202 	orr.w	r2, r2, #2
 8007fe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2243      	movs	r2, #67	@ 0x43
 8007fee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ff0:	4b02      	ldr	r3, [pc, #8]	@ (8007ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	24000054 	.word	0x24000054

08008000 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008008:	2182      	movs	r1, #130	@ 0x82
 800800a:	4818      	ldr	r0, [pc, #96]	@ (800806c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800800c:	f000 fcdf 	bl	80089ce <USBD_GetEpDesc>
 8008010:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008012:	2101      	movs	r1, #1
 8008014:	4815      	ldr	r0, [pc, #84]	@ (800806c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008016:	f000 fcda 	bl	80089ce <USBD_GetEpDesc>
 800801a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800801c:	2181      	movs	r1, #129	@ 0x81
 800801e:	4813      	ldr	r0, [pc, #76]	@ (800806c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008020:	f000 fcd5 	bl	80089ce <USBD_GetEpDesc>
 8008024:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2210      	movs	r2, #16
 8008030:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d006      	beq.n	8008046 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2200      	movs	r2, #0
 800803c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008040:	711a      	strb	r2, [r3, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d006      	beq.n	800805a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008054:	711a      	strb	r2, [r3, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2243      	movs	r2, #67	@ 0x43
 800805e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008060:	4b02      	ldr	r3, [pc, #8]	@ (800806c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	24000054 	.word	0x24000054

08008070 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	220a      	movs	r2, #10
 800807c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800807e:	4b03      	ldr	r3, [pc, #12]	@ (800808c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	24000010 	.word	0x24000010

08008090 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e009      	b.n	80080b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	33b0      	adds	r3, #176	@ 0xb0
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	32b0      	adds	r2, #176	@ 0xb0
 80080da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e008      	b.n	80080fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	371c      	adds	r7, #28
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	32b0      	adds	r2, #176	@ 0xb0
 800811c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008120:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008128:	2303      	movs	r3, #3
 800812a:	e004      	b.n	8008136 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	32b0      	adds	r2, #176	@ 0xb0
 8008156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008166:	2303      	movs	r3, #3
 8008168:	e025      	b.n	80081b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008170:	2b00      	cmp	r3, #0
 8008172:	d11f      	bne.n	80081b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2201      	movs	r2, #1
 8008178:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800817c:	4b10      	ldr	r3, [pc, #64]	@ (80081c0 <USBD_CDC_TransmitPacket+0x7c>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	f003 020f 	and.w	r2, r3, #15
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4403      	add	r3, r0
 8008196:	3318      	adds	r3, #24
 8008198:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800819a:	4b09      	ldr	r3, [pc, #36]	@ (80081c0 <USBD_CDC_TransmitPacket+0x7c>)
 800819c:	7819      	ldrb	r1, [r3, #0]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f002 f83f 	bl	800a22e <USBD_LL_Transmit>

    ret = USBD_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	24000097 	.word	0x24000097

080081c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	32b0      	adds	r2, #176	@ 0xb0
 80081d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32b0      	adds	r2, #176	@ 0xb0
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e018      	b.n	8008224 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7c1b      	ldrb	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081fa:	4b0c      	ldr	r3, [pc, #48]	@ (800822c <USBD_CDC_ReceivePacket+0x68>)
 80081fc:	7819      	ldrb	r1, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f002 f831 	bl	800a270 <USBD_LL_PrepareReceive>
 800820e:	e008      	b.n	8008222 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008210:	4b06      	ldr	r3, [pc, #24]	@ (800822c <USBD_CDC_ReceivePacket+0x68>)
 8008212:	7819      	ldrb	r1, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800821a:	2340      	movs	r3, #64	@ 0x40
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f002 f827 	bl	800a270 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	24000098 	.word	0x24000098

08008230 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	4613      	mov	r3, r2
 800823c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	e01f      	b.n	8008288 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	79fa      	ldrb	r2, [r7, #7]
 800827a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f001 fe9b 	bl	8009fb8 <USBD_LL_Init>
 8008282:	4603      	mov	r3, r0
 8008284:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008286:	7dfb      	ldrb	r3, [r7, #23]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e025      	b.n	80082f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	32ae      	adds	r2, #174	@ 0xae
 80082ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00f      	beq.n	80082e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	32ae      	adds	r2, #174	@ 0xae
 80082ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	f107 020e 	add.w	r2, r7, #14
 80082d8:	4610      	mov	r0, r2
 80082da:	4798      	blx	r3
 80082dc:	4602      	mov	r2, r0
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 fea9 	bl	800a05c <USBD_LL_Start>
 800830a:	4603      	mov	r3, r0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	4611      	mov	r1, r2
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	460b      	mov	r3, r1
 800836c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	78fa      	ldrb	r2, [r7, #3]
 800837c:	4611      	mov	r1, r2
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008388:	2303      	movs	r3, #3
 800838a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 f936 	bl	800961a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80083bc:	461a      	mov	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083ca:	f003 031f 	and.w	r3, r3, #31
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d01a      	beq.n	8008408 <USBD_LL_SetupStage+0x72>
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d822      	bhi.n	800841c <USBD_LL_SetupStage+0x86>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <USBD_LL_SetupStage+0x4a>
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d00a      	beq.n	80083f4 <USBD_LL_SetupStage+0x5e>
 80083de:	e01d      	b.n	800841c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fb63 	bl	8008ab4 <USBD_StdDevReq>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73fb      	strb	r3, [r7, #15]
      break;
 80083f2:	e020      	b.n	8008436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fbcb 	bl	8008b98 <USBD_StdItfReq>
 8008402:	4603      	mov	r3, r0
 8008404:	73fb      	strb	r3, [r7, #15]
      break;
 8008406:	e016      	b.n	8008436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fc2d 	bl	8008c70 <USBD_StdEPReq>
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]
      break;
 800841a:	e00c      	b.n	8008436 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008422:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008426:	b2db      	uxtb	r3, r3
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 fe76 	bl	800a11c <USBD_LL_StallEP>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]
      break;
 8008434:	bf00      	nop
  }

  return ret;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	460b      	mov	r3, r1
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d16e      	bne.n	8008536 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800845e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008466:	2b03      	cmp	r3, #3
 8008468:	f040 8098 	bne.w	800859c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	429a      	cmp	r2, r3
 8008476:	d913      	bls.n	80084a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	1ad2      	subs	r2, r2, r3
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	4293      	cmp	r3, r2
 8008490:	bf28      	it	cs
 8008492:	4613      	movcs	r3, r2
 8008494:	461a      	mov	r2, r3
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f001 f9be 	bl	800981a <USBD_CtlContinueRx>
 800849e:	e07d      	b.n	800859c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084a6:	f003 031f 	and.w	r3, r3, #31
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d014      	beq.n	80084d8 <USBD_LL_DataOutStage+0x98>
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d81d      	bhi.n	80084ee <USBD_LL_DataOutStage+0xae>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <USBD_LL_DataOutStage+0x7c>
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d003      	beq.n	80084c2 <USBD_LL_DataOutStage+0x82>
 80084ba:	e018      	b.n	80084ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	75bb      	strb	r3, [r7, #22]
            break;
 80084c0:	e018      	b.n	80084f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	4619      	mov	r1, r3
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 fa64 	bl	800899a <USBD_CoreFindIF>
 80084d2:	4603      	mov	r3, r0
 80084d4:	75bb      	strb	r3, [r7, #22]
            break;
 80084d6:	e00d      	b.n	80084f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	4619      	mov	r1, r3
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 fa66 	bl	80089b4 <USBD_CoreFindEP>
 80084e8:	4603      	mov	r3, r0
 80084ea:	75bb      	strb	r3, [r7, #22]
            break;
 80084ec:	e002      	b.n	80084f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	75bb      	strb	r3, [r7, #22]
            break;
 80084f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80084f4:	7dbb      	ldrb	r3, [r7, #22]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d119      	bne.n	800852e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b03      	cmp	r3, #3
 8008504:	d113      	bne.n	800852e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008506:	7dba      	ldrb	r2, [r7, #22]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	32ae      	adds	r2, #174	@ 0xae
 800850c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00b      	beq.n	800852e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008516:	7dba      	ldrb	r2, [r7, #22]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800851e:	7dba      	ldrb	r2, [r7, #22]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	32ae      	adds	r2, #174	@ 0xae
 8008524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f001 f984 	bl	800983c <USBD_CtlSendStatus>
 8008534:	e032      	b.n	800859c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008536:	7afb      	ldrb	r3, [r7, #11]
 8008538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800853c:	b2db      	uxtb	r3, r3
 800853e:	4619      	mov	r1, r3
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 fa37 	bl	80089b4 <USBD_CoreFindEP>
 8008546:	4603      	mov	r3, r0
 8008548:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800854a:	7dbb      	ldrb	r3, [r7, #22]
 800854c:	2bff      	cmp	r3, #255	@ 0xff
 800854e:	d025      	beq.n	800859c <USBD_LL_DataOutStage+0x15c>
 8008550:	7dbb      	ldrb	r3, [r7, #22]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d122      	bne.n	800859c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b03      	cmp	r3, #3
 8008560:	d117      	bne.n	8008592 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008562:	7dba      	ldrb	r2, [r7, #22]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	32ae      	adds	r2, #174	@ 0xae
 8008568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00f      	beq.n	8008592 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008572:	7dba      	ldrb	r2, [r7, #22]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800857a:	7dba      	ldrb	r2, [r7, #22]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	32ae      	adds	r2, #174	@ 0xae
 8008580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	7afa      	ldrb	r2, [r7, #11]
 8008588:	4611      	mov	r1, r2
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	4798      	blx	r3
 800858e:	4603      	mov	r3, r0
 8008590:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008592:	7dfb      	ldrb	r3, [r7, #23]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	e000      	b.n	800859e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b086      	sub	sp, #24
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	460b      	mov	r3, r1
 80085b0:	607a      	str	r2, [r7, #4]
 80085b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80085b4:	7afb      	ldrb	r3, [r7, #11]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d16f      	bne.n	800869a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3314      	adds	r3, #20
 80085be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d15a      	bne.n	8008680 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d914      	bls.n	8008600 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	689a      	ldr	r2, [r3, #8]
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	1ad2      	subs	r2, r2, r3
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f001 f8e6 	bl	80097be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085f2:	2300      	movs	r3, #0
 80085f4:	2200      	movs	r2, #0
 80085f6:	2100      	movs	r1, #0
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f001 fe39 	bl	800a270 <USBD_LL_PrepareReceive>
 80085fe:	e03f      	b.n	8008680 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	429a      	cmp	r2, r3
 800860a:	d11c      	bne.n	8008646 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008614:	429a      	cmp	r2, r3
 8008616:	d316      	bcc.n	8008646 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008622:	429a      	cmp	r2, r3
 8008624:	d20f      	bcs.n	8008646 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008626:	2200      	movs	r2, #0
 8008628:	2100      	movs	r1, #0
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f001 f8c7 	bl	80097be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008638:	2300      	movs	r3, #0
 800863a:	2200      	movs	r2, #0
 800863c:	2100      	movs	r1, #0
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f001 fe16 	bl	800a270 <USBD_LL_PrepareReceive>
 8008644:	e01c      	b.n	8008680 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b03      	cmp	r3, #3
 8008650:	d10f      	bne.n	8008672 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008672:	2180      	movs	r1, #128	@ 0x80
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f001 fd51 	bl	800a11c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f001 f8f1 	bl	8009862 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d03a      	beq.n	8008700 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f7ff fe42 	bl	8008314 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008698:	e032      	b.n	8008700 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	4619      	mov	r1, r3
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 f985 	bl	80089b4 <USBD_CoreFindEP>
 80086aa:	4603      	mov	r3, r0
 80086ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	2bff      	cmp	r3, #255	@ 0xff
 80086b2:	d025      	beq.n	8008700 <USBD_LL_DataInStage+0x15a>
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d122      	bne.n	8008700 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d11c      	bne.n	8008700 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80086c6:	7dfa      	ldrb	r2, [r7, #23]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	32ae      	adds	r2, #174	@ 0xae
 80086cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d014      	beq.n	8008700 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80086d6:	7dfa      	ldrb	r2, [r7, #23]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80086de:	7dfa      	ldrb	r2, [r7, #23]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	32ae      	adds	r2, #174	@ 0xae
 80086e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	7afa      	ldrb	r2, [r7, #11]
 80086ec:	4611      	mov	r1, r2
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	4798      	blx	r3
 80086f2:	4603      	mov	r3, r0
 80086f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80086f6:	7dbb      	ldrb	r3, [r7, #22]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80086fc:	7dbb      	ldrb	r3, [r7, #22]
 80086fe:	e000      	b.n	8008702 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008742:	2b00      	cmp	r3, #0
 8008744:	d014      	beq.n	8008770 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00e      	beq.n	8008770 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6852      	ldr	r2, [r2, #4]
 800875e:	b2d2      	uxtb	r2, r2
 8008760:	4611      	mov	r1, r2
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	4798      	blx	r3
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800876c:	2303      	movs	r3, #3
 800876e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008770:	2340      	movs	r3, #64	@ 0x40
 8008772:	2200      	movs	r2, #0
 8008774:	2100      	movs	r1, #0
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f001 fc8b 	bl	800a092 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2240      	movs	r2, #64	@ 0x40
 8008788:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800878c:	2340      	movs	r3, #64	@ 0x40
 800878e:	2200      	movs	r2, #0
 8008790:	2180      	movs	r1, #128	@ 0x80
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 fc7d 	bl	800a092 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2240      	movs	r2, #64	@ 0x40
 80087a2:	621a      	str	r2, [r3, #32]

  return ret;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	460b      	mov	r3, r1
 80087b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	78fa      	ldrb	r2, [r7, #3]
 80087be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b04      	cmp	r3, #4
 80087e0:	d006      	beq.n	80087f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2204      	movs	r2, #4
 80087f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b04      	cmp	r3, #4
 8008818:	d106      	bne.n	8008828 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008820:	b2da      	uxtb	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b03      	cmp	r3, #3
 8008848:	d110      	bne.n	800886c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00b      	beq.n	800886c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	32ae      	adds	r2, #174	@ 0xae
 800888c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008894:	2303      	movs	r3, #3
 8008896:	e01c      	b.n	80088d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d115      	bne.n	80088d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	32ae      	adds	r2, #174	@ 0xae
 80088ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00b      	beq.n	80088d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	32ae      	adds	r2, #174	@ 0xae
 80088c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	78fa      	ldrb	r2, [r7, #3]
 80088ca:	4611      	mov	r1, r2
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	32ae      	adds	r2, #174	@ 0xae
 80088f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e01c      	b.n	8008936 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b03      	cmp	r3, #3
 8008906:	d115      	bne.n	8008934 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	32ae      	adds	r2, #174	@ 0xae
 8008912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00b      	beq.n	8008934 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	32ae      	adds	r2, #174	@ 0xae
 8008926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	4611      	mov	r1, r2
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00e      	beq.n	8008990 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6852      	ldr	r2, [r2, #4]
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	4611      	mov	r1, r2
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	4798      	blx	r3
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800898c:	2303      	movs	r3, #3
 800898e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b086      	sub	sp, #24
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	460b      	mov	r3, r1
 80089d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	885b      	ldrh	r3, [r3, #2]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	7812      	ldrb	r2, [r2, #0]
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d91f      	bls.n	8008a34 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80089fa:	e013      	b.n	8008a24 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80089fc:	f107 030a 	add.w	r3, r7, #10
 8008a00:	4619      	mov	r1, r3
 8008a02:	6978      	ldr	r0, [r7, #20]
 8008a04:	f000 f81b 	bl	8008a3e <USBD_GetNextDesc>
 8008a08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	785b      	ldrb	r3, [r3, #1]
 8008a0e:	2b05      	cmp	r3, #5
 8008a10:	d108      	bne.n	8008a24 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	789b      	ldrb	r3, [r3, #2]
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d008      	beq.n	8008a32 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008a20:	2300      	movs	r3, #0
 8008a22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	885b      	ldrh	r3, [r3, #2]
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	897b      	ldrh	r3, [r7, #10]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d8e5      	bhi.n	80089fc <USBD_GetEpDesc+0x2e>
 8008a30:	e000      	b.n	8008a34 <USBD_GetEpDesc+0x66>
          break;
 8008a32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a34:	693b      	ldr	r3, [r7, #16]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	7812      	ldrb	r2, [r2, #0]
 8008a54:	4413      	add	r3, r2
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	461a      	mov	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4413      	add	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a68:	68fb      	ldr	r3, [r7, #12]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b087      	sub	sp, #28
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a94:	8a3b      	ldrh	r3, [r7, #16]
 8008a96:	021b      	lsls	r3, r3, #8
 8008a98:	b21a      	sxth	r2, r3
 8008a9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	b21b      	sxth	r3, r3
 8008aa2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008aa4:	89fb      	ldrh	r3, [r7, #14]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008aca:	2b40      	cmp	r3, #64	@ 0x40
 8008acc:	d005      	beq.n	8008ada <USBD_StdDevReq+0x26>
 8008ace:	2b40      	cmp	r3, #64	@ 0x40
 8008ad0:	d857      	bhi.n	8008b82 <USBD_StdDevReq+0xce>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00f      	beq.n	8008af6 <USBD_StdDevReq+0x42>
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	d153      	bne.n	8008b82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	32ae      	adds	r2, #174	@ 0xae
 8008ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	4798      	blx	r3
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]
      break;
 8008af4:	e04a      	b.n	8008b8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	785b      	ldrb	r3, [r3, #1]
 8008afa:	2b09      	cmp	r3, #9
 8008afc:	d83b      	bhi.n	8008b76 <USBD_StdDevReq+0xc2>
 8008afe:	a201      	add	r2, pc, #4	@ (adr r2, 8008b04 <USBD_StdDevReq+0x50>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b59 	.word	0x08008b59
 8008b08:	08008b6d 	.word	0x08008b6d
 8008b0c:	08008b77 	.word	0x08008b77
 8008b10:	08008b63 	.word	0x08008b63
 8008b14:	08008b77 	.word	0x08008b77
 8008b18:	08008b37 	.word	0x08008b37
 8008b1c:	08008b2d 	.word	0x08008b2d
 8008b20:	08008b77 	.word	0x08008b77
 8008b24:	08008b4f 	.word	0x08008b4f
 8008b28:	08008b41 	.word	0x08008b41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa3c 	bl	8008fac <USBD_GetDescriptor>
          break;
 8008b34:	e024      	b.n	8008b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fbcb 	bl	80092d4 <USBD_SetAddress>
          break;
 8008b3e:	e01f      	b.n	8008b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fc0a 	bl	800935c <USBD_SetConfig>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8008b4c:	e018      	b.n	8008b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fcad 	bl	80094b0 <USBD_GetConfig>
          break;
 8008b56:	e013      	b.n	8008b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fcde 	bl	800951c <USBD_GetStatus>
          break;
 8008b60:	e00e      	b.n	8008b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fd0d 	bl	8009584 <USBD_SetFeature>
          break;
 8008b6a:	e009      	b.n	8008b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fd31 	bl	80095d6 <USBD_ClrFeature>
          break;
 8008b74:	e004      	b.n	8008b80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fd88 	bl	800968e <USBD_CtlError>
          break;
 8008b7e:	bf00      	nop
      }
      break;
 8008b80:	e004      	b.n	8008b8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fd82 	bl	800968e <USBD_CtlError>
      break;
 8008b8a:	bf00      	nop
  }

  return ret;
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop

08008b98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bae:	2b40      	cmp	r3, #64	@ 0x40
 8008bb0:	d005      	beq.n	8008bbe <USBD_StdItfReq+0x26>
 8008bb2:	2b40      	cmp	r3, #64	@ 0x40
 8008bb4:	d852      	bhi.n	8008c5c <USBD_StdItfReq+0xc4>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <USBD_StdItfReq+0x26>
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	d14e      	bne.n	8008c5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d840      	bhi.n	8008c4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	889b      	ldrh	r3, [r3, #4]
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d836      	bhi.n	8008c44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	889b      	ldrh	r3, [r3, #4]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7ff fedb 	bl	800899a <USBD_CoreFindIF>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2bff      	cmp	r3, #255	@ 0xff
 8008bec:	d01d      	beq.n	8008c2a <USBD_StdItfReq+0x92>
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d11a      	bne.n	8008c2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008bf4:	7bba      	ldrb	r2, [r7, #14]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	32ae      	adds	r2, #174	@ 0xae
 8008bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00f      	beq.n	8008c24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c04:	7bba      	ldrb	r2, [r7, #14]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c0c:	7bba      	ldrb	r2, [r7, #14]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	32ae      	adds	r2, #174	@ 0xae
 8008c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	4798      	blx	r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c22:	e004      	b.n	8008c2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008c24:	2303      	movs	r3, #3
 8008c26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c28:	e001      	b.n	8008c2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	88db      	ldrh	r3, [r3, #6]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d110      	bne.n	8008c58 <USBD_StdItfReq+0xc0>
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10d      	bne.n	8008c58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fdfd 	bl	800983c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c42:	e009      	b.n	8008c58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fd21 	bl	800968e <USBD_CtlError>
          break;
 8008c4c:	e004      	b.n	8008c58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fd1c 	bl	800968e <USBD_CtlError>
          break;
 8008c56:	e000      	b.n	8008c5a <USBD_StdItfReq+0xc2>
          break;
 8008c58:	bf00      	nop
      }
      break;
 8008c5a:	e004      	b.n	8008c66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fd15 	bl	800968e <USBD_CtlError>
      break;
 8008c64:	bf00      	nop
  }

  return ret;
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	889b      	ldrh	r3, [r3, #4]
 8008c82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c8c:	2b40      	cmp	r3, #64	@ 0x40
 8008c8e:	d007      	beq.n	8008ca0 <USBD_StdEPReq+0x30>
 8008c90:	2b40      	cmp	r3, #64	@ 0x40
 8008c92:	f200 817f 	bhi.w	8008f94 <USBD_StdEPReq+0x324>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d02a      	beq.n	8008cf0 <USBD_StdEPReq+0x80>
 8008c9a:	2b20      	cmp	r3, #32
 8008c9c:	f040 817a 	bne.w	8008f94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff fe85 	bl	80089b4 <USBD_CoreFindEP>
 8008caa:	4603      	mov	r3, r0
 8008cac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cae:	7b7b      	ldrb	r3, [r7, #13]
 8008cb0:	2bff      	cmp	r3, #255	@ 0xff
 8008cb2:	f000 8174 	beq.w	8008f9e <USBD_StdEPReq+0x32e>
 8008cb6:	7b7b      	ldrb	r3, [r7, #13]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f040 8170 	bne.w	8008f9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008cbe:	7b7a      	ldrb	r2, [r7, #13]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008cc6:	7b7a      	ldrb	r2, [r7, #13]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	32ae      	adds	r2, #174	@ 0xae
 8008ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 8163 	beq.w	8008f9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008cd8:	7b7a      	ldrb	r2, [r7, #13]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	32ae      	adds	r2, #174	@ 0xae
 8008cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	4798      	blx	r3
 8008cea:	4603      	mov	r3, r0
 8008cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008cee:	e156      	b.n	8008f9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d008      	beq.n	8008d0a <USBD_StdEPReq+0x9a>
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	f300 8145 	bgt.w	8008f88 <USBD_StdEPReq+0x318>
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 809b 	beq.w	8008e3a <USBD_StdEPReq+0x1ca>
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d03c      	beq.n	8008d82 <USBD_StdEPReq+0x112>
 8008d08:	e13e      	b.n	8008f88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d002      	beq.n	8008d1c <USBD_StdEPReq+0xac>
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d016      	beq.n	8008d48 <USBD_StdEPReq+0xd8>
 8008d1a:	e02c      	b.n	8008d76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00d      	beq.n	8008d3e <USBD_StdEPReq+0xce>
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b80      	cmp	r3, #128	@ 0x80
 8008d26:	d00a      	beq.n	8008d3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 f9f5 	bl	800a11c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d32:	2180      	movs	r1, #128	@ 0x80
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 f9f1 	bl	800a11c <USBD_LL_StallEP>
 8008d3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d3c:	e020      	b.n	8008d80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fca4 	bl	800968e <USBD_CtlError>
              break;
 8008d46:	e01b      	b.n	8008d80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	885b      	ldrh	r3, [r3, #2]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10e      	bne.n	8008d6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00b      	beq.n	8008d6e <USBD_StdEPReq+0xfe>
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	2b80      	cmp	r3, #128	@ 0x80
 8008d5a:	d008      	beq.n	8008d6e <USBD_StdEPReq+0xfe>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	88db      	ldrh	r3, [r3, #6]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d104      	bne.n	8008d6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 f9d7 	bl	800a11c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fd64 	bl	800983c <USBD_CtlSendStatus>

              break;
 8008d74:	e004      	b.n	8008d80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fc88 	bl	800968e <USBD_CtlError>
              break;
 8008d7e:	bf00      	nop
          }
          break;
 8008d80:	e107      	b.n	8008f92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d002      	beq.n	8008d94 <USBD_StdEPReq+0x124>
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d016      	beq.n	8008dc0 <USBD_StdEPReq+0x150>
 8008d92:	e04b      	b.n	8008e2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00d      	beq.n	8008db6 <USBD_StdEPReq+0x146>
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b80      	cmp	r3, #128	@ 0x80
 8008d9e:	d00a      	beq.n	8008db6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 f9b9 	bl	800a11c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008daa:	2180      	movs	r1, #128	@ 0x80
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 f9b5 	bl	800a11c <USBD_LL_StallEP>
 8008db2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008db4:	e040      	b.n	8008e38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fc68 	bl	800968e <USBD_CtlError>
              break;
 8008dbe:	e03b      	b.n	8008e38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	885b      	ldrh	r3, [r3, #2]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d136      	bne.n	8008e36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d004      	beq.n	8008ddc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f001 f9bf 	bl	800a15a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fd2d 	bl	800983c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff fde4 	bl	80089b4 <USBD_CoreFindEP>
 8008dec:	4603      	mov	r3, r0
 8008dee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008df0:	7b7b      	ldrb	r3, [r7, #13]
 8008df2:	2bff      	cmp	r3, #255	@ 0xff
 8008df4:	d01f      	beq.n	8008e36 <USBD_StdEPReq+0x1c6>
 8008df6:	7b7b      	ldrb	r3, [r7, #13]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d11c      	bne.n	8008e36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008dfc:	7b7a      	ldrb	r2, [r7, #13]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e04:	7b7a      	ldrb	r2, [r7, #13]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	32ae      	adds	r2, #174	@ 0xae
 8008e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d010      	beq.n	8008e36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e14:	7b7a      	ldrb	r2, [r7, #13]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	32ae      	adds	r2, #174	@ 0xae
 8008e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	4798      	blx	r3
 8008e26:	4603      	mov	r3, r0
 8008e28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e2a:	e004      	b.n	8008e36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fc2d 	bl	800968e <USBD_CtlError>
              break;
 8008e34:	e000      	b.n	8008e38 <USBD_StdEPReq+0x1c8>
              break;
 8008e36:	bf00      	nop
          }
          break;
 8008e38:	e0ab      	b.n	8008f92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d002      	beq.n	8008e4c <USBD_StdEPReq+0x1dc>
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d032      	beq.n	8008eb0 <USBD_StdEPReq+0x240>
 8008e4a:	e097      	b.n	8008f7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d007      	beq.n	8008e62 <USBD_StdEPReq+0x1f2>
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	2b80      	cmp	r3, #128	@ 0x80
 8008e56:	d004      	beq.n	8008e62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fc17 	bl	800968e <USBD_CtlError>
                break;
 8008e60:	e091      	b.n	8008f86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	da0b      	bge.n	8008e82 <USBD_StdEPReq+0x212>
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	3310      	adds	r3, #16
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	3304      	adds	r3, #4
 8008e80:	e00b      	b.n	8008e9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	4413      	add	r3, r2
 8008e98:	3304      	adds	r3, #4
 8008e9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fc6d 	bl	8009788 <USBD_CtlSendData>
              break;
 8008eae:	e06a      	b.n	8008f86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	da11      	bge.n	8008edc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	f003 020f 	and.w	r2, r3, #15
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	440b      	add	r3, r1
 8008eca:	3324      	adds	r3, #36	@ 0x24
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d117      	bne.n	8008f02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fbda 	bl	800968e <USBD_CtlError>
                  break;
 8008eda:	e054      	b.n	8008f86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	f003 020f 	and.w	r2, r3, #15
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	440b      	add	r3, r1
 8008eee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d104      	bne.n	8008f02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fbc7 	bl	800968e <USBD_CtlError>
                  break;
 8008f00:	e041      	b.n	8008f86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	da0b      	bge.n	8008f22 <USBD_StdEPReq+0x2b2>
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f10:	4613      	mov	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	3310      	adds	r3, #16
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3304      	adds	r3, #4
 8008f20:	e00b      	b.n	8008f3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	4413      	add	r3, r2
 8008f38:	3304      	adds	r3, #4
 8008f3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <USBD_StdEPReq+0x2d8>
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	2b80      	cmp	r3, #128	@ 0x80
 8008f46:	d103      	bne.n	8008f50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	e00e      	b.n	8008f6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f50:	7bbb      	ldrb	r3, [r7, #14]
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f001 f91f 	bl	800a198 <USBD_LL_IsStallEP>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2201      	movs	r2, #1
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	e002      	b.n	8008f6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2202      	movs	r2, #2
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fc07 	bl	8009788 <USBD_CtlSendData>
              break;
 8008f7a:	e004      	b.n	8008f86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fb85 	bl	800968e <USBD_CtlError>
              break;
 8008f84:	bf00      	nop
          }
          break;
 8008f86:	e004      	b.n	8008f92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fb7f 	bl	800968e <USBD_CtlError>
          break;
 8008f90:	bf00      	nop
      }
      break;
 8008f92:	e005      	b.n	8008fa0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fb79 	bl	800968e <USBD_CtlError>
      break;
 8008f9c:	e000      	b.n	8008fa0 <USBD_StdEPReq+0x330>
      break;
 8008f9e:	bf00      	nop
  }

  return ret;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	885b      	ldrh	r3, [r3, #2]
 8008fc6:	0a1b      	lsrs	r3, r3, #8
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	2b0e      	cmp	r3, #14
 8008fce:	f200 8152 	bhi.w	8009276 <USBD_GetDescriptor+0x2ca>
 8008fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd8 <USBD_GetDescriptor+0x2c>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08009049 	.word	0x08009049
 8008fdc:	08009061 	.word	0x08009061
 8008fe0:	080090a1 	.word	0x080090a1
 8008fe4:	08009277 	.word	0x08009277
 8008fe8:	08009277 	.word	0x08009277
 8008fec:	08009217 	.word	0x08009217
 8008ff0:	08009243 	.word	0x08009243
 8008ff4:	08009277 	.word	0x08009277
 8008ff8:	08009277 	.word	0x08009277
 8008ffc:	08009277 	.word	0x08009277
 8009000:	08009277 	.word	0x08009277
 8009004:	08009277 	.word	0x08009277
 8009008:	08009277 	.word	0x08009277
 800900c:	08009277 	.word	0x08009277
 8009010:	08009015 	.word	0x08009015
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	7c12      	ldrb	r2, [r2, #16]
 800902c:	f107 0108 	add.w	r1, r7, #8
 8009030:	4610      	mov	r0, r2
 8009032:	4798      	blx	r3
 8009034:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009036:	e126      	b.n	8009286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fb27 	bl	800968e <USBD_CtlError>
        err++;
 8009040:	7afb      	ldrb	r3, [r7, #11]
 8009042:	3301      	adds	r3, #1
 8009044:	72fb      	strb	r3, [r7, #11]
      break;
 8009046:	e11e      	b.n	8009286 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	7c12      	ldrb	r2, [r2, #16]
 8009054:	f107 0108 	add.w	r1, r7, #8
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
 800905c:	60f8      	str	r0, [r7, #12]
      break;
 800905e:	e112      	b.n	8009286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	7c1b      	ldrb	r3, [r3, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10d      	bne.n	8009084 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800906e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009070:	f107 0208 	add.w	r2, r7, #8
 8009074:	4610      	mov	r0, r2
 8009076:	4798      	blx	r3
 8009078:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	3301      	adds	r3, #1
 800907e:	2202      	movs	r2, #2
 8009080:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009082:	e100      	b.n	8009286 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800908a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908c:	f107 0208 	add.w	r2, r7, #8
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3301      	adds	r3, #1
 800909a:	2202      	movs	r2, #2
 800909c:	701a      	strb	r2, [r3, #0]
      break;
 800909e:	e0f2      	b.n	8009286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	885b      	ldrh	r3, [r3, #2]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b05      	cmp	r3, #5
 80090a8:	f200 80ac 	bhi.w	8009204 <USBD_GetDescriptor+0x258>
 80090ac:	a201      	add	r2, pc, #4	@ (adr r2, 80090b4 <USBD_GetDescriptor+0x108>)
 80090ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b2:	bf00      	nop
 80090b4:	080090cd 	.word	0x080090cd
 80090b8:	08009101 	.word	0x08009101
 80090bc:	08009135 	.word	0x08009135
 80090c0:	08009169 	.word	0x08009169
 80090c4:	0800919d 	.word	0x0800919d
 80090c8:	080091d1 	.word	0x080091d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00b      	beq.n	80090f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	7c12      	ldrb	r2, [r2, #16]
 80090e4:	f107 0108 	add.w	r1, r7, #8
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
 80090ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ee:	e091      	b.n	8009214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 facb 	bl	800968e <USBD_CtlError>
            err++;
 80090f8:	7afb      	ldrb	r3, [r7, #11]
 80090fa:	3301      	adds	r3, #1
 80090fc:	72fb      	strb	r3, [r7, #11]
          break;
 80090fe:	e089      	b.n	8009214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00b      	beq.n	8009124 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	7c12      	ldrb	r2, [r2, #16]
 8009118:	f107 0108 	add.w	r1, r7, #8
 800911c:	4610      	mov	r0, r2
 800911e:	4798      	blx	r3
 8009120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009122:	e077      	b.n	8009214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fab1 	bl	800968e <USBD_CtlError>
            err++;
 800912c:	7afb      	ldrb	r3, [r7, #11]
 800912e:	3301      	adds	r3, #1
 8009130:	72fb      	strb	r3, [r7, #11]
          break;
 8009132:	e06f      	b.n	8009214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00b      	beq.n	8009158 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	7c12      	ldrb	r2, [r2, #16]
 800914c:	f107 0108 	add.w	r1, r7, #8
 8009150:	4610      	mov	r0, r2
 8009152:	4798      	blx	r3
 8009154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009156:	e05d      	b.n	8009214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fa97 	bl	800968e <USBD_CtlError>
            err++;
 8009160:	7afb      	ldrb	r3, [r7, #11]
 8009162:	3301      	adds	r3, #1
 8009164:	72fb      	strb	r3, [r7, #11]
          break;
 8009166:	e055      	b.n	8009214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	7c12      	ldrb	r2, [r2, #16]
 8009180:	f107 0108 	add.w	r1, r7, #8
 8009184:	4610      	mov	r0, r2
 8009186:	4798      	blx	r3
 8009188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800918a:	e043      	b.n	8009214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 fa7d 	bl	800968e <USBD_CtlError>
            err++;
 8009194:	7afb      	ldrb	r3, [r7, #11]
 8009196:	3301      	adds	r3, #1
 8009198:	72fb      	strb	r3, [r7, #11]
          break;
 800919a:	e03b      	b.n	8009214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00b      	beq.n	80091c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	7c12      	ldrb	r2, [r2, #16]
 80091b4:	f107 0108 	add.w	r1, r7, #8
 80091b8:	4610      	mov	r0, r2
 80091ba:	4798      	blx	r3
 80091bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091be:	e029      	b.n	8009214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fa63 	bl	800968e <USBD_CtlError>
            err++;
 80091c8:	7afb      	ldrb	r3, [r7, #11]
 80091ca:	3301      	adds	r3, #1
 80091cc:	72fb      	strb	r3, [r7, #11]
          break;
 80091ce:	e021      	b.n	8009214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00b      	beq.n	80091f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	7c12      	ldrb	r2, [r2, #16]
 80091e8:	f107 0108 	add.w	r1, r7, #8
 80091ec:	4610      	mov	r0, r2
 80091ee:	4798      	blx	r3
 80091f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091f2:	e00f      	b.n	8009214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fa49 	bl	800968e <USBD_CtlError>
            err++;
 80091fc:	7afb      	ldrb	r3, [r7, #11]
 80091fe:	3301      	adds	r3, #1
 8009200:	72fb      	strb	r3, [r7, #11]
          break;
 8009202:	e007      	b.n	8009214 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fa41 	bl	800968e <USBD_CtlError>
          err++;
 800920c:	7afb      	ldrb	r3, [r7, #11]
 800920e:	3301      	adds	r3, #1
 8009210:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009212:	bf00      	nop
      }
      break;
 8009214:	e037      	b.n	8009286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	7c1b      	ldrb	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d109      	bne.n	8009232 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009226:	f107 0208 	add.w	r2, r7, #8
 800922a:	4610      	mov	r0, r2
 800922c:	4798      	blx	r3
 800922e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009230:	e029      	b.n	8009286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fa2a 	bl	800968e <USBD_CtlError>
        err++;
 800923a:	7afb      	ldrb	r3, [r7, #11]
 800923c:	3301      	adds	r3, #1
 800923e:	72fb      	strb	r3, [r7, #11]
      break;
 8009240:	e021      	b.n	8009286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	7c1b      	ldrb	r3, [r3, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10d      	bne.n	8009266 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009252:	f107 0208 	add.w	r2, r7, #8
 8009256:	4610      	mov	r0, r2
 8009258:	4798      	blx	r3
 800925a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3301      	adds	r3, #1
 8009260:	2207      	movs	r2, #7
 8009262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009264:	e00f      	b.n	8009286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fa10 	bl	800968e <USBD_CtlError>
        err++;
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	3301      	adds	r3, #1
 8009272:	72fb      	strb	r3, [r7, #11]
      break;
 8009274:	e007      	b.n	8009286 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fa08 	bl	800968e <USBD_CtlError>
      err++;
 800927e:	7afb      	ldrb	r3, [r7, #11]
 8009280:	3301      	adds	r3, #1
 8009282:	72fb      	strb	r3, [r7, #11]
      break;
 8009284:	bf00      	nop
  }

  if (err != 0U)
 8009286:	7afb      	ldrb	r3, [r7, #11]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d11e      	bne.n	80092ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	88db      	ldrh	r3, [r3, #6]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d016      	beq.n	80092c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009294:	893b      	ldrh	r3, [r7, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00e      	beq.n	80092b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	88da      	ldrh	r2, [r3, #6]
 800929e:	893b      	ldrh	r3, [r7, #8]
 80092a0:	4293      	cmp	r3, r2
 80092a2:	bf28      	it	cs
 80092a4:	4613      	movcs	r3, r2
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80092aa:	893b      	ldrh	r3, [r7, #8]
 80092ac:	461a      	mov	r2, r3
 80092ae:	68f9      	ldr	r1, [r7, #12]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fa69 	bl	8009788 <USBD_CtlSendData>
 80092b6:	e009      	b.n	80092cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f9e7 	bl	800968e <USBD_CtlError>
 80092c0:	e004      	b.n	80092cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 faba 	bl	800983c <USBD_CtlSendStatus>
 80092c8:	e000      	b.n	80092cc <USBD_GetDescriptor+0x320>
    return;
 80092ca:	bf00      	nop
  }
}
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop

080092d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	889b      	ldrh	r3, [r3, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d131      	bne.n	800934a <USBD_SetAddress+0x76>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	88db      	ldrh	r3, [r3, #6]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d12d      	bne.n	800934a <USBD_SetAddress+0x76>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	885b      	ldrh	r3, [r3, #2]
 80092f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80092f4:	d829      	bhi.n	800934a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	885b      	ldrh	r3, [r3, #2]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009300:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b03      	cmp	r3, #3
 800930c:	d104      	bne.n	8009318 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f9bc 	bl	800968e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009316:	e01d      	b.n	8009354 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	7bfa      	ldrb	r2, [r7, #15]
 800931c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 ff63 	bl	800a1f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fa86 	bl	800983c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d004      	beq.n	8009340 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2202      	movs	r2, #2
 800933a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933e:	e009      	b.n	8009354 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009348:	e004      	b.n	8009354 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f99e 	bl	800968e <USBD_CtlError>
  }
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	885b      	ldrh	r3, [r3, #2]
 800936e:	b2da      	uxtb	r2, r3
 8009370:	4b4e      	ldr	r3, [pc, #312]	@ (80094ac <USBD_SetConfig+0x150>)
 8009372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009374:	4b4d      	ldr	r3, [pc, #308]	@ (80094ac <USBD_SetConfig+0x150>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d905      	bls.n	8009388 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f985 	bl	800968e <USBD_CtlError>
    return USBD_FAIL;
 8009384:	2303      	movs	r3, #3
 8009386:	e08c      	b.n	80094a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b02      	cmp	r3, #2
 8009392:	d002      	beq.n	800939a <USBD_SetConfig+0x3e>
 8009394:	2b03      	cmp	r3, #3
 8009396:	d029      	beq.n	80093ec <USBD_SetConfig+0x90>
 8009398:	e075      	b.n	8009486 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800939a:	4b44      	ldr	r3, [pc, #272]	@ (80094ac <USBD_SetConfig+0x150>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d020      	beq.n	80093e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80093a2:	4b42      	ldr	r3, [pc, #264]	@ (80094ac <USBD_SetConfig+0x150>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093ac:	4b3f      	ldr	r3, [pc, #252]	@ (80094ac <USBD_SetConfig+0x150>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7fe ffb9 	bl	800832a <USBD_SetClassConfig>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d008      	beq.n	80093d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f962 	bl	800968e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2202      	movs	r2, #2
 80093ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093d2:	e065      	b.n	80094a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fa31 	bl	800983c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2203      	movs	r2, #3
 80093de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80093e2:	e05d      	b.n	80094a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fa29 	bl	800983c <USBD_CtlSendStatus>
      break;
 80093ea:	e059      	b.n	80094a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80093ec:	4b2f      	ldr	r3, [pc, #188]	@ (80094ac <USBD_SetConfig+0x150>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d112      	bne.n	800941a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80093fc:	4b2b      	ldr	r3, [pc, #172]	@ (80094ac <USBD_SetConfig+0x150>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009406:	4b29      	ldr	r3, [pc, #164]	@ (80094ac <USBD_SetConfig+0x150>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7fe ffa8 	bl	8008362 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fa12 	bl	800983c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009418:	e042      	b.n	80094a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800941a:	4b24      	ldr	r3, [pc, #144]	@ (80094ac <USBD_SetConfig+0x150>)
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	d02a      	beq.n	800947e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7fe ff96 	bl	8008362 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009436:	4b1d      	ldr	r3, [pc, #116]	@ (80094ac <USBD_SetConfig+0x150>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009440:	4b1a      	ldr	r3, [pc, #104]	@ (80094ac <USBD_SetConfig+0x150>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7fe ff6f 	bl	800832a <USBD_SetClassConfig>
 800944c:	4603      	mov	r3, r0
 800944e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00f      	beq.n	8009476 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f918 	bl	800968e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7fe ff7b 	bl	8008362 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009474:	e014      	b.n	80094a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f9e0 	bl	800983c <USBD_CtlSendStatus>
      break;
 800947c:	e010      	b.n	80094a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f9dc 	bl	800983c <USBD_CtlSendStatus>
      break;
 8009484:	e00c      	b.n	80094a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f900 	bl	800968e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800948e:	4b07      	ldr	r3, [pc, #28]	@ (80094ac <USBD_SetConfig+0x150>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7fe ff64 	bl	8008362 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800949a:	2303      	movs	r3, #3
 800949c:	73fb      	strb	r3, [r7, #15]
      break;
 800949e:	bf00      	nop
  }

  return ret;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	240002b4 	.word	0x240002b4

080094b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	88db      	ldrh	r3, [r3, #6]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d004      	beq.n	80094cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f8e2 	bl	800968e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094ca:	e023      	b.n	8009514 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	dc02      	bgt.n	80094de <USBD_GetConfig+0x2e>
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dc03      	bgt.n	80094e4 <USBD_GetConfig+0x34>
 80094dc:	e015      	b.n	800950a <USBD_GetConfig+0x5a>
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d00b      	beq.n	80094fa <USBD_GetConfig+0x4a>
 80094e2:	e012      	b.n	800950a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	3308      	adds	r3, #8
 80094ee:	2201      	movs	r2, #1
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f948 	bl	8009788 <USBD_CtlSendData>
        break;
 80094f8:	e00c      	b.n	8009514 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3304      	adds	r3, #4
 80094fe:	2201      	movs	r2, #1
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f940 	bl	8009788 <USBD_CtlSendData>
        break;
 8009508:	e004      	b.n	8009514 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f8be 	bl	800968e <USBD_CtlError>
        break;
 8009512:	bf00      	nop
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800952c:	b2db      	uxtb	r3, r3
 800952e:	3b01      	subs	r3, #1
 8009530:	2b02      	cmp	r3, #2
 8009532:	d81e      	bhi.n	8009572 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	88db      	ldrh	r3, [r3, #6]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d004      	beq.n	8009546 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f8a5 	bl	800968e <USBD_CtlError>
        break;
 8009544:	e01a      	b.n	800957c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	f043 0202 	orr.w	r2, r3, #2
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	330c      	adds	r3, #12
 8009566:	2202      	movs	r2, #2
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f90c 	bl	8009788 <USBD_CtlSendData>
      break;
 8009570:	e004      	b.n	800957c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f88a 	bl	800968e <USBD_CtlError>
      break;
 800957a:	bf00      	nop
  }
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	885b      	ldrh	r3, [r3, #2]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d107      	bne.n	80095a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f94c 	bl	800983c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80095a4:	e013      	b.n	80095ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	885b      	ldrh	r3, [r3, #2]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d10b      	bne.n	80095c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	889b      	ldrh	r3, [r3, #4]
 80095b2:	0a1b      	lsrs	r3, r3, #8
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f93c 	bl	800983c <USBD_CtlSendStatus>
}
 80095c4:	e003      	b.n	80095ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f860 	bl	800968e <USBD_CtlError>
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	3b01      	subs	r3, #1
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d80b      	bhi.n	8009606 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	885b      	ldrh	r3, [r3, #2]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d10c      	bne.n	8009610 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f91c 	bl	800983c <USBD_CtlSendStatus>
      }
      break;
 8009604:	e004      	b.n	8009610 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f840 	bl	800968e <USBD_CtlError>
      break;
 800960e:	e000      	b.n	8009612 <USBD_ClrFeature+0x3c>
      break;
 8009610:	bf00      	nop
  }
}
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	781a      	ldrb	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3301      	adds	r3, #1
 8009634:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	781a      	ldrb	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3301      	adds	r3, #1
 8009642:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff fa16 	bl	8008a76 <SWAPBYTE>
 800964a:	4603      	mov	r3, r0
 800964c:	461a      	mov	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3301      	adds	r3, #1
 8009656:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3301      	adds	r3, #1
 800965c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7ff fa09 	bl	8008a76 <SWAPBYTE>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	3301      	adds	r3, #1
 8009670:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3301      	adds	r3, #1
 8009676:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f7ff f9fc 	bl	8008a76 <SWAPBYTE>
 800967e:	4603      	mov	r3, r0
 8009680:	461a      	mov	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	80da      	strh	r2, [r3, #6]
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009698:	2180      	movs	r1, #128	@ 0x80
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fd3e 	bl	800a11c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80096a0:	2100      	movs	r1, #0
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fd3a 	bl	800a11c <USBD_LL_StallEP>
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d042      	beq.n	800974c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80096ca:	6938      	ldr	r0, [r7, #16]
 80096cc:	f000 f842 	bl	8009754 <USBD_GetLen>
 80096d0:	4603      	mov	r3, r0
 80096d2:	3301      	adds	r3, #1
 80096d4:	005b      	lsls	r3, r3, #1
 80096d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096da:	d808      	bhi.n	80096ee <USBD_GetString+0x3e>
 80096dc:	6938      	ldr	r0, [r7, #16]
 80096de:	f000 f839 	bl	8009754 <USBD_GetLen>
 80096e2:	4603      	mov	r3, r0
 80096e4:	3301      	adds	r3, #1
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	e001      	b.n	80096f2 <USBD_GetString+0x42>
 80096ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	4413      	add	r3, r2
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	7812      	ldrb	r2, [r2, #0]
 8009700:	701a      	strb	r2, [r3, #0]
  idx++;
 8009702:	7dfb      	ldrb	r3, [r7, #23]
 8009704:	3301      	adds	r3, #1
 8009706:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	4413      	add	r3, r2
 800970e:	2203      	movs	r2, #3
 8009710:	701a      	strb	r2, [r3, #0]
  idx++;
 8009712:	7dfb      	ldrb	r3, [r7, #23]
 8009714:	3301      	adds	r3, #1
 8009716:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009718:	e013      	b.n	8009742 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800971a:	7dfb      	ldrb	r3, [r7, #23]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	4413      	add	r3, r2
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	7812      	ldrb	r2, [r2, #0]
 8009724:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	3301      	adds	r3, #1
 800972a:	613b      	str	r3, [r7, #16]
    idx++;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	3301      	adds	r3, #1
 8009730:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	4413      	add	r3, r2
 8009738:	2200      	movs	r2, #0
 800973a:	701a      	strb	r2, [r3, #0]
    idx++;
 800973c:	7dfb      	ldrb	r3, [r7, #23]
 800973e:	3301      	adds	r3, #1
 8009740:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e7      	bne.n	800971a <USBD_GetString+0x6a>
 800974a:	e000      	b.n	800974e <USBD_GetString+0x9e>
    return;
 800974c:	bf00      	nop
  }
}
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009764:	e005      	b.n	8009772 <USBD_GetLen+0x1e>
  {
    len++;
 8009766:	7bfb      	ldrb	r3, [r7, #15]
 8009768:	3301      	adds	r3, #1
 800976a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	3301      	adds	r3, #1
 8009770:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1f5      	bne.n	8009766 <USBD_GetLen+0x12>
  }

  return len;
 800977a:	7bfb      	ldrb	r3, [r7, #15]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2202      	movs	r2, #2
 8009798:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	2100      	movs	r1, #0
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fd3d 	bl	800a22e <USBD_LL_Transmit>

  return USBD_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	60f8      	str	r0, [r7, #12]
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	2100      	movs	r1, #0
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 fd2c 	bl	800a22e <USBD_LL_Transmit>

  return USBD_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2203      	movs	r2, #3
 80097f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	2100      	movs	r1, #0
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 fd30 	bl	800a270 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	2100      	movs	r1, #0
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 fd1f 	bl	800a270 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2204      	movs	r2, #4
 8009848:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800984c:	2300      	movs	r3, #0
 800984e:	2200      	movs	r2, #0
 8009850:	2100      	movs	r1, #0
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fceb 	bl	800a22e <USBD_LL_Transmit>

  return USBD_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2205      	movs	r2, #5
 800986e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009872:	2300      	movs	r3, #0
 8009874:	2200      	movs	r2, #0
 8009876:	2100      	movs	r1, #0
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fcf9 	bl	800a270 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800988c:	2201      	movs	r2, #1
 800988e:	4913      	ldr	r1, [pc, #76]	@ (80098dc <MX_USB_DEVICE_Init+0x54>)
 8009890:	4813      	ldr	r0, [pc, #76]	@ (80098e0 <MX_USB_DEVICE_Init+0x58>)
 8009892:	f7fe fccd 	bl	8008230 <USBD_Init>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800989c:	f7f7 f83c 	bl	8000918 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80098a0:	4910      	ldr	r1, [pc, #64]	@ (80098e4 <MX_USB_DEVICE_Init+0x5c>)
 80098a2:	480f      	ldr	r0, [pc, #60]	@ (80098e0 <MX_USB_DEVICE_Init+0x58>)
 80098a4:	f7fe fcf4 	bl	8008290 <USBD_RegisterClass>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098ae:	f7f7 f833 	bl	8000918 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80098b2:	490d      	ldr	r1, [pc, #52]	@ (80098e8 <MX_USB_DEVICE_Init+0x60>)
 80098b4:	480a      	ldr	r0, [pc, #40]	@ (80098e0 <MX_USB_DEVICE_Init+0x58>)
 80098b6:	f7fe fbeb 	bl	8008090 <USBD_CDC_RegisterInterface>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80098c0:	f7f7 f82a 	bl	8000918 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80098c4:	4806      	ldr	r0, [pc, #24]	@ (80098e0 <MX_USB_DEVICE_Init+0x58>)
 80098c6:	f7fe fd19 	bl	80082fc <USBD_Start>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098d0:	f7f7 f822 	bl	8000918 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80098d4:	f7fa f9c4 	bl	8003c60 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098d8:	bf00      	nop
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	240000b0 	.word	0x240000b0
 80098e0:	240002b8 	.word	0x240002b8
 80098e4:	2400001c 	.word	0x2400001c
 80098e8:	2400009c 	.word	0x2400009c

080098ec <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80098f0:	2200      	movs	r2, #0
 80098f2:	4905      	ldr	r1, [pc, #20]	@ (8009908 <CDC_Init_HS+0x1c>)
 80098f4:	4805      	ldr	r0, [pc, #20]	@ (800990c <CDC_Init_HS+0x20>)
 80098f6:	f7fe fbe5 	bl	80080c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80098fa:	4905      	ldr	r1, [pc, #20]	@ (8009910 <CDC_Init_HS+0x24>)
 80098fc:	4803      	ldr	r0, [pc, #12]	@ (800990c <CDC_Init_HS+0x20>)
 80098fe:	f7fe fc03 	bl	8008108 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009902:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009904:	4618      	mov	r0, r3
 8009906:	bd80      	pop	{r7, pc}
 8009908:	240005d4 	.word	0x240005d4
 800990c:	240002b8 	.word	0x240002b8
 8009910:	24000594 	.word	0x24000594

08009914 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009914:	b480      	push	{r7}
 8009916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009918:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800991a:	4618      	mov	r0, r3
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	4603      	mov	r3, r0
 800992c:	6039      	str	r1, [r7, #0]
 800992e:	71fb      	strb	r3, [r7, #7]
 8009930:	4613      	mov	r3, r2
 8009932:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	2b23      	cmp	r3, #35	@ 0x23
 8009938:	d84a      	bhi.n	80099d0 <CDC_Control_HS+0xac>
 800993a:	a201      	add	r2, pc, #4	@ (adr r2, 8009940 <CDC_Control_HS+0x1c>)
 800993c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009940:	080099d1 	.word	0x080099d1
 8009944:	080099d1 	.word	0x080099d1
 8009948:	080099d1 	.word	0x080099d1
 800994c:	080099d1 	.word	0x080099d1
 8009950:	080099d1 	.word	0x080099d1
 8009954:	080099d1 	.word	0x080099d1
 8009958:	080099d1 	.word	0x080099d1
 800995c:	080099d1 	.word	0x080099d1
 8009960:	080099d1 	.word	0x080099d1
 8009964:	080099d1 	.word	0x080099d1
 8009968:	080099d1 	.word	0x080099d1
 800996c:	080099d1 	.word	0x080099d1
 8009970:	080099d1 	.word	0x080099d1
 8009974:	080099d1 	.word	0x080099d1
 8009978:	080099d1 	.word	0x080099d1
 800997c:	080099d1 	.word	0x080099d1
 8009980:	080099d1 	.word	0x080099d1
 8009984:	080099d1 	.word	0x080099d1
 8009988:	080099d1 	.word	0x080099d1
 800998c:	080099d1 	.word	0x080099d1
 8009990:	080099d1 	.word	0x080099d1
 8009994:	080099d1 	.word	0x080099d1
 8009998:	080099d1 	.word	0x080099d1
 800999c:	080099d1 	.word	0x080099d1
 80099a0:	080099d1 	.word	0x080099d1
 80099a4:	080099d1 	.word	0x080099d1
 80099a8:	080099d1 	.word	0x080099d1
 80099ac:	080099d1 	.word	0x080099d1
 80099b0:	080099d1 	.word	0x080099d1
 80099b4:	080099d1 	.word	0x080099d1
 80099b8:	080099d1 	.word	0x080099d1
 80099bc:	080099d1 	.word	0x080099d1
 80099c0:	080099d1 	.word	0x080099d1
 80099c4:	080099d1 	.word	0x080099d1
 80099c8:	080099d1 	.word	0x080099d1
 80099cc:	080099d1 	.word	0x080099d1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099d0:	bf00      	nop
  }

  return (USBD_OK);
 80099d2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	480f      	ldr	r0, [pc, #60]	@ (8009a2c <CDC_Receive_HS+0x4c>)
 80099ee:	f7fe fb8b 	bl	8008108 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80099f2:	480e      	ldr	r0, [pc, #56]	@ (8009a2c <CDC_Receive_HS+0x4c>)
 80099f4:	f7fe fbe6 	bl	80081c4 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	73fb      	strb	r3, [r7, #15]
  memset(buffer, '\0', APP_RX_DATA_SIZE);
 80099fe:	2240      	movs	r2, #64	@ 0x40
 8009a00:	2100      	movs	r1, #0
 8009a02:	480b      	ldr	r0, [pc, #44]	@ (8009a30 <CDC_Receive_HS+0x50>)
 8009a04:	f000 fd54 	bl	800a4b0 <memset>
  memcpy(buffer, Buf, len);
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	6879      	ldr	r1, [r7, #4]
 8009a0e:	4808      	ldr	r0, [pc, #32]	@ (8009a30 <CDC_Receive_HS+0x50>)
 8009a10:	f000 fd82 	bl	800a518 <memcpy>
  memset(Buf, '\0', len);
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	461a      	mov	r2, r3
 8009a18:	2100      	movs	r1, #0
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fd48 	bl	800a4b0 <memset>
  return (USBD_OK);
 8009a20:	2300      	movs	r3, #0
//  DataReceived = true;
  /* USER CODE END 11 */
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	240002b8 	.word	0x240002b8
 8009a30:	2400026c 	.word	0x2400026c

08009a34 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8009a44:	4b0d      	ldr	r3, [pc, #52]	@ (8009a7c <CDC_Transmit_HS+0x48>)
 8009a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e00b      	b.n	8009a72 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8009a5a:	887b      	ldrh	r3, [r7, #2]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	4806      	ldr	r0, [pc, #24]	@ (8009a7c <CDC_Transmit_HS+0x48>)
 8009a62:	f7fe fb2f 	bl	80080c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8009a66:	4805      	ldr	r0, [pc, #20]	@ (8009a7c <CDC_Transmit_HS+0x48>)
 8009a68:	f7fe fb6c 	bl	8008144 <USBD_CDC_TransmitPacket>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	240002b8 	.word	0x240002b8

08009a80 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
	...

08009aa4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	6039      	str	r1, [r7, #0]
 8009aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2212      	movs	r2, #18
 8009ab4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009ab6:	4b03      	ldr	r3, [pc, #12]	@ (8009ac4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	240000d0 	.word	0x240000d0

08009ac8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	6039      	str	r1, [r7, #0]
 8009ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	2204      	movs	r2, #4
 8009ad8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009ada:	4b03      	ldr	r3, [pc, #12]	@ (8009ae8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	240000e4 	.word	0x240000e4

08009aec <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	6039      	str	r1, [r7, #0]
 8009af6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d105      	bne.n	8009b0a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	4907      	ldr	r1, [pc, #28]	@ (8009b20 <USBD_HS_ProductStrDescriptor+0x34>)
 8009b02:	4808      	ldr	r0, [pc, #32]	@ (8009b24 <USBD_HS_ProductStrDescriptor+0x38>)
 8009b04:	f7ff fdd4 	bl	80096b0 <USBD_GetString>
 8009b08:	e004      	b.n	8009b14 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	4904      	ldr	r1, [pc, #16]	@ (8009b20 <USBD_HS_ProductStrDescriptor+0x34>)
 8009b0e:	4805      	ldr	r0, [pc, #20]	@ (8009b24 <USBD_HS_ProductStrDescriptor+0x38>)
 8009b10:	f7ff fdce 	bl	80096b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b14:	4b02      	ldr	r3, [pc, #8]	@ (8009b20 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	24000614 	.word	0x24000614
 8009b24:	0800ae20 	.word	0x0800ae20

08009b28 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	6039      	str	r1, [r7, #0]
 8009b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	4904      	ldr	r1, [pc, #16]	@ (8009b48 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009b38:	4804      	ldr	r0, [pc, #16]	@ (8009b4c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009b3a:	f7ff fdb9 	bl	80096b0 <USBD_GetString>
  return USBD_StrDesc;
 8009b3e:	4b02      	ldr	r3, [pc, #8]	@ (8009b48 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	24000614 	.word	0x24000614
 8009b4c:	0800ae34 	.word	0x0800ae34

08009b50 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	6039      	str	r1, [r7, #0]
 8009b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	221a      	movs	r2, #26
 8009b60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b62:	f000 f843 	bl	8009bec <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009b66:	4b02      	ldr	r3, [pc, #8]	@ (8009b70 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	240000e8 	.word	0x240000e8

08009b74 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	6039      	str	r1, [r7, #0]
 8009b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b80:	79fb      	ldrb	r3, [r7, #7]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d105      	bne.n	8009b92 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	4907      	ldr	r1, [pc, #28]	@ (8009ba8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009b8a:	4808      	ldr	r0, [pc, #32]	@ (8009bac <USBD_HS_ConfigStrDescriptor+0x38>)
 8009b8c:	f7ff fd90 	bl	80096b0 <USBD_GetString>
 8009b90:	e004      	b.n	8009b9c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	4904      	ldr	r1, [pc, #16]	@ (8009ba8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009b96:	4805      	ldr	r0, [pc, #20]	@ (8009bac <USBD_HS_ConfigStrDescriptor+0x38>)
 8009b98:	f7ff fd8a 	bl	80096b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b9c:	4b02      	ldr	r3, [pc, #8]	@ (8009ba8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	24000614 	.word	0x24000614
 8009bac:	0800ae48 	.word	0x0800ae48

08009bb0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	6039      	str	r1, [r7, #0]
 8009bba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d105      	bne.n	8009bce <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	4907      	ldr	r1, [pc, #28]	@ (8009be4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009bc6:	4808      	ldr	r0, [pc, #32]	@ (8009be8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009bc8:	f7ff fd72 	bl	80096b0 <USBD_GetString>
 8009bcc:	e004      	b.n	8009bd8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	4904      	ldr	r1, [pc, #16]	@ (8009be4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009bd2:	4805      	ldr	r0, [pc, #20]	@ (8009be8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009bd4:	f7ff fd6c 	bl	80096b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bd8:	4b02      	ldr	r3, [pc, #8]	@ (8009be4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	24000614 	.word	0x24000614
 8009be8:	0800ae54 	.word	0x0800ae54

08009bec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8009c30 <Get_SerialNum+0x44>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8009c34 <Get_SerialNum+0x48>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8009c38 <Get_SerialNum+0x4c>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4413      	add	r3, r2
 8009c0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d009      	beq.n	8009c26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c12:	2208      	movs	r2, #8
 8009c14:	4909      	ldr	r1, [pc, #36]	@ (8009c3c <Get_SerialNum+0x50>)
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 f814 	bl	8009c44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	4908      	ldr	r1, [pc, #32]	@ (8009c40 <Get_SerialNum+0x54>)
 8009c20:	68b8      	ldr	r0, [r7, #8]
 8009c22:	f000 f80f 	bl	8009c44 <IntToUnicode>
  }
}
 8009c26:	bf00      	nop
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	08fff800 	.word	0x08fff800
 8009c34:	08fff804 	.word	0x08fff804
 8009c38:	08fff808 	.word	0x08fff808
 8009c3c:	240000ea 	.word	0x240000ea
 8009c40:	240000fa 	.word	0x240000fa

08009c44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c56:	2300      	movs	r3, #0
 8009c58:	75fb      	strb	r3, [r7, #23]
 8009c5a:	e027      	b.n	8009cac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	0f1b      	lsrs	r3, r3, #28
 8009c60:	2b09      	cmp	r3, #9
 8009c62:	d80b      	bhi.n	8009c7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	0f1b      	lsrs	r3, r3, #28
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	4619      	mov	r1, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	440b      	add	r3, r1
 8009c74:	3230      	adds	r2, #48	@ 0x30
 8009c76:	b2d2      	uxtb	r2, r2
 8009c78:	701a      	strb	r2, [r3, #0]
 8009c7a:	e00a      	b.n	8009c92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	0f1b      	lsrs	r3, r3, #28
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	4619      	mov	r1, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	440b      	add	r3, r1
 8009c8c:	3237      	adds	r2, #55	@ 0x37
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	011b      	lsls	r3, r3, #4
 8009c96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	75fb      	strb	r3, [r7, #23]
 8009cac:	7dfa      	ldrb	r2, [r7, #23]
 8009cae:	79fb      	ldrb	r3, [r7, #7]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d3d3      	bcc.n	8009c5c <IntToUnicode+0x18>
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
	...

08009cc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b0ba      	sub	sp, #232	@ 0xe8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ccc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	601a      	str	r2, [r3, #0]
 8009cd4:	605a      	str	r2, [r3, #4]
 8009cd6:	609a      	str	r2, [r3, #8]
 8009cd8:	60da      	str	r2, [r3, #12]
 8009cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009cdc:	f107 0310 	add.w	r3, r7, #16
 8009ce0:	22c0      	movs	r2, #192	@ 0xc0
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 fbe3 	bl	800a4b0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a36      	ldr	r2, [pc, #216]	@ (8009dc8 <HAL_PCD_MspInit+0x104>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d164      	bne.n	8009dbe <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009cf4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009cf8:	f04f 0300 	mov.w	r3, #0
 8009cfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009d00:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8009d04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d08:	f107 0310 	add.w	r3, r7, #16
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fa ff49 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8009d18:	f7f6 fdfe 	bl	8000918 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8009d1c:	f7f9 ffa0 	bl	8003c60 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d20:	4b2a      	ldr	r3, [pc, #168]	@ (8009dcc <HAL_PCD_MspInit+0x108>)
 8009d22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8009d26:	4a29      	ldr	r2, [pc, #164]	@ (8009dcc <HAL_PCD_MspInit+0x108>)
 8009d28:	f043 0301 	orr.w	r3, r3, #1
 8009d2c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8009d30:	4b26      	ldr	r3, [pc, #152]	@ (8009dcc <HAL_PCD_MspInit+0x108>)
 8009d32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA10     ------> USB_OTG_HS_ID
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d46:	2302      	movs	r3, #2
 8009d48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d52:	2300      	movs	r3, #0
 8009d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8009d58:	230a      	movs	r3, #10
 8009d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8009d62:	4619      	mov	r1, r3
 8009d64:	481a      	ldr	r0, [pc, #104]	@ (8009dd0 <HAL_PCD_MspInit+0x10c>)
 8009d66:	f7f8 fa9f 	bl	80022a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d6a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d72:	2302      	movs	r3, #2
 8009d74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4811      	ldr	r0, [pc, #68]	@ (8009dd0 <HAL_PCD_MspInit+0x10c>)
 8009d8c:	f7f8 fa8c 	bl	80022a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009d90:	4b0e      	ldr	r3, [pc, #56]	@ (8009dcc <HAL_PCD_MspInit+0x108>)
 8009d92:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8009d96:	4a0d      	ldr	r2, [pc, #52]	@ (8009dcc <HAL_PCD_MspInit+0x108>)
 8009d98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009d9c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8009da0:	4b0a      	ldr	r3, [pc, #40]	@ (8009dcc <HAL_PCD_MspInit+0x108>)
 8009da2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8009da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009daa:	60bb      	str	r3, [r7, #8]
 8009dac:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009dae:	2200      	movs	r2, #0
 8009db0:	2100      	movs	r1, #0
 8009db2:	204d      	movs	r0, #77	@ 0x4d
 8009db4:	f7f7 f8f3 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009db8:	204d      	movs	r0, #77	@ 0x4d
 8009dba:	f7f7 f90a 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009dbe:	bf00      	nop
 8009dc0:	37e8      	adds	r7, #232	@ 0xe8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	40040000 	.word	0x40040000
 8009dcc:	58024400 	.word	0x58024400
 8009dd0:	58020000 	.word	0x58020000

08009dd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f7fe fad3 	bl	8008396 <USBD_LL_SetupStage>
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009e0a:	78fa      	ldrb	r2, [r7, #3]
 8009e0c:	6879      	ldr	r1, [r7, #4]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	00db      	lsls	r3, r3, #3
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	440b      	add	r3, r1
 8009e18:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	78fb      	ldrb	r3, [r7, #3]
 8009e20:	4619      	mov	r1, r3
 8009e22:	f7fe fb0d 	bl	8008440 <USBD_LL_DataOutStage>
}
 8009e26:	bf00      	nop
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b082      	sub	sp, #8
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009e40:	78fa      	ldrb	r2, [r7, #3]
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4613      	mov	r3, r2
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3320      	adds	r3, #32
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	78fb      	ldrb	r3, [r7, #3]
 8009e54:	4619      	mov	r1, r3
 8009e56:	f7fe fba6 	bl	80085a6 <USBD_LL_DataInStage>
}
 8009e5a:	bf00      	nop
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fe fce0 	bl	8008836 <USBD_LL_SOF>
}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e86:	2301      	movs	r3, #1
 8009e88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	79db      	ldrb	r3, [r3, #7]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d102      	bne.n	8009e98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]
 8009e96:	e008      	b.n	8009eaa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	79db      	ldrb	r3, [r3, #7]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d102      	bne.n	8009ea6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	73fb      	strb	r3, [r7, #15]
 8009ea4:	e001      	b.n	8009eaa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ea6:	f7f6 fd37 	bl	8000918 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009eb0:	7bfa      	ldrb	r2, [r7, #15]
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fe fc7a 	bl	80087ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe fc22 	bl	800870a <USBD_LL_Reset>
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fe fc75 	bl	80087ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6812      	ldr	r2, [r2, #0]
 8009ef2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009ef6:	f043 0301 	orr.w	r3, r3, #1
 8009efa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	7adb      	ldrb	r3, [r3, #11]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d005      	beq.n	8009f10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f04:	4b04      	ldr	r3, [pc, #16]	@ (8009f18 <HAL_PCD_SuspendCallback+0x48>)
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	4a03      	ldr	r2, [pc, #12]	@ (8009f18 <HAL_PCD_SuspendCallback+0x48>)
 8009f0a:	f043 0306 	orr.w	r3, r3, #6
 8009f0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	e000ed00 	.word	0xe000ed00

08009f1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fc6b 	bl	8008806 <USBD_LL_Resume>
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f4a:	78fa      	ldrb	r2, [r7, #3]
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fcc3 	bl	80088da <USBD_LL_IsoOUTIncomplete>
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f6e:	78fa      	ldrb	r2, [r7, #3]
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fc7f 	bl	8008876 <USBD_LL_IsoINIncomplete>
}
 8009f78:	bf00      	nop
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe fcd5 	bl	800893e <USBD_LL_DevConnected>
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fcd2 	bl	8008954 <USBD_LL_DevDisconnected>
}
 8009fb0:	bf00      	nop
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d140      	bne.n	800a04a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009fc8:	4a22      	ldr	r2, [pc, #136]	@ (800a054 <USBD_LL_Init+0x9c>)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a20      	ldr	r2, [pc, #128]	@ (800a054 <USBD_LL_Init+0x9c>)
 8009fd4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009fd8:	4b1e      	ldr	r3, [pc, #120]	@ (800a054 <USBD_LL_Init+0x9c>)
 8009fda:	4a1f      	ldr	r2, [pc, #124]	@ (800a058 <USBD_LL_Init+0xa0>)
 8009fdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8009fde:	4b1d      	ldr	r3, [pc, #116]	@ (800a054 <USBD_LL_Init+0x9c>)
 8009fe0:	2209      	movs	r2, #9
 8009fe2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8009fe4:	4b1b      	ldr	r3, [pc, #108]	@ (800a054 <USBD_LL_Init+0x9c>)
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009fea:	4b1a      	ldr	r3, [pc, #104]	@ (800a054 <USBD_LL_Init+0x9c>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009ff0:	4b18      	ldr	r3, [pc, #96]	@ (800a054 <USBD_LL_Init+0x9c>)
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009ff6:	4b17      	ldr	r3, [pc, #92]	@ (800a054 <USBD_LL_Init+0x9c>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009ffc:	4b15      	ldr	r3, [pc, #84]	@ (800a054 <USBD_LL_Init+0x9c>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a002:	4b14      	ldr	r3, [pc, #80]	@ (800a054 <USBD_LL_Init+0x9c>)
 800a004:	2200      	movs	r2, #0
 800a006:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a008:	4b12      	ldr	r3, [pc, #72]	@ (800a054 <USBD_LL_Init+0x9c>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a00e:	4b11      	ldr	r3, [pc, #68]	@ (800a054 <USBD_LL_Init+0x9c>)
 800a010:	2200      	movs	r2, #0
 800a012:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a014:	4b0f      	ldr	r3, [pc, #60]	@ (800a054 <USBD_LL_Init+0x9c>)
 800a016:	2200      	movs	r2, #0
 800a018:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a01a:	480e      	ldr	r0, [pc, #56]	@ (800a054 <USBD_LL_Init+0x9c>)
 800a01c:	f7f8 fb27 	bl	800266e <HAL_PCD_Init>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a026:	f7f6 fc77 	bl	8000918 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a02a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a02e:	4809      	ldr	r0, [pc, #36]	@ (800a054 <USBD_LL_Init+0x9c>)
 800a030:	f7f9 fd7b 	bl	8003b2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a034:	2280      	movs	r2, #128	@ 0x80
 800a036:	2100      	movs	r1, #0
 800a038:	4806      	ldr	r0, [pc, #24]	@ (800a054 <USBD_LL_Init+0x9c>)
 800a03a:	f7f9 fd2f 	bl	8003a9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a03e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800a042:	2101      	movs	r1, #1
 800a044:	4803      	ldr	r0, [pc, #12]	@ (800a054 <USBD_LL_Init+0x9c>)
 800a046:	f7f9 fd29 	bl	8003a9c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	24000814 	.word	0x24000814
 800a058:	40040000 	.word	0x40040000

0800a05c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a072:	4618      	mov	r0, r3
 800a074:	f7f8 fc07 	bl	8002886 <HAL_PCD_Start>
 800a078:	4603      	mov	r3, r0
 800a07a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 f942 	bl	800a308 <USBD_Get_USB_Status>
 800a084:	4603      	mov	r3, r0
 800a086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a088:	7bbb      	ldrb	r3, [r7, #14]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	4608      	mov	r0, r1
 800a09c:	4611      	mov	r1, r2
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	70fb      	strb	r3, [r7, #3]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	70bb      	strb	r3, [r7, #2]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a0ba:	78bb      	ldrb	r3, [r7, #2]
 800a0bc:	883a      	ldrh	r2, [r7, #0]
 800a0be:	78f9      	ldrb	r1, [r7, #3]
 800a0c0:	f7f9 f908 	bl	80032d4 <HAL_PCD_EP_Open>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 f91c 	bl	800a308 <USBD_Get_USB_Status>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0f8:	78fa      	ldrb	r2, [r7, #3]
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7f9 f951 	bl	80033a4 <HAL_PCD_EP_Close>
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a106:	7bfb      	ldrb	r3, [r7, #15]
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 f8fd 	bl	800a308 <USBD_Get_USB_Status>
 800a10e:	4603      	mov	r3, r0
 800a110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a112:	7bbb      	ldrb	r3, [r7, #14]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a136:	78fa      	ldrb	r2, [r7, #3]
 800a138:	4611      	mov	r1, r2
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7f9 fa09 	bl	8003552 <HAL_PCD_EP_SetStall>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	4618      	mov	r0, r3
 800a148:	f000 f8de 	bl	800a308 <USBD_Get_USB_Status>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a150:	7bbb      	ldrb	r3, [r7, #14]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	460b      	mov	r3, r1
 800a164:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a174:	78fa      	ldrb	r2, [r7, #3]
 800a176:	4611      	mov	r1, r2
 800a178:	4618      	mov	r0, r3
 800a17a:	f7f9 fa4d 	bl	8003618 <HAL_PCD_EP_ClrStall>
 800a17e:	4603      	mov	r3, r0
 800a180:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a182:	7bfb      	ldrb	r3, [r7, #15]
 800a184:	4618      	mov	r0, r3
 800a186:	f000 f8bf 	bl	800a308 <USBD_Get_USB_Status>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	da0b      	bge.n	800a1cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1b4:	78fb      	ldrb	r3, [r7, #3]
 800a1b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1ba:	68f9      	ldr	r1, [r7, #12]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	440b      	add	r3, r1
 800a1c6:	3316      	adds	r3, #22
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	e00b      	b.n	800a1e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1d2:	68f9      	ldr	r1, [r7, #12]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	4413      	add	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	440b      	add	r3, r1
 800a1de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a1e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a20a:	78fa      	ldrb	r2, [r7, #3]
 800a20c:	4611      	mov	r1, r2
 800a20e:	4618      	mov	r0, r3
 800a210:	f7f9 f83c 	bl	800328c <HAL_PCD_SetAddress>
 800a214:	4603      	mov	r3, r0
 800a216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 f874 	bl	800a308 <USBD_Get_USB_Status>
 800a220:	4603      	mov	r3, r0
 800a222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a224:	7bbb      	ldrb	r3, [r7, #14]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b086      	sub	sp, #24
 800a232:	af00      	add	r7, sp, #0
 800a234:	60f8      	str	r0, [r7, #12]
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	603b      	str	r3, [r7, #0]
 800a23a:	460b      	mov	r3, r1
 800a23c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a24c:	7af9      	ldrb	r1, [r7, #11]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	f7f9 f944 	bl	80034de <HAL_PCD_EP_Transmit>
 800a256:	4603      	mov	r3, r0
 800a258:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a25a:	7dfb      	ldrb	r3, [r7, #23]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f000 f853 	bl	800a308 <USBD_Get_USB_Status>
 800a262:	4603      	mov	r3, r0
 800a264:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a266:	7dbb      	ldrb	r3, [r7, #22]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3718      	adds	r7, #24
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	607a      	str	r2, [r7, #4]
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	460b      	mov	r3, r1
 800a27e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a28e:	7af9      	ldrb	r1, [r7, #11]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	f7f9 f8d0 	bl	8003438 <HAL_PCD_EP_Receive>
 800a298:	4603      	mov	r3, r0
 800a29a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a29c:	7dfb      	ldrb	r3, [r7, #23]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f832 	bl	800a308 <USBD_Get_USB_Status>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2c4:	78fa      	ldrb	r2, [r7, #3]
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7f9 f8f0 	bl	80034ae <HAL_PCD_EP_GetRxCount>
 800a2ce:	4603      	mov	r3, r0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a2e0:	4b03      	ldr	r3, [pc, #12]	@ (800a2f0 <USBD_static_malloc+0x18>)
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	24000cf8 	.word	0x24000cf8

0800a2f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a316:	79fb      	ldrb	r3, [r7, #7]
 800a318:	2b03      	cmp	r3, #3
 800a31a:	d817      	bhi.n	800a34c <USBD_Get_USB_Status+0x44>
 800a31c:	a201      	add	r2, pc, #4	@ (adr r2, 800a324 <USBD_Get_USB_Status+0x1c>)
 800a31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a322:	bf00      	nop
 800a324:	0800a335 	.word	0x0800a335
 800a328:	0800a33b 	.word	0x0800a33b
 800a32c:	0800a341 	.word	0x0800a341
 800a330:	0800a347 	.word	0x0800a347
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	73fb      	strb	r3, [r7, #15]
    break;
 800a338:	e00b      	b.n	800a352 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a33a:	2303      	movs	r3, #3
 800a33c:	73fb      	strb	r3, [r7, #15]
    break;
 800a33e:	e008      	b.n	800a352 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a340:	2301      	movs	r3, #1
 800a342:	73fb      	strb	r3, [r7, #15]
    break;
 800a344:	e005      	b.n	800a352 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a346:	2303      	movs	r3, #3
 800a348:	73fb      	strb	r3, [r7, #15]
    break;
 800a34a:	e002      	b.n	800a352 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	73fb      	strb	r3, [r7, #15]
    break;
 800a350:	bf00      	nop
  }
  return usb_status;
 800a352:	7bfb      	ldrb	r3, [r7, #15]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <atoi>:
 800a360:	220a      	movs	r2, #10
 800a362:	2100      	movs	r1, #0
 800a364:	f000 b87a 	b.w	800a45c <strtol>

0800a368 <_strtol_l.constprop.0>:
 800a368:	2b24      	cmp	r3, #36	@ 0x24
 800a36a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a36e:	4686      	mov	lr, r0
 800a370:	4690      	mov	r8, r2
 800a372:	d801      	bhi.n	800a378 <_strtol_l.constprop.0+0x10>
 800a374:	2b01      	cmp	r3, #1
 800a376:	d106      	bne.n	800a386 <_strtol_l.constprop.0+0x1e>
 800a378:	f000 f8a2 	bl	800a4c0 <__errno>
 800a37c:	2316      	movs	r3, #22
 800a37e:	6003      	str	r3, [r0, #0]
 800a380:	2000      	movs	r0, #0
 800a382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a386:	4834      	ldr	r0, [pc, #208]	@ (800a458 <_strtol_l.constprop.0+0xf0>)
 800a388:	460d      	mov	r5, r1
 800a38a:	462a      	mov	r2, r5
 800a38c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a390:	5d06      	ldrb	r6, [r0, r4]
 800a392:	f016 0608 	ands.w	r6, r6, #8
 800a396:	d1f8      	bne.n	800a38a <_strtol_l.constprop.0+0x22>
 800a398:	2c2d      	cmp	r4, #45	@ 0x2d
 800a39a:	d12d      	bne.n	800a3f8 <_strtol_l.constprop.0+0x90>
 800a39c:	782c      	ldrb	r4, [r5, #0]
 800a39e:	2601      	movs	r6, #1
 800a3a0:	1c95      	adds	r5, r2, #2
 800a3a2:	f033 0210 	bics.w	r2, r3, #16
 800a3a6:	d109      	bne.n	800a3bc <_strtol_l.constprop.0+0x54>
 800a3a8:	2c30      	cmp	r4, #48	@ 0x30
 800a3aa:	d12a      	bne.n	800a402 <_strtol_l.constprop.0+0x9a>
 800a3ac:	782a      	ldrb	r2, [r5, #0]
 800a3ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a3b2:	2a58      	cmp	r2, #88	@ 0x58
 800a3b4:	d125      	bne.n	800a402 <_strtol_l.constprop.0+0x9a>
 800a3b6:	786c      	ldrb	r4, [r5, #1]
 800a3b8:	2310      	movs	r3, #16
 800a3ba:	3502      	adds	r5, #2
 800a3bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a3c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	fbbc f9f3 	udiv	r9, ip, r3
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	fb03 ca19 	mls	sl, r3, r9, ip
 800a3d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a3d4:	2f09      	cmp	r7, #9
 800a3d6:	d81b      	bhi.n	800a410 <_strtol_l.constprop.0+0xa8>
 800a3d8:	463c      	mov	r4, r7
 800a3da:	42a3      	cmp	r3, r4
 800a3dc:	dd27      	ble.n	800a42e <_strtol_l.constprop.0+0xc6>
 800a3de:	1c57      	adds	r7, r2, #1
 800a3e0:	d007      	beq.n	800a3f2 <_strtol_l.constprop.0+0x8a>
 800a3e2:	4581      	cmp	r9, r0
 800a3e4:	d320      	bcc.n	800a428 <_strtol_l.constprop.0+0xc0>
 800a3e6:	d101      	bne.n	800a3ec <_strtol_l.constprop.0+0x84>
 800a3e8:	45a2      	cmp	sl, r4
 800a3ea:	db1d      	blt.n	800a428 <_strtol_l.constprop.0+0xc0>
 800a3ec:	fb00 4003 	mla	r0, r0, r3, r4
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3f6:	e7eb      	b.n	800a3d0 <_strtol_l.constprop.0+0x68>
 800a3f8:	2c2b      	cmp	r4, #43	@ 0x2b
 800a3fa:	bf04      	itt	eq
 800a3fc:	782c      	ldrbeq	r4, [r5, #0]
 800a3fe:	1c95      	addeq	r5, r2, #2
 800a400:	e7cf      	b.n	800a3a2 <_strtol_l.constprop.0+0x3a>
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1da      	bne.n	800a3bc <_strtol_l.constprop.0+0x54>
 800a406:	2c30      	cmp	r4, #48	@ 0x30
 800a408:	bf0c      	ite	eq
 800a40a:	2308      	moveq	r3, #8
 800a40c:	230a      	movne	r3, #10
 800a40e:	e7d5      	b.n	800a3bc <_strtol_l.constprop.0+0x54>
 800a410:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a414:	2f19      	cmp	r7, #25
 800a416:	d801      	bhi.n	800a41c <_strtol_l.constprop.0+0xb4>
 800a418:	3c37      	subs	r4, #55	@ 0x37
 800a41a:	e7de      	b.n	800a3da <_strtol_l.constprop.0+0x72>
 800a41c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a420:	2f19      	cmp	r7, #25
 800a422:	d804      	bhi.n	800a42e <_strtol_l.constprop.0+0xc6>
 800a424:	3c57      	subs	r4, #87	@ 0x57
 800a426:	e7d8      	b.n	800a3da <_strtol_l.constprop.0+0x72>
 800a428:	f04f 32ff 	mov.w	r2, #4294967295
 800a42c:	e7e1      	b.n	800a3f2 <_strtol_l.constprop.0+0x8a>
 800a42e:	1c53      	adds	r3, r2, #1
 800a430:	d108      	bne.n	800a444 <_strtol_l.constprop.0+0xdc>
 800a432:	2322      	movs	r3, #34	@ 0x22
 800a434:	f8ce 3000 	str.w	r3, [lr]
 800a438:	4660      	mov	r0, ip
 800a43a:	f1b8 0f00 	cmp.w	r8, #0
 800a43e:	d0a0      	beq.n	800a382 <_strtol_l.constprop.0+0x1a>
 800a440:	1e69      	subs	r1, r5, #1
 800a442:	e006      	b.n	800a452 <_strtol_l.constprop.0+0xea>
 800a444:	b106      	cbz	r6, 800a448 <_strtol_l.constprop.0+0xe0>
 800a446:	4240      	negs	r0, r0
 800a448:	f1b8 0f00 	cmp.w	r8, #0
 800a44c:	d099      	beq.n	800a382 <_strtol_l.constprop.0+0x1a>
 800a44e:	2a00      	cmp	r2, #0
 800a450:	d1f6      	bne.n	800a440 <_strtol_l.constprop.0+0xd8>
 800a452:	f8c8 1000 	str.w	r1, [r8]
 800a456:	e794      	b.n	800a382 <_strtol_l.constprop.0+0x1a>
 800a458:	0800ae85 	.word	0x0800ae85

0800a45c <strtol>:
 800a45c:	4613      	mov	r3, r2
 800a45e:	460a      	mov	r2, r1
 800a460:	4601      	mov	r1, r0
 800a462:	4802      	ldr	r0, [pc, #8]	@ (800a46c <strtol+0x10>)
 800a464:	6800      	ldr	r0, [r0, #0]
 800a466:	f7ff bf7f 	b.w	800a368 <_strtol_l.constprop.0>
 800a46a:	bf00      	nop
 800a46c:	24000104 	.word	0x24000104

0800a470 <siprintf>:
 800a470:	b40e      	push	{r1, r2, r3}
 800a472:	b500      	push	{lr}
 800a474:	b09c      	sub	sp, #112	@ 0x70
 800a476:	ab1d      	add	r3, sp, #116	@ 0x74
 800a478:	9002      	str	r0, [sp, #8]
 800a47a:	9006      	str	r0, [sp, #24]
 800a47c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a480:	4809      	ldr	r0, [pc, #36]	@ (800a4a8 <siprintf+0x38>)
 800a482:	9107      	str	r1, [sp, #28]
 800a484:	9104      	str	r1, [sp, #16]
 800a486:	4909      	ldr	r1, [pc, #36]	@ (800a4ac <siprintf+0x3c>)
 800a488:	f853 2b04 	ldr.w	r2, [r3], #4
 800a48c:	9105      	str	r1, [sp, #20]
 800a48e:	6800      	ldr	r0, [r0, #0]
 800a490:	9301      	str	r3, [sp, #4]
 800a492:	a902      	add	r1, sp, #8
 800a494:	f000 f9a2 	bl	800a7dc <_svfiprintf_r>
 800a498:	9b02      	ldr	r3, [sp, #8]
 800a49a:	2200      	movs	r2, #0
 800a49c:	701a      	strb	r2, [r3, #0]
 800a49e:	b01c      	add	sp, #112	@ 0x70
 800a4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4a4:	b003      	add	sp, #12
 800a4a6:	4770      	bx	lr
 800a4a8:	24000104 	.word	0x24000104
 800a4ac:	ffff0208 	.word	0xffff0208

0800a4b0 <memset>:
 800a4b0:	4402      	add	r2, r0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d100      	bne.n	800a4ba <memset+0xa>
 800a4b8:	4770      	bx	lr
 800a4ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a4be:	e7f9      	b.n	800a4b4 <memset+0x4>

0800a4c0 <__errno>:
 800a4c0:	4b01      	ldr	r3, [pc, #4]	@ (800a4c8 <__errno+0x8>)
 800a4c2:	6818      	ldr	r0, [r3, #0]
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	24000104 	.word	0x24000104

0800a4cc <__libc_init_array>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	4d0d      	ldr	r5, [pc, #52]	@ (800a504 <__libc_init_array+0x38>)
 800a4d0:	4c0d      	ldr	r4, [pc, #52]	@ (800a508 <__libc_init_array+0x3c>)
 800a4d2:	1b64      	subs	r4, r4, r5
 800a4d4:	10a4      	asrs	r4, r4, #2
 800a4d6:	2600      	movs	r6, #0
 800a4d8:	42a6      	cmp	r6, r4
 800a4da:	d109      	bne.n	800a4f0 <__libc_init_array+0x24>
 800a4dc:	4d0b      	ldr	r5, [pc, #44]	@ (800a50c <__libc_init_array+0x40>)
 800a4de:	4c0c      	ldr	r4, [pc, #48]	@ (800a510 <__libc_init_array+0x44>)
 800a4e0:	f000 fc66 	bl	800adb0 <_init>
 800a4e4:	1b64      	subs	r4, r4, r5
 800a4e6:	10a4      	asrs	r4, r4, #2
 800a4e8:	2600      	movs	r6, #0
 800a4ea:	42a6      	cmp	r6, r4
 800a4ec:	d105      	bne.n	800a4fa <__libc_init_array+0x2e>
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f4:	4798      	blx	r3
 800a4f6:	3601      	adds	r6, #1
 800a4f8:	e7ee      	b.n	800a4d8 <__libc_init_array+0xc>
 800a4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4fe:	4798      	blx	r3
 800a500:	3601      	adds	r6, #1
 800a502:	e7f2      	b.n	800a4ea <__libc_init_array+0x1e>
 800a504:	0800afc0 	.word	0x0800afc0
 800a508:	0800afc0 	.word	0x0800afc0
 800a50c:	0800afc0 	.word	0x0800afc0
 800a510:	0800afc4 	.word	0x0800afc4

0800a514 <__retarget_lock_acquire_recursive>:
 800a514:	4770      	bx	lr

0800a516 <__retarget_lock_release_recursive>:
 800a516:	4770      	bx	lr

0800a518 <memcpy>:
 800a518:	440a      	add	r2, r1
 800a51a:	4291      	cmp	r1, r2
 800a51c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a520:	d100      	bne.n	800a524 <memcpy+0xc>
 800a522:	4770      	bx	lr
 800a524:	b510      	push	{r4, lr}
 800a526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a52a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a52e:	4291      	cmp	r1, r2
 800a530:	d1f9      	bne.n	800a526 <memcpy+0xe>
 800a532:	bd10      	pop	{r4, pc}

0800a534 <_free_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4605      	mov	r5, r0
 800a538:	2900      	cmp	r1, #0
 800a53a:	d041      	beq.n	800a5c0 <_free_r+0x8c>
 800a53c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a540:	1f0c      	subs	r4, r1, #4
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfb8      	it	lt
 800a546:	18e4      	addlt	r4, r4, r3
 800a548:	f000 f8e0 	bl	800a70c <__malloc_lock>
 800a54c:	4a1d      	ldr	r2, [pc, #116]	@ (800a5c4 <_free_r+0x90>)
 800a54e:	6813      	ldr	r3, [r2, #0]
 800a550:	b933      	cbnz	r3, 800a560 <_free_r+0x2c>
 800a552:	6063      	str	r3, [r4, #4]
 800a554:	6014      	str	r4, [r2, #0]
 800a556:	4628      	mov	r0, r5
 800a558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a55c:	f000 b8dc 	b.w	800a718 <__malloc_unlock>
 800a560:	42a3      	cmp	r3, r4
 800a562:	d908      	bls.n	800a576 <_free_r+0x42>
 800a564:	6820      	ldr	r0, [r4, #0]
 800a566:	1821      	adds	r1, r4, r0
 800a568:	428b      	cmp	r3, r1
 800a56a:	bf01      	itttt	eq
 800a56c:	6819      	ldreq	r1, [r3, #0]
 800a56e:	685b      	ldreq	r3, [r3, #4]
 800a570:	1809      	addeq	r1, r1, r0
 800a572:	6021      	streq	r1, [r4, #0]
 800a574:	e7ed      	b.n	800a552 <_free_r+0x1e>
 800a576:	461a      	mov	r2, r3
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	b10b      	cbz	r3, 800a580 <_free_r+0x4c>
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	d9fa      	bls.n	800a576 <_free_r+0x42>
 800a580:	6811      	ldr	r1, [r2, #0]
 800a582:	1850      	adds	r0, r2, r1
 800a584:	42a0      	cmp	r0, r4
 800a586:	d10b      	bne.n	800a5a0 <_free_r+0x6c>
 800a588:	6820      	ldr	r0, [r4, #0]
 800a58a:	4401      	add	r1, r0
 800a58c:	1850      	adds	r0, r2, r1
 800a58e:	4283      	cmp	r3, r0
 800a590:	6011      	str	r1, [r2, #0]
 800a592:	d1e0      	bne.n	800a556 <_free_r+0x22>
 800a594:	6818      	ldr	r0, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	6053      	str	r3, [r2, #4]
 800a59a:	4408      	add	r0, r1
 800a59c:	6010      	str	r0, [r2, #0]
 800a59e:	e7da      	b.n	800a556 <_free_r+0x22>
 800a5a0:	d902      	bls.n	800a5a8 <_free_r+0x74>
 800a5a2:	230c      	movs	r3, #12
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	e7d6      	b.n	800a556 <_free_r+0x22>
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	1821      	adds	r1, r4, r0
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	bf04      	itt	eq
 800a5b0:	6819      	ldreq	r1, [r3, #0]
 800a5b2:	685b      	ldreq	r3, [r3, #4]
 800a5b4:	6063      	str	r3, [r4, #4]
 800a5b6:	bf04      	itt	eq
 800a5b8:	1809      	addeq	r1, r1, r0
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	6054      	str	r4, [r2, #4]
 800a5be:	e7ca      	b.n	800a556 <_free_r+0x22>
 800a5c0:	bd38      	pop	{r3, r4, r5, pc}
 800a5c2:	bf00      	nop
 800a5c4:	2400105c 	.word	0x2400105c

0800a5c8 <sbrk_aligned>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	4e0f      	ldr	r6, [pc, #60]	@ (800a608 <sbrk_aligned+0x40>)
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	6831      	ldr	r1, [r6, #0]
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	b911      	cbnz	r1, 800a5da <sbrk_aligned+0x12>
 800a5d4:	f000 fba6 	bl	800ad24 <_sbrk_r>
 800a5d8:	6030      	str	r0, [r6, #0]
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4628      	mov	r0, r5
 800a5de:	f000 fba1 	bl	800ad24 <_sbrk_r>
 800a5e2:	1c43      	adds	r3, r0, #1
 800a5e4:	d103      	bne.n	800a5ee <sbrk_aligned+0x26>
 800a5e6:	f04f 34ff 	mov.w	r4, #4294967295
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	bd70      	pop	{r4, r5, r6, pc}
 800a5ee:	1cc4      	adds	r4, r0, #3
 800a5f0:	f024 0403 	bic.w	r4, r4, #3
 800a5f4:	42a0      	cmp	r0, r4
 800a5f6:	d0f8      	beq.n	800a5ea <sbrk_aligned+0x22>
 800a5f8:	1a21      	subs	r1, r4, r0
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f000 fb92 	bl	800ad24 <_sbrk_r>
 800a600:	3001      	adds	r0, #1
 800a602:	d1f2      	bne.n	800a5ea <sbrk_aligned+0x22>
 800a604:	e7ef      	b.n	800a5e6 <sbrk_aligned+0x1e>
 800a606:	bf00      	nop
 800a608:	24001058 	.word	0x24001058

0800a60c <_malloc_r>:
 800a60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a610:	1ccd      	adds	r5, r1, #3
 800a612:	f025 0503 	bic.w	r5, r5, #3
 800a616:	3508      	adds	r5, #8
 800a618:	2d0c      	cmp	r5, #12
 800a61a:	bf38      	it	cc
 800a61c:	250c      	movcc	r5, #12
 800a61e:	2d00      	cmp	r5, #0
 800a620:	4606      	mov	r6, r0
 800a622:	db01      	blt.n	800a628 <_malloc_r+0x1c>
 800a624:	42a9      	cmp	r1, r5
 800a626:	d904      	bls.n	800a632 <_malloc_r+0x26>
 800a628:	230c      	movs	r3, #12
 800a62a:	6033      	str	r3, [r6, #0]
 800a62c:	2000      	movs	r0, #0
 800a62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a708 <_malloc_r+0xfc>
 800a636:	f000 f869 	bl	800a70c <__malloc_lock>
 800a63a:	f8d8 3000 	ldr.w	r3, [r8]
 800a63e:	461c      	mov	r4, r3
 800a640:	bb44      	cbnz	r4, 800a694 <_malloc_r+0x88>
 800a642:	4629      	mov	r1, r5
 800a644:	4630      	mov	r0, r6
 800a646:	f7ff ffbf 	bl	800a5c8 <sbrk_aligned>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	4604      	mov	r4, r0
 800a64e:	d158      	bne.n	800a702 <_malloc_r+0xf6>
 800a650:	f8d8 4000 	ldr.w	r4, [r8]
 800a654:	4627      	mov	r7, r4
 800a656:	2f00      	cmp	r7, #0
 800a658:	d143      	bne.n	800a6e2 <_malloc_r+0xd6>
 800a65a:	2c00      	cmp	r4, #0
 800a65c:	d04b      	beq.n	800a6f6 <_malloc_r+0xea>
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	4639      	mov	r1, r7
 800a662:	4630      	mov	r0, r6
 800a664:	eb04 0903 	add.w	r9, r4, r3
 800a668:	f000 fb5c 	bl	800ad24 <_sbrk_r>
 800a66c:	4581      	cmp	r9, r0
 800a66e:	d142      	bne.n	800a6f6 <_malloc_r+0xea>
 800a670:	6821      	ldr	r1, [r4, #0]
 800a672:	1a6d      	subs	r5, r5, r1
 800a674:	4629      	mov	r1, r5
 800a676:	4630      	mov	r0, r6
 800a678:	f7ff ffa6 	bl	800a5c8 <sbrk_aligned>
 800a67c:	3001      	adds	r0, #1
 800a67e:	d03a      	beq.n	800a6f6 <_malloc_r+0xea>
 800a680:	6823      	ldr	r3, [r4, #0]
 800a682:	442b      	add	r3, r5
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	f8d8 3000 	ldr.w	r3, [r8]
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	bb62      	cbnz	r2, 800a6e8 <_malloc_r+0xdc>
 800a68e:	f8c8 7000 	str.w	r7, [r8]
 800a692:	e00f      	b.n	800a6b4 <_malloc_r+0xa8>
 800a694:	6822      	ldr	r2, [r4, #0]
 800a696:	1b52      	subs	r2, r2, r5
 800a698:	d420      	bmi.n	800a6dc <_malloc_r+0xd0>
 800a69a:	2a0b      	cmp	r2, #11
 800a69c:	d917      	bls.n	800a6ce <_malloc_r+0xc2>
 800a69e:	1961      	adds	r1, r4, r5
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	6025      	str	r5, [r4, #0]
 800a6a4:	bf18      	it	ne
 800a6a6:	6059      	strne	r1, [r3, #4]
 800a6a8:	6863      	ldr	r3, [r4, #4]
 800a6aa:	bf08      	it	eq
 800a6ac:	f8c8 1000 	streq.w	r1, [r8]
 800a6b0:	5162      	str	r2, [r4, r5]
 800a6b2:	604b      	str	r3, [r1, #4]
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f000 f82f 	bl	800a718 <__malloc_unlock>
 800a6ba:	f104 000b 	add.w	r0, r4, #11
 800a6be:	1d23      	adds	r3, r4, #4
 800a6c0:	f020 0007 	bic.w	r0, r0, #7
 800a6c4:	1ac2      	subs	r2, r0, r3
 800a6c6:	bf1c      	itt	ne
 800a6c8:	1a1b      	subne	r3, r3, r0
 800a6ca:	50a3      	strne	r3, [r4, r2]
 800a6cc:	e7af      	b.n	800a62e <_malloc_r+0x22>
 800a6ce:	6862      	ldr	r2, [r4, #4]
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	bf0c      	ite	eq
 800a6d4:	f8c8 2000 	streq.w	r2, [r8]
 800a6d8:	605a      	strne	r2, [r3, #4]
 800a6da:	e7eb      	b.n	800a6b4 <_malloc_r+0xa8>
 800a6dc:	4623      	mov	r3, r4
 800a6de:	6864      	ldr	r4, [r4, #4]
 800a6e0:	e7ae      	b.n	800a640 <_malloc_r+0x34>
 800a6e2:	463c      	mov	r4, r7
 800a6e4:	687f      	ldr	r7, [r7, #4]
 800a6e6:	e7b6      	b.n	800a656 <_malloc_r+0x4a>
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	d1fb      	bne.n	800a6e8 <_malloc_r+0xdc>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	6053      	str	r3, [r2, #4]
 800a6f4:	e7de      	b.n	800a6b4 <_malloc_r+0xa8>
 800a6f6:	230c      	movs	r3, #12
 800a6f8:	6033      	str	r3, [r6, #0]
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f000 f80c 	bl	800a718 <__malloc_unlock>
 800a700:	e794      	b.n	800a62c <_malloc_r+0x20>
 800a702:	6005      	str	r5, [r0, #0]
 800a704:	e7d6      	b.n	800a6b4 <_malloc_r+0xa8>
 800a706:	bf00      	nop
 800a708:	2400105c 	.word	0x2400105c

0800a70c <__malloc_lock>:
 800a70c:	4801      	ldr	r0, [pc, #4]	@ (800a714 <__malloc_lock+0x8>)
 800a70e:	f7ff bf01 	b.w	800a514 <__retarget_lock_acquire_recursive>
 800a712:	bf00      	nop
 800a714:	24001054 	.word	0x24001054

0800a718 <__malloc_unlock>:
 800a718:	4801      	ldr	r0, [pc, #4]	@ (800a720 <__malloc_unlock+0x8>)
 800a71a:	f7ff befc 	b.w	800a516 <__retarget_lock_release_recursive>
 800a71e:	bf00      	nop
 800a720:	24001054 	.word	0x24001054

0800a724 <__ssputs_r>:
 800a724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a728:	688e      	ldr	r6, [r1, #8]
 800a72a:	461f      	mov	r7, r3
 800a72c:	42be      	cmp	r6, r7
 800a72e:	680b      	ldr	r3, [r1, #0]
 800a730:	4682      	mov	sl, r0
 800a732:	460c      	mov	r4, r1
 800a734:	4690      	mov	r8, r2
 800a736:	d82d      	bhi.n	800a794 <__ssputs_r+0x70>
 800a738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a73c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a740:	d026      	beq.n	800a790 <__ssputs_r+0x6c>
 800a742:	6965      	ldr	r5, [r4, #20]
 800a744:	6909      	ldr	r1, [r1, #16]
 800a746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a74a:	eba3 0901 	sub.w	r9, r3, r1
 800a74e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a752:	1c7b      	adds	r3, r7, #1
 800a754:	444b      	add	r3, r9
 800a756:	106d      	asrs	r5, r5, #1
 800a758:	429d      	cmp	r5, r3
 800a75a:	bf38      	it	cc
 800a75c:	461d      	movcc	r5, r3
 800a75e:	0553      	lsls	r3, r2, #21
 800a760:	d527      	bpl.n	800a7b2 <__ssputs_r+0x8e>
 800a762:	4629      	mov	r1, r5
 800a764:	f7ff ff52 	bl	800a60c <_malloc_r>
 800a768:	4606      	mov	r6, r0
 800a76a:	b360      	cbz	r0, 800a7c6 <__ssputs_r+0xa2>
 800a76c:	6921      	ldr	r1, [r4, #16]
 800a76e:	464a      	mov	r2, r9
 800a770:	f7ff fed2 	bl	800a518 <memcpy>
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	6126      	str	r6, [r4, #16]
 800a782:	6165      	str	r5, [r4, #20]
 800a784:	444e      	add	r6, r9
 800a786:	eba5 0509 	sub.w	r5, r5, r9
 800a78a:	6026      	str	r6, [r4, #0]
 800a78c:	60a5      	str	r5, [r4, #8]
 800a78e:	463e      	mov	r6, r7
 800a790:	42be      	cmp	r6, r7
 800a792:	d900      	bls.n	800a796 <__ssputs_r+0x72>
 800a794:	463e      	mov	r6, r7
 800a796:	6820      	ldr	r0, [r4, #0]
 800a798:	4632      	mov	r2, r6
 800a79a:	4641      	mov	r1, r8
 800a79c:	f000 faa8 	bl	800acf0 <memmove>
 800a7a0:	68a3      	ldr	r3, [r4, #8]
 800a7a2:	1b9b      	subs	r3, r3, r6
 800a7a4:	60a3      	str	r3, [r4, #8]
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	4433      	add	r3, r6
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b2:	462a      	mov	r2, r5
 800a7b4:	f000 fac6 	bl	800ad44 <_realloc_r>
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d1e0      	bne.n	800a780 <__ssputs_r+0x5c>
 800a7be:	6921      	ldr	r1, [r4, #16]
 800a7c0:	4650      	mov	r0, sl
 800a7c2:	f7ff feb7 	bl	800a534 <_free_r>
 800a7c6:	230c      	movs	r3, #12
 800a7c8:	f8ca 3000 	str.w	r3, [sl]
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7d2:	81a3      	strh	r3, [r4, #12]
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d8:	e7e9      	b.n	800a7ae <__ssputs_r+0x8a>
	...

0800a7dc <_svfiprintf_r>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	4698      	mov	r8, r3
 800a7e2:	898b      	ldrh	r3, [r1, #12]
 800a7e4:	061b      	lsls	r3, r3, #24
 800a7e6:	b09d      	sub	sp, #116	@ 0x74
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	460d      	mov	r5, r1
 800a7ec:	4614      	mov	r4, r2
 800a7ee:	d510      	bpl.n	800a812 <_svfiprintf_r+0x36>
 800a7f0:	690b      	ldr	r3, [r1, #16]
 800a7f2:	b973      	cbnz	r3, 800a812 <_svfiprintf_r+0x36>
 800a7f4:	2140      	movs	r1, #64	@ 0x40
 800a7f6:	f7ff ff09 	bl	800a60c <_malloc_r>
 800a7fa:	6028      	str	r0, [r5, #0]
 800a7fc:	6128      	str	r0, [r5, #16]
 800a7fe:	b930      	cbnz	r0, 800a80e <_svfiprintf_r+0x32>
 800a800:	230c      	movs	r3, #12
 800a802:	603b      	str	r3, [r7, #0]
 800a804:	f04f 30ff 	mov.w	r0, #4294967295
 800a808:	b01d      	add	sp, #116	@ 0x74
 800a80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80e:	2340      	movs	r3, #64	@ 0x40
 800a810:	616b      	str	r3, [r5, #20]
 800a812:	2300      	movs	r3, #0
 800a814:	9309      	str	r3, [sp, #36]	@ 0x24
 800a816:	2320      	movs	r3, #32
 800a818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a81c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a820:	2330      	movs	r3, #48	@ 0x30
 800a822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a9c0 <_svfiprintf_r+0x1e4>
 800a826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a82a:	f04f 0901 	mov.w	r9, #1
 800a82e:	4623      	mov	r3, r4
 800a830:	469a      	mov	sl, r3
 800a832:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a836:	b10a      	cbz	r2, 800a83c <_svfiprintf_r+0x60>
 800a838:	2a25      	cmp	r2, #37	@ 0x25
 800a83a:	d1f9      	bne.n	800a830 <_svfiprintf_r+0x54>
 800a83c:	ebba 0b04 	subs.w	fp, sl, r4
 800a840:	d00b      	beq.n	800a85a <_svfiprintf_r+0x7e>
 800a842:	465b      	mov	r3, fp
 800a844:	4622      	mov	r2, r4
 800a846:	4629      	mov	r1, r5
 800a848:	4638      	mov	r0, r7
 800a84a:	f7ff ff6b 	bl	800a724 <__ssputs_r>
 800a84e:	3001      	adds	r0, #1
 800a850:	f000 80a7 	beq.w	800a9a2 <_svfiprintf_r+0x1c6>
 800a854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a856:	445a      	add	r2, fp
 800a858:	9209      	str	r2, [sp, #36]	@ 0x24
 800a85a:	f89a 3000 	ldrb.w	r3, [sl]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f000 809f 	beq.w	800a9a2 <_svfiprintf_r+0x1c6>
 800a864:	2300      	movs	r3, #0
 800a866:	f04f 32ff 	mov.w	r2, #4294967295
 800a86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a86e:	f10a 0a01 	add.w	sl, sl, #1
 800a872:	9304      	str	r3, [sp, #16]
 800a874:	9307      	str	r3, [sp, #28]
 800a876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a87a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a87c:	4654      	mov	r4, sl
 800a87e:	2205      	movs	r2, #5
 800a880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a884:	484e      	ldr	r0, [pc, #312]	@ (800a9c0 <_svfiprintf_r+0x1e4>)
 800a886:	f7f5 fd33 	bl	80002f0 <memchr>
 800a88a:	9a04      	ldr	r2, [sp, #16]
 800a88c:	b9d8      	cbnz	r0, 800a8c6 <_svfiprintf_r+0xea>
 800a88e:	06d0      	lsls	r0, r2, #27
 800a890:	bf44      	itt	mi
 800a892:	2320      	movmi	r3, #32
 800a894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a898:	0711      	lsls	r1, r2, #28
 800a89a:	bf44      	itt	mi
 800a89c:	232b      	movmi	r3, #43	@ 0x2b
 800a89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8a8:	d015      	beq.n	800a8d6 <_svfiprintf_r+0xfa>
 800a8aa:	9a07      	ldr	r2, [sp, #28]
 800a8ac:	4654      	mov	r4, sl
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	f04f 0c0a 	mov.w	ip, #10
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ba:	3b30      	subs	r3, #48	@ 0x30
 800a8bc:	2b09      	cmp	r3, #9
 800a8be:	d94b      	bls.n	800a958 <_svfiprintf_r+0x17c>
 800a8c0:	b1b0      	cbz	r0, 800a8f0 <_svfiprintf_r+0x114>
 800a8c2:	9207      	str	r2, [sp, #28]
 800a8c4:	e014      	b.n	800a8f0 <_svfiprintf_r+0x114>
 800a8c6:	eba0 0308 	sub.w	r3, r0, r8
 800a8ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	9304      	str	r3, [sp, #16]
 800a8d2:	46a2      	mov	sl, r4
 800a8d4:	e7d2      	b.n	800a87c <_svfiprintf_r+0xa0>
 800a8d6:	9b03      	ldr	r3, [sp, #12]
 800a8d8:	1d19      	adds	r1, r3, #4
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	9103      	str	r1, [sp, #12]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfbb      	ittet	lt
 800a8e2:	425b      	neglt	r3, r3
 800a8e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a8e8:	9307      	strge	r3, [sp, #28]
 800a8ea:	9307      	strlt	r3, [sp, #28]
 800a8ec:	bfb8      	it	lt
 800a8ee:	9204      	strlt	r2, [sp, #16]
 800a8f0:	7823      	ldrb	r3, [r4, #0]
 800a8f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8f4:	d10a      	bne.n	800a90c <_svfiprintf_r+0x130>
 800a8f6:	7863      	ldrb	r3, [r4, #1]
 800a8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8fa:	d132      	bne.n	800a962 <_svfiprintf_r+0x186>
 800a8fc:	9b03      	ldr	r3, [sp, #12]
 800a8fe:	1d1a      	adds	r2, r3, #4
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	9203      	str	r2, [sp, #12]
 800a904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a908:	3402      	adds	r4, #2
 800a90a:	9305      	str	r3, [sp, #20]
 800a90c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a9d0 <_svfiprintf_r+0x1f4>
 800a910:	7821      	ldrb	r1, [r4, #0]
 800a912:	2203      	movs	r2, #3
 800a914:	4650      	mov	r0, sl
 800a916:	f7f5 fceb 	bl	80002f0 <memchr>
 800a91a:	b138      	cbz	r0, 800a92c <_svfiprintf_r+0x150>
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	eba0 000a 	sub.w	r0, r0, sl
 800a922:	2240      	movs	r2, #64	@ 0x40
 800a924:	4082      	lsls	r2, r0
 800a926:	4313      	orrs	r3, r2
 800a928:	3401      	adds	r4, #1
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a930:	4824      	ldr	r0, [pc, #144]	@ (800a9c4 <_svfiprintf_r+0x1e8>)
 800a932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a936:	2206      	movs	r2, #6
 800a938:	f7f5 fcda 	bl	80002f0 <memchr>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	d036      	beq.n	800a9ae <_svfiprintf_r+0x1d2>
 800a940:	4b21      	ldr	r3, [pc, #132]	@ (800a9c8 <_svfiprintf_r+0x1ec>)
 800a942:	bb1b      	cbnz	r3, 800a98c <_svfiprintf_r+0x1b0>
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	3307      	adds	r3, #7
 800a948:	f023 0307 	bic.w	r3, r3, #7
 800a94c:	3308      	adds	r3, #8
 800a94e:	9303      	str	r3, [sp, #12]
 800a950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a952:	4433      	add	r3, r6
 800a954:	9309      	str	r3, [sp, #36]	@ 0x24
 800a956:	e76a      	b.n	800a82e <_svfiprintf_r+0x52>
 800a958:	fb0c 3202 	mla	r2, ip, r2, r3
 800a95c:	460c      	mov	r4, r1
 800a95e:	2001      	movs	r0, #1
 800a960:	e7a8      	b.n	800a8b4 <_svfiprintf_r+0xd8>
 800a962:	2300      	movs	r3, #0
 800a964:	3401      	adds	r4, #1
 800a966:	9305      	str	r3, [sp, #20]
 800a968:	4619      	mov	r1, r3
 800a96a:	f04f 0c0a 	mov.w	ip, #10
 800a96e:	4620      	mov	r0, r4
 800a970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a974:	3a30      	subs	r2, #48	@ 0x30
 800a976:	2a09      	cmp	r2, #9
 800a978:	d903      	bls.n	800a982 <_svfiprintf_r+0x1a6>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0c6      	beq.n	800a90c <_svfiprintf_r+0x130>
 800a97e:	9105      	str	r1, [sp, #20]
 800a980:	e7c4      	b.n	800a90c <_svfiprintf_r+0x130>
 800a982:	fb0c 2101 	mla	r1, ip, r1, r2
 800a986:	4604      	mov	r4, r0
 800a988:	2301      	movs	r3, #1
 800a98a:	e7f0      	b.n	800a96e <_svfiprintf_r+0x192>
 800a98c:	ab03      	add	r3, sp, #12
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	462a      	mov	r2, r5
 800a992:	4b0e      	ldr	r3, [pc, #56]	@ (800a9cc <_svfiprintf_r+0x1f0>)
 800a994:	a904      	add	r1, sp, #16
 800a996:	4638      	mov	r0, r7
 800a998:	f3af 8000 	nop.w
 800a99c:	1c42      	adds	r2, r0, #1
 800a99e:	4606      	mov	r6, r0
 800a9a0:	d1d6      	bne.n	800a950 <_svfiprintf_r+0x174>
 800a9a2:	89ab      	ldrh	r3, [r5, #12]
 800a9a4:	065b      	lsls	r3, r3, #25
 800a9a6:	f53f af2d 	bmi.w	800a804 <_svfiprintf_r+0x28>
 800a9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9ac:	e72c      	b.n	800a808 <_svfiprintf_r+0x2c>
 800a9ae:	ab03      	add	r3, sp, #12
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	462a      	mov	r2, r5
 800a9b4:	4b05      	ldr	r3, [pc, #20]	@ (800a9cc <_svfiprintf_r+0x1f0>)
 800a9b6:	a904      	add	r1, sp, #16
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	f000 f879 	bl	800aab0 <_printf_i>
 800a9be:	e7ed      	b.n	800a99c <_svfiprintf_r+0x1c0>
 800a9c0:	0800af85 	.word	0x0800af85
 800a9c4:	0800af8f 	.word	0x0800af8f
 800a9c8:	00000000 	.word	0x00000000
 800a9cc:	0800a725 	.word	0x0800a725
 800a9d0:	0800af8b 	.word	0x0800af8b

0800a9d4 <_printf_common>:
 800a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	4616      	mov	r6, r2
 800a9da:	4698      	mov	r8, r3
 800a9dc:	688a      	ldr	r2, [r1, #8]
 800a9de:	690b      	ldr	r3, [r1, #16]
 800a9e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	bfb8      	it	lt
 800a9e8:	4613      	movlt	r3, r2
 800a9ea:	6033      	str	r3, [r6, #0]
 800a9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	b10a      	cbz	r2, 800a9fa <_printf_common+0x26>
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	6033      	str	r3, [r6, #0]
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	0699      	lsls	r1, r3, #26
 800a9fe:	bf42      	ittt	mi
 800aa00:	6833      	ldrmi	r3, [r6, #0]
 800aa02:	3302      	addmi	r3, #2
 800aa04:	6033      	strmi	r3, [r6, #0]
 800aa06:	6825      	ldr	r5, [r4, #0]
 800aa08:	f015 0506 	ands.w	r5, r5, #6
 800aa0c:	d106      	bne.n	800aa1c <_printf_common+0x48>
 800aa0e:	f104 0a19 	add.w	sl, r4, #25
 800aa12:	68e3      	ldr	r3, [r4, #12]
 800aa14:	6832      	ldr	r2, [r6, #0]
 800aa16:	1a9b      	subs	r3, r3, r2
 800aa18:	42ab      	cmp	r3, r5
 800aa1a:	dc26      	bgt.n	800aa6a <_printf_common+0x96>
 800aa1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa20:	6822      	ldr	r2, [r4, #0]
 800aa22:	3b00      	subs	r3, #0
 800aa24:	bf18      	it	ne
 800aa26:	2301      	movne	r3, #1
 800aa28:	0692      	lsls	r2, r2, #26
 800aa2a:	d42b      	bmi.n	800aa84 <_printf_common+0xb0>
 800aa2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa30:	4641      	mov	r1, r8
 800aa32:	4638      	mov	r0, r7
 800aa34:	47c8      	blx	r9
 800aa36:	3001      	adds	r0, #1
 800aa38:	d01e      	beq.n	800aa78 <_printf_common+0xa4>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	6922      	ldr	r2, [r4, #16]
 800aa3e:	f003 0306 	and.w	r3, r3, #6
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	bf02      	ittt	eq
 800aa46:	68e5      	ldreq	r5, [r4, #12]
 800aa48:	6833      	ldreq	r3, [r6, #0]
 800aa4a:	1aed      	subeq	r5, r5, r3
 800aa4c:	68a3      	ldr	r3, [r4, #8]
 800aa4e:	bf0c      	ite	eq
 800aa50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa54:	2500      	movne	r5, #0
 800aa56:	4293      	cmp	r3, r2
 800aa58:	bfc4      	itt	gt
 800aa5a:	1a9b      	subgt	r3, r3, r2
 800aa5c:	18ed      	addgt	r5, r5, r3
 800aa5e:	2600      	movs	r6, #0
 800aa60:	341a      	adds	r4, #26
 800aa62:	42b5      	cmp	r5, r6
 800aa64:	d11a      	bne.n	800aa9c <_printf_common+0xc8>
 800aa66:	2000      	movs	r0, #0
 800aa68:	e008      	b.n	800aa7c <_printf_common+0xa8>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	4652      	mov	r2, sl
 800aa6e:	4641      	mov	r1, r8
 800aa70:	4638      	mov	r0, r7
 800aa72:	47c8      	blx	r9
 800aa74:	3001      	adds	r0, #1
 800aa76:	d103      	bne.n	800aa80 <_printf_common+0xac>
 800aa78:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa80:	3501      	adds	r5, #1
 800aa82:	e7c6      	b.n	800aa12 <_printf_common+0x3e>
 800aa84:	18e1      	adds	r1, r4, r3
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	2030      	movs	r0, #48	@ 0x30
 800aa8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa8e:	4422      	add	r2, r4
 800aa90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa98:	3302      	adds	r3, #2
 800aa9a:	e7c7      	b.n	800aa2c <_printf_common+0x58>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4641      	mov	r1, r8
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	47c8      	blx	r9
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	d0e6      	beq.n	800aa78 <_printf_common+0xa4>
 800aaaa:	3601      	adds	r6, #1
 800aaac:	e7d9      	b.n	800aa62 <_printf_common+0x8e>
	...

0800aab0 <_printf_i>:
 800aab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aab4:	7e0f      	ldrb	r7, [r1, #24]
 800aab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aab8:	2f78      	cmp	r7, #120	@ 0x78
 800aaba:	4691      	mov	r9, r2
 800aabc:	4680      	mov	r8, r0
 800aabe:	460c      	mov	r4, r1
 800aac0:	469a      	mov	sl, r3
 800aac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aac6:	d807      	bhi.n	800aad8 <_printf_i+0x28>
 800aac8:	2f62      	cmp	r7, #98	@ 0x62
 800aaca:	d80a      	bhi.n	800aae2 <_printf_i+0x32>
 800aacc:	2f00      	cmp	r7, #0
 800aace:	f000 80d2 	beq.w	800ac76 <_printf_i+0x1c6>
 800aad2:	2f58      	cmp	r7, #88	@ 0x58
 800aad4:	f000 80b9 	beq.w	800ac4a <_printf_i+0x19a>
 800aad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aadc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aae0:	e03a      	b.n	800ab58 <_printf_i+0xa8>
 800aae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aae6:	2b15      	cmp	r3, #21
 800aae8:	d8f6      	bhi.n	800aad8 <_printf_i+0x28>
 800aaea:	a101      	add	r1, pc, #4	@ (adr r1, 800aaf0 <_printf_i+0x40>)
 800aaec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aaf0:	0800ab49 	.word	0x0800ab49
 800aaf4:	0800ab5d 	.word	0x0800ab5d
 800aaf8:	0800aad9 	.word	0x0800aad9
 800aafc:	0800aad9 	.word	0x0800aad9
 800ab00:	0800aad9 	.word	0x0800aad9
 800ab04:	0800aad9 	.word	0x0800aad9
 800ab08:	0800ab5d 	.word	0x0800ab5d
 800ab0c:	0800aad9 	.word	0x0800aad9
 800ab10:	0800aad9 	.word	0x0800aad9
 800ab14:	0800aad9 	.word	0x0800aad9
 800ab18:	0800aad9 	.word	0x0800aad9
 800ab1c:	0800ac5d 	.word	0x0800ac5d
 800ab20:	0800ab87 	.word	0x0800ab87
 800ab24:	0800ac17 	.word	0x0800ac17
 800ab28:	0800aad9 	.word	0x0800aad9
 800ab2c:	0800aad9 	.word	0x0800aad9
 800ab30:	0800ac7f 	.word	0x0800ac7f
 800ab34:	0800aad9 	.word	0x0800aad9
 800ab38:	0800ab87 	.word	0x0800ab87
 800ab3c:	0800aad9 	.word	0x0800aad9
 800ab40:	0800aad9 	.word	0x0800aad9
 800ab44:	0800ac1f 	.word	0x0800ac1f
 800ab48:	6833      	ldr	r3, [r6, #0]
 800ab4a:	1d1a      	adds	r2, r3, #4
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6032      	str	r2, [r6, #0]
 800ab50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e09d      	b.n	800ac98 <_printf_i+0x1e8>
 800ab5c:	6833      	ldr	r3, [r6, #0]
 800ab5e:	6820      	ldr	r0, [r4, #0]
 800ab60:	1d19      	adds	r1, r3, #4
 800ab62:	6031      	str	r1, [r6, #0]
 800ab64:	0606      	lsls	r6, r0, #24
 800ab66:	d501      	bpl.n	800ab6c <_printf_i+0xbc>
 800ab68:	681d      	ldr	r5, [r3, #0]
 800ab6a:	e003      	b.n	800ab74 <_printf_i+0xc4>
 800ab6c:	0645      	lsls	r5, r0, #25
 800ab6e:	d5fb      	bpl.n	800ab68 <_printf_i+0xb8>
 800ab70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab74:	2d00      	cmp	r5, #0
 800ab76:	da03      	bge.n	800ab80 <_printf_i+0xd0>
 800ab78:	232d      	movs	r3, #45	@ 0x2d
 800ab7a:	426d      	negs	r5, r5
 800ab7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab80:	4859      	ldr	r0, [pc, #356]	@ (800ace8 <_printf_i+0x238>)
 800ab82:	230a      	movs	r3, #10
 800ab84:	e011      	b.n	800abaa <_printf_i+0xfa>
 800ab86:	6821      	ldr	r1, [r4, #0]
 800ab88:	6833      	ldr	r3, [r6, #0]
 800ab8a:	0608      	lsls	r0, r1, #24
 800ab8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab90:	d402      	bmi.n	800ab98 <_printf_i+0xe8>
 800ab92:	0649      	lsls	r1, r1, #25
 800ab94:	bf48      	it	mi
 800ab96:	b2ad      	uxthmi	r5, r5
 800ab98:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab9a:	4853      	ldr	r0, [pc, #332]	@ (800ace8 <_printf_i+0x238>)
 800ab9c:	6033      	str	r3, [r6, #0]
 800ab9e:	bf14      	ite	ne
 800aba0:	230a      	movne	r3, #10
 800aba2:	2308      	moveq	r3, #8
 800aba4:	2100      	movs	r1, #0
 800aba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abaa:	6866      	ldr	r6, [r4, #4]
 800abac:	60a6      	str	r6, [r4, #8]
 800abae:	2e00      	cmp	r6, #0
 800abb0:	bfa2      	ittt	ge
 800abb2:	6821      	ldrge	r1, [r4, #0]
 800abb4:	f021 0104 	bicge.w	r1, r1, #4
 800abb8:	6021      	strge	r1, [r4, #0]
 800abba:	b90d      	cbnz	r5, 800abc0 <_printf_i+0x110>
 800abbc:	2e00      	cmp	r6, #0
 800abbe:	d04b      	beq.n	800ac58 <_printf_i+0x1a8>
 800abc0:	4616      	mov	r6, r2
 800abc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800abc6:	fb03 5711 	mls	r7, r3, r1, r5
 800abca:	5dc7      	ldrb	r7, [r0, r7]
 800abcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abd0:	462f      	mov	r7, r5
 800abd2:	42bb      	cmp	r3, r7
 800abd4:	460d      	mov	r5, r1
 800abd6:	d9f4      	bls.n	800abc2 <_printf_i+0x112>
 800abd8:	2b08      	cmp	r3, #8
 800abda:	d10b      	bne.n	800abf4 <_printf_i+0x144>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	07df      	lsls	r7, r3, #31
 800abe0:	d508      	bpl.n	800abf4 <_printf_i+0x144>
 800abe2:	6923      	ldr	r3, [r4, #16]
 800abe4:	6861      	ldr	r1, [r4, #4]
 800abe6:	4299      	cmp	r1, r3
 800abe8:	bfde      	ittt	le
 800abea:	2330      	movle	r3, #48	@ 0x30
 800abec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abf4:	1b92      	subs	r2, r2, r6
 800abf6:	6122      	str	r2, [r4, #16]
 800abf8:	f8cd a000 	str.w	sl, [sp]
 800abfc:	464b      	mov	r3, r9
 800abfe:	aa03      	add	r2, sp, #12
 800ac00:	4621      	mov	r1, r4
 800ac02:	4640      	mov	r0, r8
 800ac04:	f7ff fee6 	bl	800a9d4 <_printf_common>
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d14a      	bne.n	800aca2 <_printf_i+0x1f2>
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	b004      	add	sp, #16
 800ac12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	f043 0320 	orr.w	r3, r3, #32
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	4833      	ldr	r0, [pc, #204]	@ (800acec <_printf_i+0x23c>)
 800ac20:	2778      	movs	r7, #120	@ 0x78
 800ac22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	6831      	ldr	r1, [r6, #0]
 800ac2a:	061f      	lsls	r7, r3, #24
 800ac2c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac30:	d402      	bmi.n	800ac38 <_printf_i+0x188>
 800ac32:	065f      	lsls	r7, r3, #25
 800ac34:	bf48      	it	mi
 800ac36:	b2ad      	uxthmi	r5, r5
 800ac38:	6031      	str	r1, [r6, #0]
 800ac3a:	07d9      	lsls	r1, r3, #31
 800ac3c:	bf44      	itt	mi
 800ac3e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac42:	6023      	strmi	r3, [r4, #0]
 800ac44:	b11d      	cbz	r5, 800ac4e <_printf_i+0x19e>
 800ac46:	2310      	movs	r3, #16
 800ac48:	e7ac      	b.n	800aba4 <_printf_i+0xf4>
 800ac4a:	4827      	ldr	r0, [pc, #156]	@ (800ace8 <_printf_i+0x238>)
 800ac4c:	e7e9      	b.n	800ac22 <_printf_i+0x172>
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	f023 0320 	bic.w	r3, r3, #32
 800ac54:	6023      	str	r3, [r4, #0]
 800ac56:	e7f6      	b.n	800ac46 <_printf_i+0x196>
 800ac58:	4616      	mov	r6, r2
 800ac5a:	e7bd      	b.n	800abd8 <_printf_i+0x128>
 800ac5c:	6833      	ldr	r3, [r6, #0]
 800ac5e:	6825      	ldr	r5, [r4, #0]
 800ac60:	6961      	ldr	r1, [r4, #20]
 800ac62:	1d18      	adds	r0, r3, #4
 800ac64:	6030      	str	r0, [r6, #0]
 800ac66:	062e      	lsls	r6, r5, #24
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	d501      	bpl.n	800ac70 <_printf_i+0x1c0>
 800ac6c:	6019      	str	r1, [r3, #0]
 800ac6e:	e002      	b.n	800ac76 <_printf_i+0x1c6>
 800ac70:	0668      	lsls	r0, r5, #25
 800ac72:	d5fb      	bpl.n	800ac6c <_printf_i+0x1bc>
 800ac74:	8019      	strh	r1, [r3, #0]
 800ac76:	2300      	movs	r3, #0
 800ac78:	6123      	str	r3, [r4, #16]
 800ac7a:	4616      	mov	r6, r2
 800ac7c:	e7bc      	b.n	800abf8 <_printf_i+0x148>
 800ac7e:	6833      	ldr	r3, [r6, #0]
 800ac80:	1d1a      	adds	r2, r3, #4
 800ac82:	6032      	str	r2, [r6, #0]
 800ac84:	681e      	ldr	r6, [r3, #0]
 800ac86:	6862      	ldr	r2, [r4, #4]
 800ac88:	2100      	movs	r1, #0
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f7f5 fb30 	bl	80002f0 <memchr>
 800ac90:	b108      	cbz	r0, 800ac96 <_printf_i+0x1e6>
 800ac92:	1b80      	subs	r0, r0, r6
 800ac94:	6060      	str	r0, [r4, #4]
 800ac96:	6863      	ldr	r3, [r4, #4]
 800ac98:	6123      	str	r3, [r4, #16]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aca0:	e7aa      	b.n	800abf8 <_printf_i+0x148>
 800aca2:	6923      	ldr	r3, [r4, #16]
 800aca4:	4632      	mov	r2, r6
 800aca6:	4649      	mov	r1, r9
 800aca8:	4640      	mov	r0, r8
 800acaa:	47d0      	blx	sl
 800acac:	3001      	adds	r0, #1
 800acae:	d0ad      	beq.n	800ac0c <_printf_i+0x15c>
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	079b      	lsls	r3, r3, #30
 800acb4:	d413      	bmi.n	800acde <_printf_i+0x22e>
 800acb6:	68e0      	ldr	r0, [r4, #12]
 800acb8:	9b03      	ldr	r3, [sp, #12]
 800acba:	4298      	cmp	r0, r3
 800acbc:	bfb8      	it	lt
 800acbe:	4618      	movlt	r0, r3
 800acc0:	e7a6      	b.n	800ac10 <_printf_i+0x160>
 800acc2:	2301      	movs	r3, #1
 800acc4:	4632      	mov	r2, r6
 800acc6:	4649      	mov	r1, r9
 800acc8:	4640      	mov	r0, r8
 800acca:	47d0      	blx	sl
 800accc:	3001      	adds	r0, #1
 800acce:	d09d      	beq.n	800ac0c <_printf_i+0x15c>
 800acd0:	3501      	adds	r5, #1
 800acd2:	68e3      	ldr	r3, [r4, #12]
 800acd4:	9903      	ldr	r1, [sp, #12]
 800acd6:	1a5b      	subs	r3, r3, r1
 800acd8:	42ab      	cmp	r3, r5
 800acda:	dcf2      	bgt.n	800acc2 <_printf_i+0x212>
 800acdc:	e7eb      	b.n	800acb6 <_printf_i+0x206>
 800acde:	2500      	movs	r5, #0
 800ace0:	f104 0619 	add.w	r6, r4, #25
 800ace4:	e7f5      	b.n	800acd2 <_printf_i+0x222>
 800ace6:	bf00      	nop
 800ace8:	0800af96 	.word	0x0800af96
 800acec:	0800afa7 	.word	0x0800afa7

0800acf0 <memmove>:
 800acf0:	4288      	cmp	r0, r1
 800acf2:	b510      	push	{r4, lr}
 800acf4:	eb01 0402 	add.w	r4, r1, r2
 800acf8:	d902      	bls.n	800ad00 <memmove+0x10>
 800acfa:	4284      	cmp	r4, r0
 800acfc:	4623      	mov	r3, r4
 800acfe:	d807      	bhi.n	800ad10 <memmove+0x20>
 800ad00:	1e43      	subs	r3, r0, #1
 800ad02:	42a1      	cmp	r1, r4
 800ad04:	d008      	beq.n	800ad18 <memmove+0x28>
 800ad06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad0e:	e7f8      	b.n	800ad02 <memmove+0x12>
 800ad10:	4402      	add	r2, r0
 800ad12:	4601      	mov	r1, r0
 800ad14:	428a      	cmp	r2, r1
 800ad16:	d100      	bne.n	800ad1a <memmove+0x2a>
 800ad18:	bd10      	pop	{r4, pc}
 800ad1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad22:	e7f7      	b.n	800ad14 <memmove+0x24>

0800ad24 <_sbrk_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d06      	ldr	r5, [pc, #24]	@ (800ad40 <_sbrk_r+0x1c>)
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	f7f5 fecc 	bl	8000acc <_sbrk>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_sbrk_r+0x1a>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_sbrk_r+0x1a>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	24001050 	.word	0x24001050

0800ad44 <_realloc_r>:
 800ad44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad48:	4680      	mov	r8, r0
 800ad4a:	4615      	mov	r5, r2
 800ad4c:	460c      	mov	r4, r1
 800ad4e:	b921      	cbnz	r1, 800ad5a <_realloc_r+0x16>
 800ad50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad54:	4611      	mov	r1, r2
 800ad56:	f7ff bc59 	b.w	800a60c <_malloc_r>
 800ad5a:	b92a      	cbnz	r2, 800ad68 <_realloc_r+0x24>
 800ad5c:	f7ff fbea 	bl	800a534 <_free_r>
 800ad60:	2400      	movs	r4, #0
 800ad62:	4620      	mov	r0, r4
 800ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad68:	f000 f81a 	bl	800ada0 <_malloc_usable_size_r>
 800ad6c:	4285      	cmp	r5, r0
 800ad6e:	4606      	mov	r6, r0
 800ad70:	d802      	bhi.n	800ad78 <_realloc_r+0x34>
 800ad72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad76:	d8f4      	bhi.n	800ad62 <_realloc_r+0x1e>
 800ad78:	4629      	mov	r1, r5
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	f7ff fc46 	bl	800a60c <_malloc_r>
 800ad80:	4607      	mov	r7, r0
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d0ec      	beq.n	800ad60 <_realloc_r+0x1c>
 800ad86:	42b5      	cmp	r5, r6
 800ad88:	462a      	mov	r2, r5
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	bf28      	it	cs
 800ad8e:	4632      	movcs	r2, r6
 800ad90:	f7ff fbc2 	bl	800a518 <memcpy>
 800ad94:	4621      	mov	r1, r4
 800ad96:	4640      	mov	r0, r8
 800ad98:	f7ff fbcc 	bl	800a534 <_free_r>
 800ad9c:	463c      	mov	r4, r7
 800ad9e:	e7e0      	b.n	800ad62 <_realloc_r+0x1e>

0800ada0 <_malloc_usable_size_r>:
 800ada0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ada4:	1f18      	subs	r0, r3, #4
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bfbc      	itt	lt
 800adaa:	580b      	ldrlt	r3, [r1, r0]
 800adac:	18c0      	addlt	r0, r0, r3
 800adae:	4770      	bx	lr

0800adb0 <_init>:
 800adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb2:	bf00      	nop
 800adb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb6:	bc08      	pop	{r3}
 800adb8:	469e      	mov	lr, r3
 800adba:	4770      	bx	lr

0800adbc <_fini>:
 800adbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adbe:	bf00      	nop
 800adc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc2:	bc08      	pop	{r3}
 800adc4:	469e      	mov	lr, r3
 800adc6:	4770      	bx	lr
