
VDI_Bridge_Prototyp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006884  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006b30  08006b30  00007b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006bc4  08006bc4  00007bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006bcc  08006bcc  00007bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006bd0  08006bd0  00007bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006bd4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f8  24000010  08006be4  00008010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000208  08006be4  00008208  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017fd2  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025da  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001338  00000000  00000000  000225f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f1c  00000000  00000000  00023928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031211  00000000  00000000  00024844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016eb3  00000000  00000000  00055a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001490ee  00000000  00000000  0006c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b59f6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000541c  00000000  00000000  001b5a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000058  00000000  00000000  001bae58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006b18 	.word	0x08006b18

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08006b18 	.word	0x08006b18

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fd0a 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f81c 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f99c 	bl	8000924 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f946 	bl	800087c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80005f0:	f000 f990 	bl	8000914 <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 80005f4:	f000 f88a 	bl	800070c <MX_FDCAN1_Init>
  MX_TIM1_Init();
 80005f8:	f000 f8ec 	bl	80007d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_FDCAN_Start(&hfdcan1);
 80005fc:	4806      	ldr	r0, [pc, #24]	@ (8000618 <main+0x3c>)
 80005fe:	f001 f89f 	bl	8001740 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2101      	movs	r1, #1
 8000606:	4804      	ldr	r0, [pc, #16]	@ (8000618 <main+0x3c>)
 8000608:	f001 f920 	bl	800184c <HAL_FDCAN_ActivateNotification>
	HAL_TIM_Base_Start_IT(&htim1);
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <main+0x40>)
 800060e:	f004 fbcf 	bl	8004db0 <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		FDCAN_Send_Bridge_Heartbeat();
		FDCAN_Send_Bridge_Command();
 8000612:	f000 faa1 	bl	8000b58 <FDCAN_Send_Bridge_Command>
 8000616:	e7fc      	b.n	8000612 <main+0x36>
 8000618:	2400002c 	.word	0x2400002c
 800061c:	240000cc 	.word	0x240000cc

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	@ 0x70
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	224c      	movs	r2, #76	@ 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 fa38 	bl	8006aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2220      	movs	r2, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fa32 	bl	8006aa4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000640:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <SystemClock_Config+0xe4>)
 8000642:	f04f 32ff 	mov.w	r2, #4294967295
 8000646:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800064a:	2004      	movs	r0, #4
 800064c:	f001 fd60 	bl	8002110 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <SystemClock_Config+0xe8>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a2b      	ldr	r2, [pc, #172]	@ (8000708 <SystemClock_Config+0xe8>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <SystemClock_Config+0xe8>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800066c:	bf00      	nop
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <SystemClock_Config+0xe8>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800067a:	d1f8      	bne.n	800066e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800067c:	2321      	movs	r3, #33	@ 0x21
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000680:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000684:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000686:	2301      	movs	r3, #1
 8000688:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	2302      	movs	r3, #2
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000696:	2318      	movs	r3, #24
 8000698:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069e:	2304      	movs	r3, #4
 80006a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006a6:	230c      	movs	r3, #12
 80006a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fd84 	bl	80021c4 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c2:	f000 fa9f 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	233f      	movs	r3, #63	@ 0x3f
 80006c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80006da:	2350      	movs	r3, #80	@ 0x50
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80006de:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2102      	movs	r1, #2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 f99b 	bl	8002a28 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80006f8:	f000 fa84 	bl	8000c04 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3770      	adds	r7, #112	@ 0x70
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	58024400 	.word	0x58024400
 8000708:	58024800 	.word	0x58024800

0800070c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000710:	4b2e      	ldr	r3, [pc, #184]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000712:	4a2f      	ldr	r2, [pc, #188]	@ (80007d0 <MX_FDCAN1_Init+0xc4>)
 8000714:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000716:	4b2d      	ldr	r3, [pc, #180]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800071c:	4b2b      	ldr	r3, [pc, #172]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000722:	4b2a      	ldr	r3, [pc, #168]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000724:	2201      	movs	r2, #1
 8000726:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000728:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800072e:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000734:	4b25      	ldr	r3, [pc, #148]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000736:	2210      	movs	r2, #16
 8000738:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 800073c:	2201      	movs	r2, #1
 800073e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 3;
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000742:	2203      	movs	r2, #3
 8000744:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000746:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000748:	2202      	movs	r2, #2
 800074a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 800074e:	2201      	movs	r2, #1
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000752:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000754:	2201      	movs	r2, #1
 8000756:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000758:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 800075a:	2201      	movs	r2, #1
 800075c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800075e:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000760:	2201      	movs	r2, #1
 8000762:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000764:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000766:	2200      	movs	r2, #0
 8000768:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800076a:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 800076c:	2200      	movs	r2, #0
 800076e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000770:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000776:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 800077e:	2204      	movs	r2, #4
 8000780:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000782:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000784:	2200      	movs	r2, #0
 8000786:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000788:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 800078a:	2204      	movs	r2, #4
 800078c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000790:	2200      	movs	r2, #0
 8000792:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000794:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 8000796:	2204      	movs	r2, #4
 8000798:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 800079c:	2200      	movs	r2, #0
 800079e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 80007b4:	2204      	movs	r2, #4
 80007b6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_FDCAN1_Init+0xc0>)
 80007ba:	f000 fde3 	bl	8001384 <HAL_FDCAN_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80007c4:	f000 fa1e 	bl	8000c04 <Error_Handler>
//  hfdcan1.Init.NominalSyncJumpWidth = 1;
//  hfdcan1.Init.NominalTimeSeg1 = 3;
//  hfdcan1.Init.NominalTimeSeg2 = 2;
  /* USER CODE END FDCAN1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2400002c 	.word	0x2400002c
 80007d0:	4000a000 	.word	0x4000a000

080007d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f2:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <MX_TIM1_Init+0xa0>)
 80007f4:	4a20      	ldr	r2, [pc, #128]	@ (8000878 <MX_TIM1_Init+0xa4>)
 80007f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000-1;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <MX_TIM1_Init+0xa0>)
 80007fa:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80007fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_TIM1_Init+0xa0>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000806:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <MX_TIM1_Init+0xa0>)
 8000808:	2263      	movs	r2, #99	@ 0x63
 800080a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_TIM1_Init+0xa0>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_TIM1_Init+0xa0>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_TIM1_Init+0xa0>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800081e:	4815      	ldr	r0, [pc, #84]	@ (8000874 <MX_TIM1_Init+0xa0>)
 8000820:	f004 fa6e 	bl	8004d00 <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800082a:	f000 f9eb 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	480e      	ldr	r0, [pc, #56]	@ (8000874 <MX_TIM1_Init+0xa0>)
 800083c:	f004 fc38 	bl	80050b0 <HAL_TIM_ConfigClockSource>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000846:	f000 f9dd 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <MX_TIM1_Init+0xa0>)
 800085c:	f004 fe96 	bl	800558c <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000866:	f000 f9cd 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	240000cc 	.word	0x240000cc
 8000878:	40010000 	.word	0x40010000

0800087c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000880:	4b22      	ldr	r3, [pc, #136]	@ (800090c <MX_USART3_UART_Init+0x90>)
 8000882:	4a23      	ldr	r2, [pc, #140]	@ (8000910 <MX_USART3_UART_Init+0x94>)
 8000884:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_USART3_UART_Init+0x90>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_USART3_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <MX_USART3_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_USART3_UART_Init+0x90>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_USART3_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_USART3_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c4:	4811      	ldr	r0, [pc, #68]	@ (800090c <MX_USART3_UART_Init+0x90>)
 80008c6:	f004 ff0d 	bl	80056e4 <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f998 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	480d      	ldr	r0, [pc, #52]	@ (800090c <MX_USART3_UART_Init+0x90>)
 80008d8:	f006 f819 	bl	800690e <HAL_UARTEx_SetTxFifoThreshold>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008e2:	f000 f98f 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4808      	ldr	r0, [pc, #32]	@ (800090c <MX_USART3_UART_Init+0x90>)
 80008ea:	f006 f84e 	bl	800698a <HAL_UARTEx_SetRxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 f986 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_USART3_UART_Init+0x90>)
 80008fa:	f005 ffcf 	bl	800689c <HAL_UARTEx_DisableFifoMode>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 f97e 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	24000118 	.word	0x24000118
 8000910:	40004800 	.word	0x40004800

08000914 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	@ 0x38
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b80      	ldr	r3, [pc, #512]	@ (8000b3c <MX_GPIO_Init+0x218>)
 800093c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000940:	4a7e      	ldr	r2, [pc, #504]	@ (8000b3c <MX_GPIO_Init+0x218>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800094a:	4b7c      	ldr	r3, [pc, #496]	@ (8000b3c <MX_GPIO_Init+0x218>)
 800094c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000958:	4b78      	ldr	r3, [pc, #480]	@ (8000b3c <MX_GPIO_Init+0x218>)
 800095a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800095e:	4a77      	ldr	r2, [pc, #476]	@ (8000b3c <MX_GPIO_Init+0x218>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000968:	4b74      	ldr	r3, [pc, #464]	@ (8000b3c <MX_GPIO_Init+0x218>)
 800096a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800096e:	f003 0320 	and.w	r3, r3, #32
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b71      	ldr	r3, [pc, #452]	@ (8000b3c <MX_GPIO_Init+0x218>)
 8000978:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800097c:	4a6f      	ldr	r2, [pc, #444]	@ (8000b3c <MX_GPIO_Init+0x218>)
 800097e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000982:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000986:	4b6d      	ldr	r3, [pc, #436]	@ (8000b3c <MX_GPIO_Init+0x218>)
 8000988:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800098c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	4b69      	ldr	r3, [pc, #420]	@ (8000b3c <MX_GPIO_Init+0x218>)
 8000996:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800099a:	4a68      	ldr	r2, [pc, #416]	@ (8000b3c <MX_GPIO_Init+0x218>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009a4:	4b65      	ldr	r3, [pc, #404]	@ (8000b3c <MX_GPIO_Init+0x218>)
 80009a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	4b62      	ldr	r3, [pc, #392]	@ (8000b3c <MX_GPIO_Init+0x218>)
 80009b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009b8:	4a60      	ldr	r2, [pc, #384]	@ (8000b3c <MX_GPIO_Init+0x218>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009c2:	4b5e      	ldr	r3, [pc, #376]	@ (8000b3c <MX_GPIO_Init+0x218>)
 80009c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d0:	4b5a      	ldr	r3, [pc, #360]	@ (8000b3c <MX_GPIO_Init+0x218>)
 80009d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009d6:	4a59      	ldr	r2, [pc, #356]	@ (8000b3c <MX_GPIO_Init+0x218>)
 80009d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009dc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009e0:	4b56      	ldr	r3, [pc, #344]	@ (8000b3c <MX_GPIO_Init+0x218>)
 80009e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b53      	ldr	r3, [pc, #332]	@ (8000b3c <MX_GPIO_Init+0x218>)
 80009f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009f4:	4a51      	ldr	r2, [pc, #324]	@ (8000b3c <MX_GPIO_Init+0x218>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009fe:	4b4f      	ldr	r3, [pc, #316]	@ (8000b3c <MX_GPIO_Init+0x218>)
 8000a00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b3c <MX_GPIO_Init+0x218>)
 8000a0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a12:	4a4a      	ldr	r2, [pc, #296]	@ (8000b3c <MX_GPIO_Init+0x218>)
 8000a14:	f043 0310 	orr.w	r3, r3, #16
 8000a18:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a1c:	4b47      	ldr	r3, [pc, #284]	@ (8000b3c <MX_GPIO_Init+0x218>)
 8000a1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a30:	4843      	ldr	r0, [pc, #268]	@ (8000b40 <MX_GPIO_Init+0x21c>)
 8000a32:	f001 fb39 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a3c:	4841      	ldr	r0, [pc, #260]	@ (8000b44 <MX_GPIO_Init+0x220>)
 8000a3e:	f001 fb33 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2102      	movs	r1, #2
 8000a46:	4840      	ldr	r0, [pc, #256]	@ (8000b48 <MX_GPIO_Init+0x224>)
 8000a48:	f001 fb2e 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	483a      	ldr	r0, [pc, #232]	@ (8000b4c <MX_GPIO_Init+0x228>)
 8000a62:	f001 f971 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4830      	ldr	r0, [pc, #192]	@ (8000b40 <MX_GPIO_Init+0x21c>)
 8000a80:	f001 f962 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a84:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4829      	ldr	r0, [pc, #164]	@ (8000b44 <MX_GPIO_Init+0x220>)
 8000a9e:	f001 f953 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000aa2:	2380      	movs	r3, #128	@ 0x80
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4826      	ldr	r0, [pc, #152]	@ (8000b50 <MX_GPIO_Init+0x22c>)
 8000ab8:	f001 f946 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4820      	ldr	r0, [pc, #128]	@ (8000b54 <MX_GPIO_Init+0x230>)
 8000ad2:	f001 f939 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	4818      	ldr	r0, [pc, #96]	@ (8000b54 <MX_GPIO_Init+0x230>)
 8000af4:	f001 f928 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000af8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4810      	ldr	r0, [pc, #64]	@ (8000b54 <MX_GPIO_Init+0x230>)
 8000b12:	f001 f919 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b16:	2302      	movs	r3, #2
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <MX_GPIO_Init+0x224>)
 8000b2e:	f001 f90b 	bl	8001d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	bf00      	nop
 8000b34:	3738      	adds	r7, #56	@ 0x38
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	58021400 	.word	0x58021400
 8000b44:	58020400 	.word	0x58020400
 8000b48:	58021000 	.word	0x58021000
 8000b4c:	58020800 	.word	0x58020800
 8000b50:	58021800 	.word	0x58021800
 8000b54:	58020000 	.word	0x58020000

08000b58 <FDCAN_Send_Bridge_Command>:

/* USER CODE BEGIN 4 */
void FDCAN_Send_Bridge_Command() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

	//Kommando aufbauen
	TxHeader.Identifier = VDI_CAN_ID_LOGIN;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <FDCAN_Send_Bridge_Command+0x58>)
 8000b5e:	f240 2215 	movw	r2, #533	@ 0x215
 8000b62:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <FDCAN_Send_Bridge_Command+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <FDCAN_Send_Bridge_Command+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <FDCAN_Send_Bridge_Command+0x58>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	60da      	str	r2, [r3, #12]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <FDCAN_Send_Bridge_Command+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]

	TxData[0] = 0x01; // Laut VDI-RICHTLINIEN - Tabelle C4 - Seite 12-13
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <FDCAN_Send_Bridge_Command+0x5c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]

// Fragen ob FdCan bereit zum senden, sonst warten, Led Aus

	HAL_Delay(100);
 8000b82:	2064      	movs	r0, #100	@ 0x64
 8000b84:	f000 faca 	bl	800111c <HAL_Delay>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK) {
 8000b88:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <FDCAN_Send_Bridge_Command+0x5c>)
 8000b8a:	4909      	ldr	r1, [pc, #36]	@ (8000bb0 <FDCAN_Send_Bridge_Command+0x58>)
 8000b8c:	480a      	ldr	r0, [pc, #40]	@ (8000bb8 <FDCAN_Send_Bridge_Command+0x60>)
 8000b8e:	f000 fe02 	bl	8001796 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <FDCAN_Send_Bridge_Command+0x4c>
		// Kommando senden, Led Ein
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4807      	ldr	r0, [pc, #28]	@ (8000bbc <FDCAN_Send_Bridge_Command+0x64>)
 8000b9e:	f001 fa83 	bl	80020a8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
}
 8000ba2:	e003      	b.n	8000bac <FDCAN_Send_Bridge_Command+0x54>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <FDCAN_Send_Bridge_Command+0x64>)
 8000ba8:	f001 fa97 	bl	80020da <HAL_GPIO_TogglePin>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	240001bc 	.word	0x240001bc
 8000bb4:	240001ac 	.word	0x240001ac
 8000bb8:	2400002c 	.word	0x2400002c
 8000bbc:	58021000 	.word	0x58021000

08000bc0 <FDCAN_Send_Bridge_Heartbeat>:


void FDCAN_Send_Bridge_Heartbeat(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	//Kommando aufbauen
	TxHeaderBEAT.Identifier = VDI_CAN_ID_HEARTBEAT;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000bc6:	f240 7201 	movw	r2, #1793	@ 0x701
 8000bca:	601a      	str	r2, [r3, #0]
	TxHeaderBEAT.IdType = FDCAN_STANDARD_ID;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
	TxHeaderBEAT.TxFrameType = FDCAN_DATA_FRAME;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
	TxHeaderBEAT.DataLength = FDCAN_DLC_BYTES_1;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	60da      	str	r2, [r3, #12]
	TxHeaderBEAT.FDFormat = FDCAN_CLASSIC_CAN;
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]

	TxDataBEAT[0] = 0x05; // Laut VDI-RICHTLINIEN - Seite 9
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <FDCAN_Send_Bridge_Heartbeat+0x3c>)
 8000be6:	2205      	movs	r2, #5
 8000be8:	701a      	strb	r2, [r3, #0]

// Fragen ob FdCan bereit zum senden, sonst warten, Led Aus

//	HAL_Delay(100);
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeaderBEAT, TxDataBEAT) == HAL_OK) {
 8000bea:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <FDCAN_Send_Bridge_Heartbeat+0x3c>)
 8000bec:	4902      	ldr	r1, [pc, #8]	@ (8000bf8 <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000bee:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <FDCAN_Send_Bridge_Heartbeat+0x40>)
 8000bf0:	f000 fdd1 	bl	8001796 <HAL_FDCAN_AddMessageToTxFifoQ>
//		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	}
//	else {
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	}
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	240001e0 	.word	0x240001e0
 8000bfc:	240001b4 	.word	0x240001b4
 8000c00:	2400002c 	.word	0x2400002c

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <Error_Handler+0x8>

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <HAL_MspInit+0x30>)
 8000c18:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c1c:	4a08      	ldr	r2, [pc, #32]	@ (8000c40 <HAL_MspInit+0x30>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_MspInit+0x30>)
 8000c28:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	58024400 	.word	0x58024400

08000c44 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ba      	sub	sp, #232	@ 0xe8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	22c0      	movs	r2, #192	@ 0xc0
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f005 ff1d 	bl	8006aa4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a27      	ldr	r2, [pc, #156]	@ (8000d0c <HAL_FDCAN_MspInit+0xc8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d146      	bne.n	8000d02 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c74:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c80:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fa57 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000c98:	f7ff ffb4 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <HAL_FDCAN_MspInit+0xcc>)
 8000c9e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d10 <HAL_FDCAN_MspInit+0xcc>)
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ca8:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <HAL_FDCAN_MspInit+0xcc>)
 8000cae:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <HAL_FDCAN_MspInit+0xcc>)
 8000cbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cc0:	4a13      	ldr	r2, [pc, #76]	@ (8000d10 <HAL_FDCAN_MspInit+0xcc>)
 8000cc2:	f043 0308 	orr.w	r3, r3, #8
 8000cc6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <HAL_FDCAN_MspInit+0xcc>)
 8000ccc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cf0:	2309      	movs	r3, #9
 8000cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <HAL_FDCAN_MspInit+0xd0>)
 8000cfe:	f001 f823 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000d02:	bf00      	nop
 8000d04:	37e8      	adds	r7, #232	@ 0xe8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	4000a000 	.word	0x4000a000
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020c00 	.word	0x58020c00

08000d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0e      	ldr	r2, [pc, #56]	@ (8000d60 <HAL_TIM_Base_MspInit+0x48>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d116      	bne.n	8000d58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_TIM_Base_MspInit+0x4c>)
 8000d2c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d30:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <HAL_TIM_Base_MspInit+0x4c>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_TIM_Base_MspInit+0x4c>)
 8000d3c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2019      	movs	r0, #25
 8000d4e:	f000 fae4 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d52:	2019      	movs	r0, #25
 8000d54:	f000 fafb 	bl	800134e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40010000 	.word	0x40010000
 8000d64:	58024400 	.word	0x58024400

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	22c0      	movs	r2, #192	@ 0xc0
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 fe8b 	bl	8006aa4 <memset>
  if(huart->Instance==USART3)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a27      	ldr	r2, [pc, #156]	@ (8000e30 <HAL_UART_MspInit+0xc8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d146      	bne.n	8000e26 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d98:	f04f 0202 	mov.w	r2, #2
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 f9c6 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dba:	f7ff ff23 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <HAL_UART_MspInit+0xcc>)
 8000dc0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e34 <HAL_UART_MspInit+0xcc>)
 8000dc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dca:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <HAL_UART_MspInit+0xcc>)
 8000dd0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000dd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ddc:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <HAL_UART_MspInit+0xcc>)
 8000dde:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000de2:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <HAL_UART_MspInit+0xcc>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <HAL_UART_MspInit+0xcc>)
 8000dee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e14:	2307      	movs	r3, #7
 8000e16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <HAL_UART_MspInit+0xd0>)
 8000e22:	f000 ff91 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e26:	bf00      	nop
 8000e28:	37e8      	adds	r7, #232	@ 0xe8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40004800 	.word	0x40004800
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020c00 	.word	0x58020c00

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <NMI_Handler+0x4>

08000e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <MemManage_Handler+0x4>

08000e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e92:	f000 f923 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea0:	4803      	ldr	r0, [pc, #12]	@ (8000eb0 <TIM1_UP_IRQHandler+0x14>)
 8000ea2:	f003 fffd 	bl	8004ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
	FDCAN_Send_Bridge_Heartbeat();
 8000ea6:	f7ff fe8b 	bl	8000bc0 <FDCAN_Send_Bridge_Heartbeat>
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	240000cc 	.word	0x240000cc

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b32      	ldr	r3, [pc, #200]	@ (8000f84 <SystemInit+0xd0>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebe:	4a31      	ldr	r2, [pc, #196]	@ (8000f84 <SystemInit+0xd0>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <SystemInit+0xd4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 030f 	and.w	r3, r3, #15
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d807      	bhi.n	8000ee4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f88 <SystemInit+0xd4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 030f 	bic.w	r3, r3, #15
 8000edc:	4a2a      	ldr	r2, [pc, #168]	@ (8000f88 <SystemInit+0xd4>)
 8000ede:	f043 0303 	orr.w	r3, r3, #3
 8000ee2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ee4:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <SystemInit+0xd8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a28      	ldr	r2, [pc, #160]	@ (8000f8c <SystemInit+0xd8>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ef0:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <SystemInit+0xd8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	@ (8000f8c <SystemInit+0xd8>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4924      	ldr	r1, [pc, #144]	@ (8000f8c <SystemInit+0xd8>)
 8000efc:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <SystemInit+0xdc>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <SystemInit+0xd4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <SystemInit+0xd4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 030f 	bic.w	r3, r3, #15
 8000f16:	4a1c      	ldr	r2, [pc, #112]	@ (8000f88 <SystemInit+0xd4>)
 8000f18:	f043 0303 	orr.w	r3, r3, #3
 8000f1c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <SystemInit+0xd8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <SystemInit+0xd8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <SystemInit+0xd8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <SystemInit+0xd8>)
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <SystemInit+0xe0>)
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <SystemInit+0xd8>)
 8000f38:	4a17      	ldr	r2, [pc, #92]	@ (8000f98 <SystemInit+0xe4>)
 8000f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <SystemInit+0xd8>)
 8000f3e:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <SystemInit+0xe8>)
 8000f40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <SystemInit+0xd8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <SystemInit+0xd8>)
 8000f4a:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <SystemInit+0xe8>)
 8000f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <SystemInit+0xd8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <SystemInit+0xd8>)
 8000f56:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <SystemInit+0xe8>)
 8000f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <SystemInit+0xd8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <SystemInit+0xd8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a09      	ldr	r2, [pc, #36]	@ (8000f8c <SystemInit+0xd8>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <SystemInit+0xd8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <SystemInit+0xec>)
 8000f74:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00
 8000f88:	52002000 	.word	0x52002000
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f94:	02020200 	.word	0x02020200
 8000f98:	01ff0000 	.word	0x01ff0000
 8000f9c:	01010280 	.word	0x01010280
 8000fa0:	52004000 	.word	0x52004000

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa8:	f7ff ff84 	bl	8000eb4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f005 fd6f 	bl	8006ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fb01 	bl	80005dc <main>
  bx  lr
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000fe0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fe4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fe8:	08006bd4 	.word	0x08006bd4
  ldr r2, =_sbss
 8000fec:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ff0:	24000208 	.word	0x24000208

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 f980 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001004:	f001 fec6 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8001008:	4602      	mov	r2, r0
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_Init+0x68>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	4913      	ldr	r1, [pc, #76]	@ (8001064 <HAL_Init+0x6c>)
 8001016:	5ccb      	ldrb	r3, [r1, r3]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_Init+0x68>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_Init+0x6c>)
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <HAL_Init+0x70>)
 800103a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800103c:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <HAL_Init+0x74>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f814 	bl	8001070 <HAL_InitTick>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e002      	b.n	8001058 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001052:	f7ff fddd 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58024400 	.word	0x58024400
 8001064:	08006b7c 	.word	0x08006b7c
 8001068:	24000004 	.word	0x24000004
 800106c:	24000000 	.word	0x24000000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_InitTick+0x60>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e021      	b.n	80010c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HAL_InitTick+0x64>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f965 	bl	800136a <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f92f 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <HAL_InitTick+0x68>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2400000c 	.word	0x2400000c
 80010d4:	24000000 	.word	0x24000000
 80010d8:	24000008 	.word	0x24000008

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2400000c 	.word	0x2400000c
 8001100:	24000204 	.word	0x24000204

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	24000204 	.word	0x24000204

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2400000c 	.word	0x2400000c

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	4313      	orrs	r3, r2
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	05fa0000 	.word	0x05fa0000

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	@ (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	@ (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	@ 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff29 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff40 	bl	80011ac <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff90 	bl	8001258 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5f 	bl	8001204 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff33 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa4 	bl	80012c0 <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b098      	sub	sp, #96	@ 0x60
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800138c:	4a84      	ldr	r2, [pc, #528]	@ (80015a0 <HAL_FDCAN_Init+0x21c>)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4611      	mov	r1, r2
 8001394:	224c      	movs	r2, #76	@ 0x4c
 8001396:	4618      	mov	r0, r3
 8001398:	f005 fbb0 	bl	8006afc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e1c6      	b.n	8001734 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7e      	ldr	r2, [pc, #504]	@ (80015a4 <HAL_FDCAN_Init+0x220>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d106      	bne.n	80013be <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80013b8:	461a      	mov	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fc36 	bl	8000c44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0210 	bic.w	r2, r2, #16
 80013e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e8:	f7ff fe8c 	bl	8001104 <HAL_GetTick>
 80013ec:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013ee:	e014      	b.n	800141a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013f0:	f7ff fe88 	bl	8001104 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b0a      	cmp	r3, #10
 80013fc:	d90d      	bls.n	800141a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e18c      	b.n	8001734 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b08      	cmp	r3, #8
 8001426:	d0e3      	beq.n	80013f0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699a      	ldr	r2, [r3, #24]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001438:	f7ff fe64 	bl	8001104 <HAL_GetTick>
 800143c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800143e:	e014      	b.n	800146a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001440:	f7ff fe60 	bl	8001104 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b0a      	cmp	r3, #10
 800144c:	d90d      	bls.n	800146a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e164      	b.n	8001734 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0e3      	beq.n	8001440 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0202 	orr.w	r2, r2, #2
 8001486:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7c1b      	ldrb	r3, [r3, #16]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d108      	bne.n	80014a2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699a      	ldr	r2, [r3, #24]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	e007      	b.n	80014b2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7c5b      	ldrb	r3, [r3, #17]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d108      	bne.n	80014cc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014c8:	619a      	str	r2, [r3, #24]
 80014ca:	e007      	b.n	80014dc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80014da:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7c9b      	ldrb	r3, [r3, #18]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014f2:	619a      	str	r2, [r3, #24]
 80014f4:	e007      	b.n	8001506 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001504:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800152a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0210 	bic.w	r2, r2, #16
 800153a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0204 	orr.w	r2, r2, #4
 8001552:	619a      	str	r2, [r3, #24]
 8001554:	e030      	b.n	80015b8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d02c      	beq.n	80015b8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d020      	beq.n	80015a8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699a      	ldr	r2, [r3, #24]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001574:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0210 	orr.w	r2, r2, #16
 8001584:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d114      	bne.n	80015b8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0220 	orr.w	r2, r2, #32
 800159c:	619a      	str	r2, [r3, #24]
 800159e:	e00b      	b.n	80015b8 <HAL_FDCAN_Init+0x234>
 80015a0:	08006b30 	.word	0x08006b30
 80015a4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	3b01      	subs	r3, #1
 80015be:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015c8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015d0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	3b01      	subs	r3, #1
 80015da:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015e0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015e2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80015ec:	d115      	bne.n	800161a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f8:	3b01      	subs	r3, #1
 80015fa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015fc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	3b01      	subs	r3, #1
 8001604:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001606:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	3b01      	subs	r3, #1
 8001610:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001616:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001618:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00a      	beq.n	8001638 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001640:	4413      	add	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d011      	beq.n	800166a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800164e:	f023 0107 	bic.w	r1, r3, #7
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	3360      	adds	r3, #96	@ 0x60
 800165a:	443b      	add	r3, r7
 800165c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d011      	beq.n	8001696 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800167a:	f023 0107 	bic.w	r1, r3, #7
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3360      	adds	r3, #96	@ 0x60
 8001686:	443b      	add	r3, r7
 8001688:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169a:	2b00      	cmp	r3, #0
 800169c:	d012      	beq.n	80016c4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80016a6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	3360      	adds	r3, #96	@ 0x60
 80016b2:	443b      	add	r3, r7
 80016b4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80016b8:	011a      	lsls	r2, r3, #4
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d012      	beq.n	80016f2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80016d4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	3360      	adds	r3, #96	@ 0x60
 80016e0:	443b      	add	r3, r7
 80016e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80016e6:	021a      	lsls	r2, r3, #8
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a11      	ldr	r2, [pc, #68]	@ (800173c <HAL_FDCAN_Init+0x3b8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d107      	bne.n	800170c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f022 0203 	bic.w	r2, r2, #3
 800170a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f90b 	bl	8001940 <FDCAN_CalcultateRamBlockAddresses>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001730:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001734:	4618      	mov	r0, r3
 8001736:	3760      	adds	r7, #96	@ 0x60
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	4000a000 	.word	0x4000a000

08001740 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d111      	bne.n	8001778 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	e008      	b.n	800178a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800177e:	f043 0204 	orr.w	r2, r3, #4
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d141      	bne.n	8001832 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80017b6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017c4:	f043 0220 	orr.w	r2, r3, #32
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e038      	b.n	8001844 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80017da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e026      	b.n	8001844 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fa1d 	bl	8001c4c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2101      	movs	r1, #1
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	fa01 f202 	lsl.w	r2, r1, r2
 800181e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001822:	2201      	movs	r2, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e008      	b.n	8001844 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001838:	f043 0208 	orr.w	r2, r3, #8
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
  }
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800185e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d002      	beq.n	800186c <HAL_FDCAN_ActivateNotification+0x20>
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d155      	bne.n	8001918 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	65da      	str	r2, [r3, #92]	@ 0x5c
 800188a:	e014      	b.n	80018b6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	4013      	ands	r3, r2
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	429a      	cmp	r2, r3
 800189a:	d108      	bne.n	80018ae <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0202 	orr.w	r2, r2, #2
 80018aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018ac:	e003      	b.n	80018b6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2203      	movs	r2, #3
 80018b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d009      	beq.n	80018d4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_FDCAN_ActivateNotification+0xec>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	430b      	orrs	r3, r1
 8001904:	6553      	str	r3, [r2, #84]	@ 0x54
 8001906:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	0f9b      	lsrs	r3, r3, #30
 800190e:	490b      	ldr	r1, [pc, #44]	@ (800193c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001910:	4313      	orrs	r3, r2
 8001912:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e008      	b.n	800192a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800191e:	f043 0202 	orr.w	r2, r3, #2
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
  }
}
 800192a:	4618      	mov	r0, r3
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	3fcfffff 	.word	0x3fcfffff
 800193c:	4000a800 	.word	0x4000a800

08001940 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001956:	4ba7      	ldr	r3, [pc, #668]	@ (8001bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001958:	4013      	ands	r3, r2
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	0091      	lsls	r1, r2, #2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	430b      	orrs	r3, r1
 8001964:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001970:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001978:	041a      	lsls	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	4413      	add	r3, r2
 800198c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001996:	4b97      	ldr	r3, [pc, #604]	@ (8001bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001998:	4013      	ands	r3, r2
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	0091      	lsls	r1, r2, #2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	430b      	orrs	r3, r1
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	4413      	add	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80019d8:	4b86      	ldr	r3, [pc, #536]	@ (8001bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019da:	4013      	ands	r3, r2
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	0091      	lsls	r1, r2, #2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80019f2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	041a      	lsls	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4413      	add	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a20:	4b74      	ldr	r3, [pc, #464]	@ (8001bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	0091      	lsls	r1, r2, #2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001a3a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a42:	041a      	lsls	r2, r3, #16
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001a68:	4b62      	ldr	r3, [pc, #392]	@ (8001bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	0091      	lsls	r1, r2, #2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	4413      	add	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001a94:	4b57      	ldr	r3, [pc, #348]	@ (8001bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	0091      	lsls	r1, r2, #2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aae:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab6:	041a      	lsls	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	4413      	add	r3, r2
 8001acc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ad6:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	0091      	lsls	r1, r2, #2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001af0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af8:	041a      	lsls	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b0c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b14:	061a      	lsls	r2, r3, #24
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b24:	4b34      	ldr	r3, [pc, #208]	@ (8001bf8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001b26:	4413      	add	r3, r2
 8001b28:	009a      	lsls	r2, r3, #2
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	441a      	add	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	441a      	add	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001b90:	441a      	add	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	441a      	add	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	441a      	add	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001bdc:	441a      	add	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bea:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d915      	bls.n	8001c1c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001bf0:	e006      	b.n	8001c00 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001bf2:	bf00      	nop
 8001bf4:	ffff0003 	.word	0xffff0003
 8001bf8:	10002b00 	.word	0x10002b00
 8001bfc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c06:	f043 0220 	orr.w	r2, r3, #32
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2203      	movs	r2, #3
 8001c14:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e010      	b.n	8001c3e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e005      	b.n	8001c30 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d3f3      	bcc.n	8001c24 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10a      	bne.n	8001c78 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001c6a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e00a      	b.n	8001c8e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001c80:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001c86:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c8c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c98:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001c9e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001ca4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cba:	6839      	ldr	r1, [r7, #0]
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e020      	b.n	8001d26 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3303      	adds	r3, #3
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	440b      	add	r3, r1
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001cfc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	440b      	add	r3, r1
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d0a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	440a      	add	r2, r1
 8001d12:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d14:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3304      	adds	r3, #4
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	4a06      	ldr	r2, [pc, #24]	@ (8001d44 <FDCAN_CopyMessageToRAM+0xf8>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d3d6      	bcc.n	8001ce4 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	3724      	adds	r7, #36	@ 0x24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	08006b8c 	.word	0x08006b8c

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	@ 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d56:	4b89      	ldr	r3, [pc, #548]	@ (8001f7c <HAL_GPIO_Init+0x234>)
 8001d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d5a:	e194      	b.n	8002086 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8186 	beq.w	8002080 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d005      	beq.n	8001d8c <HAL_GPIO_Init+0x44>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d017      	beq.n	8001e2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d123      	bne.n	8001e7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	69b9      	ldr	r1, [r7, #24]
 8001e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0203 	and.w	r2, r3, #3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80e0 	beq.w	8002080 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <HAL_GPIO_Init+0x238>)
 8001ec2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8001f80 <HAL_GPIO_Init+0x238>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f80 <HAL_GPIO_Init+0x238>)
 8001ed2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ede:	4a29      	ldr	r2, [pc, #164]	@ (8001f84 <HAL_GPIO_Init+0x23c>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a20      	ldr	r2, [pc, #128]	@ (8001f88 <HAL_GPIO_Init+0x240>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d052      	beq.n	8001fb0 <HAL_GPIO_Init+0x268>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f8c <HAL_GPIO_Init+0x244>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d031      	beq.n	8001f76 <HAL_GPIO_Init+0x22e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <HAL_GPIO_Init+0x248>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02b      	beq.n	8001f72 <HAL_GPIO_Init+0x22a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f94 <HAL_GPIO_Init+0x24c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x226>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1c      	ldr	r2, [pc, #112]	@ (8001f98 <HAL_GPIO_Init+0x250>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x222>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f9c <HAL_GPIO_Init+0x254>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x21e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa0 <HAL_GPIO_Init+0x258>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x21a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <HAL_GPIO_Init+0x25c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x216>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a18      	ldr	r2, [pc, #96]	@ (8001fa8 <HAL_GPIO_Init+0x260>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a17      	ldr	r2, [pc, #92]	@ (8001fac <HAL_GPIO_Init+0x264>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x20e>
 8001f52:	2309      	movs	r3, #9
 8001f54:	e02d      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f56:	230a      	movs	r3, #10
 8001f58:	e02b      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	e029      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f5e:	2307      	movs	r3, #7
 8001f60:	e027      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f62:	2306      	movs	r3, #6
 8001f64:	e025      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e023      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e021      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e01f      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e01d      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e01b      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f7a:	bf00      	nop
 8001f7c:	58000080 	.word	0x58000080
 8001f80:	58024400 	.word	0x58024400
 8001f84:	58000400 	.word	0x58000400
 8001f88:	58020000 	.word	0x58020000
 8001f8c:	58020400 	.word	0x58020400
 8001f90:	58020800 	.word	0x58020800
 8001f94:	58020c00 	.word	0x58020c00
 8001f98:	58021000 	.word	0x58021000
 8001f9c:	58021400 	.word	0x58021400
 8001fa0:	58021800 	.word	0x58021800
 8001fa4:	58021c00 	.word	0x58021c00
 8001fa8:	58022000 	.word	0x58022000
 8001fac:	58022400 	.word	0x58022400
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc2:	4938      	ldr	r1, [pc, #224]	@ (80020a4 <HAL_GPIO_Init+0x35c>)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3301      	adds	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f ae63 	bne.w	8001d5c <HAL_GPIO_Init+0x14>
  }
}
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	3724      	adds	r7, #36	@ 0x24
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	58000400 	.word	0x58000400

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020c4:	e003      	b.n	80020ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ec:	887a      	ldrh	r2, [r7, #2]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4013      	ands	r3, r2
 80020f2:	041a      	lsls	r2, r3, #16
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43d9      	mvns	r1, r3
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	400b      	ands	r3, r1
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002118:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	2b06      	cmp	r3, #6
 8002122:	d00a      	beq.n	800213a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002124:	4b26      	ldr	r3, [pc, #152]	@ (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e040      	b.n	80021b8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e03e      	b.n	80021b8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800213a:	4b21      	ldr	r3, [pc, #132]	@ (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002142:	491f      	ldr	r1, [pc, #124]	@ (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4313      	orrs	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800214a:	f7fe ffdb 	bl	8001104 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002150:	e009      	b.n	8002166 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002152:	f7fe ffd7 	bl	8001104 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002160:	d901      	bls.n	8002166 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e028      	b.n	80021b8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002166:	4b16      	ldr	r3, [pc, #88]	@ (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800216e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002172:	d1ee      	bne.n	8002152 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b1e      	cmp	r3, #30
 8002178:	d008      	beq.n	800218c <HAL_PWREx_ConfigSupply+0x7c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b2e      	cmp	r3, #46	@ 0x2e
 800217e:	d005      	beq.n	800218c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b1d      	cmp	r3, #29
 8002184:	d002      	beq.n	800218c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b2d      	cmp	r3, #45	@ 0x2d
 800218a:	d114      	bne.n	80021b6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800218c:	f7fe ffba 	bl	8001104 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002192:	e009      	b.n	80021a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002194:	f7fe ffb6 	bl	8001104 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021a2:	d901      	bls.n	80021a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e007      	b.n	80021b8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b4:	d1ee      	bne.n	8002194 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	58024800 	.word	0x58024800

080021c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	@ 0x30
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f000 bc1f 	b.w	8002a16 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80b3 	beq.w	800234c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e6:	4b95      	ldr	r3, [pc, #596]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021f0:	4b92      	ldr	r3, [pc, #584]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d007      	beq.n	800220c <HAL_RCC_OscConfig+0x48>
 80021fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fe:	2b18      	cmp	r3, #24
 8002200:	d112      	bne.n	8002228 <HAL_RCC_OscConfig+0x64>
 8002202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d10d      	bne.n	8002228 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	4b8b      	ldr	r3, [pc, #556]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8098 	beq.w	800234a <HAL_RCC_OscConfig+0x186>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 8093 	bne.w	800234a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e3f6      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002230:	d106      	bne.n	8002240 <HAL_RCC_OscConfig+0x7c>
 8002232:	4b82      	ldr	r3, [pc, #520]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a81      	ldr	r2, [pc, #516]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e058      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d112      	bne.n	800226e <HAL_RCC_OscConfig+0xaa>
 8002248:	4b7c      	ldr	r3, [pc, #496]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a7b      	ldr	r2, [pc, #492]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b79      	ldr	r3, [pc, #484]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a78      	ldr	r2, [pc, #480]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800225a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b76      	ldr	r3, [pc, #472]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a75      	ldr	r2, [pc, #468]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e041      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002276:	d112      	bne.n	800229e <HAL_RCC_OscConfig+0xda>
 8002278:	4b70      	ldr	r3, [pc, #448]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6f      	ldr	r2, [pc, #444]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800227e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b6d      	ldr	r3, [pc, #436]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a6c      	ldr	r2, [pc, #432]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800228a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b6a      	ldr	r3, [pc, #424]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a69      	ldr	r2, [pc, #420]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	e029      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80022a6:	d112      	bne.n	80022ce <HAL_RCC_OscConfig+0x10a>
 80022a8:	4b64      	ldr	r3, [pc, #400]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a63      	ldr	r2, [pc, #396]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b61      	ldr	r3, [pc, #388]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a60      	ldr	r2, [pc, #384]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b5e      	ldr	r3, [pc, #376]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a5d      	ldr	r2, [pc, #372]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	e011      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
 80022ce:	4b5b      	ldr	r3, [pc, #364]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a5a      	ldr	r2, [pc, #360]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b58      	ldr	r3, [pc, #352]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a57      	ldr	r2, [pc, #348]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b55      	ldr	r3, [pc, #340]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a54      	ldr	r2, [pc, #336]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80022ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d013      	beq.n	8002322 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe ff03 	bl	8001104 <HAL_GetTick>
 80022fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002302:	f7fe feff 	bl	8001104 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	@ 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e380      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002314:	4b49      	ldr	r3, [pc, #292]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x13e>
 8002320:	e014      	b.n	800234c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe feef 	bl	8001104 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232a:	f7fe feeb 	bl	8001104 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	@ 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e36c      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800233c:	4b3f      	ldr	r3, [pc, #252]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x166>
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 808c 	beq.w	8002472 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235a:	4b38      	ldr	r3, [pc, #224]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002362:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002364:	4b35      	ldr	r3, [pc, #212]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002368:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <HAL_RCC_OscConfig+0x1bc>
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	2b18      	cmp	r3, #24
 8002374:	d137      	bne.n	80023e6 <HAL_RCC_OscConfig+0x222>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d132      	bne.n	80023e6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002380:	4b2e      	ldr	r3, [pc, #184]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_OscConfig+0x1d4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e33e      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002398:	4b28      	ldr	r3, [pc, #160]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 0219 	bic.w	r2, r3, #25
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4925      	ldr	r1, [pc, #148]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe feab 	bl	8001104 <HAL_GetTick>
 80023ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe fea7 	bl	8001104 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e328      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c4:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	4917      	ldr	r1, [pc, #92]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e4:	e045      	b.n	8002472 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d028      	beq.n	8002440 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023ee:	4b13      	ldr	r3, [pc, #76]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 0219 	bic.w	r2, r3, #25
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4910      	ldr	r1, [pc, #64]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fe80 	bl	8001104 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002408:	f7fe fe7c 	bl	8001104 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e2fd      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800241a:	4b08      	ldr	r3, [pc, #32]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	061b      	lsls	r3, r3, #24
 8002434:	4901      	ldr	r1, [pc, #4]	@ (800243c <HAL_RCC_OscConfig+0x278>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
 800243a:	e01a      	b.n	8002472 <HAL_RCC_OscConfig+0x2ae>
 800243c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002440:	4b97      	ldr	r3, [pc, #604]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a96      	ldr	r2, [pc, #600]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fe5a 	bl	8001104 <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002454:	f7fe fe56 	bl	8001104 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e2d7      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002466:	4b8e      	ldr	r3, [pc, #568]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d06a      	beq.n	8002554 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247e:	4b88      	ldr	r3, [pc, #544]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002486:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002488:	4b85      	ldr	r3, [pc, #532]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800248a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d007      	beq.n	80024a4 <HAL_RCC_OscConfig+0x2e0>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b18      	cmp	r3, #24
 8002498:	d11b      	bne.n	80024d2 <HAL_RCC_OscConfig+0x30e>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d116      	bne.n	80024d2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024a4:	4b7e      	ldr	r3, [pc, #504]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_OscConfig+0x2f8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b80      	cmp	r3, #128	@ 0x80
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e2ac      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024bc:	4b78      	ldr	r3, [pc, #480]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	4975      	ldr	r1, [pc, #468]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024d0:	e040      	b.n	8002554 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d023      	beq.n	8002522 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024da:	4b71      	ldr	r3, [pc, #452]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a70      	ldr	r2, [pc, #448]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 80024e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe fe0d 	bl	8001104 <HAL_GetTick>
 80024ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024ee:	f7fe fe09 	bl	8001104 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e28a      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002500:	4b67      	ldr	r3, [pc, #412]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800250c:	4b64      	ldr	r3, [pc, #400]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	4961      	ldr	r1, [pc, #388]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800251c:	4313      	orrs	r3, r2
 800251e:	60cb      	str	r3, [r1, #12]
 8002520:	e018      	b.n	8002554 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002522:	4b5f      	ldr	r3, [pc, #380]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a5e      	ldr	r2, [pc, #376]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800252c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7fe fde9 	bl	8001104 <HAL_GetTick>
 8002532:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002536:	f7fe fde5 	bl	8001104 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e266      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002548:	4b55      	ldr	r3, [pc, #340]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d036      	beq.n	80025ce <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d019      	beq.n	800259c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002568:	4b4d      	ldr	r3, [pc, #308]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800256a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800256c:	4a4c      	ldr	r2, [pc, #304]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fdc6 	bl	8001104 <HAL_GetTick>
 8002578:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257c:	f7fe fdc2 	bl	8001104 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e243      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800258e:	4b44      	ldr	r3, [pc, #272]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x3b8>
 800259a:	e018      	b.n	80025ce <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259c:	4b40      	ldr	r3, [pc, #256]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800259e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a0:	4a3f      	ldr	r2, [pc, #252]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7fe fdac 	bl	8001104 <HAL_GetTick>
 80025ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b0:	f7fe fda8 	bl	8001104 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e229      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025c2:	4b37      	ldr	r3, [pc, #220]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 80025c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d019      	beq.n	8002616 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025e2:	4b2f      	ldr	r3, [pc, #188]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2e      	ldr	r2, [pc, #184]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 80025e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fd89 	bl	8001104 <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f6:	f7fe fd85 	bl	8001104 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e206      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002608:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x432>
 8002614:	e018      	b.n	8002648 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002616:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a21      	ldr	r2, [pc, #132]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800261c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002620:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002622:	f7fe fd6f 	bl	8001104 <HAL_GetTick>
 8002626:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262a:	f7fe fd6b 	bl	8001104 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1ec      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80af 	beq.w	80027b4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002656:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <HAL_RCC_OscConfig+0x4e0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a12      	ldr	r2, [pc, #72]	@ (80026a4 <HAL_RCC_OscConfig+0x4e0>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002660:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002662:	f7fe fd4f 	bl	8001104 <HAL_GetTick>
 8002666:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7fe fd4b 	bl	8001104 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	@ 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1cc      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800267c:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <HAL_RCC_OscConfig+0x4e0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10b      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4e4>
 8002690:	4b03      	ldr	r3, [pc, #12]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002694:	4a02      	ldr	r2, [pc, #8]	@ (80026a0 <HAL_RCC_OscConfig+0x4dc>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	@ 0x70
 800269c:	e05b      	b.n	8002756 <HAL_RCC_OscConfig+0x592>
 800269e:	bf00      	nop
 80026a0:	58024400 	.word	0x58024400
 80026a4:	58024800 	.word	0x58024800
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d112      	bne.n	80026d6 <HAL_RCC_OscConfig+0x512>
 80026b0:	4b9d      	ldr	r3, [pc, #628]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b4:	4a9c      	ldr	r2, [pc, #624]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80026bc:	4b9a      	ldr	r3, [pc, #616]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c0:	4a99      	ldr	r2, [pc, #612]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c8:	4b97      	ldr	r3, [pc, #604]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	4a96      	ldr	r2, [pc, #600]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026ce:	f023 0304 	bic.w	r3, r3, #4
 80026d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d4:	e03f      	b.n	8002756 <HAL_RCC_OscConfig+0x592>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x540>
 80026de:	4b92      	ldr	r3, [pc, #584]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	4a91      	ldr	r2, [pc, #580]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ee:	4a8e      	ldr	r2, [pc, #568]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f6:	4b8c      	ldr	r3, [pc, #560]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	4a8b      	ldr	r2, [pc, #556]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	@ 0x70
 8002702:	e028      	b.n	8002756 <HAL_RCC_OscConfig+0x592>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b85      	cmp	r3, #133	@ 0x85
 800270a:	d112      	bne.n	8002732 <HAL_RCC_OscConfig+0x56e>
 800270c:	4b86      	ldr	r3, [pc, #536]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002710:	4a85      	ldr	r2, [pc, #532]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	@ 0x70
 8002718:	4b83      	ldr	r3, [pc, #524]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271c:	4a82      	ldr	r2, [pc, #520]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800271e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002722:	6713      	str	r3, [r2, #112]	@ 0x70
 8002724:	4b80      	ldr	r3, [pc, #512]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002728:	4a7f      	ldr	r2, [pc, #508]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002730:	e011      	b.n	8002756 <HAL_RCC_OscConfig+0x592>
 8002732:	4b7d      	ldr	r3, [pc, #500]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002736:	4a7c      	ldr	r2, [pc, #496]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	@ 0x70
 800273e:	4b7a      	ldr	r3, [pc, #488]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002742:	4a79      	ldr	r2, [pc, #484]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	6713      	str	r3, [r2, #112]	@ 0x70
 800274a:	4b77      	ldr	r3, [pc, #476]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	4a76      	ldr	r2, [pc, #472]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002754:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d015      	beq.n	800278a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7fe fcd1 	bl	8001104 <HAL_GetTick>
 8002762:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fccd 	bl	8001104 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e14c      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800277c:	4b6a      	ldr	r3, [pc, #424]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ee      	beq.n	8002766 <HAL_RCC_OscConfig+0x5a2>
 8002788:	e014      	b.n	80027b4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7fe fcbb 	bl	8001104 <HAL_GetTick>
 800278e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7fe fcb7 	bl	8001104 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e136      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ee      	bne.n	8002792 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 812b 	beq.w	8002a14 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027be:	4b5a      	ldr	r3, [pc, #360]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027c6:	2b18      	cmp	r3, #24
 80027c8:	f000 80bb 	beq.w	8002942 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	f040 8095 	bne.w	8002900 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b54      	ldr	r3, [pc, #336]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a53      	ldr	r2, [pc, #332]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80027dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fe fc8f 	bl	8001104 <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fe fc8b 	bl	8001104 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e10c      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b47      	ldr	r3, [pc, #284]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800280a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800280c:	4b47      	ldr	r3, [pc, #284]	@ (800292c <HAL_RCC_OscConfig+0x768>)
 800280e:	4013      	ands	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	430a      	orrs	r2, r1
 800281c:	4942      	ldr	r1, [pc, #264]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800281e:	4313      	orrs	r3, r2
 8002820:	628b      	str	r3, [r1, #40]	@ 0x28
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	3b01      	subs	r3, #1
 8002828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002830:	3b01      	subs	r3, #1
 8002832:	025b      	lsls	r3, r3, #9
 8002834:	b29b      	uxth	r3, r3
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283c:	3b01      	subs	r3, #1
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284a:	3b01      	subs	r3, #1
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002852:	4935      	ldr	r1, [pc, #212]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002854:	4313      	orrs	r3, r2
 8002856:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002858:	4b33      	ldr	r3, [pc, #204]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	4a32      	ldr	r2, [pc, #200]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002864:	4b30      	ldr	r3, [pc, #192]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002868:	4b31      	ldr	r3, [pc, #196]	@ (8002930 <HAL_RCC_OscConfig+0x76c>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002870:	00d2      	lsls	r2, r2, #3
 8002872:	492d      	ldr	r1, [pc, #180]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002874:	4313      	orrs	r3, r2
 8002876:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002878:	4b2b      	ldr	r3, [pc, #172]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287c:	f023 020c 	bic.w	r2, r3, #12
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	4928      	ldr	r1, [pc, #160]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002886:	4313      	orrs	r3, r2
 8002888:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800288a:	4b27      	ldr	r3, [pc, #156]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800288c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288e:	f023 0202 	bic.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	4924      	ldr	r1, [pc, #144]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002898:	4313      	orrs	r3, r2
 800289a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800289c:	4b22      	ldr	r3, [pc, #136]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	4a21      	ldr	r2, [pc, #132]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80028ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80028ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028c0:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	4a18      	ldr	r2, [pc, #96]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028cc:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a15      	ldr	r2, [pc, #84]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80028d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fc14 	bl	8001104 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fc10 	bl	8001104 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e091      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x71c>
 80028fe:	e089      	b.n	8002a14 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a08      	ldr	r2, [pc, #32]	@ (8002928 <HAL_RCC_OscConfig+0x764>)
 8002906:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fbfa 	bl	8001104 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002912:	e00f      	b.n	8002934 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fbf6 	bl	8001104 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d908      	bls.n	8002934 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e077      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
 8002926:	bf00      	nop
 8002928:	58024400 	.word	0x58024400
 800292c:	fffffc0c 	.word	0xfffffc0c
 8002930:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002934:	4b3a      	ldr	r3, [pc, #232]	@ (8002a20 <HAL_RCC_OscConfig+0x85c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e9      	bne.n	8002914 <HAL_RCC_OscConfig+0x750>
 8002940:	e068      	b.n	8002a14 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002942:	4b37      	ldr	r3, [pc, #220]	@ (8002a20 <HAL_RCC_OscConfig+0x85c>)
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002948:	4b35      	ldr	r3, [pc, #212]	@ (8002a20 <HAL_RCC_OscConfig+0x85c>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	2b01      	cmp	r3, #1
 8002954:	d031      	beq.n	80029ba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f003 0203 	and.w	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d12a      	bne.n	80029ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d122      	bne.n	80029ba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d11a      	bne.n	80029ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	0a5b      	lsrs	r3, r3, #9
 8002988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002990:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d111      	bne.n	80029ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d108      	bne.n	80029ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	0e1b      	lsrs	r3, r3, #24
 80029ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d001      	beq.n	80029be <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02b      	b.n	8002a16 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029be:	4b18      	ldr	r3, [pc, #96]	@ (8002a20 <HAL_RCC_OscConfig+0x85c>)
 80029c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c2:	08db      	lsrs	r3, r3, #3
 80029c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029c8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d01f      	beq.n	8002a14 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80029d4:	4b12      	ldr	r3, [pc, #72]	@ (8002a20 <HAL_RCC_OscConfig+0x85c>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	4a11      	ldr	r2, [pc, #68]	@ (8002a20 <HAL_RCC_OscConfig+0x85c>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029e0:	f7fe fb90 	bl	8001104 <HAL_GetTick>
 80029e4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80029e6:	bf00      	nop
 80029e8:	f7fe fb8c 	bl	8001104 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d0f9      	beq.n	80029e8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <HAL_RCC_OscConfig+0x85c>)
 80029f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <HAL_RCC_OscConfig+0x860>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a00:	00d2      	lsls	r2, r2, #3
 8002a02:	4907      	ldr	r1, [pc, #28]	@ (8002a20 <HAL_RCC_OscConfig+0x85c>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCC_OscConfig+0x85c>)
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <HAL_RCC_OscConfig+0x85c>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3730      	adds	r7, #48	@ 0x30
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	58024400 	.word	0x58024400
 8002a24:	ffff0007 	.word	0xffff0007

08002a28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e19c      	b.n	8002d76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c68 <HAL_RCC_ClockConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d910      	bls.n	8002a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b87      	ldr	r3, [pc, #540]	@ (8002c68 <HAL_RCC_ClockConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 020f 	bic.w	r2, r3, #15
 8002a52:	4985      	ldr	r1, [pc, #532]	@ (8002c68 <HAL_RCC_ClockConfig+0x240>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b83      	ldr	r3, [pc, #524]	@ (8002c68 <HAL_RCC_ClockConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e184      	b.n	8002d76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d010      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	4b7b      	ldr	r3, [pc, #492]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d908      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a88:	4b78      	ldr	r3, [pc, #480]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	4975      	ldr	r1, [pc, #468]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	4b70      	ldr	r3, [pc, #448]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d908      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	496a      	ldr	r1, [pc, #424]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	4b64      	ldr	r3, [pc, #400]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d908      	bls.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ae4:	4b61      	ldr	r3, [pc, #388]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	495e      	ldr	r1, [pc, #376]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d010      	beq.n	8002b24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	4b59      	ldr	r3, [pc, #356]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d908      	bls.n	8002b24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b12:	4b56      	ldr	r3, [pc, #344]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4953      	ldr	r1, [pc, #332]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d010      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	4b4d      	ldr	r3, [pc, #308]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d908      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b4a      	ldr	r3, [pc, #296]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f023 020f 	bic.w	r2, r3, #15
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4947      	ldr	r1, [pc, #284]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d055      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b5e:	4b43      	ldr	r3, [pc, #268]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	4940      	ldr	r1, [pc, #256]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b78:	4b3c      	ldr	r3, [pc, #240]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d121      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0f6      	b.n	8002d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d107      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b90:	4b36      	ldr	r3, [pc, #216]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d115      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0ea      	b.n	8002d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ba8:	4b30      	ldr	r3, [pc, #192]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0de      	b.n	8002d76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0d6      	b.n	8002d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bc8:	4b28      	ldr	r3, [pc, #160]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f023 0207 	bic.w	r2, r3, #7
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4925      	ldr	r1, [pc, #148]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bda:	f7fe fa93 	bl	8001104 <HAL_GetTick>
 8002bde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be2:	f7fe fa8f 	bl	8001104 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0be      	b.n	8002d76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d1eb      	bne.n	8002be2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d208      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c26:	4b11      	ldr	r3, [pc, #68]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f023 020f 	bic.w	r2, r3, #15
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	490e      	ldr	r1, [pc, #56]	@ (8002c6c <HAL_RCC_ClockConfig+0x244>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_RCC_ClockConfig+0x240>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d214      	bcs.n	8002c70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b08      	ldr	r3, [pc, #32]	@ (8002c68 <HAL_RCC_ClockConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 020f 	bic.w	r2, r3, #15
 8002c4e:	4906      	ldr	r1, [pc, #24]	@ (8002c68 <HAL_RCC_ClockConfig+0x240>)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <HAL_RCC_ClockConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e086      	b.n	8002d76 <HAL_RCC_ClockConfig+0x34e>
 8002c68:	52002000 	.word	0x52002000
 8002c6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	4b3f      	ldr	r3, [pc, #252]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d208      	bcs.n	8002c9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	4939      	ldr	r1, [pc, #228]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	4b34      	ldr	r3, [pc, #208]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d208      	bcs.n	8002ccc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cba:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	492e      	ldr	r1, [pc, #184]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699a      	ldr	r2, [r3, #24]
 8002cdc:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d208      	bcs.n	8002cfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ce8:	4b25      	ldr	r3, [pc, #148]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4922      	ldr	r1, [pc, #136]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d010      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d208      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d16:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4917      	ldr	r1, [pc, #92]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002d28:	f000 f834 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b14      	ldr	r3, [pc, #80]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	4912      	ldr	r1, [pc, #72]	@ (8002d84 <HAL_RCC_ClockConfig+0x35c>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
 8002d44:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002d46:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <HAL_RCC_ClockConfig+0x358>)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d84 <HAL_RCC_ClockConfig+0x35c>)
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <HAL_RCC_ClockConfig+0x360>)
 8002d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d60:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <HAL_RCC_ClockConfig+0x364>)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <HAL_RCC_ClockConfig+0x368>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe f980 	bl	8001070 <HAL_InitTick>
 8002d70:	4603      	mov	r3, r0
 8002d72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	58024400 	.word	0x58024400
 8002d84:	08006b7c 	.word	0x08006b7c
 8002d88:	24000004 	.word	0x24000004
 8002d8c:	24000000 	.word	0x24000000
 8002d90:	24000008 	.word	0x24000008

08002d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	@ 0x24
 8002d98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d9a:	4bb3      	ldr	r3, [pc, #716]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002da2:	2b18      	cmp	r3, #24
 8002da4:	f200 8155 	bhi.w	8003052 <HAL_RCC_GetSysClockFreq+0x2be>
 8002da8:	a201      	add	r2, pc, #4	@ (adr r2, 8002db0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002e15 	.word	0x08002e15
 8002db4:	08003053 	.word	0x08003053
 8002db8:	08003053 	.word	0x08003053
 8002dbc:	08003053 	.word	0x08003053
 8002dc0:	08003053 	.word	0x08003053
 8002dc4:	08003053 	.word	0x08003053
 8002dc8:	08003053 	.word	0x08003053
 8002dcc:	08003053 	.word	0x08003053
 8002dd0:	08002e3b 	.word	0x08002e3b
 8002dd4:	08003053 	.word	0x08003053
 8002dd8:	08003053 	.word	0x08003053
 8002ddc:	08003053 	.word	0x08003053
 8002de0:	08003053 	.word	0x08003053
 8002de4:	08003053 	.word	0x08003053
 8002de8:	08003053 	.word	0x08003053
 8002dec:	08003053 	.word	0x08003053
 8002df0:	08002e41 	.word	0x08002e41
 8002df4:	08003053 	.word	0x08003053
 8002df8:	08003053 	.word	0x08003053
 8002dfc:	08003053 	.word	0x08003053
 8002e00:	08003053 	.word	0x08003053
 8002e04:	08003053 	.word	0x08003053
 8002e08:	08003053 	.word	0x08003053
 8002e0c:	08003053 	.word	0x08003053
 8002e10:	08002e47 	.word	0x08002e47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e14:	4b94      	ldr	r3, [pc, #592]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d009      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e20:	4b91      	ldr	r3, [pc, #580]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	4a90      	ldr	r2, [pc, #576]	@ (800306c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e32:	e111      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e34:	4b8d      	ldr	r3, [pc, #564]	@ (800306c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e36:	61bb      	str	r3, [r7, #24]
      break;
 8002e38:	e10e      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e3c:	61bb      	str	r3, [r7, #24]
      break;
 8002e3e:	e10b      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e40:	4b8c      	ldr	r3, [pc, #560]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e42:	61bb      	str	r3, [r7, #24]
      break;
 8002e44:	e108      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e46:	4b88      	ldr	r3, [pc, #544]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e50:	4b85      	ldr	r3, [pc, #532]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e5c:	4b82      	ldr	r3, [pc, #520]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e66:	4b80      	ldr	r3, [pc, #512]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e6a:	08db      	lsrs	r3, r3, #3
 8002e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80e1 	beq.w	800304c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	f000 8083 	beq.w	8002f98 <HAL_RCC_GetSysClockFreq+0x204>
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	f200 80a1 	bhi.w	8002fdc <HAL_RCC_GetSysClockFreq+0x248>
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x114>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d056      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ea6:	e099      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d02d      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	08db      	lsrs	r3, r3, #3
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	4a6b      	ldr	r2, [pc, #428]	@ (800306c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ede:	4b62      	ldr	r3, [pc, #392]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ef2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f0e:	e087      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800307c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f22:	4b51      	ldr	r3, [pc, #324]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f52:	e065      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f66:	4b40      	ldr	r3, [pc, #256]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f96:	e043      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003084 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002faa:	4b2f      	ldr	r3, [pc, #188]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fbe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fda:	e021      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fee:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003002:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800300a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800301e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003020:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003024:	0a5b      	lsrs	r3, r3, #9
 8003026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800302a:	3301      	adds	r3, #1
 800302c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	ee07 3a90 	vmov	s15, r3
 8003034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003038:	edd7 6a07 	vldr	s13, [r7, #28]
 800303c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003044:	ee17 3a90 	vmov	r3, s15
 8003048:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800304a:	e005      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
      break;
 8003050:	e002      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003052:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003054:	61bb      	str	r3, [r7, #24]
      break;
 8003056:	bf00      	nop
  }

  return sysclockfreq;
 8003058:	69bb      	ldr	r3, [r7, #24]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3724      	adds	r7, #36	@ 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	58024400 	.word	0x58024400
 800306c:	03d09000 	.word	0x03d09000
 8003070:	003d0900 	.word	0x003d0900
 8003074:	007a1200 	.word	0x007a1200
 8003078:	46000000 	.word	0x46000000
 800307c:	4c742400 	.word	0x4c742400
 8003080:	4a742400 	.word	0x4a742400
 8003084:	4af42400 	.word	0x4af42400

08003088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800308e:	f7ff fe81 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8003092:	4602      	mov	r2, r0
 8003094:	4b10      	ldr	r3, [pc, #64]	@ (80030d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	490f      	ldr	r1, [pc, #60]	@ (80030dc <HAL_RCC_GetHCLKFreq+0x54>)
 80030a0:	5ccb      	ldrb	r3, [r1, r3]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	fa22 f303 	lsr.w	r3, r2, r3
 80030aa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80030ac:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <HAL_RCC_GetHCLKFreq+0x54>)
 80030b6:	5cd3      	ldrb	r3, [r2, r3]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a07      	ldr	r2, [pc, #28]	@ (80030e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80030c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030c6:	4a07      	ldr	r2, [pc, #28]	@ (80030e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	58024400 	.word	0x58024400
 80030dc:	08006b7c 	.word	0x08006b7c
 80030e0:	24000004 	.word	0x24000004
 80030e4:	24000000 	.word	0x24000000

080030e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80030ec:	f7ff ffcc 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4904      	ldr	r1, [pc, #16]	@ (8003110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	58024400 	.word	0x58024400
 8003110:	08006b7c 	.word	0x08006b7c

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003118:	f7ff ffb6 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4904      	ldr	r1, [pc, #16]	@ (800313c <HAL_RCC_GetPCLK2Freq+0x28>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	58024400 	.word	0x58024400
 800313c:	08006b7c 	.word	0x08006b7c

08003140 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003144:	b0c8      	sub	sp, #288	@ 0x120
 8003146:	af00      	add	r7, sp, #0
 8003148:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800314c:	2300      	movs	r3, #0
 800314e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003152:	2300      	movs	r3, #0
 8003154:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003164:	2500      	movs	r5, #0
 8003166:	ea54 0305 	orrs.w	r3, r4, r5
 800316a:	d049      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003172:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003176:	d02f      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003178:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800317c:	d828      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800317e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003182:	d01a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003188:	d822      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800318e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003192:	d007      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003194:	e01c      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003196:	4ba7      	ldr	r3, [pc, #668]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319a:	4aa6      	ldr	r2, [pc, #664]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800319c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031a2:	e01a      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031a8:	3308      	adds	r3, #8
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 fc43 	bl	8004a38 <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031b8:	e00f      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031be:	3328      	adds	r3, #40	@ 0x28
 80031c0:	2102      	movs	r1, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 fcea 	bl	8004b9c <RCCEx_PLL3_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031ce:	e004      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80031d6:	e000      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80031d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031e2:	4b94      	ldr	r3, [pc, #592]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80031ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031f0:	4a90      	ldr	r2, [pc, #576]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f2:	430b      	orrs	r3, r1
 80031f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80031f6:	e003      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80031fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800320c:	f04f 0900 	mov.w	r9, #0
 8003210:	ea58 0309 	orrs.w	r3, r8, r9
 8003214:	d047      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800321a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321c:	2b04      	cmp	r3, #4
 800321e:	d82a      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003220:	a201      	add	r2, pc, #4	@ (adr r2, 8003228 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800323d 	.word	0x0800323d
 800322c:	0800324b 	.word	0x0800324b
 8003230:	08003261 	.word	0x08003261
 8003234:	0800327f 	.word	0x0800327f
 8003238:	0800327f 	.word	0x0800327f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323c:	4b7d      	ldr	r3, [pc, #500]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	4a7c      	ldr	r2, [pc, #496]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003248:	e01a      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800324a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800324e:	3308      	adds	r3, #8
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f001 fbf0 	bl	8004a38 <RCCEx_PLL2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800325e:	e00f      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003264:	3328      	adds	r3, #40	@ 0x28
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f001 fc97 	bl	8004b9c <RCCEx_PLL3_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003274:	e004      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800327c:	e000      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800327e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003280:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003288:	4b6a      	ldr	r3, [pc, #424]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800328a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328c:	f023 0107 	bic.w	r1, r3, #7
 8003290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	4a67      	ldr	r2, [pc, #412]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003298:	430b      	orrs	r3, r1
 800329a:	6513      	str	r3, [r2, #80]	@ 0x50
 800329c:	e003      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80032a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80032a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80032b2:	f04f 0b00 	mov.w	fp, #0
 80032b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80032ba:	d054      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80032bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80032c6:	d036      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80032c8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80032cc:	d82f      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d2:	d032      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d8:	d829      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032da:	2bc0      	cmp	r3, #192	@ 0xc0
 80032dc:	d02f      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80032de:	2bc0      	cmp	r3, #192	@ 0xc0
 80032e0:	d825      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032e2:	2b80      	cmp	r3, #128	@ 0x80
 80032e4:	d018      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80032e6:	2b80      	cmp	r3, #128	@ 0x80
 80032e8:	d821      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80032ee:	2b40      	cmp	r3, #64	@ 0x40
 80032f0:	d007      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80032f2:	e01c      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	4a4e      	ldr	r2, [pc, #312]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003300:	e01e      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003306:	3308      	adds	r3, #8
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f001 fb94 	bl	8004a38 <RCCEx_PLL2_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003316:	e013      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800331c:	3328      	adds	r3, #40	@ 0x28
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f001 fc3b 	bl	8004b9c <RCCEx_PLL3_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800332c:	e008      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003334:	e004      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003336:	bf00      	nop
 8003338:	e002      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800333a:	bf00      	nop
 800333c:	e000      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800333e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003340:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003348:	4b3a      	ldr	r3, [pc, #232]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800334a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003356:	4a37      	ldr	r2, [pc, #220]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003358:	430b      	orrs	r3, r1
 800335a:	6513      	str	r3, [r2, #80]	@ 0x50
 800335c:	e003      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003362:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003372:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003376:	2300      	movs	r3, #0
 8003378:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800337c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003380:	460b      	mov	r3, r1
 8003382:	4313      	orrs	r3, r2
 8003384:	d05c      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003386:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800338a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003390:	d03b      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003392:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003396:	d834      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800339c:	d037      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800339e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033a2:	d82e      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033a8:	d033      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033aa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033ae:	d828      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b4:	d01a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80033b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ba:	d822      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80033c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033c4:	d007      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80033c6:	e01c      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	4a19      	ldr	r2, [pc, #100]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80033d4:	e01e      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033da:	3308      	adds	r3, #8
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 fb2a 	bl	8004a38 <RCCEx_PLL2_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80033ea:	e013      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033f0:	3328      	adds	r3, #40	@ 0x28
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 fbd1 	bl	8004b9c <RCCEx_PLL3_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003400:	e008      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003408:	e004      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003414:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10d      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800341c:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800341e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003420:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342a:	4a02      	ldr	r2, [pc, #8]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800342c:	430b      	orrs	r3, r1
 800342e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003430:	e006      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003432:	bf00      	nop
 8003434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800343c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800344c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003456:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800345a:	460b      	mov	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	d03a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003466:	2b30      	cmp	r3, #48	@ 0x30
 8003468:	d01f      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800346a:	2b30      	cmp	r3, #48	@ 0x30
 800346c:	d819      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800346e:	2b20      	cmp	r3, #32
 8003470:	d00c      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003472:	2b20      	cmp	r3, #32
 8003474:	d815      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d019      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800347a:	2b10      	cmp	r3, #16
 800347c:	d111      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347e:	4bae      	ldr	r3, [pc, #696]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	4aad      	ldr	r2, [pc, #692]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800348a:	e011      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003490:	3308      	adds	r3, #8
 8003492:	2102      	movs	r1, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f001 facf 	bl	8004a38 <RCCEx_PLL2_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80034a0:	e006      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80034a8:	e002      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80034ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80034b8:	4b9f      	ldr	r3, [pc, #636]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80034c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c6:	4a9c      	ldr	r2, [pc, #624]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034c8:	430b      	orrs	r3, r1
 80034ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80034e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80034ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4313      	orrs	r3, r2
 80034f4:	d051      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80034f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003500:	d035      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003506:	d82e      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003508:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800350c:	d031      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800350e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003512:	d828      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003518:	d01a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800351a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800351e:	d822      	bhi.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003528:	d007      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800352a:	e01c      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800352c:	4b82      	ldr	r3, [pc, #520]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	4a81      	ldr	r2, [pc, #516]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003538:	e01c      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800353a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800353e:	3308      	adds	r3, #8
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fa78 	bl	8004a38 <RCCEx_PLL2_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800354e:	e011      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003554:	3328      	adds	r3, #40	@ 0x28
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fb1f 	bl	8004b9c <RCCEx_PLL3_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003564:	e006      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800356c:	e002      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800356e:	bf00      	nop
 8003570:	e000      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800357c:	4b6e      	ldr	r3, [pc, #440]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800357e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003580:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800358a:	4a6b      	ldr	r2, [pc, #428]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800358c:	430b      	orrs	r3, r1
 800358e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003596:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800359a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80035a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80035b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d053      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80035ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c4:	d033      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80035c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035ca:	d82c      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035d0:	d02f      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80035d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035d6:	d826      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035dc:	d02b      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035e2:	d820      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035e8:	d012      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80035ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035ee:	d81a      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d022      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f8:	d115      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035fe:	3308      	adds	r3, #8
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fa18 	bl	8004a38 <RCCEx_PLL2_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800360e:	e015      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003614:	3328      	adds	r3, #40	@ 0x28
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f001 fabf 	bl	8004b9c <RCCEx_PLL3_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003624:	e00a      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800362c:	e006      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800362e:	bf00      	nop
 8003630:	e004      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003632:	bf00      	nop
 8003634:	e002      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800363a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003644:	4b3c      	ldr	r3, [pc, #240]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003648:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800364c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003652:	4a39      	ldr	r2, [pc, #228]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003654:	430b      	orrs	r3, r1
 8003656:	6513      	str	r3, [r2, #80]	@ 0x50
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800365e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800366e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003672:	2300      	movs	r3, #0
 8003674:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003678:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800367c:	460b      	mov	r3, r1
 800367e:	4313      	orrs	r3, r2
 8003680:	d060      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003686:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800368a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800368e:	d039      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003690:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003694:	d832      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800369a:	d035      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800369c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036a0:	d82c      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a6:	d031      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ac:	d826      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036b2:	d02d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80036b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036b8:	d820      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036be:	d012      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80036c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036c4:	d81a      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d024      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80036ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ce:	d115      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036d4:	3308      	adds	r3, #8
 80036d6:	2101      	movs	r1, #1
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 f9ad 	bl	8004a38 <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036e4:	e017      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ea:	3328      	adds	r3, #40	@ 0x28
 80036ec:	2101      	movs	r1, #1
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 fa54 	bl	8004b9c <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036fa:	e00c      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003702:	e008      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003704:	bf00      	nop
 8003706:	e006      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003708:	bf00      	nop
 800370a:	e004      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800370c:	bf00      	nop
 800370e:	e002      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003716:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10e      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800372a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800372e:	4a02      	ldr	r2, [pc, #8]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003730:	430b      	orrs	r3, r1
 8003732:	6593      	str	r3, [r2, #88]	@ 0x58
 8003734:	e006      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003736:	bf00      	nop
 8003738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003740:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800375a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	d037      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800376a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800376e:	d00e      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003774:	d816      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d018      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800377a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800377e:	d111      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003780:	4bc4      	ldr	r3, [pc, #784]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	4ac3      	ldr	r2, [pc, #780]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800378c:	e00f      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800378e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003792:	3308      	adds	r3, #8
 8003794:	2101      	movs	r1, #1
 8003796:	4618      	mov	r0, r3
 8003798:	f001 f94e 	bl	8004a38 <RCCEx_PLL2_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037a2:	e004      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80037ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037b6:	4bb7      	ldr	r3, [pc, #732]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80037be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c4:	4ab3      	ldr	r2, [pc, #716]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c6:	430b      	orrs	r3, r1
 80037c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80037ca:	e003      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80037e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80037ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4313      	orrs	r3, r2
 80037f2:	d039      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80037f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d81c      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80037fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003804 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003841 	.word	0x08003841
 8003808:	08003815 	.word	0x08003815
 800380c:	08003823 	.word	0x08003823
 8003810:	08003841 	.word	0x08003841
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b9f      	ldr	r3, [pc, #636]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	4a9e      	ldr	r2, [pc, #632]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003820:	e00f      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003826:	3308      	adds	r3, #8
 8003828:	2102      	movs	r1, #2
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f904 	bl	8004a38 <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003836:	e004      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800383e:	e000      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003842:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800384a:	4b92      	ldr	r3, [pc, #584]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800384c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384e:	f023 0103 	bic.w	r1, r3, #3
 8003852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003858:	4a8e      	ldr	r2, [pc, #568]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800385a:	430b      	orrs	r3, r1
 800385c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800385e:	e003      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003864:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003874:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003878:	2300      	movs	r3, #0
 800387a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800387e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003882:	460b      	mov	r3, r1
 8003884:	4313      	orrs	r3, r2
 8003886:	f000 8099 	beq.w	80039bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800388a:	4b83      	ldr	r3, [pc, #524]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a82      	ldr	r2, [pc, #520]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003896:	f7fd fc35 	bl	8001104 <HAL_GetTick>
 800389a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800389e:	e00b      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fd fc30 	bl	8001104 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b64      	cmp	r3, #100	@ 0x64
 80038ae:	d903      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038b6:	e005      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038b8:	4b77      	ldr	r3, [pc, #476]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ed      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80038c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d173      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038cc:	4b71      	ldr	r3, [pc, #452]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038d8:	4053      	eors	r3, r2
 80038da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d015      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ee:	4b69      	ldr	r3, [pc, #420]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f2:	4a68      	ldr	r2, [pc, #416]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038fa:	4b66      	ldr	r3, [pc, #408]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	4a65      	ldr	r2, [pc, #404]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003904:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003906:	4a63      	ldr	r2, [pc, #396]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800390e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800391a:	d118      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fd fbf2 	bl	8001104 <HAL_GetTick>
 8003920:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003924:	e00d      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fd fbed 	bl	8001104 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003930:	1ad2      	subs	r2, r2, r3
 8003932:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003936:	429a      	cmp	r2, r3
 8003938:	d903      	bls.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003940:	e005      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003942:	4b54      	ldr	r3, [pc, #336]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0eb      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800394e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003952:	2b00      	cmp	r3, #0
 8003954:	d129      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800395a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800395e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003966:	d10e      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003968:	4b4a      	ldr	r3, [pc, #296]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003978:	091a      	lsrs	r2, r3, #4
 800397a:	4b48      	ldr	r3, [pc, #288]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800397c:	4013      	ands	r3, r2
 800397e:	4a45      	ldr	r2, [pc, #276]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003980:	430b      	orrs	r3, r1
 8003982:	6113      	str	r3, [r2, #16]
 8003984:	e005      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003986:	4b43      	ldr	r3, [pc, #268]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	4a42      	ldr	r2, [pc, #264]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800398c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003990:	6113      	str	r3, [r2, #16]
 8003992:	4b40      	ldr	r3, [pc, #256]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003994:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800399a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800399e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a8:	e008      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80039b2:	e003      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f002 0301 	and.w	r3, r2, #1
 80039c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4313      	orrs	r3, r2
 80039da:	f000 8090 	beq.w	8003afe <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80039de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e6:	2b28      	cmp	r3, #40	@ 0x28
 80039e8:	d870      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80039ea:	a201      	add	r2, pc, #4	@ (adr r2, 80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003ad5 	.word	0x08003ad5
 80039f4:	08003acd 	.word	0x08003acd
 80039f8:	08003acd 	.word	0x08003acd
 80039fc:	08003acd 	.word	0x08003acd
 8003a00:	08003acd 	.word	0x08003acd
 8003a04:	08003acd 	.word	0x08003acd
 8003a08:	08003acd 	.word	0x08003acd
 8003a0c:	08003acd 	.word	0x08003acd
 8003a10:	08003aa1 	.word	0x08003aa1
 8003a14:	08003acd 	.word	0x08003acd
 8003a18:	08003acd 	.word	0x08003acd
 8003a1c:	08003acd 	.word	0x08003acd
 8003a20:	08003acd 	.word	0x08003acd
 8003a24:	08003acd 	.word	0x08003acd
 8003a28:	08003acd 	.word	0x08003acd
 8003a2c:	08003acd 	.word	0x08003acd
 8003a30:	08003ab7 	.word	0x08003ab7
 8003a34:	08003acd 	.word	0x08003acd
 8003a38:	08003acd 	.word	0x08003acd
 8003a3c:	08003acd 	.word	0x08003acd
 8003a40:	08003acd 	.word	0x08003acd
 8003a44:	08003acd 	.word	0x08003acd
 8003a48:	08003acd 	.word	0x08003acd
 8003a4c:	08003acd 	.word	0x08003acd
 8003a50:	08003ad5 	.word	0x08003ad5
 8003a54:	08003acd 	.word	0x08003acd
 8003a58:	08003acd 	.word	0x08003acd
 8003a5c:	08003acd 	.word	0x08003acd
 8003a60:	08003acd 	.word	0x08003acd
 8003a64:	08003acd 	.word	0x08003acd
 8003a68:	08003acd 	.word	0x08003acd
 8003a6c:	08003acd 	.word	0x08003acd
 8003a70:	08003ad5 	.word	0x08003ad5
 8003a74:	08003acd 	.word	0x08003acd
 8003a78:	08003acd 	.word	0x08003acd
 8003a7c:	08003acd 	.word	0x08003acd
 8003a80:	08003acd 	.word	0x08003acd
 8003a84:	08003acd 	.word	0x08003acd
 8003a88:	08003acd 	.word	0x08003acd
 8003a8c:	08003acd 	.word	0x08003acd
 8003a90:	08003ad5 	.word	0x08003ad5
 8003a94:	58024400 	.word	0x58024400
 8003a98:	58024800 	.word	0x58024800
 8003a9c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 ffc5 	bl	8004a38 <RCCEx_PLL2_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ab4:	e00f      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aba:	3328      	adds	r3, #40	@ 0x28
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 f86c 	bl	8004b9c <RCCEx_PLL3_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003aca:	e004      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ade:	4bc0      	ldr	r3, [pc, #768]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aee:	4abc      	ldr	r2, [pc, #752]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003afa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f002 0302 	and.w	r3, r2, #2
 8003b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b14:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d043      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d824      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b7d 	.word	0x08003b7d
 8003b34:	08003b49 	.word	0x08003b49
 8003b38:	08003b5f 	.word	0x08003b5f
 8003b3c:	08003b7d 	.word	0x08003b7d
 8003b40:	08003b7d 	.word	0x08003b7d
 8003b44:	08003b7d 	.word	0x08003b7d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 ff71 	bl	8004a38 <RCCEx_PLL2_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b5c:	e00f      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b62:	3328      	adds	r3, #40	@ 0x28
 8003b64:	2101      	movs	r1, #1
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 f818 	bl	8004b9c <RCCEx_PLL3_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b72:	e004      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b86:	4b96      	ldr	r3, [pc, #600]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8a:	f023 0107 	bic.w	r1, r3, #7
 8003b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b96:	4a92      	ldr	r2, [pc, #584]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ba2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f002 0304 	and.w	r3, r2, #4
 8003bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bbc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	d043      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bce:	2b05      	cmp	r3, #5
 8003bd0:	d824      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c25 	.word	0x08003c25
 8003bdc:	08003bf1 	.word	0x08003bf1
 8003be0:	08003c07 	.word	0x08003c07
 8003be4:	08003c25 	.word	0x08003c25
 8003be8:	08003c25 	.word	0x08003c25
 8003bec:	08003c25 	.word	0x08003c25
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 ff1d 	bl	8004a38 <RCCEx_PLL2_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c04:	e00f      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c0a:	3328      	adds	r3, #40	@ 0x28
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 ffc4 	bl	8004b9c <RCCEx_PLL3_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c1a:	e004      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c22:	e000      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c32:	f023 0107 	bic.w	r1, r3, #7
 8003c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c3e:	4a68      	ldr	r2, [pc, #416]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c44:	e003      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f002 0320 	and.w	r3, r2, #32
 8003c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	d055      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c7a:	d033      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c80:	d82c      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c86:	d02f      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8c:	d826      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c92:	d02b      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003c94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c98:	d820      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c9e:	d012      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ca4:	d81a      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d022      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003caa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cae:	d115      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 febd 	bl	8004a38 <RCCEx_PLL2_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cc4:	e015      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cca:	3328      	adds	r3, #40	@ 0x28
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 ff64 	bl	8004b9c <RCCEx_PLL3_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ce2:	e006      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003ce4:	bf00      	nop
 8003ce6:	e004      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003ce8:	bf00      	nop
 8003cea:	e002      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cfa:	4b39      	ldr	r3, [pc, #228]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d0a:	4a35      	ldr	r2, [pc, #212]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d10:	e003      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003d26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4313      	orrs	r3, r2
 8003d38:	d058      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d42:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d46:	d033      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003d48:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d4c:	d82c      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d52:	d02f      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d58:	d826      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d5e:	d02b      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003d60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d64:	d820      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d6a:	d012      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d70:	d81a      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d022      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7a:	d115      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d80:	3308      	adds	r3, #8
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fe57 	bl	8004a38 <RCCEx_PLL2_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d90:	e015      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d96:	3328      	adds	r3, #40	@ 0x28
 8003d98:	2102      	movs	r1, #2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fefe 	bl	8004b9c <RCCEx_PLL3_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003da6:	e00a      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dae:	e006      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003db0:	bf00      	nop
 8003db2:	e004      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003db4:	bf00      	nop
 8003db6:	e002      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003db8:	bf00      	nop
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10e      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dc6:	4b06      	ldr	r3, [pc, #24]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003dd6:	4a02      	ldr	r2, [pc, #8]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ddc:	e006      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003dde:	bf00      	nop
 8003de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003de8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003df8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e06:	460b      	mov	r3, r1
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	d055      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e18:	d033      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003e1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e1e:	d82c      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e24:	d02f      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003e26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e2a:	d826      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e30:	d02b      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e36:	d820      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e3c:	d012      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e42:	d81a      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d022      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e4c:	d115      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e52:	3308      	adds	r3, #8
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fdee 	bl	8004a38 <RCCEx_PLL2_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e62:	e015      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e68:	3328      	adds	r3, #40	@ 0x28
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fe95 	bl	8004b9c <RCCEx_PLL3_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e78:	e00a      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e80:	e006      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e82:	bf00      	nop
 8003e84:	e004      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e86:	bf00      	nop
 8003e88:	e002      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10b      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e98:	4ba1      	ldr	r3, [pc, #644]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ea4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ea8:	4a9d      	ldr	r2, [pc, #628]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eae:	e003      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003eb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f002 0308 	and.w	r3, r2, #8
 8003ec4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ece:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	d01e      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eea:	3328      	adds	r3, #40	@ 0x28
 8003eec:	2102      	movs	r1, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fe54 	bl	8004b9c <RCCEx_PLL3_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f00:	4b87      	ldr	r3, [pc, #540]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f10:	4a83      	ldr	r2, [pc, #524]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f12:	430b      	orrs	r3, r1
 8003f14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f002 0310 	and.w	r3, r2, #16
 8003f22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d01e      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f42:	d10c      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f48:	3328      	adds	r3, #40	@ 0x28
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fe25 	bl	8004b9c <RCCEx_PLL3_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f5e:	4b70      	ldr	r3, [pc, #448]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4313      	orrs	r3, r2
 8003f92:	d03e      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fa0:	d022      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003fa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fa6:	d81b      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb0:	d00b      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003fb2:	e015      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fb8:	3308      	adds	r3, #8
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fd3b 	bl	8004a38 <RCCEx_PLL2_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fc8:	e00f      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fce:	3328      	adds	r3, #40	@ 0x28
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fde2 	bl	8004b9c <RCCEx_PLL3_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ffe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004002:	4a47      	ldr	r2, [pc, #284]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004004:	430b      	orrs	r3, r1
 8004006:	6593      	str	r3, [r2, #88]	@ 0x58
 8004008:	e003      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800400e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800401e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004020:	2300      	movs	r3, #0
 8004022:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004024:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004028:	460b      	mov	r3, r1
 800402a:	4313      	orrs	r3, r2
 800402c:	d03b      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800402e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004036:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800403a:	d01f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800403c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004040:	d818      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004046:	d003      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004048:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800404c:	d007      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800404e:	e011      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004050:	4b33      	ldr	r3, [pc, #204]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	4a32      	ldr	r2, [pc, #200]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800405a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800405c:	e00f      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004062:	3328      	adds	r3, #40	@ 0x28
 8004064:	2101      	movs	r1, #1
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fd98 	bl	8004b9c <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004086:	4b26      	ldr	r3, [pc, #152]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800408e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004096:	4a22      	ldr	r2, [pc, #136]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004098:	430b      	orrs	r3, r1
 800409a:	6553      	str	r3, [r2, #84]	@ 0x54
 800409c:	e003      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80040b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80040b4:	2300      	movs	r3, #0
 80040b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80040b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80040bc:	460b      	mov	r3, r1
 80040be:	4313      	orrs	r3, r2
 80040c0:	d034      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d0:	d007      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80040d2:	e011      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d4:	4b12      	ldr	r3, [pc, #72]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	4a11      	ldr	r2, [pc, #68]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040e0:	e00e      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040e6:	3308      	adds	r3, #8
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fca4 	bl	8004a38 <RCCEx_PLL2_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040f6:	e003      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004100:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10d      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004108:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800410a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004116:	4a02      	ldr	r2, [pc, #8]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004118:	430b      	orrs	r3, r1
 800411a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800411c:	e006      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800411e:	bf00      	nop
 8004120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004128:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800412c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004138:	66bb      	str	r3, [r7, #104]	@ 0x68
 800413a:	2300      	movs	r3, #0
 800413c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800413e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004142:	460b      	mov	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	d00c      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800414c:	3328      	adds	r3, #40	@ 0x28
 800414e:	2102      	movs	r1, #2
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fd23 	bl	8004b9c <RCCEx_PLL3_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800416e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004170:	2300      	movs	r3, #0
 8004172:	667b      	str	r3, [r7, #100]	@ 0x64
 8004174:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004178:	460b      	mov	r3, r1
 800417a:	4313      	orrs	r3, r2
 800417c:	d038      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800417e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800418a:	d018      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800418c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004190:	d811      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004196:	d014      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800419c:	d80b      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d011      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80041a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a6:	d106      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a8:	4bc3      	ldr	r3, [pc, #780]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	4ac2      	ldr	r2, [pc, #776]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041b4:	e008      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041bc:	e004      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80041be:	bf00      	nop
 80041c0:	e002      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80041c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041d0:	4bb9      	ldr	r3, [pc, #740]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e0:	4ab5      	ldr	r2, [pc, #724]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80041e6:	e003      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80041fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041fe:	2300      	movs	r3, #0
 8004200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004202:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	d009      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800420c:	4baa      	ldr	r3, [pc, #680]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800420e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004210:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800421a:	4aa7      	ldr	r2, [pc, #668]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800421c:	430b      	orrs	r3, r1
 800421e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800422c:	653b      	str	r3, [r7, #80]	@ 0x50
 800422e:	2300      	movs	r3, #0
 8004230:	657b      	str	r3, [r7, #84]	@ 0x54
 8004232:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004236:	460b      	mov	r3, r1
 8004238:	4313      	orrs	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800423c:	4b9e      	ldr	r3, [pc, #632]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800423e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004240:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	4a9b      	ldr	r2, [pc, #620]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800424c:	430b      	orrs	r3, r1
 800424e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800425c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800425e:	2300      	movs	r3, #0
 8004260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004262:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004266:	460b      	mov	r3, r1
 8004268:	4313      	orrs	r3, r2
 800426a:	d009      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800426c:	4b92      	ldr	r3, [pc, #584]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004270:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427a:	4a8f      	ldr	r2, [pc, #572]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800427c:	430b      	orrs	r3, r1
 800427e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800428c:	643b      	str	r3, [r7, #64]	@ 0x40
 800428e:	2300      	movs	r3, #0
 8004290:	647b      	str	r3, [r7, #68]	@ 0x44
 8004292:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004296:	460b      	mov	r3, r1
 8004298:	4313      	orrs	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800429c:	4b86      	ldr	r3, [pc, #536]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	4a85      	ldr	r2, [pc, #532]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042a6:	6113      	str	r3, [r2, #16]
 80042a8:	4b83      	ldr	r3, [pc, #524]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042aa:	6919      	ldr	r1, [r3, #16]
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042b4:	4a80      	ldr	r2, [pc, #512]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042b6:	430b      	orrs	r3, r1
 80042b8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042c8:	2300      	movs	r3, #0
 80042ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042cc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d009      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042d6:	4b78      	ldr	r3, [pc, #480]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e4:	4a74      	ldr	r2, [pc, #464]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042e6:	430b      	orrs	r3, r1
 80042e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80042f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80042f8:	2300      	movs	r3, #0
 80042fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80042fc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004300:	460b      	mov	r3, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004306:	4b6c      	ldr	r3, [pc, #432]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800430e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004316:	4a68      	ldr	r2, [pc, #416]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004318:	430b      	orrs	r3, r1
 800431a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800431c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	2100      	movs	r1, #0
 8004326:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800432e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004332:	460b      	mov	r3, r1
 8004334:	4313      	orrs	r3, r2
 8004336:	d011      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800433c:	3308      	adds	r3, #8
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fb79 	bl	8004a38 <RCCEx_PLL2_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800434c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004358:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800435c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	2100      	movs	r1, #0
 8004366:	6239      	str	r1, [r7, #32]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	627b      	str	r3, [r7, #36]	@ 0x24
 800436e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	d011      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800437c:	3308      	adds	r3, #8
 800437e:	2101      	movs	r1, #1
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fb59 	bl	8004a38 <RCCEx_PLL2_Config>
 8004386:	4603      	mov	r3, r0
 8004388:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800438c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004398:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800439c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	2100      	movs	r1, #0
 80043a6:	61b9      	str	r1, [r7, #24]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043b2:	460b      	mov	r3, r1
 80043b4:	4313      	orrs	r3, r2
 80043b6:	d011      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043bc:	3308      	adds	r3, #8
 80043be:	2102      	movs	r1, #2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fb39 	bl	8004a38 <RCCEx_PLL2_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80043cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	2100      	movs	r1, #0
 80043e6:	6139      	str	r1, [r7, #16]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043f2:	460b      	mov	r3, r1
 80043f4:	4313      	orrs	r3, r2
 80043f6:	d011      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043fc:	3328      	adds	r3, #40	@ 0x28
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fbcb 	bl	8004b9c <RCCEx_PLL3_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800440c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004418:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800441c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	2100      	movs	r1, #0
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	d011      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800443c:	3328      	adds	r3, #40	@ 0x28
 800443e:	2101      	movs	r1, #1
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fbab 	bl	8004b9c <RCCEx_PLL3_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800444c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004458:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	2100      	movs	r1, #0
 8004466:	6039      	str	r1, [r7, #0]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004472:	460b      	mov	r3, r1
 8004474:	4313      	orrs	r3, r2
 8004476:	d011      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800447c:	3328      	adds	r3, #40	@ 0x28
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fb8b 	bl	8004b9c <RCCEx_PLL3_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800448c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004498:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800449c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80044b0:	46bd      	mov	sp, r7
 80044b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b6:	bf00      	nop
 80044b8:	58024400 	.word	0x58024400

080044bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80044c0:	f7fe fde2 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4904      	ldr	r1, [pc, #16]	@ (80044e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80044dc:	4618      	mov	r0, r3
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	58024400 	.word	0x58024400
 80044e4:	08006b7c 	.word	0x08006b7c

080044e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b089      	sub	sp, #36	@ 0x24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044f0:	4ba1      	ldr	r3, [pc, #644]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80044fa:	4b9f      	ldr	r3, [pc, #636]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	0b1b      	lsrs	r3, r3, #12
 8004500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004504:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004506:	4b9c      	ldr	r3, [pc, #624]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004512:	4b99      	ldr	r3, [pc, #612]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004516:	08db      	lsrs	r3, r3, #3
 8004518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8111 	beq.w	8004758 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b02      	cmp	r3, #2
 800453a:	f000 8083 	beq.w	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b02      	cmp	r3, #2
 8004542:	f200 80a1 	bhi.w	8004688 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d056      	beq.n	8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004552:	e099      	b.n	8004688 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004554:	4b88      	ldr	r3, [pc, #544]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02d      	beq.n	80045bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004560:	4b85      	ldr	r3, [pc, #532]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	08db      	lsrs	r3, r3, #3
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	4a84      	ldr	r2, [pc, #528]	@ (800477c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
 8004570:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b7b      	ldr	r3, [pc, #492]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800458c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459a:	ed97 6a03 	vldr	s12, [r7, #12]
 800459e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045ba:	e087      	b.n	80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	ed97 6a03 	vldr	s12, [r7, #12]
 80045e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045fe:	e065      	b.n	80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b59      	ldr	r3, [pc, #356]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a03 	vldr	s12, [r7, #12]
 8004626:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004642:	e043      	b.n	80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800478c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004656:	4b48      	ldr	r3, [pc, #288]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004666:	ed97 6a03 	vldr	s12, [r7, #12]
 800466a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800466e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800467a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004686:	e021      	b.n	80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004692:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469a:	4b37      	ldr	r3, [pc, #220]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800469c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80046cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	0a5b      	lsrs	r3, r3, #9
 80046d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f2:	ee17 2a90 	vmov	r2, s15
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80046fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004710:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004714:	edd7 6a07 	vldr	s13, [r7, #28]
 8004718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800471c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004720:	ee17 2a90 	vmov	r2, s15
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004728:	4b13      	ldr	r3, [pc, #76]	@ (8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	0e1b      	lsrs	r3, r3, #24
 800472e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800473e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004742:	edd7 6a07 	vldr	s13, [r7, #28]
 8004746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474e:	ee17 2a90 	vmov	r2, s15
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004756:	e008      	b.n	800476a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	609a      	str	r2, [r3, #8]
}
 800476a:	bf00      	nop
 800476c:	3724      	adds	r7, #36	@ 0x24
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	58024400 	.word	0x58024400
 800477c:	03d09000 	.word	0x03d09000
 8004780:	46000000 	.word	0x46000000
 8004784:	4c742400 	.word	0x4c742400
 8004788:	4a742400 	.word	0x4a742400
 800478c:	4af42400 	.word	0x4af42400

08004790 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	@ 0x24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004798:	4ba1      	ldr	r3, [pc, #644]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80047a2:	4b9f      	ldr	r3, [pc, #636]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a6:	0d1b      	lsrs	r3, r3, #20
 80047a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047ba:	4b99      	ldr	r3, [pc, #612]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047be:	08db      	lsrs	r3, r3, #3
 80047c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8111 	beq.w	8004a00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	f000 8083 	beq.w	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	f200 80a1 	bhi.w	8004930 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d056      	beq.n	80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80047fa:	e099      	b.n	8004930 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047fc:	4b88      	ldr	r3, [pc, #544]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02d      	beq.n	8004864 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004808:	4b85      	ldr	r3, [pc, #532]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	08db      	lsrs	r3, r3, #3
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	4a84      	ldr	r2, [pc, #528]	@ (8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
 8004818:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	ee07 3a90 	vmov	s15, r3
 8004820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004832:	4b7b      	ldr	r3, [pc, #492]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004842:	ed97 6a03 	vldr	s12, [r7, #12]
 8004846:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800484a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800485a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004862:	e087      	b.n	8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004876:	4b6a      	ldr	r3, [pc, #424]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004886:	ed97 6a03 	vldr	s12, [r7, #12]
 800488a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800488e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800489a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048a6:	e065      	b.n	8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ba:	4b59      	ldr	r3, [pc, #356]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ea:	e043      	b.n	8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80048fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fe:	4b48      	ldr	r3, [pc, #288]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004912:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800492e:	e021      	b.n	8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800493e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004942:	4b37      	ldr	r3, [pc, #220]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004952:	ed97 6a03 	vldr	s12, [r7, #12]
 8004956:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800495a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004972:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004974:	4b2a      	ldr	r3, [pc, #168]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	0a5b      	lsrs	r3, r3, #9
 800497a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004986:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800498a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800498e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499a:	ee17 2a90 	vmov	r2, s15
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80049a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80049c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c8:	ee17 2a90 	vmov	r2, s15
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80049d0:	4b13      	ldr	r3, [pc, #76]	@ (8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	0e1b      	lsrs	r3, r3, #24
 80049d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f6:	ee17 2a90 	vmov	r2, s15
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049fe:	e008      	b.n	8004a12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	609a      	str	r2, [r3, #8]
}
 8004a12:	bf00      	nop
 8004a14:	3724      	adds	r7, #36	@ 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	58024400 	.word	0x58024400
 8004a24:	03d09000 	.word	0x03d09000
 8004a28:	46000000 	.word	0x46000000
 8004a2c:	4c742400 	.word	0x4c742400
 8004a30:	4a742400 	.word	0x4a742400
 8004a34:	4af42400 	.word	0x4af42400

08004a38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a46:	4b53      	ldr	r3, [pc, #332]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d101      	bne.n	8004a56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e099      	b.n	8004b8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a56:	4b4f      	ldr	r3, [pc, #316]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004a5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a62:	f7fc fb4f 	bl	8001104 <HAL_GetTick>
 8004a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a68:	e008      	b.n	8004a7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a6a:	f7fc fb4b 	bl	8001104 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e086      	b.n	8004b8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a7c:	4b45      	ldr	r3, [pc, #276]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f0      	bne.n	8004a6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a88:	4b42      	ldr	r3, [pc, #264]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	031b      	lsls	r3, r3, #12
 8004a96:	493f      	ldr	r1, [pc, #252]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	025b      	lsls	r3, r3, #9
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	061b      	lsls	r3, r3, #24
 8004ac8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004acc:	4931      	ldr	r1, [pc, #196]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ad2:	4b30      	ldr	r3, [pc, #192]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	492d      	ldr	r1, [pc, #180]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae8:	f023 0220 	bic.w	r2, r3, #32
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	4928      	ldr	r1, [pc, #160]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004af6:	4b27      	ldr	r3, [pc, #156]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afa:	4a26      	ldr	r2, [pc, #152]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004afc:	f023 0310 	bic.w	r3, r3, #16
 8004b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b02:	4b24      	ldr	r3, [pc, #144]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b06:	4b24      	ldr	r3, [pc, #144]	@ (8004b98 <RCCEx_PLL2_Config+0x160>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	69d2      	ldr	r2, [r2, #28]
 8004b0e:	00d2      	lsls	r2, r2, #3
 8004b10:	4920      	ldr	r1, [pc, #128]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b16:	4b1f      	ldr	r3, [pc, #124]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b1c:	f043 0310 	orr.w	r3, r3, #16
 8004b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b28:	4b1a      	ldr	r3, [pc, #104]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	4a19      	ldr	r2, [pc, #100]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b34:	e00f      	b.n	8004b56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d106      	bne.n	8004b4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b3c:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	4a14      	ldr	r2, [pc, #80]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b48:	e005      	b.n	8004b56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b4a:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4e:	4a11      	ldr	r2, [pc, #68]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b56:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b62:	f7fc facf 	bl	8001104 <HAL_GetTick>
 8004b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b68:	e008      	b.n	8004b7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b6a:	f7fc facb 	bl	8001104 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e006      	b.n	8004b8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b7c:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <RCCEx_PLL2_Config+0x15c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	58024400 	.word	0x58024400
 8004b98:	ffff0007 	.word	0xffff0007

08004b9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004baa:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d101      	bne.n	8004bba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e099      	b.n	8004cee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bba:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fa9d 	bl	8001104 <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bce:	f7fc fa99 	bl	8001104 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e086      	b.n	8004cee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004be0:	4b45      	ldr	r3, [pc, #276]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bec:	4b42      	ldr	r3, [pc, #264]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	051b      	lsls	r3, r3, #20
 8004bfa:	493f      	ldr	r1, [pc, #252]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	025b      	lsls	r3, r3, #9
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c30:	4931      	ldr	r1, [pc, #196]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c36:	4b30      	ldr	r3, [pc, #192]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	492d      	ldr	r1, [pc, #180]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c48:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	4928      	ldr	r1, [pc, #160]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c5a:	4b27      	ldr	r3, [pc, #156]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	4a26      	ldr	r2, [pc, #152]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c66:	4b24      	ldr	r3, [pc, #144]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c6a:	4b24      	ldr	r3, [pc, #144]	@ (8004cfc <RCCEx_PLL3_Config+0x160>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	69d2      	ldr	r2, [r2, #28]
 8004c72:	00d2      	lsls	r2, r2, #3
 8004c74:	4920      	ldr	r1, [pc, #128]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	4a19      	ldr	r2, [pc, #100]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004c92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c98:	e00f      	b.n	8004cba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d106      	bne.n	8004cae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ca0:	4b15      	ldr	r3, [pc, #84]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	4a14      	ldr	r2, [pc, #80]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004ca6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004caa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cac:	e005      	b.n	8004cba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cae:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	4a11      	ldr	r2, [pc, #68]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004cb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cba:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc6:	f7fc fa1d 	bl	8001104 <HAL_GetTick>
 8004cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ccc:	e008      	b.n	8004ce0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cce:	f7fc fa19 	bl	8001104 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ce0:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <RCCEx_PLL3_Config+0x15c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	58024400 	.word	0x58024400
 8004cfc:	ffff0007 	.word	0xffff0007

08004d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e049      	b.n	8004da6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fb fff6 	bl	8000d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f000 fae0 	bl	8005304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d001      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e054      	b.n	8004e72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a26      	ldr	r2, [pc, #152]	@ (8004e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d022      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df2:	d01d      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a22      	ldr	r2, [pc, #136]	@ (8004e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d018      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a21      	ldr	r2, [pc, #132]	@ (8004e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00e      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d009      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	@ (8004e94 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x80>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e98 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d115      	bne.n	8004e5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	4b19      	ldr	r3, [pc, #100]	@ (8004e9c <HAL_TIM_Base_Start_IT+0xec>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b06      	cmp	r3, #6
 8004e40:	d015      	beq.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e48:	d011      	beq.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5a:	e008      	b.n	8004e6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e000      	b.n	8004e70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40010400 	.word	0x40010400
 8004e94:	40001800 	.word	0x40001800
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	00010007 	.word	0x00010007

08004ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d020      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01b      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0202 	mvn.w	r2, #2
 8004ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f9ec 	bl	80052c8 <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e005      	b.n	8004efe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f9de 	bl	80052b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f9ef 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d020      	beq.n	8004f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01b      	beq.n	8004f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0204 	mvn.w	r2, #4
 8004f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f9c6 	bl	80052c8 <HAL_TIM_IC_CaptureCallback>
 8004f3c:	e005      	b.n	8004f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f9b8 	bl	80052b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f9c9 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d020      	beq.n	8004f9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01b      	beq.n	8004f9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0208 	mvn.w	r2, #8
 8004f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2204      	movs	r2, #4
 8004f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f9a0 	bl	80052c8 <HAL_TIM_IC_CaptureCallback>
 8004f88:	e005      	b.n	8004f96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f992 	bl	80052b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f9a3 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d020      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01b      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0210 	mvn.w	r2, #16
 8004fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f97a 	bl	80052c8 <HAL_TIM_IC_CaptureCallback>
 8004fd4:	e005      	b.n	8004fe2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f96c 	bl	80052b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f97d 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0201 	mvn.w	r2, #1
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f94a 	bl	80052a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00c      	beq.n	800503a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fb41 	bl	80056bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00c      	beq.n	800505e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fb39 	bl	80056d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00c      	beq.n	8005082 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800507a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f937 	bl	80052f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00c      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d007      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f06f 0220 	mvn.w	r2, #32
 800509e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fb01 	bl	80056a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_TIM_ConfigClockSource+0x1c>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e0dc      	b.n	8005286 <HAL_TIM_ConfigClockSource+0x1d6>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005290 <HAL_TIM_ConfigClockSource+0x1e0>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a64      	ldr	r2, [pc, #400]	@ (8005294 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	f000 80a9 	beq.w	800525a <HAL_TIM_ConfigClockSource+0x1aa>
 8005108:	4a62      	ldr	r2, [pc, #392]	@ (8005294 <HAL_TIM_ConfigClockSource+0x1e4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	f200 80ae 	bhi.w	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 8005110:	4a61      	ldr	r2, [pc, #388]	@ (8005298 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	f000 80a1 	beq.w	800525a <HAL_TIM_ConfigClockSource+0x1aa>
 8005118:	4a5f      	ldr	r2, [pc, #380]	@ (8005298 <HAL_TIM_ConfigClockSource+0x1e8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	f200 80a6 	bhi.w	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 8005120:	4a5e      	ldr	r2, [pc, #376]	@ (800529c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005122:	4293      	cmp	r3, r2
 8005124:	f000 8099 	beq.w	800525a <HAL_TIM_ConfigClockSource+0x1aa>
 8005128:	4a5c      	ldr	r2, [pc, #368]	@ (800529c <HAL_TIM_ConfigClockSource+0x1ec>)
 800512a:	4293      	cmp	r3, r2
 800512c:	f200 809e 	bhi.w	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 8005130:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005134:	f000 8091 	beq.w	800525a <HAL_TIM_ConfigClockSource+0x1aa>
 8005138:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800513c:	f200 8096 	bhi.w	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 8005140:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005144:	f000 8089 	beq.w	800525a <HAL_TIM_ConfigClockSource+0x1aa>
 8005148:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800514c:	f200 808e 	bhi.w	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 8005150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005154:	d03e      	beq.n	80051d4 <HAL_TIM_ConfigClockSource+0x124>
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800515a:	f200 8087 	bhi.w	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005162:	f000 8086 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x1c2>
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516a:	d87f      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 800516c:	2b70      	cmp	r3, #112	@ 0x70
 800516e:	d01a      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0xf6>
 8005170:	2b70      	cmp	r3, #112	@ 0x70
 8005172:	d87b      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 8005174:	2b60      	cmp	r3, #96	@ 0x60
 8005176:	d050      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x16a>
 8005178:	2b60      	cmp	r3, #96	@ 0x60
 800517a:	d877      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 800517c:	2b50      	cmp	r3, #80	@ 0x50
 800517e:	d03c      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x14a>
 8005180:	2b50      	cmp	r3, #80	@ 0x50
 8005182:	d873      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 8005184:	2b40      	cmp	r3, #64	@ 0x40
 8005186:	d058      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x18a>
 8005188:	2b40      	cmp	r3, #64	@ 0x40
 800518a:	d86f      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 800518c:	2b30      	cmp	r3, #48	@ 0x30
 800518e:	d064      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x1aa>
 8005190:	2b30      	cmp	r3, #48	@ 0x30
 8005192:	d86b      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 8005194:	2b20      	cmp	r3, #32
 8005196:	d060      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x1aa>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d867      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x1bc>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d05c      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x1aa>
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d05a      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x1aa>
 80051a4:	e062      	b.n	800526c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051b6:	f000 f9c9 	bl	800554c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	609a      	str	r2, [r3, #8]
      break;
 80051d2:	e04f      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051e4:	f000 f9b2 	bl	800554c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051f6:	609a      	str	r2, [r3, #8]
      break;
 80051f8:	e03c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005206:	461a      	mov	r2, r3
 8005208:	f000 f922 	bl	8005450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2150      	movs	r1, #80	@ 0x50
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f97c 	bl	8005510 <TIM_ITRx_SetConfig>
      break;
 8005218:	e02c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005226:	461a      	mov	r2, r3
 8005228:	f000 f941 	bl	80054ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2160      	movs	r1, #96	@ 0x60
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f96c 	bl	8005510 <TIM_ITRx_SetConfig>
      break;
 8005238:	e01c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005246:	461a      	mov	r2, r3
 8005248:	f000 f902 	bl	8005450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2140      	movs	r1, #64	@ 0x40
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f95c 	bl	8005510 <TIM_ITRx_SetConfig>
      break;
 8005258:	e00c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f000 f953 	bl	8005510 <TIM_ITRx_SetConfig>
      break;
 800526a:	e003      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
      break;
 8005270:	e000      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005284:	7bfb      	ldrb	r3, [r7, #15]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	ffceff88 	.word	0xffceff88
 8005294:	00100040 	.word	0x00100040
 8005298:	00100030 	.word	0x00100030
 800529c:	00100020 	.word	0x00100020

080052a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a46      	ldr	r2, [pc, #280]	@ (8005430 <TIM_Base_SetConfig+0x12c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d013      	beq.n	8005344 <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005322:	d00f      	beq.n	8005344 <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a43      	ldr	r2, [pc, #268]	@ (8005434 <TIM_Base_SetConfig+0x130>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00b      	beq.n	8005344 <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a42      	ldr	r2, [pc, #264]	@ (8005438 <TIM_Base_SetConfig+0x134>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d007      	beq.n	8005344 <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a41      	ldr	r2, [pc, #260]	@ (800543c <TIM_Base_SetConfig+0x138>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_Base_SetConfig+0x40>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a40      	ldr	r2, [pc, #256]	@ (8005440 <TIM_Base_SetConfig+0x13c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d108      	bne.n	8005356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a35      	ldr	r2, [pc, #212]	@ (8005430 <TIM_Base_SetConfig+0x12c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01f      	beq.n	800539e <TIM_Base_SetConfig+0x9a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005364:	d01b      	beq.n	800539e <TIM_Base_SetConfig+0x9a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a32      	ldr	r2, [pc, #200]	@ (8005434 <TIM_Base_SetConfig+0x130>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d017      	beq.n	800539e <TIM_Base_SetConfig+0x9a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a31      	ldr	r2, [pc, #196]	@ (8005438 <TIM_Base_SetConfig+0x134>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <TIM_Base_SetConfig+0x9a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a30      	ldr	r2, [pc, #192]	@ (800543c <TIM_Base_SetConfig+0x138>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00f      	beq.n	800539e <TIM_Base_SetConfig+0x9a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2f      	ldr	r2, [pc, #188]	@ (8005440 <TIM_Base_SetConfig+0x13c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00b      	beq.n	800539e <TIM_Base_SetConfig+0x9a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2e      	ldr	r2, [pc, #184]	@ (8005444 <TIM_Base_SetConfig+0x140>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d007      	beq.n	800539e <TIM_Base_SetConfig+0x9a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2d      	ldr	r2, [pc, #180]	@ (8005448 <TIM_Base_SetConfig+0x144>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_Base_SetConfig+0x9a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2c      	ldr	r2, [pc, #176]	@ (800544c <TIM_Base_SetConfig+0x148>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d108      	bne.n	80053b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a16      	ldr	r2, [pc, #88]	@ (8005430 <TIM_Base_SetConfig+0x12c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00f      	beq.n	80053fc <TIM_Base_SetConfig+0xf8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a18      	ldr	r2, [pc, #96]	@ (8005440 <TIM_Base_SetConfig+0x13c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00b      	beq.n	80053fc <TIM_Base_SetConfig+0xf8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a17      	ldr	r2, [pc, #92]	@ (8005444 <TIM_Base_SetConfig+0x140>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d007      	beq.n	80053fc <TIM_Base_SetConfig+0xf8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a16      	ldr	r2, [pc, #88]	@ (8005448 <TIM_Base_SetConfig+0x144>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_Base_SetConfig+0xf8>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a15      	ldr	r2, [pc, #84]	@ (800544c <TIM_Base_SetConfig+0x148>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d103      	bne.n	8005404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b01      	cmp	r3, #1
 8005414:	d105      	bne.n	8005422 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f023 0201 	bic.w	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	611a      	str	r2, [r3, #16]
  }
}
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40010400 	.word	0x40010400
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800

08005450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f023 0201 	bic.w	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800547a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 030a 	bic.w	r3, r3, #10
 800548c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b087      	sub	sp, #28
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	f023 0210 	bic.w	r2, r3, #16
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	031b      	lsls	r3, r3, #12
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4b09      	ldr	r3, [pc, #36]	@ (8005548 <TIM_ITRx_SetConfig+0x38>)
 8005524:	4013      	ands	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	f043 0307 	orr.w	r3, r3, #7
 8005532:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	609a      	str	r2, [r3, #8]
}
 800553a:	bf00      	nop
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	ffcfff8f 	.word	0xffcfff8f

0800554c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	021a      	lsls	r2, r3, #8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	431a      	orrs	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4313      	orrs	r3, r2
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	609a      	str	r2, [r3, #8]
}
 8005580:	bf00      	nop
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e06d      	b.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a30      	ldr	r2, [pc, #192]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d108      	bne.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80055de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a20      	ldr	r2, [pc, #128]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d022      	beq.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005616:	d01d      	beq.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1d      	ldr	r2, [pc, #116]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1c      	ldr	r2, [pc, #112]	@ (8005698 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1a      	ldr	r2, [pc, #104]	@ (800569c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a15      	ldr	r2, [pc, #84]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a16      	ldr	r2, [pc, #88]	@ (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a15      	ldr	r2, [pc, #84]	@ (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d10c      	bne.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800565a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	40010000 	.word	0x40010000
 8005690:	40010400 	.word	0x40010400
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40001800 	.word	0x40001800
 80056a4:	40014000 	.word	0x40014000

080056a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e042      	b.n	800577c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7fb fb2d 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2224      	movs	r2, #36	@ 0x24
 8005712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fe94 	bl	800645c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f825 	bl	8005784 <UART_SetConfig>
 800573a:	4603      	mov	r3, r0
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e01b      	b.n	800577c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 ff13 	bl	80065a0 <UART_CheckIdleState>
 800577a:	4603      	mov	r3, r0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005788:	b092      	sub	sp, #72	@ 0x48
 800578a:	af00      	add	r7, sp, #0
 800578c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	431a      	orrs	r2, r3
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4bbe      	ldr	r3, [pc, #760]	@ (8005aac <UART_SetConfig+0x328>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057bc:	430b      	orrs	r3, r1
 80057be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4ab3      	ldr	r2, [pc, #716]	@ (8005ab0 <UART_SetConfig+0x32c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057ec:	4313      	orrs	r3, r2
 80057ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	4baf      	ldr	r3, [pc, #700]	@ (8005ab4 <UART_SetConfig+0x330>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005800:	430b      	orrs	r3, r1
 8005802:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580a:	f023 010f 	bic.w	r1, r3, #15
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4aa6      	ldr	r2, [pc, #664]	@ (8005ab8 <UART_SetConfig+0x334>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d177      	bne.n	8005914 <UART_SetConfig+0x190>
 8005824:	4ba5      	ldr	r3, [pc, #660]	@ (8005abc <UART_SetConfig+0x338>)
 8005826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005828:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800582c:	2b28      	cmp	r3, #40	@ 0x28
 800582e:	d86d      	bhi.n	800590c <UART_SetConfig+0x188>
 8005830:	a201      	add	r2, pc, #4	@ (adr r2, 8005838 <UART_SetConfig+0xb4>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	080058dd 	.word	0x080058dd
 800583c:	0800590d 	.word	0x0800590d
 8005840:	0800590d 	.word	0x0800590d
 8005844:	0800590d 	.word	0x0800590d
 8005848:	0800590d 	.word	0x0800590d
 800584c:	0800590d 	.word	0x0800590d
 8005850:	0800590d 	.word	0x0800590d
 8005854:	0800590d 	.word	0x0800590d
 8005858:	080058e5 	.word	0x080058e5
 800585c:	0800590d 	.word	0x0800590d
 8005860:	0800590d 	.word	0x0800590d
 8005864:	0800590d 	.word	0x0800590d
 8005868:	0800590d 	.word	0x0800590d
 800586c:	0800590d 	.word	0x0800590d
 8005870:	0800590d 	.word	0x0800590d
 8005874:	0800590d 	.word	0x0800590d
 8005878:	080058ed 	.word	0x080058ed
 800587c:	0800590d 	.word	0x0800590d
 8005880:	0800590d 	.word	0x0800590d
 8005884:	0800590d 	.word	0x0800590d
 8005888:	0800590d 	.word	0x0800590d
 800588c:	0800590d 	.word	0x0800590d
 8005890:	0800590d 	.word	0x0800590d
 8005894:	0800590d 	.word	0x0800590d
 8005898:	080058f5 	.word	0x080058f5
 800589c:	0800590d 	.word	0x0800590d
 80058a0:	0800590d 	.word	0x0800590d
 80058a4:	0800590d 	.word	0x0800590d
 80058a8:	0800590d 	.word	0x0800590d
 80058ac:	0800590d 	.word	0x0800590d
 80058b0:	0800590d 	.word	0x0800590d
 80058b4:	0800590d 	.word	0x0800590d
 80058b8:	080058fd 	.word	0x080058fd
 80058bc:	0800590d 	.word	0x0800590d
 80058c0:	0800590d 	.word	0x0800590d
 80058c4:	0800590d 	.word	0x0800590d
 80058c8:	0800590d 	.word	0x0800590d
 80058cc:	0800590d 	.word	0x0800590d
 80058d0:	0800590d 	.word	0x0800590d
 80058d4:	0800590d 	.word	0x0800590d
 80058d8:	08005905 	.word	0x08005905
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e2:	e326      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ea:	e322      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f2:	e31e      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fa:	e31a      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80058fc:	2320      	movs	r3, #32
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005902:	e316      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005904:	2340      	movs	r3, #64	@ 0x40
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590a:	e312      	b.n	8005f32 <UART_SetConfig+0x7ae>
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005912:	e30e      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a69      	ldr	r2, [pc, #420]	@ (8005ac0 <UART_SetConfig+0x33c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d130      	bne.n	8005980 <UART_SetConfig+0x1fc>
 800591e:	4b67      	ldr	r3, [pc, #412]	@ (8005abc <UART_SetConfig+0x338>)
 8005920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b05      	cmp	r3, #5
 8005928:	d826      	bhi.n	8005978 <UART_SetConfig+0x1f4>
 800592a:	a201      	add	r2, pc, #4	@ (adr r2, 8005930 <UART_SetConfig+0x1ac>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005949 	.word	0x08005949
 8005934:	08005951 	.word	0x08005951
 8005938:	08005959 	.word	0x08005959
 800593c:	08005961 	.word	0x08005961
 8005940:	08005969 	.word	0x08005969
 8005944:	08005971 	.word	0x08005971
 8005948:	2300      	movs	r3, #0
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e2f0      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005950:	2304      	movs	r3, #4
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005956:	e2ec      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005958:	2308      	movs	r3, #8
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595e:	e2e8      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005960:	2310      	movs	r3, #16
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005966:	e2e4      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005968:	2320      	movs	r3, #32
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596e:	e2e0      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005970:	2340      	movs	r3, #64	@ 0x40
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005976:	e2dc      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005978:	2380      	movs	r3, #128	@ 0x80
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597e:	e2d8      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a4f      	ldr	r2, [pc, #316]	@ (8005ac4 <UART_SetConfig+0x340>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d130      	bne.n	80059ec <UART_SetConfig+0x268>
 800598a:	4b4c      	ldr	r3, [pc, #304]	@ (8005abc <UART_SetConfig+0x338>)
 800598c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	2b05      	cmp	r3, #5
 8005994:	d826      	bhi.n	80059e4 <UART_SetConfig+0x260>
 8005996:	a201      	add	r2, pc, #4	@ (adr r2, 800599c <UART_SetConfig+0x218>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059b5 	.word	0x080059b5
 80059a0:	080059bd 	.word	0x080059bd
 80059a4:	080059c5 	.word	0x080059c5
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059dd 	.word	0x080059dd
 80059b4:	2300      	movs	r3, #0
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ba:	e2ba      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80059bc:	2304      	movs	r3, #4
 80059be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c2:	e2b6      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80059c4:	2308      	movs	r3, #8
 80059c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ca:	e2b2      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80059cc:	2310      	movs	r3, #16
 80059ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d2:	e2ae      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80059d4:	2320      	movs	r3, #32
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059da:	e2aa      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80059dc:	2340      	movs	r3, #64	@ 0x40
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e2:	e2a6      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80059e4:	2380      	movs	r3, #128	@ 0x80
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ea:	e2a2      	b.n	8005f32 <UART_SetConfig+0x7ae>
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a35      	ldr	r2, [pc, #212]	@ (8005ac8 <UART_SetConfig+0x344>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d130      	bne.n	8005a58 <UART_SetConfig+0x2d4>
 80059f6:	4b31      	ldr	r3, [pc, #196]	@ (8005abc <UART_SetConfig+0x338>)
 80059f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	d826      	bhi.n	8005a50 <UART_SetConfig+0x2cc>
 8005a02:	a201      	add	r2, pc, #4	@ (adr r2, 8005a08 <UART_SetConfig+0x284>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a21 	.word	0x08005a21
 8005a0c:	08005a29 	.word	0x08005a29
 8005a10:	08005a31 	.word	0x08005a31
 8005a14:	08005a39 	.word	0x08005a39
 8005a18:	08005a41 	.word	0x08005a41
 8005a1c:	08005a49 	.word	0x08005a49
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a26:	e284      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2e:	e280      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005a30:	2308      	movs	r3, #8
 8005a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a36:	e27c      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005a38:	2310      	movs	r3, #16
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3e:	e278      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005a40:	2320      	movs	r3, #32
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a46:	e274      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005a48:	2340      	movs	r3, #64	@ 0x40
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4e:	e270      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005a50:	2380      	movs	r3, #128	@ 0x80
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a56:	e26c      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005acc <UART_SetConfig+0x348>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d142      	bne.n	8005ae8 <UART_SetConfig+0x364>
 8005a62:	4b16      	ldr	r3, [pc, #88]	@ (8005abc <UART_SetConfig+0x338>)
 8005a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	2b05      	cmp	r3, #5
 8005a6c:	d838      	bhi.n	8005ae0 <UART_SetConfig+0x35c>
 8005a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a74 <UART_SetConfig+0x2f0>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005a8d 	.word	0x08005a8d
 8005a78:	08005a95 	.word	0x08005a95
 8005a7c:	08005a9d 	.word	0x08005a9d
 8005a80:	08005aa5 	.word	0x08005aa5
 8005a84:	08005ad1 	.word	0x08005ad1
 8005a88:	08005ad9 	.word	0x08005ad9
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a92:	e24e      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005a94:	2304      	movs	r3, #4
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9a:	e24a      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa2:	e246      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e242      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005aac:	cfff69f3 	.word	0xcfff69f3
 8005ab0:	58000c00 	.word	0x58000c00
 8005ab4:	11fff4ff 	.word	0x11fff4ff
 8005ab8:	40011000 	.word	0x40011000
 8005abc:	58024400 	.word	0x58024400
 8005ac0:	40004400 	.word	0x40004400
 8005ac4:	40004800 	.word	0x40004800
 8005ac8:	40004c00 	.word	0x40004c00
 8005acc:	40005000 	.word	0x40005000
 8005ad0:	2320      	movs	r3, #32
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad6:	e22c      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005ad8:	2340      	movs	r3, #64	@ 0x40
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ade:	e228      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005ae0:	2380      	movs	r3, #128	@ 0x80
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae6:	e224      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4ab1      	ldr	r2, [pc, #708]	@ (8005db4 <UART_SetConfig+0x630>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d176      	bne.n	8005be0 <UART_SetConfig+0x45c>
 8005af2:	4bb1      	ldr	r3, [pc, #708]	@ (8005db8 <UART_SetConfig+0x634>)
 8005af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005afa:	2b28      	cmp	r3, #40	@ 0x28
 8005afc:	d86c      	bhi.n	8005bd8 <UART_SetConfig+0x454>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <UART_SetConfig+0x380>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005ba9 	.word	0x08005ba9
 8005b08:	08005bd9 	.word	0x08005bd9
 8005b0c:	08005bd9 	.word	0x08005bd9
 8005b10:	08005bd9 	.word	0x08005bd9
 8005b14:	08005bd9 	.word	0x08005bd9
 8005b18:	08005bd9 	.word	0x08005bd9
 8005b1c:	08005bd9 	.word	0x08005bd9
 8005b20:	08005bd9 	.word	0x08005bd9
 8005b24:	08005bb1 	.word	0x08005bb1
 8005b28:	08005bd9 	.word	0x08005bd9
 8005b2c:	08005bd9 	.word	0x08005bd9
 8005b30:	08005bd9 	.word	0x08005bd9
 8005b34:	08005bd9 	.word	0x08005bd9
 8005b38:	08005bd9 	.word	0x08005bd9
 8005b3c:	08005bd9 	.word	0x08005bd9
 8005b40:	08005bd9 	.word	0x08005bd9
 8005b44:	08005bb9 	.word	0x08005bb9
 8005b48:	08005bd9 	.word	0x08005bd9
 8005b4c:	08005bd9 	.word	0x08005bd9
 8005b50:	08005bd9 	.word	0x08005bd9
 8005b54:	08005bd9 	.word	0x08005bd9
 8005b58:	08005bd9 	.word	0x08005bd9
 8005b5c:	08005bd9 	.word	0x08005bd9
 8005b60:	08005bd9 	.word	0x08005bd9
 8005b64:	08005bc1 	.word	0x08005bc1
 8005b68:	08005bd9 	.word	0x08005bd9
 8005b6c:	08005bd9 	.word	0x08005bd9
 8005b70:	08005bd9 	.word	0x08005bd9
 8005b74:	08005bd9 	.word	0x08005bd9
 8005b78:	08005bd9 	.word	0x08005bd9
 8005b7c:	08005bd9 	.word	0x08005bd9
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005bc9 	.word	0x08005bc9
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005bd9 	.word	0x08005bd9
 8005b90:	08005bd9 	.word	0x08005bd9
 8005b94:	08005bd9 	.word	0x08005bd9
 8005b98:	08005bd9 	.word	0x08005bd9
 8005b9c:	08005bd9 	.word	0x08005bd9
 8005ba0:	08005bd9 	.word	0x08005bd9
 8005ba4:	08005bd1 	.word	0x08005bd1
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bae:	e1c0      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb6:	e1bc      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bbe:	e1b8      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc6:	e1b4      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005bc8:	2320      	movs	r3, #32
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bce:	e1b0      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005bd0:	2340      	movs	r3, #64	@ 0x40
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd6:	e1ac      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005bd8:	2380      	movs	r3, #128	@ 0x80
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bde:	e1a8      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a75      	ldr	r2, [pc, #468]	@ (8005dbc <UART_SetConfig+0x638>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d130      	bne.n	8005c4c <UART_SetConfig+0x4c8>
 8005bea:	4b73      	ldr	r3, [pc, #460]	@ (8005db8 <UART_SetConfig+0x634>)
 8005bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	2b05      	cmp	r3, #5
 8005bf4:	d826      	bhi.n	8005c44 <UART_SetConfig+0x4c0>
 8005bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bfc <UART_SetConfig+0x478>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c15 	.word	0x08005c15
 8005c00:	08005c1d 	.word	0x08005c1d
 8005c04:	08005c25 	.word	0x08005c25
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c3d 	.word	0x08005c3d
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e18a      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c22:	e186      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005c24:	2308      	movs	r3, #8
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2a:	e182      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c32:	e17e      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005c34:	2320      	movs	r3, #32
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e17a      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005c3c:	2340      	movs	r3, #64	@ 0x40
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e176      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005c44:	2380      	movs	r3, #128	@ 0x80
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e172      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a5b      	ldr	r2, [pc, #364]	@ (8005dc0 <UART_SetConfig+0x63c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d130      	bne.n	8005cb8 <UART_SetConfig+0x534>
 8005c56:	4b58      	ldr	r3, [pc, #352]	@ (8005db8 <UART_SetConfig+0x634>)
 8005c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	2b05      	cmp	r3, #5
 8005c60:	d826      	bhi.n	8005cb0 <UART_SetConfig+0x52c>
 8005c62:	a201      	add	r2, pc, #4	@ (adr r2, 8005c68 <UART_SetConfig+0x4e4>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c81 	.word	0x08005c81
 8005c6c:	08005c89 	.word	0x08005c89
 8005c70:	08005c91 	.word	0x08005c91
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005ca1 	.word	0x08005ca1
 8005c7c:	08005ca9 	.word	0x08005ca9
 8005c80:	2300      	movs	r3, #0
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e154      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e150      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005c90:	2308      	movs	r3, #8
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e14c      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005c98:	2310      	movs	r3, #16
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e148      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e144      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005ca8:	2340      	movs	r3, #64	@ 0x40
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cae:	e140      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005cb0:	2380      	movs	r3, #128	@ 0x80
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e13c      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a41      	ldr	r2, [pc, #260]	@ (8005dc4 <UART_SetConfig+0x640>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	f040 8082 	bne.w	8005dc8 <UART_SetConfig+0x644>
 8005cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8005db8 <UART_SetConfig+0x634>)
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ccc:	2b28      	cmp	r3, #40	@ 0x28
 8005cce:	d86d      	bhi.n	8005dac <UART_SetConfig+0x628>
 8005cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd8 <UART_SetConfig+0x554>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005d7d 	.word	0x08005d7d
 8005cdc:	08005dad 	.word	0x08005dad
 8005ce0:	08005dad 	.word	0x08005dad
 8005ce4:	08005dad 	.word	0x08005dad
 8005ce8:	08005dad 	.word	0x08005dad
 8005cec:	08005dad 	.word	0x08005dad
 8005cf0:	08005dad 	.word	0x08005dad
 8005cf4:	08005dad 	.word	0x08005dad
 8005cf8:	08005d85 	.word	0x08005d85
 8005cfc:	08005dad 	.word	0x08005dad
 8005d00:	08005dad 	.word	0x08005dad
 8005d04:	08005dad 	.word	0x08005dad
 8005d08:	08005dad 	.word	0x08005dad
 8005d0c:	08005dad 	.word	0x08005dad
 8005d10:	08005dad 	.word	0x08005dad
 8005d14:	08005dad 	.word	0x08005dad
 8005d18:	08005d8d 	.word	0x08005d8d
 8005d1c:	08005dad 	.word	0x08005dad
 8005d20:	08005dad 	.word	0x08005dad
 8005d24:	08005dad 	.word	0x08005dad
 8005d28:	08005dad 	.word	0x08005dad
 8005d2c:	08005dad 	.word	0x08005dad
 8005d30:	08005dad 	.word	0x08005dad
 8005d34:	08005dad 	.word	0x08005dad
 8005d38:	08005d95 	.word	0x08005d95
 8005d3c:	08005dad 	.word	0x08005dad
 8005d40:	08005dad 	.word	0x08005dad
 8005d44:	08005dad 	.word	0x08005dad
 8005d48:	08005dad 	.word	0x08005dad
 8005d4c:	08005dad 	.word	0x08005dad
 8005d50:	08005dad 	.word	0x08005dad
 8005d54:	08005dad 	.word	0x08005dad
 8005d58:	08005d9d 	.word	0x08005d9d
 8005d5c:	08005dad 	.word	0x08005dad
 8005d60:	08005dad 	.word	0x08005dad
 8005d64:	08005dad 	.word	0x08005dad
 8005d68:	08005dad 	.word	0x08005dad
 8005d6c:	08005dad 	.word	0x08005dad
 8005d70:	08005dad 	.word	0x08005dad
 8005d74:	08005dad 	.word	0x08005dad
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e0d6      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005d84:	2304      	movs	r3, #4
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e0d2      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d92:	e0ce      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005d94:	2310      	movs	r3, #16
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9a:	e0ca      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005d9c:	2320      	movs	r3, #32
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da2:	e0c6      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005da4:	2340      	movs	r3, #64	@ 0x40
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005daa:	e0c2      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005dac:	2380      	movs	r3, #128	@ 0x80
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db2:	e0be      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005db4:	40011400 	.word	0x40011400
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	40007800 	.word	0x40007800
 8005dc0:	40007c00 	.word	0x40007c00
 8005dc4:	40011800 	.word	0x40011800
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4aad      	ldr	r2, [pc, #692]	@ (8006084 <UART_SetConfig+0x900>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d176      	bne.n	8005ec0 <UART_SetConfig+0x73c>
 8005dd2:	4bad      	ldr	r3, [pc, #692]	@ (8006088 <UART_SetConfig+0x904>)
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dda:	2b28      	cmp	r3, #40	@ 0x28
 8005ddc:	d86c      	bhi.n	8005eb8 <UART_SetConfig+0x734>
 8005dde:	a201      	add	r2, pc, #4	@ (adr r2, 8005de4 <UART_SetConfig+0x660>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005e89 	.word	0x08005e89
 8005de8:	08005eb9 	.word	0x08005eb9
 8005dec:	08005eb9 	.word	0x08005eb9
 8005df0:	08005eb9 	.word	0x08005eb9
 8005df4:	08005eb9 	.word	0x08005eb9
 8005df8:	08005eb9 	.word	0x08005eb9
 8005dfc:	08005eb9 	.word	0x08005eb9
 8005e00:	08005eb9 	.word	0x08005eb9
 8005e04:	08005e91 	.word	0x08005e91
 8005e08:	08005eb9 	.word	0x08005eb9
 8005e0c:	08005eb9 	.word	0x08005eb9
 8005e10:	08005eb9 	.word	0x08005eb9
 8005e14:	08005eb9 	.word	0x08005eb9
 8005e18:	08005eb9 	.word	0x08005eb9
 8005e1c:	08005eb9 	.word	0x08005eb9
 8005e20:	08005eb9 	.word	0x08005eb9
 8005e24:	08005e99 	.word	0x08005e99
 8005e28:	08005eb9 	.word	0x08005eb9
 8005e2c:	08005eb9 	.word	0x08005eb9
 8005e30:	08005eb9 	.word	0x08005eb9
 8005e34:	08005eb9 	.word	0x08005eb9
 8005e38:	08005eb9 	.word	0x08005eb9
 8005e3c:	08005eb9 	.word	0x08005eb9
 8005e40:	08005eb9 	.word	0x08005eb9
 8005e44:	08005ea1 	.word	0x08005ea1
 8005e48:	08005eb9 	.word	0x08005eb9
 8005e4c:	08005eb9 	.word	0x08005eb9
 8005e50:	08005eb9 	.word	0x08005eb9
 8005e54:	08005eb9 	.word	0x08005eb9
 8005e58:	08005eb9 	.word	0x08005eb9
 8005e5c:	08005eb9 	.word	0x08005eb9
 8005e60:	08005eb9 	.word	0x08005eb9
 8005e64:	08005ea9 	.word	0x08005ea9
 8005e68:	08005eb9 	.word	0x08005eb9
 8005e6c:	08005eb9 	.word	0x08005eb9
 8005e70:	08005eb9 	.word	0x08005eb9
 8005e74:	08005eb9 	.word	0x08005eb9
 8005e78:	08005eb9 	.word	0x08005eb9
 8005e7c:	08005eb9 	.word	0x08005eb9
 8005e80:	08005eb9 	.word	0x08005eb9
 8005e84:	08005eb1 	.word	0x08005eb1
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e050      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e04c      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e048      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e044      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005ea8:	2320      	movs	r3, #32
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e040      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005eb0:	2340      	movs	r3, #64	@ 0x40
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e03c      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005eb8:	2380      	movs	r3, #128	@ 0x80
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e038      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a71      	ldr	r2, [pc, #452]	@ (800608c <UART_SetConfig+0x908>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d130      	bne.n	8005f2c <UART_SetConfig+0x7a8>
 8005eca:	4b6f      	ldr	r3, [pc, #444]	@ (8006088 <UART_SetConfig+0x904>)
 8005ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b05      	cmp	r3, #5
 8005ed4:	d826      	bhi.n	8005f24 <UART_SetConfig+0x7a0>
 8005ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <UART_SetConfig+0x758>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005ef5 	.word	0x08005ef5
 8005ee0:	08005efd 	.word	0x08005efd
 8005ee4:	08005f05 	.word	0x08005f05
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f15 	.word	0x08005f15
 8005ef0:	08005f1d 	.word	0x08005f1d
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e01a      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f02:	e016      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e012      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e00e      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005f14:	2320      	movs	r3, #32
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e00a      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005f1c:	2340      	movs	r3, #64	@ 0x40
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e006      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005f24:	2380      	movs	r3, #128	@ 0x80
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e002      	b.n	8005f32 <UART_SetConfig+0x7ae>
 8005f2c:	2380      	movs	r3, #128	@ 0x80
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a55      	ldr	r2, [pc, #340]	@ (800608c <UART_SetConfig+0x908>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	f040 80f8 	bne.w	800612e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	dc46      	bgt.n	8005fd4 <UART_SetConfig+0x850>
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	db75      	blt.n	8006036 <UART_SetConfig+0x8b2>
 8005f4a:	3b02      	subs	r3, #2
 8005f4c:	2b1e      	cmp	r3, #30
 8005f4e:	d872      	bhi.n	8006036 <UART_SetConfig+0x8b2>
 8005f50:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <UART_SetConfig+0x7d4>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005fdb 	.word	0x08005fdb
 8005f5c:	08006037 	.word	0x08006037
 8005f60:	08005fe3 	.word	0x08005fe3
 8005f64:	08006037 	.word	0x08006037
 8005f68:	08006037 	.word	0x08006037
 8005f6c:	08006037 	.word	0x08006037
 8005f70:	08005ff3 	.word	0x08005ff3
 8005f74:	08006037 	.word	0x08006037
 8005f78:	08006037 	.word	0x08006037
 8005f7c:	08006037 	.word	0x08006037
 8005f80:	08006037 	.word	0x08006037
 8005f84:	08006037 	.word	0x08006037
 8005f88:	08006037 	.word	0x08006037
 8005f8c:	08006037 	.word	0x08006037
 8005f90:	08006003 	.word	0x08006003
 8005f94:	08006037 	.word	0x08006037
 8005f98:	08006037 	.word	0x08006037
 8005f9c:	08006037 	.word	0x08006037
 8005fa0:	08006037 	.word	0x08006037
 8005fa4:	08006037 	.word	0x08006037
 8005fa8:	08006037 	.word	0x08006037
 8005fac:	08006037 	.word	0x08006037
 8005fb0:	08006037 	.word	0x08006037
 8005fb4:	08006037 	.word	0x08006037
 8005fb8:	08006037 	.word	0x08006037
 8005fbc:	08006037 	.word	0x08006037
 8005fc0:	08006037 	.word	0x08006037
 8005fc4:	08006037 	.word	0x08006037
 8005fc8:	08006037 	.word	0x08006037
 8005fcc:	08006037 	.word	0x08006037
 8005fd0:	08006029 	.word	0x08006029
 8005fd4:	2b40      	cmp	r3, #64	@ 0x40
 8005fd6:	d02a      	beq.n	800602e <UART_SetConfig+0x8aa>
 8005fd8:	e02d      	b.n	8006036 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005fda:	f7fe fa6f 	bl	80044bc <HAL_RCCEx_GetD3PCLK1Freq>
 8005fde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fe0:	e02f      	b.n	8006042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fa7e 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff0:	e027      	b.n	8006042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ff2:	f107 0318 	add.w	r3, r7, #24
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fe fbca 	bl	8004790 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006000:	e01f      	b.n	8006042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006002:	4b21      	ldr	r3, [pc, #132]	@ (8006088 <UART_SetConfig+0x904>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800600e:	4b1e      	ldr	r3, [pc, #120]	@ (8006088 <UART_SetConfig+0x904>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	08db      	lsrs	r3, r3, #3
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	4a1d      	ldr	r2, [pc, #116]	@ (8006090 <UART_SetConfig+0x90c>)
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006020:	e00f      	b.n	8006042 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006022:	4b1b      	ldr	r3, [pc, #108]	@ (8006090 <UART_SetConfig+0x90c>)
 8006024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006026:	e00c      	b.n	8006042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006028:	4b1a      	ldr	r3, [pc, #104]	@ (8006094 <UART_SetConfig+0x910>)
 800602a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602c:	e009      	b.n	8006042 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006034:	e005      	b.n	8006042 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006040:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 81ee 	beq.w	8006426 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604e:	4a12      	ldr	r2, [pc, #72]	@ (8006098 <UART_SetConfig+0x914>)
 8006050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006054:	461a      	mov	r2, r3
 8006056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006058:	fbb3 f3f2 	udiv	r3, r3, r2
 800605c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	4413      	add	r3, r2
 8006068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800606a:	429a      	cmp	r2, r3
 800606c:	d305      	bcc.n	800607a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006076:	429a      	cmp	r2, r3
 8006078:	d910      	bls.n	800609c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006080:	e1d1      	b.n	8006426 <UART_SetConfig+0xca2>
 8006082:	bf00      	nop
 8006084:	40011c00 	.word	0x40011c00
 8006088:	58024400 	.word	0x58024400
 800608c:	58000c00 	.word	0x58000c00
 8006090:	03d09000 	.word	0x03d09000
 8006094:	003d0900 	.word	0x003d0900
 8006098:	08006b9c 	.word	0x08006b9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800609c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800609e:	2200      	movs	r2, #0
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	60fa      	str	r2, [r7, #12]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a8:	4ac0      	ldr	r2, [pc, #768]	@ (80063ac <UART_SetConfig+0xc28>)
 80060aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2200      	movs	r2, #0
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060be:	f7fa f915 	bl	80002ec <__aeabi_uldivmod>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4610      	mov	r0, r2
 80060c8:	4619      	mov	r1, r3
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	020b      	lsls	r3, r1, #8
 80060d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060d8:	0202      	lsls	r2, r0, #8
 80060da:	6979      	ldr	r1, [r7, #20]
 80060dc:	6849      	ldr	r1, [r1, #4]
 80060de:	0849      	lsrs	r1, r1, #1
 80060e0:	2000      	movs	r0, #0
 80060e2:	460c      	mov	r4, r1
 80060e4:	4605      	mov	r5, r0
 80060e6:	eb12 0804 	adds.w	r8, r2, r4
 80060ea:	eb43 0905 	adc.w	r9, r3, r5
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	469a      	mov	sl, r3
 80060f6:	4693      	mov	fp, r2
 80060f8:	4652      	mov	r2, sl
 80060fa:	465b      	mov	r3, fp
 80060fc:	4640      	mov	r0, r8
 80060fe:	4649      	mov	r1, r9
 8006100:	f7fa f8f4 	bl	80002ec <__aeabi_uldivmod>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4613      	mov	r3, r2
 800610a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800610c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006112:	d308      	bcc.n	8006126 <UART_SetConfig+0x9a2>
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800611a:	d204      	bcs.n	8006126 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006122:	60da      	str	r2, [r3, #12]
 8006124:	e17f      	b.n	8006426 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800612c:	e17b      	b.n	8006426 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006136:	f040 80bd 	bne.w	80062b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800613a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800613e:	2b20      	cmp	r3, #32
 8006140:	dc48      	bgt.n	80061d4 <UART_SetConfig+0xa50>
 8006142:	2b00      	cmp	r3, #0
 8006144:	db7b      	blt.n	800623e <UART_SetConfig+0xaba>
 8006146:	2b20      	cmp	r3, #32
 8006148:	d879      	bhi.n	800623e <UART_SetConfig+0xaba>
 800614a:	a201      	add	r2, pc, #4	@ (adr r2, 8006150 <UART_SetConfig+0x9cc>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	080061db 	.word	0x080061db
 8006154:	080061e3 	.word	0x080061e3
 8006158:	0800623f 	.word	0x0800623f
 800615c:	0800623f 	.word	0x0800623f
 8006160:	080061eb 	.word	0x080061eb
 8006164:	0800623f 	.word	0x0800623f
 8006168:	0800623f 	.word	0x0800623f
 800616c:	0800623f 	.word	0x0800623f
 8006170:	080061fb 	.word	0x080061fb
 8006174:	0800623f 	.word	0x0800623f
 8006178:	0800623f 	.word	0x0800623f
 800617c:	0800623f 	.word	0x0800623f
 8006180:	0800623f 	.word	0x0800623f
 8006184:	0800623f 	.word	0x0800623f
 8006188:	0800623f 	.word	0x0800623f
 800618c:	0800623f 	.word	0x0800623f
 8006190:	0800620b 	.word	0x0800620b
 8006194:	0800623f 	.word	0x0800623f
 8006198:	0800623f 	.word	0x0800623f
 800619c:	0800623f 	.word	0x0800623f
 80061a0:	0800623f 	.word	0x0800623f
 80061a4:	0800623f 	.word	0x0800623f
 80061a8:	0800623f 	.word	0x0800623f
 80061ac:	0800623f 	.word	0x0800623f
 80061b0:	0800623f 	.word	0x0800623f
 80061b4:	0800623f 	.word	0x0800623f
 80061b8:	0800623f 	.word	0x0800623f
 80061bc:	0800623f 	.word	0x0800623f
 80061c0:	0800623f 	.word	0x0800623f
 80061c4:	0800623f 	.word	0x0800623f
 80061c8:	0800623f 	.word	0x0800623f
 80061cc:	0800623f 	.word	0x0800623f
 80061d0:	08006231 	.word	0x08006231
 80061d4:	2b40      	cmp	r3, #64	@ 0x40
 80061d6:	d02e      	beq.n	8006236 <UART_SetConfig+0xab2>
 80061d8:	e031      	b.n	800623e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061da:	f7fc ff85 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 80061de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061e0:	e033      	b.n	800624a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061e2:	f7fc ff97 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 80061e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061e8:	e02f      	b.n	800624a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe f97a 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f8:	e027      	b.n	800624a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061fa:	f107 0318 	add.w	r3, r7, #24
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe fac6 	bl	8004790 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006208:	e01f      	b.n	800624a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800620a:	4b69      	ldr	r3, [pc, #420]	@ (80063b0 <UART_SetConfig+0xc2c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006216:	4b66      	ldr	r3, [pc, #408]	@ (80063b0 <UART_SetConfig+0xc2c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	08db      	lsrs	r3, r3, #3
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	4a64      	ldr	r2, [pc, #400]	@ (80063b4 <UART_SetConfig+0xc30>)
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006228:	e00f      	b.n	800624a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800622a:	4b62      	ldr	r3, [pc, #392]	@ (80063b4 <UART_SetConfig+0xc30>)
 800622c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800622e:	e00c      	b.n	800624a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006230:	4b61      	ldr	r3, [pc, #388]	@ (80063b8 <UART_SetConfig+0xc34>)
 8006232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006234:	e009      	b.n	800624a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800623a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800623c:	e005      	b.n	800624a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800624a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80ea 	beq.w	8006426 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	4a55      	ldr	r2, [pc, #340]	@ (80063ac <UART_SetConfig+0xc28>)
 8006258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800625c:	461a      	mov	r2, r3
 800625e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006260:	fbb3 f3f2 	udiv	r3, r3, r2
 8006264:	005a      	lsls	r2, r3, #1
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	441a      	add	r2, r3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627a:	2b0f      	cmp	r3, #15
 800627c:	d916      	bls.n	80062ac <UART_SetConfig+0xb28>
 800627e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006284:	d212      	bcs.n	80062ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006288:	b29b      	uxth	r3, r3
 800628a:	f023 030f 	bic.w	r3, r3, #15
 800628e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	085b      	lsrs	r3, r3, #1
 8006294:	b29b      	uxth	r3, r3
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	b29a      	uxth	r2, r3
 800629c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800629e:	4313      	orrs	r3, r2
 80062a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80062a8:	60da      	str	r2, [r3, #12]
 80062aa:	e0bc      	b.n	8006426 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062b2:	e0b8      	b.n	8006426 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	dc4b      	bgt.n	8006354 <UART_SetConfig+0xbd0>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f2c0 8087 	blt.w	80063d0 <UART_SetConfig+0xc4c>
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	f200 8084 	bhi.w	80063d0 <UART_SetConfig+0xc4c>
 80062c8:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <UART_SetConfig+0xb4c>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	0800635b 	.word	0x0800635b
 80062d4:	08006363 	.word	0x08006363
 80062d8:	080063d1 	.word	0x080063d1
 80062dc:	080063d1 	.word	0x080063d1
 80062e0:	0800636b 	.word	0x0800636b
 80062e4:	080063d1 	.word	0x080063d1
 80062e8:	080063d1 	.word	0x080063d1
 80062ec:	080063d1 	.word	0x080063d1
 80062f0:	0800637b 	.word	0x0800637b
 80062f4:	080063d1 	.word	0x080063d1
 80062f8:	080063d1 	.word	0x080063d1
 80062fc:	080063d1 	.word	0x080063d1
 8006300:	080063d1 	.word	0x080063d1
 8006304:	080063d1 	.word	0x080063d1
 8006308:	080063d1 	.word	0x080063d1
 800630c:	080063d1 	.word	0x080063d1
 8006310:	0800638b 	.word	0x0800638b
 8006314:	080063d1 	.word	0x080063d1
 8006318:	080063d1 	.word	0x080063d1
 800631c:	080063d1 	.word	0x080063d1
 8006320:	080063d1 	.word	0x080063d1
 8006324:	080063d1 	.word	0x080063d1
 8006328:	080063d1 	.word	0x080063d1
 800632c:	080063d1 	.word	0x080063d1
 8006330:	080063d1 	.word	0x080063d1
 8006334:	080063d1 	.word	0x080063d1
 8006338:	080063d1 	.word	0x080063d1
 800633c:	080063d1 	.word	0x080063d1
 8006340:	080063d1 	.word	0x080063d1
 8006344:	080063d1 	.word	0x080063d1
 8006348:	080063d1 	.word	0x080063d1
 800634c:	080063d1 	.word	0x080063d1
 8006350:	080063c3 	.word	0x080063c3
 8006354:	2b40      	cmp	r3, #64	@ 0x40
 8006356:	d037      	beq.n	80063c8 <UART_SetConfig+0xc44>
 8006358:	e03a      	b.n	80063d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800635a:	f7fc fec5 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 800635e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006360:	e03c      	b.n	80063dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006362:	f7fc fed7 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8006366:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006368:	e038      	b.n	80063dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800636a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe f8ba 	bl	80044e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006378:	e030      	b.n	80063dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800637a:	f107 0318 	add.w	r3, r7, #24
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe fa06 	bl	8004790 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006388:	e028      	b.n	80063dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800638a:	4b09      	ldr	r3, [pc, #36]	@ (80063b0 <UART_SetConfig+0xc2c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d012      	beq.n	80063bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006396:	4b06      	ldr	r3, [pc, #24]	@ (80063b0 <UART_SetConfig+0xc2c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	08db      	lsrs	r3, r3, #3
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	4a04      	ldr	r2, [pc, #16]	@ (80063b4 <UART_SetConfig+0xc30>)
 80063a2:	fa22 f303 	lsr.w	r3, r2, r3
 80063a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063a8:	e018      	b.n	80063dc <UART_SetConfig+0xc58>
 80063aa:	bf00      	nop
 80063ac:	08006b9c 	.word	0x08006b9c
 80063b0:	58024400 	.word	0x58024400
 80063b4:	03d09000 	.word	0x03d09000
 80063b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80063bc:	4b24      	ldr	r3, [pc, #144]	@ (8006450 <UART_SetConfig+0xccc>)
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c0:	e00c      	b.n	80063dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063c2:	4b24      	ldr	r3, [pc, #144]	@ (8006454 <UART_SetConfig+0xcd0>)
 80063c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c6:	e009      	b.n	80063dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ce:	e005      	b.n	80063dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063da:	bf00      	nop
    }

    if (pclk != 0U)
 80063dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d021      	beq.n	8006426 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006458 <UART_SetConfig+0xcd4>)
 80063e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ec:	461a      	mov	r2, r3
 80063ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	085b      	lsrs	r3, r3, #1
 80063fa:	441a      	add	r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006408:	2b0f      	cmp	r3, #15
 800640a:	d909      	bls.n	8006420 <UART_SetConfig+0xc9c>
 800640c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006412:	d205      	bcs.n	8006420 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006416:	b29a      	uxth	r2, r3
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60da      	str	r2, [r3, #12]
 800641e:	e002      	b.n	8006426 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2201      	movs	r2, #1
 800642a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2201      	movs	r2, #1
 8006432:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2200      	movs	r2, #0
 800643a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2200      	movs	r2, #0
 8006440:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006442:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006446:	4618      	mov	r0, r3
 8006448:	3748      	adds	r7, #72	@ 0x48
 800644a:	46bd      	mov	sp, r7
 800644c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006450:	03d09000 	.word	0x03d09000
 8006454:	003d0900 	.word	0x003d0900
 8006458:	08006b9c 	.word	0x08006b9c

0800645c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01a      	beq.n	8006572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655a:	d10a      	bne.n	8006572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]
  }
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b098      	sub	sp, #96	@ 0x60
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065b0:	f7fa fda8 	bl	8001104 <HAL_GetTick>
 80065b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d12f      	bne.n	8006624 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065cc:	2200      	movs	r2, #0
 80065ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f88e 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d022      	beq.n	8006624 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	461a      	mov	r2, r3
 80065fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800660a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e6      	bne.n	80065de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e063      	b.n	80066ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b04      	cmp	r3, #4
 8006630:	d149      	bne.n	80066c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006632:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800663a:	2200      	movs	r2, #0
 800663c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f857 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d03c      	beq.n	80066c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	623b      	str	r3, [r7, #32]
   return(result);
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800666a:	633b      	str	r3, [r7, #48]	@ 0x30
 800666c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e6      	bne.n	800664c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	60fb      	str	r3, [r7, #12]
   return(result);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800669e:	61fa      	str	r2, [r7, #28]
 80066a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	69b9      	ldr	r1, [r7, #24]
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	617b      	str	r3, [r7, #20]
   return(result);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e5      	bne.n	800667e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e012      	b.n	80066ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3758      	adds	r7, #88	@ 0x58
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006704:	e04f      	b.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d04b      	beq.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670e:	f7fa fcf9 	bl	8001104 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	429a      	cmp	r2, r3
 800671c:	d302      	bcc.n	8006724 <UART_WaitOnFlagUntilTimeout+0x30>
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e04e      	b.n	80067c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0304 	and.w	r3, r3, #4
 8006732:	2b00      	cmp	r3, #0
 8006734:	d037      	beq.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b80      	cmp	r3, #128	@ 0x80
 800673a:	d034      	beq.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b40      	cmp	r3, #64	@ 0x40
 8006740:	d031      	beq.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b08      	cmp	r3, #8
 800674e:	d110      	bne.n	8006772 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2208      	movs	r2, #8
 8006756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f839 	bl	80067d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2208      	movs	r2, #8
 8006762:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e029      	b.n	80067c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800677c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006780:	d111      	bne.n	80067a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800678a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f81f 	bl	80067d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e00f      	b.n	80067c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4013      	ands	r3, r2
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	bf0c      	ite	eq
 80067b6:	2301      	moveq	r3, #1
 80067b8:	2300      	movne	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d0a0      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b095      	sub	sp, #84	@ 0x54
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e6      	bne.n	80067d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	61fb      	str	r3, [r7, #28]
   return(result);
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	4b1e      	ldr	r3, [pc, #120]	@ (8006898 <UART_EndRxTransfer+0xc8>)
 800681e:	4013      	ands	r3, r2
 8006820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800682a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800682c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006842:	2b01      	cmp	r3, #1
 8006844:	d118      	bne.n	8006878 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	60bb      	str	r3, [r7, #8]
   return(result);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f023 0310 	bic.w	r3, r3, #16
 800685a:	647b      	str	r3, [r7, #68]	@ 0x44
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6979      	ldr	r1, [r7, #20]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	613b      	str	r3, [r7, #16]
   return(result);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e6      	bne.n	8006846 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800688c:	bf00      	nop
 800688e:	3754      	adds	r7, #84	@ 0x54
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	effffffe 	.word	0xeffffffe

0800689c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e027      	b.n	8006902 <HAL_UARTEx_DisableFifoMode+0x66>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2224      	movs	r2, #36	@ 0x24
 80068be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0201 	bic.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80068e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006922:	2302      	movs	r3, #2
 8006924:	e02d      	b.n	8006982 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2224      	movs	r2, #36	@ 0x24
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0201 	bic.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f850 	bl	8006a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2220      	movs	r2, #32
 8006974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800699e:	2302      	movs	r3, #2
 80069a0:	e02d      	b.n	80069fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2224      	movs	r2, #36	@ 0x24
 80069ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0201 	bic.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f812 	bl	8006a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d108      	bne.n	8006a2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a28:	e031      	b.n	8006a8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a2e:	2310      	movs	r3, #16
 8006a30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	0e5b      	lsrs	r3, r3, #25
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	f003 0307 	and.w	r3, r3, #7
 8006a40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	0f5b      	lsrs	r3, r3, #29
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	7b3a      	ldrb	r2, [r7, #12]
 8006a56:	4911      	ldr	r1, [pc, #68]	@ (8006a9c <UARTEx_SetNbDataToProcess+0x94>)
 8006a58:	5c8a      	ldrb	r2, [r1, r2]
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a5e:	7b3a      	ldrb	r2, [r7, #12]
 8006a60:	490f      	ldr	r1, [pc, #60]	@ (8006aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8006a62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	7b7a      	ldrb	r2, [r7, #13]
 8006a74:	4909      	ldr	r1, [pc, #36]	@ (8006a9c <UARTEx_SetNbDataToProcess+0x94>)
 8006a76:	5c8a      	ldrb	r2, [r1, r2]
 8006a78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a7c:	7b7a      	ldrb	r2, [r7, #13]
 8006a7e:	4908      	ldr	r1, [pc, #32]	@ (8006aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8006a80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a82:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	08006bb4 	.word	0x08006bb4
 8006aa0:	08006bbc 	.word	0x08006bbc

08006aa4 <memset>:
 8006aa4:	4402      	add	r2, r0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d100      	bne.n	8006aae <memset+0xa>
 8006aac:	4770      	bx	lr
 8006aae:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab2:	e7f9      	b.n	8006aa8 <memset+0x4>

08006ab4 <__libc_init_array>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8006aec <__libc_init_array+0x38>)
 8006ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8006af0 <__libc_init_array+0x3c>)
 8006aba:	1b64      	subs	r4, r4, r5
 8006abc:	10a4      	asrs	r4, r4, #2
 8006abe:	2600      	movs	r6, #0
 8006ac0:	42a6      	cmp	r6, r4
 8006ac2:	d109      	bne.n	8006ad8 <__libc_init_array+0x24>
 8006ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8006af4 <__libc_init_array+0x40>)
 8006ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8006af8 <__libc_init_array+0x44>)
 8006ac8:	f000 f826 	bl	8006b18 <_init>
 8006acc:	1b64      	subs	r4, r4, r5
 8006ace:	10a4      	asrs	r4, r4, #2
 8006ad0:	2600      	movs	r6, #0
 8006ad2:	42a6      	cmp	r6, r4
 8006ad4:	d105      	bne.n	8006ae2 <__libc_init_array+0x2e>
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006adc:	4798      	blx	r3
 8006ade:	3601      	adds	r6, #1
 8006ae0:	e7ee      	b.n	8006ac0 <__libc_init_array+0xc>
 8006ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae6:	4798      	blx	r3
 8006ae8:	3601      	adds	r6, #1
 8006aea:	e7f2      	b.n	8006ad2 <__libc_init_array+0x1e>
 8006aec:	08006bcc 	.word	0x08006bcc
 8006af0:	08006bcc 	.word	0x08006bcc
 8006af4:	08006bcc 	.word	0x08006bcc
 8006af8:	08006bd0 	.word	0x08006bd0

08006afc <memcpy>:
 8006afc:	440a      	add	r2, r1
 8006afe:	4291      	cmp	r1, r2
 8006b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b04:	d100      	bne.n	8006b08 <memcpy+0xc>
 8006b06:	4770      	bx	lr
 8006b08:	b510      	push	{r4, lr}
 8006b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b12:	4291      	cmp	r1, r2
 8006b14:	d1f9      	bne.n	8006b0a <memcpy+0xe>
 8006b16:	bd10      	pop	{r4, pc}

08006b18 <_init>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr

08006b24 <_fini>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr
