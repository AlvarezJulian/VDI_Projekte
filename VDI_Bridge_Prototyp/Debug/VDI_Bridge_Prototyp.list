
VDI_Bridge_Prototyp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e8  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006b94  08006b94  00007b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c28  08006c28  00007c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c30  08006c30  00007c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006c34  08006c34  00007c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006c38  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000224  24000010  08006c48  00008010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000234  08006c48  00008234  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018005  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025da  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001340  00000000  00000000  00022620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f22  00000000  00000000  00023960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031217  00000000  00000000  00024882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016ee2  00000000  00000000  00055a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149147  00000000  00000000  0006c97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b5ac2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005438  00000000  00000000  001b5b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001baf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006b7c 	.word	0x08006b7c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08006b7c 	.word	0x08006b7c

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e0:	f000 fd3c 	bl	800105c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e4:	f000 f826 	bl	8000634 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e8:	f000 f9a6 	bl	8000938 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80005ec:	f000 f950 	bl	8000890 <MX_USART3_UART_Init>
	MX_USB_OTG_HS_USB_Init();
 80005f0:	f000 f99a 	bl	8000928 <MX_USB_OTG_HS_USB_Init>
	MX_FDCAN1_Init();
 80005f4:	f000 f894 	bl	8000720 <MX_FDCAN1_Init>
	MX_TIM1_Init();
 80005f8:	f000 f8f6 	bl	80007e8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_FDCAN_Start(&hfdcan1);
 80005fc:	480b      	ldr	r0, [pc, #44]	@ (800062c <main+0x50>)
 80005fe:	f001 f8d1 	bl	80017a4 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2101      	movs	r1, #1
 8000606:	4809      	ldr	r0, [pc, #36]	@ (800062c <main+0x50>)
 8000608:	f001 f952 	bl	80018b0 <HAL_FDCAN_ActivateNotification>
	HAL_TIM_Base_Start_IT(&htim1);
 800060c:	4808      	ldr	r0, [pc, #32]	@ (8000630 <main+0x54>)
 800060e:	f004 fc01 	bl	8004e14 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100); // nach Init von Can-um Startnode zu senden
 8000612:	2064      	movs	r0, #100	@ 0x64
 8000614:	f000 fdb4 	bl	8001180 <HAL_Delay>
	FDCAN_Send_Bridge_Start();
 8000618:	f000 faa8 	bl	8000b6c <FDCAN_Send_Bridge_Start>
	HAL_Delay(2000); // Nach starten des StartNodes, warte 2 sekunden bis die Freigabe gesendet wird
 800061c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000620:	f000 fdae 	bl	8001180 <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
//		FDCAN_Send_Bridge_Heartbeat();
		FDCAN_Send_Bridge_Command();
 8000624:	f000 faca 	bl	8000bbc <FDCAN_Send_Bridge_Command>
 8000628:	e7fc      	b.n	8000624 <main+0x48>
 800062a:	bf00      	nop
 800062c:	2400002c 	.word	0x2400002c
 8000630:	240000cc 	.word	0x240000cc

08000634 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	@ 0x70
 8000638:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800063a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800063e:	224c      	movs	r2, #76	@ 0x4c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f006 fa60 	bl	8006b08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fa5a 	bl	8006b08 <memset>

	/*AXI clock gating */
	RCC->CKGAENR = 0xFFFFFFFF;
 8000654:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <SystemClock_Config+0xe4>)
 8000656:	f04f 32ff 	mov.w	r2, #4294967295
 800065a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800065e:	2004      	movs	r0, #4
 8000660:	f001 fd88 	bl	8002174 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b2c      	ldr	r3, [pc, #176]	@ (800071c <SystemClock_Config+0xe8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a2b      	ldr	r2, [pc, #172]	@ (800071c <SystemClock_Config+0xe8>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b29      	ldr	r3, [pc, #164]	@ (800071c <SystemClock_Config+0xe8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000680:	bf00      	nop
 8000682:	4b26      	ldr	r3, [pc, #152]	@ (800071c <SystemClock_Config+0xe8>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068e:	d1f8      	bne.n	8000682 <SystemClock_Config+0x4e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8000690:	2321      	movs	r3, #33	@ 0x21
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000698:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 80006aa:	2318      	movs	r3, #24
 80006ac:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ba:	230c      	movs	r3, #12
 80006bc:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006be:	2300      	movs	r3, #0
 80006c0:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fdac 	bl	8002228 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xa6>
		Error_Handler();
 80006d6:	f000 fac7 	bl	8000c68 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006da:	233f      	movs	r3, #63	@ 0x3f
 80006dc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80006ee:	2350      	movs	r3, #80	@ 0x50
 80006f0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80006f2:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80006f6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2102      	movs	r1, #2
 8000700:	4618      	mov	r0, r3
 8000702:	f002 f9c3 	bl	8002a8c <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xdc>
		Error_Handler();
 800070c:	f000 faac 	bl	8000c68 <Error_Handler>
	}
}
 8000710:	bf00      	nop
 8000712:	3770      	adds	r7, #112	@ 0x70
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	58024400 	.word	0x58024400
 800071c:	58024800 	.word	0x58024800

08000720 <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000724:	4b2e      	ldr	r3, [pc, #184]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000726:	4a2f      	ldr	r2, [pc, #188]	@ (80007e4 <MX_FDCAN1_Init+0xc4>)
 8000728:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800072a:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000730:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = ENABLE;
 8000736:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000738:	2201      	movs	r2, #1
 800073a:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 800073c:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000742:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 16;
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 800074a:	2210      	movs	r2, #16
 800074c:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 800074e:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000750:	2201      	movs	r2, #1
 8000752:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 3;
 8000754:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000756:	2203      	movs	r2, #3
 8000758:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 800075a:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 800075c:	2202      	movs	r2, #2
 800075e:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000762:	2201      	movs	r2, #1
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000768:	2201      	movs	r2, #1
 800076a:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 800076c:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 800076e:	2201      	movs	r2, #1
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 8000772:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000774:	2201      	movs	r2, #1
 8000776:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000778:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000786:	2200      	movs	r2, #0
 8000788:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 800078c:	2200      	movs	r2, #0
 800078e:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000790:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000792:	2204      	movs	r2, #4
 8000794:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000798:	2200      	movs	r2, #0
 800079a:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800079c:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 800079e:	2204      	movs	r2, #4
 80007a0:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007bc:	2201      	movs	r2, #1
 80007be:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007ce:	f000 fe0b 	bl	80013e8 <HAL_FDCAN_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_FDCAN1_Init+0xbc>
		Error_Handler();
 80007d8:	f000 fa46 	bl	8000c68 <Error_Handler>
//  hfdcan1.Init.NominalSyncJumpWidth = 1;
//  hfdcan1.Init.NominalTimeSeg1 = 3;
//  hfdcan1.Init.NominalTimeSeg2 = 2;
	/* USER CODE END FDCAN1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2400002c 	.word	0x2400002c
 80007e4:	4000a000 	.word	0x4000a000

080007e8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_TIM1_Init+0xa0>)
 8000808:	4a20      	ldr	r2, [pc, #128]	@ (800088c <MX_TIM1_Init+0xa4>)
 800080a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48000 - 1;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_TIM1_Init+0xa0>)
 800080e:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000812:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_TIM1_Init+0xa0>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_TIM1_Init+0xa0>)
 800081c:	2263      	movs	r2, #99	@ 0x63
 800081e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_TIM1_Init+0xa0>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_TIM1_Init+0xa0>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_TIM1_Init+0xa0>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000832:	4815      	ldr	r0, [pc, #84]	@ (8000888 <MX_TIM1_Init+0xa0>)
 8000834:	f004 fa96 	bl	8004d64 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0x5a>
		Error_Handler();
 800083e:	f000 fa13 	bl	8000c68 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000846:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	480e      	ldr	r0, [pc, #56]	@ (8000888 <MX_TIM1_Init+0xa0>)
 8000850:	f004 fc60 	bl	8005114 <HAL_TIM_ConfigClockSource>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0x76>
		Error_Handler();
 800085a:	f000 fa05 	bl	8000c68 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_TIM1_Init+0xa0>)
 8000870:	f004 febe 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x96>
		Error_Handler();
 800087a:	f000 f9f5 	bl	8000c68 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	240000cc 	.word	0x240000cc
 800088c:	40010000 	.word	0x40010000

08000890 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 8000896:	4a23      	ldr	r2, [pc, #140]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 8000898:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80008d8:	4811      	ldr	r0, [pc, #68]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008da:	f004 ff35 	bl	8005748 <HAL_UART_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 80008e4:	f000 f9c0 	bl	8000c68 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 80008e8:	2100      	movs	r1, #0
 80008ea:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008ec:	f006 f841 	bl	8006972 <HAL_UARTEx_SetTxFifoThreshold>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80008f6:	f000 f9b7 	bl	8000c68 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 80008fe:	f006 f876 	bl	80069ee <HAL_UARTEx_SetRxFifoThreshold>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000908:	f000 f9ae 	bl	8000c68 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_USART3_UART_Init+0x90>)
 800090e:	f005 fff7 	bl	8006900 <HAL_UARTEx_DisableFifoMode>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8000918:	f000 f9a6 	bl	8000c68 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	24000118 	.word	0x24000118
 8000924:	40004800 	.word	0x40004800

08000928 <MX_USB_OTG_HS_USB_Init>:
/**
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void) {
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_HS_Init 1 */
	/* USER CODE BEGIN USB_OTG_HS_Init 2 */

	/* USER CODE END USB_OTG_HS_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	@ 0x38
 800093c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b80      	ldr	r3, [pc, #512]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000950:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000954:	4a7e      	ldr	r2, [pc, #504]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800095e:	4b7c      	ldr	r3, [pc, #496]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000960:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800096c:	4b78      	ldr	r3, [pc, #480]	@ (8000b50 <MX_GPIO_Init+0x218>)
 800096e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000972:	4a77      	ldr	r2, [pc, #476]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000974:	f043 0320 	orr.w	r3, r3, #32
 8000978:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800097c:	4b74      	ldr	r3, [pc, #464]	@ (8000b50 <MX_GPIO_Init+0x218>)
 800097e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000982:	f003 0320 	and.w	r3, r3, #32
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	4b71      	ldr	r3, [pc, #452]	@ (8000b50 <MX_GPIO_Init+0x218>)
 800098c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000990:	4a6f      	ldr	r2, [pc, #444]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000996:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800099a:	4b6d      	ldr	r3, [pc, #436]	@ (8000b50 <MX_GPIO_Init+0x218>)
 800099c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b69      	ldr	r3, [pc, #420]	@ (8000b50 <MX_GPIO_Init+0x218>)
 80009aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009ae:	4a68      	ldr	r2, [pc, #416]	@ (8000b50 <MX_GPIO_Init+0x218>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009b8:	4b65      	ldr	r3, [pc, #404]	@ (8000b50 <MX_GPIO_Init+0x218>)
 80009ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b62      	ldr	r3, [pc, #392]	@ (8000b50 <MX_GPIO_Init+0x218>)
 80009c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009cc:	4a60      	ldr	r2, [pc, #384]	@ (8000b50 <MX_GPIO_Init+0x218>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000b50 <MX_GPIO_Init+0x218>)
 80009d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80009e4:	4b5a      	ldr	r3, [pc, #360]	@ (8000b50 <MX_GPIO_Init+0x218>)
 80009e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009ea:	4a59      	ldr	r2, [pc, #356]	@ (8000b50 <MX_GPIO_Init+0x218>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009f4:	4b56      	ldr	r3, [pc, #344]	@ (8000b50 <MX_GPIO_Init+0x218>)
 80009f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b53      	ldr	r3, [pc, #332]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000a04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a08:	4a51      	ldr	r2, [pc, #324]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a12:	4b4f      	ldr	r3, [pc, #316]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000a14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a20:	4b4b      	ldr	r3, [pc, #300]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000a22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a26:	4a4a      	ldr	r2, [pc, #296]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a30:	4b47      	ldr	r3, [pc, #284]	@ (8000b50 <MX_GPIO_Init+0x218>)
 8000a32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a44:	4843      	ldr	r0, [pc, #268]	@ (8000b54 <MX_GPIO_Init+0x21c>)
 8000a46:	f001 fb61 	bl	800210c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a50:	4841      	ldr	r0, [pc, #260]	@ (8000b58 <MX_GPIO_Init+0x220>)
 8000a52:	f001 fb5b 	bl	800210c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4840      	ldr	r0, [pc, #256]	@ (8000b5c <MX_GPIO_Init+0x224>)
 8000a5c:	f001 fb56 	bl	800210c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	483a      	ldr	r0, [pc, #232]	@ (8000b60 <MX_GPIO_Init+0x228>)
 8000a76:	f001 f999 	bl	8001dac <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4830      	ldr	r0, [pc, #192]	@ (8000b54 <MX_GPIO_Init+0x21c>)
 8000a94:	f001 f98a 	bl	8001dac <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000a98:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4829      	ldr	r0, [pc, #164]	@ (8000b58 <MX_GPIO_Init+0x220>)
 8000ab2:	f001 f97b 	bl	8001dac <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ab6:	2380      	movs	r3, #128	@ 0x80
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4826      	ldr	r0, [pc, #152]	@ (8000b64 <MX_GPIO_Init+0x22c>)
 8000acc:	f001 f96e 	bl	8001dac <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4820      	ldr	r0, [pc, #128]	@ (8000b68 <MX_GPIO_Init+0x230>)
 8000ae6:	f001 f961 	bl	8001dac <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_ID_Pin */
	GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000afc:	230a      	movs	r3, #10
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4818      	ldr	r0, [pc, #96]	@ (8000b68 <MX_GPIO_Init+0x230>)
 8000b08:	f001 f950 	bl	8001dac <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
	GPIO_InitStruct.Pin = USB_FS_N_Pin | USB_FS_P_Pin;
 8000b0c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4810      	ldr	r0, [pc, #64]	@ (8000b68 <MX_GPIO_Init+0x230>)
 8000b26:	f001 f941 	bl	8001dac <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <MX_GPIO_Init+0x224>)
 8000b42:	f001 f933 	bl	8001dac <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b46:	bf00      	nop
 8000b48:	3738      	adds	r7, #56	@ 0x38
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58021400 	.word	0x58021400
 8000b58:	58020400 	.word	0x58020400
 8000b5c:	58021000 	.word	0x58021000
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58021800 	.word	0x58021800
 8000b68:	58020000 	.word	0x58020000

08000b6c <FDCAN_Send_Bridge_Start>:

/* USER CODE BEGIN 4 */

void FDCAN_Send_Bridge_Start() {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	//Kommando aufbauen
	TxHeaderSTART.Identifier = VDI_CAN_ID_START;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <FDCAN_Send_Bridge_Start+0x44>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
	TxHeaderSTART.IdType = FDCAN_STANDARD_ID;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <FDCAN_Send_Bridge_Start+0x44>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
	TxHeaderSTART.TxFrameType = FDCAN_DATA_FRAME;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <FDCAN_Send_Bridge_Start+0x44>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
	TxHeaderSTART.DataLength = FDCAN_DLC_BYTES_2;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <FDCAN_Send_Bridge_Start+0x44>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	60da      	str	r2, [r3, #12]
	TxHeaderSTART.FDFormat = FDCAN_CLASSIC_CAN;
 8000b88:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <FDCAN_Send_Bridge_Start+0x44>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]

	TxDataSTART[0] = 0x01; // Laut VDI-RICHTLINIEN - Tabelle C4 - Seite 12-13
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <FDCAN_Send_Bridge_Start+0x48>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
	TxDataSTART[1] = 0x15; // Laut VDI-RICHTLINIEN - Tabelle C4 - Seite 12-13
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <FDCAN_Send_Bridge_Start+0x48>)
 8000b96:	2215      	movs	r2, #21
 8000b98:	705a      	strb	r2, [r3, #1]

// Fragen ob FdCan bereit zum senden, sonst warten, Led Aus

	 HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeaderSTART, TxDataSTART) ;
 8000b9a:	4a06      	ldr	r2, [pc, #24]	@ (8000bb4 <FDCAN_Send_Bridge_Start+0x48>)
 8000b9c:	4904      	ldr	r1, [pc, #16]	@ (8000bb0 <FDCAN_Send_Bridge_Start+0x44>)
 8000b9e:	4806      	ldr	r0, [pc, #24]	@ (8000bb8 <FDCAN_Send_Bridge_Start+0x4c>)
 8000ba0:	f000 fe2b 	bl	80017fa <HAL_FDCAN_AddMessageToTxFifoQ>
		// Kommando senden, Led Ein
//		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
//	} else {
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_Delay(250);
 8000ba4:	20fa      	movs	r0, #250	@ 0xfa
 8000ba6:	f000 faeb 	bl	8001180 <HAL_Delay>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2400020c 	.word	0x2400020c
 8000bb4:	240001bc 	.word	0x240001bc
 8000bb8:	2400002c 	.word	0x2400002c

08000bbc <FDCAN_Send_Bridge_Command>:
void FDCAN_Send_Bridge_Command() {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

	//Kommando aufbauen
	TxHeader.Identifier = VDI_CAN_ID_LOGIN;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <FDCAN_Send_Bridge_Command+0x58>)
 8000bc2:	f240 2215 	movw	r2, #533	@ 0x215
 8000bc6:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <FDCAN_Send_Bridge_Command+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <FDCAN_Send_Bridge_Command+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <FDCAN_Send_Bridge_Command+0x58>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	60da      	str	r2, [r3, #12]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <FDCAN_Send_Bridge_Command+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]

	TxData[0] = 0x01; // Freigabe: Laut VDI-RICHTLINIEN - Tabelle C4 - Seite 12-13
 8000be0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <FDCAN_Send_Bridge_Command+0x5c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]

// Fragen ob FdCan bereit zum senden, sonst warten, Led Aus

	HAL_Delay(100);
 8000be6:	2064      	movs	r0, #100	@ 0x64
 8000be8:	f000 faca 	bl	8001180 <HAL_Delay>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK) {
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <FDCAN_Send_Bridge_Command+0x5c>)
 8000bee:	4909      	ldr	r1, [pc, #36]	@ (8000c14 <FDCAN_Send_Bridge_Command+0x58>)
 8000bf0:	480a      	ldr	r0, [pc, #40]	@ (8000c1c <FDCAN_Send_Bridge_Command+0x60>)
 8000bf2:	f000 fe02 	bl	80017fa <HAL_FDCAN_AddMessageToTxFifoQ>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d105      	bne.n	8000c08 <FDCAN_Send_Bridge_Command+0x4c>
		// Kommando senden, Led Ein
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <FDCAN_Send_Bridge_Command+0x64>)
 8000c02:	f001 fa83 	bl	800210c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
}
 8000c06:	e003      	b.n	8000c10 <FDCAN_Send_Bridge_Command+0x54>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <FDCAN_Send_Bridge_Command+0x64>)
 8000c0c:	f001 fa97 	bl	800213e <HAL_GPIO_TogglePin>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	240001c4 	.word	0x240001c4
 8000c18:	240001ac 	.word	0x240001ac
 8000c1c:	2400002c 	.word	0x2400002c
 8000c20:	58021000 	.word	0x58021000

08000c24 <FDCAN_Send_Bridge_Heartbeat>:

void FDCAN_Send_Bridge_Heartbeat() {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	//Kommando aufbauen
	TxHeaderBEAT.Identifier = VDI_CAN_ID_HEARTBEAT;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000c2a:	f240 7201 	movw	r2, #1793	@ 0x701
 8000c2e:	601a      	str	r2, [r3, #0]
	TxHeaderBEAT.IdType = FDCAN_STANDARD_ID;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
	TxHeaderBEAT.TxFrameType = FDCAN_DATA_FRAME;
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
	TxHeaderBEAT.DataLength = FDCAN_DLC_BYTES_1;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	60da      	str	r2, [r3, #12]
	TxHeaderBEAT.FDFormat = FDCAN_CLASSIC_CAN;
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]

	TxDataBEAT[0] = 0x05; // Laut VDI-RICHTLINIEN - Seite 9- CANopen Protokol
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <FDCAN_Send_Bridge_Heartbeat+0x3c>)
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	701a      	strb	r2, [r3, #0]

// Fragen ob FdCan bereit zum senden, sonst warten, Led Aus

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeaderBEAT, TxDataBEAT)
 8000c4e:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <FDCAN_Send_Bridge_Heartbeat+0x3c>)
 8000c50:	4902      	ldr	r1, [pc, #8]	@ (8000c5c <FDCAN_Send_Bridge_Heartbeat+0x38>)
 8000c52:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <FDCAN_Send_Bridge_Heartbeat+0x40>)
 8000c54:	f000 fdd1 	bl	80017fa <HAL_FDCAN_AddMessageToTxFifoQ>
//		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	}
//	else {
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	}
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	240001e8 	.word	0x240001e8
 8000c60:	240001b4 	.word	0x240001b4
 8000c64:	2400002c 	.word	0x2400002c

08000c68 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <HAL_MspInit+0x30>)
 8000c7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c80:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <HAL_MspInit+0x30>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_MspInit+0x30>)
 8000c8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	58024400 	.word	0x58024400

08000ca8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0ba      	sub	sp, #232	@ 0xe8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	22c0      	movs	r2, #192	@ 0xc0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 ff1d 	bl	8006b08 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a27      	ldr	r2, [pc, #156]	@ (8000d70 <HAL_FDCAN_MspInit+0xc8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d146      	bne.n	8000d66 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cd8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ce4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fa57 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000cfc:	f7ff ffb4 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d00:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <HAL_FDCAN_MspInit+0xcc>)
 8000d02:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000d06:	4a1b      	ldr	r2, [pc, #108]	@ (8000d74 <HAL_FDCAN_MspInit+0xcc>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d0c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000d10:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <HAL_FDCAN_MspInit+0xcc>)
 8000d12:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_FDCAN_MspInit+0xcc>)
 8000d20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d24:	4a13      	ldr	r2, [pc, #76]	@ (8000d74 <HAL_FDCAN_MspInit+0xcc>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <HAL_FDCAN_MspInit+0xcc>)
 8000d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d54:	2309      	movs	r3, #9
 8000d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <HAL_FDCAN_MspInit+0xd0>)
 8000d62:	f001 f823 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000d66:	bf00      	nop
 8000d68:	37e8      	adds	r7, #232	@ 0xe8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	4000a000 	.word	0x4000a000
 8000d74:	58024400 	.word	0x58024400
 8000d78:	58020c00 	.word	0x58020c00

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d116      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000d90:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d94:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000da0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2019      	movs	r0, #25
 8000db2:	f000 fae4 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000db6:	2019      	movs	r0, #25
 8000db8:	f000 fafb 	bl	80013b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	58024400 	.word	0x58024400

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b0ba      	sub	sp, #232	@ 0xe8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	22c0      	movs	r2, #192	@ 0xc0
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f005 fe8b 	bl	8006b08 <memset>
  if(huart->Instance==USART3)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a27      	ldr	r2, [pc, #156]	@ (8000e94 <HAL_UART_MspInit+0xc8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d146      	bne.n	8000e8a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dfc:	f04f 0202 	mov.w	r2, #2
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 f9c6 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e1e:	f7ff ff23 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e22:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <HAL_UART_MspInit+0xcc>)
 8000e24:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e28:	4a1b      	ldr	r2, [pc, #108]	@ (8000e98 <HAL_UART_MspInit+0xcc>)
 8000e2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e2e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <HAL_UART_MspInit+0xcc>)
 8000e34:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_UART_MspInit+0xcc>)
 8000e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e46:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <HAL_UART_MspInit+0xcc>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_UART_MspInit+0xcc>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_UART_MspInit+0xd0>)
 8000e86:	f000 ff91 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e8a:	bf00      	nop
 8000e8c:	37e8      	adds	r7, #232	@ 0xe8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004800 	.word	0x40004800
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	58020c00 	.word	0x58020c00

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef6:	f000 f923 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f04:	4803      	ldr	r0, [pc, #12]	@ (8000f14 <TIM1_UP_IRQHandler+0x14>)
 8000f06:	f003 fffd 	bl	8004f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
	FDCAN_Send_Bridge_Heartbeat();
 8000f0a:	f7ff fe8b 	bl	8000c24 <FDCAN_Send_Bridge_Heartbeat>
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	240000cc 	.word	0x240000cc

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b32      	ldr	r3, [pc, #200]	@ (8000fe8 <SystemInit+0xd0>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f22:	4a31      	ldr	r2, [pc, #196]	@ (8000fe8 <SystemInit+0xd0>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000fec <SystemInit+0xd4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d807      	bhi.n	8000f48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f38:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <SystemInit+0xd4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 030f 	bic.w	r3, r3, #15
 8000f40:	4a2a      	ldr	r2, [pc, #168]	@ (8000fec <SystemInit+0xd4>)
 8000f42:	f043 0303 	orr.w	r3, r3, #3
 8000f46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f48:	4b29      	ldr	r3, [pc, #164]	@ (8000ff0 <SystemInit+0xd8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a28      	ldr	r2, [pc, #160]	@ (8000ff0 <SystemInit+0xd8>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f54:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <SystemInit+0xd8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f5a:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <SystemInit+0xd8>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4924      	ldr	r1, [pc, #144]	@ (8000ff0 <SystemInit+0xd8>)
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <SystemInit+0xdc>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <SystemInit+0xd4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <SystemInit+0xd4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 030f 	bic.w	r3, r3, #15
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <SystemInit+0xd4>)
 8000f7c:	f043 0303 	orr.w	r3, r3, #3
 8000f80:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <SystemInit+0xd8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <SystemInit+0xd8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <SystemInit+0xd8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <SystemInit+0xd8>)
 8000f96:	4a18      	ldr	r2, [pc, #96]	@ (8000ff8 <SystemInit+0xe0>)
 8000f98:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <SystemInit+0xd8>)
 8000f9c:	4a17      	ldr	r2, [pc, #92]	@ (8000ffc <SystemInit+0xe4>)
 8000f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <SystemInit+0xd8>)
 8000fa2:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <SystemInit+0xe8>)
 8000fa4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fa6:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <SystemInit+0xd8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fac:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <SystemInit+0xd8>)
 8000fae:	4a14      	ldr	r2, [pc, #80]	@ (8001000 <SystemInit+0xe8>)
 8000fb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <SystemInit+0xd8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <SystemInit+0xd8>)
 8000fba:	4a11      	ldr	r2, [pc, #68]	@ (8001000 <SystemInit+0xe8>)
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <SystemInit+0xd8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <SystemInit+0xd8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <SystemInit+0xd8>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <SystemInit+0xd8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <SystemInit+0xec>)
 8000fd8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fdc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00
 8000fec:	52002000 	.word	0x52002000
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ff8:	02020200 	.word	0x02020200
 8000ffc:	01ff0000 	.word	0x01ff0000
 8001000:	01010280 	.word	0x01010280
 8001004:	52004000 	.word	0x52004000

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001040 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800100c:	f7ff ff84 	bl	8000f18 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	@ (8001048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	@ (8001054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001036:	f005 fd6f 	bl	8006b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff facf 	bl	80005dc <main>
  bx  lr
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001044:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001048:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800104c:	08006c38 	.word	0x08006c38
  ldr r2, =_sbss
 8001050:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001054:	24000234 	.word	0x24000234

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>
	...

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001062:	2003      	movs	r0, #3
 8001064:	f000 f980 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001068:	f001 fec6 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 800106c:	4602      	mov	r2, r0
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_Init+0x68>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	4913      	ldr	r1, [pc, #76]	@ (80010c8 <HAL_Init+0x6c>)
 800107a:	5ccb      	ldrb	r3, [r1, r3]
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	fa22 f303 	lsr.w	r3, r2, r3
 8001084:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_Init+0x68>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	4a0e      	ldr	r2, [pc, #56]	@ (80010c8 <HAL_Init+0x6c>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	fa22 f303 	lsr.w	r3, r2, r3
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <HAL_Init+0x70>)
 800109e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a0:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <HAL_Init+0x74>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f814 	bl	80010d4 <HAL_InitTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e002      	b.n	80010bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010b6:	f7ff fddd 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	58024400 	.word	0x58024400
 80010c8:	08006be0 	.word	0x08006be0
 80010cc:	24000004 	.word	0x24000004
 80010d0:	24000000 	.word	0x24000000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e021      	b.n	800112c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_InitTick+0x64>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_InitTick+0x60>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f965 	bl	80013ce <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f92f 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x68>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2400000c 	.word	0x2400000c
 8001138:	24000000 	.word	0x24000000
 800113c:	24000008 	.word	0x24000008

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2400000c 	.word	0x2400000c
 8001164:	24000230 	.word	0x24000230

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	24000230 	.word	0x24000230

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2400000c 	.word	0x2400000c

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <__NVIC_SetPriorityGrouping+0x40>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <__NVIC_SetPriorityGrouping+0x40>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	05fa0000 	.word	0x05fa0000

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	@ (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff29 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff40 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff90 	bl	80012bc <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5f 	bl	8001268 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff33 	bl	800122c <__NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffa4 	bl	8001324 <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b098      	sub	sp, #96	@ 0x60
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80013f0:	4a84      	ldr	r2, [pc, #528]	@ (8001604 <HAL_FDCAN_Init+0x21c>)
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4611      	mov	r1, r2
 80013f8:	224c      	movs	r2, #76	@ 0x4c
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 fbb0 	bl	8006b60 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1c6      	b.n	8001798 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a7e      	ldr	r2, [pc, #504]	@ (8001608 <HAL_FDCAN_Init+0x220>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d106      	bne.n	8001422 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800141c:	461a      	mov	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fc36 	bl	8000ca8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0210 	bic.w	r2, r2, #16
 800144a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800144c:	f7ff fe8c 	bl	8001168 <HAL_GetTick>
 8001450:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001452:	e014      	b.n	800147e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001454:	f7ff fe88 	bl	8001168 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b0a      	cmp	r3, #10
 8001460:	d90d      	bls.n	800147e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001468:	f043 0201 	orr.w	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2203      	movs	r2, #3
 8001476:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e18c      	b.n	8001798 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b08      	cmp	r3, #8
 800148a:	d0e3      	beq.n	8001454 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699a      	ldr	r2, [r3, #24]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149c:	f7ff fe64 	bl	8001168 <HAL_GetTick>
 80014a0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014a2:	e014      	b.n	80014ce <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014a4:	f7ff fe60 	bl	8001168 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b0a      	cmp	r3, #10
 80014b0:	d90d      	bls.n	80014ce <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e164      	b.n	8001798 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0e3      	beq.n	80014a4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699a      	ldr	r2, [r3, #24]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0202 	orr.w	r2, r2, #2
 80014ea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7c1b      	ldrb	r3, [r3, #16]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699a      	ldr	r2, [r3, #24]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001502:	619a      	str	r2, [r3, #24]
 8001504:	e007      	b.n	8001516 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001514:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7c5b      	ldrb	r3, [r3, #17]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	699a      	ldr	r2, [r3, #24]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800152c:	619a      	str	r2, [r3, #24]
 800152e:	e007      	b.n	8001540 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800153e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7c9b      	ldrb	r3, [r3, #18]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d108      	bne.n	800155a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001556:	619a      	str	r2, [r3, #24]
 8001558:	e007      	b.n	800156a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699a      	ldr	r2, [r3, #24]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001568:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800158e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0210 	bic.w	r2, r2, #16
 800159e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0204 	orr.w	r2, r2, #4
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	e030      	b.n	800161c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d02c      	beq.n	800161c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d020      	beq.n	800160c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015d8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0210 	orr.w	r2, r2, #16
 80015e8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d114      	bne.n	800161c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699a      	ldr	r2, [r3, #24]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0220 	orr.w	r2, r2, #32
 8001600:	619a      	str	r2, [r3, #24]
 8001602:	e00b      	b.n	800161c <HAL_FDCAN_Init+0x234>
 8001604:	08006b94 	.word	0x08006b94
 8001608:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699a      	ldr	r2, [r3, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0220 	orr.w	r2, r2, #32
 800161a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	3b01      	subs	r3, #1
 8001622:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	3b01      	subs	r3, #1
 800162a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800162c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001634:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	3b01      	subs	r3, #1
 800163e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001644:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001646:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001650:	d115      	bne.n	800167e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001656:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165c:	3b01      	subs	r3, #1
 800165e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001660:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	3b01      	subs	r3, #1
 8001668:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800166a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	3b01      	subs	r3, #1
 8001674:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800167a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800167c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00a      	beq.n	800169c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a4:	4413      	add	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d011      	beq.n	80016ce <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80016b2:	f023 0107 	bic.w	r1, r3, #7
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	3360      	adds	r3, #96	@ 0x60
 80016be:	443b      	add	r3, r7
 80016c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d011      	beq.n	80016fa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80016de:	f023 0107 	bic.w	r1, r3, #7
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	3360      	adds	r3, #96	@ 0x60
 80016ea:	443b      	add	r3, r7
 80016ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d012      	beq.n	8001728 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800170a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	3360      	adds	r3, #96	@ 0x60
 8001716:	443b      	add	r3, r7
 8001718:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800171c:	011a      	lsls	r2, r3, #4
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800172c:	2b00      	cmp	r3, #0
 800172e:	d012      	beq.n	8001756 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001738:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	3360      	adds	r3, #96	@ 0x60
 8001744:	443b      	add	r3, r7
 8001746:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800174a:	021a      	lsls	r2, r3, #8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a11      	ldr	r2, [pc, #68]	@ (80017a0 <HAL_FDCAN_Init+0x3b8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d107      	bne.n	8001770 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f022 0203 	bic.w	r2, r2, #3
 800176e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f90b 	bl	80019a4 <FDCAN_CalcultateRamBlockAddresses>
 800178e:	4603      	mov	r3, r0
 8001790:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001794:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001798:	4618      	mov	r0, r3
 800179a:	3760      	adds	r7, #96	@ 0x60
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	4000a000 	.word	0x4000a000

080017a4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d111      	bne.n	80017dc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e008      	b.n	80017ee <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017e2:	f043 0204 	orr.w	r2, r3, #4
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
  }
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d141      	bne.n	8001896 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800181a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001828:	f043 0220 	orr.w	r2, r3, #32
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e038      	b.n	80018a8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800183e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800184c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e026      	b.n	80018a8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001862:	0c1b      	lsrs	r3, r3, #16
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 fa1d 	bl	8001cb0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2101      	movs	r1, #1
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001886:	2201      	movs	r2, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e008      	b.n	80018a8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800189c:	f043 0208 	orr.w	r2, r3, #8
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
  }
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80018c2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d002      	beq.n	80018d0 <HAL_FDCAN_ActivateNotification+0x20>
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d155      	bne.n	800197c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d108      	bne.n	80018f0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018ee:	e014      	b.n	800191a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	4013      	ands	r3, r2
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d108      	bne.n	8001912 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0202 	orr.w	r2, r2, #2
 800190e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001910:	e003      	b.n	800191a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2203      	movs	r2, #3
 8001918:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001920:	2b00      	cmp	r3, #0
 8001922:	d009      	beq.n	8001938 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	430a      	orrs	r2, r1
 8001934:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	430a      	orrs	r2, r1
 8001952:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_FDCAN_ActivateNotification+0xec>)
 8001960:	4013      	ands	r3, r2
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	430b      	orrs	r3, r1
 8001968:	6553      	str	r3, [r2, #84]	@ 0x54
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <HAL_FDCAN_ActivateNotification+0xf0>)
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	0f9b      	lsrs	r3, r3, #30
 8001972:	490b      	ldr	r1, [pc, #44]	@ (80019a0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001974:	4313      	orrs	r3, r2
 8001976:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	e008      	b.n	800198e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001982:	f043 0202 	orr.w	r2, r3, #2
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
  }
}
 800198e:	4618      	mov	r0, r3
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	3fcfffff 	.word	0x3fcfffff
 80019a0:	4000a800 	.word	0x4000a800

080019a4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80019ba:	4ba7      	ldr	r3, [pc, #668]	@ (8001c58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019bc:	4013      	ands	r3, r2
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	0091      	lsls	r1, r2, #2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	430b      	orrs	r3, r1
 80019c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019d4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019dc:	041a      	lsls	r2, r3, #16
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	4413      	add	r3, r2
 80019f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80019fa:	4b97      	ldr	r3, [pc, #604]	@ (8001c58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	0091      	lsls	r1, r2, #2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a14:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a1c:	041a      	lsls	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	4413      	add	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001a3c:	4b86      	ldr	r3, [pc, #536]	@ (8001c58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	0091      	lsls	r1, r2, #2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a56:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	041a      	lsls	r2, r3, #16
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	4413      	add	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a84:	4b74      	ldr	r3, [pc, #464]	@ (8001c58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	0091      	lsls	r1, r2, #2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	430b      	orrs	r3, r1
 8001a92:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001a9e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa6:	041a      	lsls	r2, r3, #16
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001acc:	4b62      	ldr	r3, [pc, #392]	@ (8001c58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	0091      	lsls	r1, r2, #2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	4413      	add	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001af8:	4b57      	ldr	r3, [pc, #348]	@ (8001c58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	0091      	lsls	r1, r2, #2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b12:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1a:	041a      	lsls	r2, r3, #16
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b3a:	4b47      	ldr	r3, [pc, #284]	@ (8001c58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	0091      	lsls	r1, r2, #2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	430b      	orrs	r3, r1
 8001b48:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b54:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5c:	041a      	lsls	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b70:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b78:	061a      	lsls	r2, r3, #24
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b88:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009a      	lsls	r2, r3, #2
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	441a      	add	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	441a      	add	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001bc4:	441a      	add	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001bdc:	441a      	add	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001bf4:	441a      	add	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	441a      	add	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	441a      	add	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001c40:	441a      	add	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c4e:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d915      	bls.n	8001c80 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001c54:	e006      	b.n	8001c64 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001c56:	bf00      	nop
 8001c58:	ffff0003 	.word	0xffff0003
 8001c5c:	10002b00 	.word	0x10002b00
 8001c60:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c6a:	f043 0220 	orr.w	r2, r3, #32
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2203      	movs	r2, #3
 8001c78:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e010      	b.n	8001ca2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e005      	b.n	8001c94 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3304      	adds	r3, #4
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3f3      	bcc.n	8001c88 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop

08001cb0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001cce:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e00a      	b.n	8001cf2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ce4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001cea:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cf0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001cfc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001d02:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001d08:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	3304      	adds	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e020      	b.n	8001d8a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3303      	adds	r3, #3
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3302      	adds	r3, #2
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	440b      	add	r3, r1
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d60:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	440b      	add	r3, r1
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d6e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	440a      	add	r2, r1
 8001d76:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d78:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	3304      	adds	r3, #4
 8001d82:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3304      	adds	r3, #4
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4a06      	ldr	r2, [pc, #24]	@ (8001da8 <FDCAN_CopyMessageToRAM+0xf8>)
 8001d90:	5cd3      	ldrb	r3, [r2, r3]
 8001d92:	461a      	mov	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d3d6      	bcc.n	8001d48 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3724      	adds	r7, #36	@ 0x24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	08006bf0 	.word	0x08006bf0

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dba:	4b89      	ldr	r3, [pc, #548]	@ (8001fe0 <HAL_GPIO_Init+0x234>)
 8001dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dbe:	e194      	b.n	80020ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8186 	beq.w	80020e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d005      	beq.n	8001df0 <HAL_GPIO_Init+0x44>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d130      	bne.n	8001e52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e26:	2201      	movs	r2, #1
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	f003 0201 	and.w	r2, r3, #1
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d017      	beq.n	8001e8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d123      	bne.n	8001ee2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	69b9      	ldr	r1, [r7, #24]
 8001ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0203 	and.w	r2, r3, #3
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80e0 	beq.w	80020e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f24:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe4 <HAL_GPIO_Init+0x238>)
 8001f26:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001f2a:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe4 <HAL_GPIO_Init+0x238>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001f34:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <HAL_GPIO_Init+0x238>)
 8001f36:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f42:	4a29      	ldr	r2, [pc, #164]	@ (8001fe8 <HAL_GPIO_Init+0x23c>)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a20      	ldr	r2, [pc, #128]	@ (8001fec <HAL_GPIO_Init+0x240>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d052      	beq.n	8002014 <HAL_GPIO_Init+0x268>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_GPIO_Init+0x244>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d031      	beq.n	8001fda <HAL_GPIO_Init+0x22e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff4 <HAL_GPIO_Init+0x248>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02b      	beq.n	8001fd6 <HAL_GPIO_Init+0x22a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff8 <HAL_GPIO_Init+0x24c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d025      	beq.n	8001fd2 <HAL_GPIO_Init+0x226>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1c      	ldr	r2, [pc, #112]	@ (8001ffc <HAL_GPIO_Init+0x250>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_GPIO_Init+0x222>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1b      	ldr	r2, [pc, #108]	@ (8002000 <HAL_GPIO_Init+0x254>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x21e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1a      	ldr	r2, [pc, #104]	@ (8002004 <HAL_GPIO_Init+0x258>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x21a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a19      	ldr	r2, [pc, #100]	@ (8002008 <HAL_GPIO_Init+0x25c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x216>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_GPIO_Init+0x260>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x212>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	@ (8002010 <HAL_GPIO_Init+0x264>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x20e>
 8001fb6:	2309      	movs	r3, #9
 8001fb8:	e02d      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fba:	230a      	movs	r3, #10
 8001fbc:	e02b      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	e029      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	e027      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	e025      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fca:	2305      	movs	r3, #5
 8001fcc:	e023      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e021      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e01f      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e01d      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e01b      	b.n	8002016 <HAL_GPIO_Init+0x26a>
 8001fde:	bf00      	nop
 8001fe0:	58000080 	.word	0x58000080
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	58000400 	.word	0x58000400
 8001fec:	58020000 	.word	0x58020000
 8001ff0:	58020400 	.word	0x58020400
 8001ff4:	58020800 	.word	0x58020800
 8001ff8:	58020c00 	.word	0x58020c00
 8001ffc:	58021000 	.word	0x58021000
 8002000:	58021400 	.word	0x58021400
 8002004:	58021800 	.word	0x58021800
 8002008:	58021c00 	.word	0x58021c00
 800200c:	58022000 	.word	0x58022000
 8002010:	58022400 	.word	0x58022400
 8002014:	2300      	movs	r3, #0
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	f002 0203 	and.w	r2, r2, #3
 800201c:	0092      	lsls	r2, r2, #2
 800201e:	4093      	lsls	r3, r2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002026:	4938      	ldr	r1, [pc, #224]	@ (8002108 <HAL_GPIO_Init+0x35c>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800205a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002088:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3301      	adds	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f47f ae63 	bne.w	8001dc0 <HAL_GPIO_Init+0x14>
  }
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	3724      	adds	r7, #36	@ 0x24
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	58000400 	.word	0x58000400

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002128:	e003      	b.n	8002132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	619a      	str	r2, [r3, #24]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002150:	887a      	ldrh	r2, [r7, #2]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4013      	ands	r3, r2
 8002156:	041a      	lsls	r2, r3, #16
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43d9      	mvns	r1, r3
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	400b      	ands	r3, r1
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	619a      	str	r2, [r3, #24]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800217c:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	2b06      	cmp	r3, #6
 8002186:	d00a      	beq.n	800219e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002188:	4b26      	ldr	r3, [pc, #152]	@ (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e040      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e03e      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800219e:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80021a6:	491f      	ldr	r1, [pc, #124]	@ (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021ae:	f7fe ffdb 	bl	8001168 <HAL_GetTick>
 80021b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021b4:	e009      	b.n	80021ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021b6:	f7fe ffd7 	bl	8001168 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021c4:	d901      	bls.n	80021ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e028      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021ca:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021d6:	d1ee      	bne.n	80021b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b1e      	cmp	r3, #30
 80021dc:	d008      	beq.n	80021f0 <HAL_PWREx_ConfigSupply+0x7c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80021e2:	d005      	beq.n	80021f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b1d      	cmp	r3, #29
 80021e8:	d002      	beq.n	80021f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b2d      	cmp	r3, #45	@ 0x2d
 80021ee:	d114      	bne.n	800221a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80021f0:	f7fe ffba 	bl	8001168 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021f6:	e009      	b.n	800220c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021f8:	f7fe ffb6 	bl	8001168 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002206:	d901      	bls.n	800220c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e007      	b.n	800221c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_PWREx_ConfigSupply+0xb0>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002218:	d1ee      	bne.n	80021f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	58024800 	.word	0x58024800

08002228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	@ 0x30
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f000 bc1f 	b.w	8002a7a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80b3 	beq.w	80023b0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224a:	4b95      	ldr	r3, [pc, #596]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002254:	4b92      	ldr	r3, [pc, #584]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800225a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800225c:	2b10      	cmp	r3, #16
 800225e:	d007      	beq.n	8002270 <HAL_RCC_OscConfig+0x48>
 8002260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002262:	2b18      	cmp	r3, #24
 8002264:	d112      	bne.n	800228c <HAL_RCC_OscConfig+0x64>
 8002266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d10d      	bne.n	800228c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	4b8b      	ldr	r3, [pc, #556]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8098 	beq.w	80023ae <HAL_RCC_OscConfig+0x186>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 8093 	bne.w	80023ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e3f6      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002294:	d106      	bne.n	80022a4 <HAL_RCC_OscConfig+0x7c>
 8002296:	4b82      	ldr	r3, [pc, #520]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a81      	ldr	r2, [pc, #516]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e058      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d112      	bne.n	80022d2 <HAL_RCC_OscConfig+0xaa>
 80022ac:	4b7c      	ldr	r3, [pc, #496]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a7b      	ldr	r2, [pc, #492]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b79      	ldr	r3, [pc, #484]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a78      	ldr	r2, [pc, #480]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b76      	ldr	r3, [pc, #472]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a75      	ldr	r2, [pc, #468]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e041      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022da:	d112      	bne.n	8002302 <HAL_RCC_OscConfig+0xda>
 80022dc:	4b70      	ldr	r3, [pc, #448]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6f      	ldr	r2, [pc, #444]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b6d      	ldr	r3, [pc, #436]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6c      	ldr	r2, [pc, #432]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022ee:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b6a      	ldr	r3, [pc, #424]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a69      	ldr	r2, [pc, #420]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e029      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800230a:	d112      	bne.n	8002332 <HAL_RCC_OscConfig+0x10a>
 800230c:	4b64      	ldr	r3, [pc, #400]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a63      	ldr	r2, [pc, #396]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002312:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b61      	ldr	r3, [pc, #388]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a60      	ldr	r2, [pc, #384]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800231e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b5e      	ldr	r3, [pc, #376]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5d      	ldr	r2, [pc, #372]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e011      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
 8002332:	4b5b      	ldr	r3, [pc, #364]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a5a      	ldr	r2, [pc, #360]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b58      	ldr	r3, [pc, #352]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a57      	ldr	r2, [pc, #348]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002344:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b55      	ldr	r3, [pc, #340]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a54      	ldr	r2, [pc, #336]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002350:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002354:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d013      	beq.n	8002386 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe ff03 	bl	8001168 <HAL_GetTick>
 8002362:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002366:	f7fe feff 	bl	8001168 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b64      	cmp	r3, #100	@ 0x64
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e380      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002378:	4b49      	ldr	r3, [pc, #292]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x13e>
 8002384:	e014      	b.n	80023b0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe feef 	bl	8001168 <HAL_GetTick>
 800238a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238e:	f7fe feeb 	bl	8001168 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	@ 0x64
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e36c      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023a0:	4b3f      	ldr	r3, [pc, #252]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x166>
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 808c 	beq.w	80024d6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023c6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023c8:	4b35      	ldr	r3, [pc, #212]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_RCC_OscConfig+0x1bc>
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	2b18      	cmp	r3, #24
 80023d8:	d137      	bne.n	800244a <HAL_RCC_OscConfig+0x222>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d132      	bne.n	800244a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e4:	4b2e      	ldr	r3, [pc, #184]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_OscConfig+0x1d4>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e33e      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023fc:	4b28      	ldr	r3, [pc, #160]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 0219 	bic.w	r2, r3, #25
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4925      	ldr	r1, [pc, #148]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe feab 	bl	8001168 <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe fea7 	bl	8001168 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e328      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002428:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	061b      	lsls	r3, r3, #24
 8002442:	4917      	ldr	r1, [pc, #92]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002448:	e045      	b.n	80024d6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d028      	beq.n	80024a4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002452:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0219 	bic.w	r2, r3, #25
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4910      	ldr	r1, [pc, #64]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fe80 	bl	8001168 <HAL_GetTick>
 8002468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fe7c 	bl	8001168 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e2fd      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247e:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	4901      	ldr	r1, [pc, #4]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
 800249e:	e01a      	b.n	80024d6 <HAL_RCC_OscConfig+0x2ae>
 80024a0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a4:	4b97      	ldr	r3, [pc, #604]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a96      	ldr	r2, [pc, #600]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fe5a 	bl	8001168 <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b8:	f7fe fe56 	bl	8001168 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e2d7      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024ca:	4b8e      	ldr	r3, [pc, #568]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d06a      	beq.n	80025b8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e2:	4b88      	ldr	r3, [pc, #544]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024ec:	4b85      	ldr	r3, [pc, #532]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d007      	beq.n	8002508 <HAL_RCC_OscConfig+0x2e0>
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2b18      	cmp	r3, #24
 80024fc:	d11b      	bne.n	8002536 <HAL_RCC_OscConfig+0x30e>
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d116      	bne.n	8002536 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002508:	4b7e      	ldr	r3, [pc, #504]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x2f8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b80      	cmp	r3, #128	@ 0x80
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e2ac      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002520:	4b78      	ldr	r3, [pc, #480]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4975      	ldr	r1, [pc, #468]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002534:	e040      	b.n	80025b8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d023      	beq.n	8002586 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800253e:	4b71      	ldr	r3, [pc, #452]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a70      	ldr	r2, [pc, #448]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe fe0d 	bl	8001168 <HAL_GetTick>
 800254e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002552:	f7fe fe09 	bl	8001168 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e28a      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002564:	4b67      	ldr	r3, [pc, #412]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002570:	4b64      	ldr	r3, [pc, #400]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	4961      	ldr	r1, [pc, #388]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002586:	4b5f      	ldr	r3, [pc, #380]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5e      	ldr	r2, [pc, #376]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 800258c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe fde9 	bl	8001168 <HAL_GetTick>
 8002596:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800259a:	f7fe fde5 	bl	8001168 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e266      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025ac:	4b55      	ldr	r3, [pc, #340]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d036      	beq.n	8002632 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d019      	beq.n	8002600 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fdc6 	bl	8001168 <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe fdc2 	bl	8001168 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e243      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025f2:	4b44      	ldr	r3, [pc, #272]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80025f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x3b8>
 80025fe:	e018      	b.n	8002632 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002600:	4b40      	ldr	r3, [pc, #256]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002604:	4a3f      	ldr	r2, [pc, #252]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fdac 	bl	8001168 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe fda8 	bl	8001168 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e229      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002626:	4b37      	ldr	r3, [pc, #220]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d036      	beq.n	80026ac <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d019      	beq.n	800267a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002646:	4b2f      	ldr	r3, [pc, #188]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2e      	ldr	r2, [pc, #184]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 800264c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002650:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002652:	f7fe fd89 	bl	8001168 <HAL_GetTick>
 8002656:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800265a:	f7fe fd85 	bl	8001168 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e206      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800266c:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x432>
 8002678:	e018      	b.n	80026ac <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800267a:	4b22      	ldr	r3, [pc, #136]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a21      	ldr	r2, [pc, #132]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 8002680:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002684:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002686:	f7fe fd6f 	bl	8001168 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800268e:	f7fe fd6b 	bl	8001168 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1ec      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026a0:	4b18      	ldr	r3, [pc, #96]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80af 	beq.w	8002818 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026ba:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <HAL_RCC_OscConfig+0x4e0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <HAL_RCC_OscConfig+0x4e0>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026c6:	f7fe fd4f 	bl	8001168 <HAL_GetTick>
 80026ca:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe fd4b 	bl	8001168 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	@ 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e1cc      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_RCC_OscConfig+0x4e0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10b      	bne.n	800270c <HAL_RCC_OscConfig+0x4e4>
 80026f4:	4b03      	ldr	r3, [pc, #12]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f8:	4a02      	ldr	r2, [pc, #8]	@ (8002704 <HAL_RCC_OscConfig+0x4dc>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002700:	e05b      	b.n	80027ba <HAL_RCC_OscConfig+0x592>
 8002702:	bf00      	nop
 8002704:	58024400 	.word	0x58024400
 8002708:	58024800 	.word	0x58024800
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d112      	bne.n	800273a <HAL_RCC_OscConfig+0x512>
 8002714:	4b9d      	ldr	r3, [pc, #628]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002718:	4a9c      	ldr	r2, [pc, #624]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002720:	4b9a      	ldr	r3, [pc, #616]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	4a99      	ldr	r2, [pc, #612]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800272a:	6713      	str	r3, [r2, #112]	@ 0x70
 800272c:	4b97      	ldr	r3, [pc, #604]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a96      	ldr	r2, [pc, #600]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002732:	f023 0304 	bic.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
 8002738:	e03f      	b.n	80027ba <HAL_RCC_OscConfig+0x592>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d112      	bne.n	8002768 <HAL_RCC_OscConfig+0x540>
 8002742:	4b92      	ldr	r3, [pc, #584]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002746:	4a91      	ldr	r2, [pc, #580]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6713      	str	r3, [r2, #112]	@ 0x70
 800274e:	4b8f      	ldr	r3, [pc, #572]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	4a8e      	ldr	r2, [pc, #568]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002758:	6713      	str	r3, [r2, #112]	@ 0x70
 800275a:	4b8c      	ldr	r3, [pc, #560]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	4a8b      	ldr	r2, [pc, #556]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	@ 0x70
 8002766:	e028      	b.n	80027ba <HAL_RCC_OscConfig+0x592>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b85      	cmp	r3, #133	@ 0x85
 800276e:	d112      	bne.n	8002796 <HAL_RCC_OscConfig+0x56e>
 8002770:	4b86      	ldr	r3, [pc, #536]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	4a85      	ldr	r2, [pc, #532]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6713      	str	r3, [r2, #112]	@ 0x70
 800277c:	4b83      	ldr	r3, [pc, #524]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	4a82      	ldr	r2, [pc, #520]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002786:	6713      	str	r3, [r2, #112]	@ 0x70
 8002788:	4b80      	ldr	r3, [pc, #512]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278c:	4a7f      	ldr	r2, [pc, #508]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	@ 0x70
 8002794:	e011      	b.n	80027ba <HAL_RCC_OscConfig+0x592>
 8002796:	4b7d      	ldr	r3, [pc, #500]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279a:	4a7c      	ldr	r2, [pc, #496]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a2:	4b7a      	ldr	r3, [pc, #488]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a6:	4a79      	ldr	r2, [pc, #484]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ae:	4b77      	ldr	r3, [pc, #476]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	4a76      	ldr	r2, [pc, #472]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80027b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d015      	beq.n	80027ee <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c2:	f7fe fcd1 	bl	8001168 <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe fccd 	bl	8001168 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e14c      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027e0:	4b6a      	ldr	r3, [pc, #424]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ee      	beq.n	80027ca <HAL_RCC_OscConfig+0x5a2>
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ee:	f7fe fcbb 	bl	8001168 <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fcb7 	bl	8001168 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e136      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800280c:	4b5f      	ldr	r3, [pc, #380]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ee      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 812b 	beq.w	8002a78 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002822:	4b5a      	ldr	r3, [pc, #360]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800282a:	2b18      	cmp	r3, #24
 800282c:	f000 80bb 	beq.w	80029a6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	2b02      	cmp	r3, #2
 8002836:	f040 8095 	bne.w	8002964 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283a:	4b54      	ldr	r3, [pc, #336]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a53      	ldr	r2, [pc, #332]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fc8f 	bl	8001168 <HAL_GetTick>
 800284a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284e:	f7fe fc8b 	bl	8001168 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e10c      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002860:	4b4a      	ldr	r3, [pc, #296]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f0      	bne.n	800284e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800286c:	4b47      	ldr	r3, [pc, #284]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800286e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002870:	4b47      	ldr	r3, [pc, #284]	@ (8002990 <HAL_RCC_OscConfig+0x768>)
 8002872:	4013      	ands	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	430a      	orrs	r2, r1
 8002880:	4942      	ldr	r1, [pc, #264]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002882:	4313      	orrs	r3, r2
 8002884:	628b      	str	r3, [r1, #40]	@ 0x28
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	3b01      	subs	r3, #1
 800288c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002894:	3b01      	subs	r3, #1
 8002896:	025b      	lsls	r3, r3, #9
 8002898:	b29b      	uxth	r3, r3
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a0:	3b01      	subs	r3, #1
 80028a2:	041b      	lsls	r3, r3, #16
 80028a4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ae:	3b01      	subs	r3, #1
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80028b6:	4935      	ldr	r1, [pc, #212]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028bc:	4b33      	ldr	r3, [pc, #204]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	4a32      	ldr	r2, [pc, #200]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028c8:	4b30      	ldr	r3, [pc, #192]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80028ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028cc:	4b31      	ldr	r3, [pc, #196]	@ (8002994 <HAL_RCC_OscConfig+0x76c>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028d4:	00d2      	lsls	r2, r2, #3
 80028d6:	492d      	ldr	r1, [pc, #180]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028dc:	4b2b      	ldr	r3, [pc, #172]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	f023 020c 	bic.w	r2, r3, #12
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4928      	ldr	r1, [pc, #160]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028ee:	4b27      	ldr	r3, [pc, #156]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f2:	f023 0202 	bic.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	4924      	ldr	r1, [pc, #144]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002900:	4b22      	ldr	r3, [pc, #136]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	4a21      	ldr	r2, [pc, #132]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800290a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800290c:	4b1f      	ldr	r3, [pc, #124]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	4a1e      	ldr	r2, [pc, #120]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002918:	4b1c      	ldr	r3, [pc, #112]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	4a1b      	ldr	r2, [pc, #108]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800291e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002924:	4b19      	ldr	r3, [pc, #100]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	4a18      	ldr	r2, [pc, #96]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002930:	4b16      	ldr	r3, [pc, #88]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a15      	ldr	r2, [pc, #84]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800293a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fc14 	bl	8001168 <HAL_GetTick>
 8002940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe fc10 	bl	8001168 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e091      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002956:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x71c>
 8002962:	e089      	b.n	8002a78 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002964:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a08      	ldr	r2, [pc, #32]	@ (800298c <HAL_RCC_OscConfig+0x764>)
 800296a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fbfa 	bl	8001168 <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002976:	e00f      	b.n	8002998 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fbf6 	bl	8001168 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d908      	bls.n	8002998 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e077      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
 800298a:	bf00      	nop
 800298c:	58024400 	.word	0x58024400
 8002990:	fffffc0c 	.word	0xfffffc0c
 8002994:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002998:	4b3a      	ldr	r3, [pc, #232]	@ (8002a84 <HAL_RCC_OscConfig+0x85c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e9      	bne.n	8002978 <HAL_RCC_OscConfig+0x750>
 80029a4:	e068      	b.n	8002a78 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029a6:	4b37      	ldr	r3, [pc, #220]	@ (8002a84 <HAL_RCC_OscConfig+0x85c>)
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029aa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029ac:	4b35      	ldr	r3, [pc, #212]	@ (8002a84 <HAL_RCC_OscConfig+0x85c>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d031      	beq.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d12a      	bne.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d122      	bne.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d11a      	bne.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	0a5b      	lsrs	r3, r3, #9
 80029ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d111      	bne.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d108      	bne.n	8002a1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	0e1b      	lsrs	r3, r3, #24
 8002a10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e02b      	b.n	8002a7a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a22:	4b18      	ldr	r3, [pc, #96]	@ (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a26:	08db      	lsrs	r3, r3, #3
 8002a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a2c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d01f      	beq.n	8002a78 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a38:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	4a11      	ldr	r2, [pc, #68]	@ (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a44:	f7fe fb90 	bl	8001168 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a4a:	bf00      	nop
 8002a4c:	f7fe fb8c 	bl	8001168 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d0f9      	beq.n	8002a4c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a58:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <HAL_RCC_OscConfig+0x860>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a64:	00d2      	lsls	r2, r2, #3
 8002a66:	4907      	ldr	r1, [pc, #28]	@ (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a6c:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	4a04      	ldr	r2, [pc, #16]	@ (8002a84 <HAL_RCC_OscConfig+0x85c>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3730      	adds	r7, #48	@ 0x30
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	58024400 	.word	0x58024400
 8002a88:	ffff0007 	.word	0xffff0007

08002a8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e19c      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b8a      	ldr	r3, [pc, #552]	@ (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d910      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b87      	ldr	r3, [pc, #540]	@ (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 020f 	bic.w	r2, r3, #15
 8002ab6:	4985      	ldr	r1, [pc, #532]	@ (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b83      	ldr	r3, [pc, #524]	@ (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e184      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	4b7b      	ldr	r3, [pc, #492]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d908      	bls.n	8002afe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002aec:	4b78      	ldr	r3, [pc, #480]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	4975      	ldr	r1, [pc, #468]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	4b70      	ldr	r3, [pc, #448]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d908      	bls.n	8002b2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	496a      	ldr	r1, [pc, #424]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d010      	beq.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	4b64      	ldr	r3, [pc, #400]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d908      	bls.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b48:	4b61      	ldr	r3, [pc, #388]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	495e      	ldr	r1, [pc, #376]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	4b59      	ldr	r3, [pc, #356]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d908      	bls.n	8002b88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b76:	4b56      	ldr	r3, [pc, #344]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4953      	ldr	r1, [pc, #332]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d908      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f023 020f 	bic.w	r2, r3, #15
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4947      	ldr	r1, [pc, #284]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d055      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bc2:	4b43      	ldr	r3, [pc, #268]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	4940      	ldr	r1, [pc, #256]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d121      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0f6      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bf4:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d115      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0ea      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c0c:	4b30      	ldr	r3, [pc, #192]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0de      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0d6      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c2c:	4b28      	ldr	r3, [pc, #160]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f023 0207 	bic.w	r2, r3, #7
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4925      	ldr	r1, [pc, #148]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fa93 	bl	8001168 <HAL_GetTick>
 8002c42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c46:	f7fe fa8f 	bl	8001168 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0be      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d1eb      	bne.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d208      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8a:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f023 020f 	bic.w	r2, r3, #15
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	490e      	ldr	r1, [pc, #56]	@ (8002cd0 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d214      	bcs.n	8002cd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 020f 	bic.w	r2, r3, #15
 8002cb2:	4906      	ldr	r1, [pc, #24]	@ (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <HAL_RCC_ClockConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e086      	b.n	8002dda <HAL_RCC_ClockConfig+0x34e>
 8002ccc:	52002000 	.word	0x52002000
 8002cd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d010      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	4b3f      	ldr	r3, [pc, #252]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d208      	bcs.n	8002d02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	4939      	ldr	r1, [pc, #228]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	4b34      	ldr	r3, [pc, #208]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d208      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d1e:	4b31      	ldr	r3, [pc, #196]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	492e      	ldr	r1, [pc, #184]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d010      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	4b28      	ldr	r3, [pc, #160]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d208      	bcs.n	8002d5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d4c:	4b25      	ldr	r3, [pc, #148]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	4922      	ldr	r1, [pc, #136]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d010      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d208      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4917      	ldr	r1, [pc, #92]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002d8c:	f000 f834 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	4912      	ldr	r1, [pc, #72]	@ (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002daa:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <HAL_RCC_ClockConfig+0x358>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	4a0d      	ldr	r2, [pc, #52]	@ (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <HAL_RCC_ClockConfig+0x360>)
 8002dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <HAL_RCC_ClockConfig+0x364>)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dca:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <HAL_RCC_ClockConfig+0x368>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe f980 	bl	80010d4 <HAL_InitTick>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	58024400 	.word	0x58024400
 8002de8:	08006be0 	.word	0x08006be0
 8002dec:	24000004 	.word	0x24000004
 8002df0:	24000000 	.word	0x24000000
 8002df4:	24000008 	.word	0x24000008

08002df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	@ 0x24
 8002dfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dfe:	4bb3      	ldr	r3, [pc, #716]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e06:	2b18      	cmp	r3, #24
 8002e08:	f200 8155 	bhi.w	80030b6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e79 	.word	0x08002e79
 8002e18:	080030b7 	.word	0x080030b7
 8002e1c:	080030b7 	.word	0x080030b7
 8002e20:	080030b7 	.word	0x080030b7
 8002e24:	080030b7 	.word	0x080030b7
 8002e28:	080030b7 	.word	0x080030b7
 8002e2c:	080030b7 	.word	0x080030b7
 8002e30:	080030b7 	.word	0x080030b7
 8002e34:	08002e9f 	.word	0x08002e9f
 8002e38:	080030b7 	.word	0x080030b7
 8002e3c:	080030b7 	.word	0x080030b7
 8002e40:	080030b7 	.word	0x080030b7
 8002e44:	080030b7 	.word	0x080030b7
 8002e48:	080030b7 	.word	0x080030b7
 8002e4c:	080030b7 	.word	0x080030b7
 8002e50:	080030b7 	.word	0x080030b7
 8002e54:	08002ea5 	.word	0x08002ea5
 8002e58:	080030b7 	.word	0x080030b7
 8002e5c:	080030b7 	.word	0x080030b7
 8002e60:	080030b7 	.word	0x080030b7
 8002e64:	080030b7 	.word	0x080030b7
 8002e68:	080030b7 	.word	0x080030b7
 8002e6c:	080030b7 	.word	0x080030b7
 8002e70:	080030b7 	.word	0x080030b7
 8002e74:	08002eab 	.word	0x08002eab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e78:	4b94      	ldr	r3, [pc, #592]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e84:	4b91      	ldr	r3, [pc, #580]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	4a90      	ldr	r2, [pc, #576]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e96:	e111      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e98:	4b8d      	ldr	r3, [pc, #564]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e9a:	61bb      	str	r3, [r7, #24]
      break;
 8002e9c:	e10e      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e9e:	4b8d      	ldr	r3, [pc, #564]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ea0:	61bb      	str	r3, [r7, #24]
      break;
 8002ea2:	e10b      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ea4:	4b8c      	ldr	r3, [pc, #560]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ea6:	61bb      	str	r3, [r7, #24]
      break;
 8002ea8:	e108      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eaa:	4b88      	ldr	r3, [pc, #544]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002eb4:	4b85      	ldr	r3, [pc, #532]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ebe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ec0:	4b82      	ldr	r3, [pc, #520]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002eca:	4b80      	ldr	r3, [pc, #512]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ece:	08db      	lsrs	r3, r3, #3
 8002ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80e1 	beq.w	80030b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	f000 8083 	beq.w	8002ffc <HAL_RCC_GetSysClockFreq+0x204>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	f200 80a1 	bhi.w	8003040 <HAL_RCC_GetSysClockFreq+0x248>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x114>
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d056      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f0a:	e099      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d02d      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f18:	4b6c      	ldr	r3, [pc, #432]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	4a6b      	ldr	r2, [pc, #428]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f42:	4b62      	ldr	r3, [pc, #392]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80030dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f72:	e087      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80030e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f86:	4b51      	ldr	r3, [pc, #324]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80030dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fb6:	e065      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80030e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fca:	4b40      	ldr	r3, [pc, #256]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80030dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ffa:	e043      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003006:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80030e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800300a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300e:	4b2f      	ldr	r3, [pc, #188]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800301e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003022:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80030dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800302a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800302e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800303e:	e021      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80030e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800304e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003052:	4b1e      	ldr	r3, [pc, #120]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003062:	ed97 6a02 	vldr	s12, [r7, #8]
 8003066:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80030dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800306a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800306e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003082:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003084:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	0a5b      	lsrs	r3, r3, #9
 800308a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800308e:	3301      	adds	r3, #1
 8003090:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800309c:	edd7 6a07 	vldr	s13, [r7, #28]
 80030a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a8:	ee17 3a90 	vmov	r3, s15
 80030ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80030ae:	e005      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
      break;
 80030b4:	e002      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80030b6:	4b07      	ldr	r3, [pc, #28]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030b8:	61bb      	str	r3, [r7, #24]
      break;
 80030ba:	bf00      	nop
  }

  return sysclockfreq;
 80030bc:	69bb      	ldr	r3, [r7, #24]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	@ 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	58024400 	.word	0x58024400
 80030d0:	03d09000 	.word	0x03d09000
 80030d4:	003d0900 	.word	0x003d0900
 80030d8:	007a1200 	.word	0x007a1200
 80030dc:	46000000 	.word	0x46000000
 80030e0:	4c742400 	.word	0x4c742400
 80030e4:	4a742400 	.word	0x4a742400
 80030e8:	4af42400 	.word	0x4af42400

080030ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80030f2:	f7ff fe81 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b10      	ldr	r3, [pc, #64]	@ (800313c <HAL_RCC_GetHCLKFreq+0x50>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490f      	ldr	r1, [pc, #60]	@ (8003140 <HAL_RCC_GetHCLKFreq+0x54>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	fa22 f303 	lsr.w	r3, r2, r3
 800310e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003110:	4b0a      	ldr	r3, [pc, #40]	@ (800313c <HAL_RCC_GetHCLKFreq+0x50>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	4a09      	ldr	r2, [pc, #36]	@ (8003140 <HAL_RCC_GetHCLKFreq+0x54>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	4a07      	ldr	r2, [pc, #28]	@ (8003144 <HAL_RCC_GetHCLKFreq+0x58>)
 8003128:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800312a:	4a07      	ldr	r2, [pc, #28]	@ (8003148 <HAL_RCC_GetHCLKFreq+0x5c>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003130:	4b04      	ldr	r3, [pc, #16]	@ (8003144 <HAL_RCC_GetHCLKFreq+0x58>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	58024400 	.word	0x58024400
 8003140:	08006be0 	.word	0x08006be0
 8003144:	24000004 	.word	0x24000004
 8003148:	24000000 	.word	0x24000000

0800314c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003150:	f7ff ffcc 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4904      	ldr	r1, [pc, #16]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	58024400 	.word	0x58024400
 8003174:	08006be0 	.word	0x08006be0

08003178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800317c:	f7ff ffb6 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4904      	ldr	r1, [pc, #16]	@ (80031a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	58024400 	.word	0x58024400
 80031a0:	08006be0 	.word	0x08006be0

080031a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a8:	b0c8      	sub	sp, #288	@ 0x120
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80031c8:	2500      	movs	r5, #0
 80031ca:	ea54 0305 	orrs.w	r3, r4, r5
 80031ce:	d049      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80031d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031da:	d02f      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80031dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031e0:	d828      	bhi.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031e6:	d01a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031ec:	d822      	bhi.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80031f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031f6:	d007      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031f8:	e01c      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031fa:	4ba7      	ldr	r3, [pc, #668]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fe:	4aa6      	ldr	r2, [pc, #664]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003204:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003206:	e01a      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800320c:	3308      	adds	r3, #8
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f001 fc43 	bl	8004a9c <RCCEx_PLL2_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800321c:	e00f      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800321e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003222:	3328      	adds	r3, #40	@ 0x28
 8003224:	2102      	movs	r1, #2
 8003226:	4618      	mov	r0, r3
 8003228:	f001 fcea 	bl	8004c00 <RCCEx_PLL3_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003232:	e004      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800323a:	e000      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800323c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003246:	4b94      	ldr	r3, [pc, #592]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800324a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800324e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003254:	4a90      	ldr	r2, [pc, #576]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003256:	430b      	orrs	r3, r1
 8003258:	6513      	str	r3, [r2, #80]	@ 0x50
 800325a:	e003      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003260:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003270:	f04f 0900 	mov.w	r9, #0
 8003274:	ea58 0309 	orrs.w	r3, r8, r9
 8003278:	d047      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800327a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	2b04      	cmp	r3, #4
 8003282:	d82a      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003284:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032a1 	.word	0x080032a1
 8003290:	080032af 	.word	0x080032af
 8003294:	080032c5 	.word	0x080032c5
 8003298:	080032e3 	.word	0x080032e3
 800329c:	080032e3 	.word	0x080032e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a0:	4b7d      	ldr	r3, [pc, #500]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	4a7c      	ldr	r2, [pc, #496]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032ac:	e01a      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032b2:	3308      	adds	r3, #8
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fbf0 	bl	8004a9c <RCCEx_PLL2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032c2:	e00f      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032c8:	3328      	adds	r3, #40	@ 0x28
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 fc97 	bl	8004c00 <RCCEx_PLL3_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032d8:	e004      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80032e0:	e000      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80032e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f0:	f023 0107 	bic.w	r1, r3, #7
 80032f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	4a67      	ldr	r2, [pc, #412]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003302:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003306:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800330a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003316:	f04f 0b00 	mov.w	fp, #0
 800331a:	ea5a 030b 	orrs.w	r3, sl, fp
 800331e:	d054      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003326:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800332a:	d036      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800332c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003330:	d82f      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003336:	d032      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800333c:	d829      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800333e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003340:	d02f      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003342:	2bc0      	cmp	r3, #192	@ 0xc0
 8003344:	d825      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003346:	2b80      	cmp	r3, #128	@ 0x80
 8003348:	d018      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800334a:	2b80      	cmp	r3, #128	@ 0x80
 800334c:	d821      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003352:	2b40      	cmp	r3, #64	@ 0x40
 8003354:	d007      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003356:	e01c      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003358:	4b4f      	ldr	r3, [pc, #316]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335c:	4a4e      	ldr	r2, [pc, #312]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003364:	e01e      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800336a:	3308      	adds	r3, #8
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fb94 	bl	8004a9c <RCCEx_PLL2_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800337a:	e013      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800337c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003380:	3328      	adds	r3, #40	@ 0x28
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f001 fc3b 	bl	8004c00 <RCCEx_PLL3_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003390:	e008      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003398:	e004      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800339a:	bf00      	nop
 800339c:	e002      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80033a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80033ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80033b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	4a37      	ldr	r2, [pc, #220]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033bc:	430b      	orrs	r3, r1
 80033be:	6513      	str	r3, [r2, #80]	@ 0x50
 80033c0:	e003      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80033ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80033d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80033e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80033e4:	460b      	mov	r3, r1
 80033e6:	4313      	orrs	r3, r2
 80033e8:	d05c      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80033ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80033f4:	d03b      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033f6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80033fa:	d834      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003400:	d037      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003406:	d82e      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003408:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800340c:	d033      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800340e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003412:	d828      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003418:	d01a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341e:	d822      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003428:	d007      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800342a:	e01c      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342c:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	4a19      	ldr	r2, [pc, #100]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003438:	e01e      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800343a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800343e:	3308      	adds	r3, #8
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f001 fb2a 	bl	8004a9c <RCCEx_PLL2_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800344e:	e013      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003454:	3328      	adds	r3, #40	@ 0x28
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f001 fbd1 	bl	8004c00 <RCCEx_PLL3_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003464:	e008      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800346c:	e004      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003478:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10d      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003484:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800348c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348e:	4a02      	ldr	r2, [pc, #8]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003490:	430b      	orrs	r3, r1
 8003492:	6513      	str	r3, [r2, #80]	@ 0x50
 8003494:	e006      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003496:	bf00      	nop
 8003498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80034b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80034ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80034be:	460b      	mov	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	d03a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80034c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	2b30      	cmp	r3, #48	@ 0x30
 80034cc:	d01f      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80034ce:	2b30      	cmp	r3, #48	@ 0x30
 80034d0:	d819      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d00c      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d815      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d019      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d111      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e2:	4bae      	ldr	r3, [pc, #696]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e6:	4aad      	ldr	r2, [pc, #692]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80034ee:	e011      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034f4:	3308      	adds	r3, #8
 80034f6:	2102      	movs	r1, #2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 facf 	bl	8004a9c <RCCEx_PLL2_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003504:	e006      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800350c:	e002      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003514:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800351c:	4b9f      	ldr	r3, [pc, #636]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800351e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003520:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352a:	4a9c      	ldr	r2, [pc, #624]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800352c:	430b      	orrs	r3, r1
 800352e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003530:	e003      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003532:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003536:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800353a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003546:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003550:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003554:	460b      	mov	r3, r1
 8003556:	4313      	orrs	r3, r2
 8003558:	d051      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800355a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800355e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003560:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003564:	d035      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003566:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800356a:	d82e      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800356c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003570:	d031      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003572:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003576:	d828      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800357c:	d01a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800357e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003582:	d822      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358c:	d007      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800358e:	e01c      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003590:	4b82      	ldr	r3, [pc, #520]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	4a81      	ldr	r2, [pc, #516]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800359c:	e01c      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800359e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035a2:	3308      	adds	r3, #8
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fa78 	bl	8004a9c <RCCEx_PLL2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035b2:	e011      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035b8:	3328      	adds	r3, #40	@ 0x28
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 fb1f 	bl	8004c00 <RCCEx_PLL3_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035c8:	e006      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80035d0:	e002      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80035d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035e0:	4b6e      	ldr	r3, [pc, #440]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80035e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035ee:	4a6b      	ldr	r2, [pc, #428]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80035f4:	e003      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800360a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003614:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003618:	460b      	mov	r3, r1
 800361a:	4313      	orrs	r3, r2
 800361c:	d053      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800361e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003628:	d033      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800362a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800362e:	d82c      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003630:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003634:	d02f      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003636:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800363a:	d826      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800363c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003640:	d02b      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003642:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003646:	d820      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800364c:	d012      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800364e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003652:	d81a      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d022      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800365c:	d115      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800365e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003662:	3308      	adds	r3, #8
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fa18 	bl	8004a9c <RCCEx_PLL2_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003672:	e015      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003678:	3328      	adds	r3, #40	@ 0x28
 800367a:	2101      	movs	r1, #1
 800367c:	4618      	mov	r0, r3
 800367e:	f001 fabf 	bl	8004c00 <RCCEx_PLL3_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003688:	e00a      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003690:	e006      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003692:	bf00      	nop
 8003694:	e004      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003696:	bf00      	nop
 8003698:	e002      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800369e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80036a8:	4b3c      	ldr	r3, [pc, #240]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80036b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036b6:	4a39      	ldr	r2, [pc, #228]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80036bc:	e003      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80036d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4313      	orrs	r3, r2
 80036e4:	d060      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036ee:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80036f2:	d039      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80036f4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80036f8:	d832      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036fe:	d035      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003704:	d82c      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370a:	d031      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800370c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003710:	d826      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003712:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003716:	d02d      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003718:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800371c:	d820      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800371e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003722:	d012      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003728:	d81a      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d024      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800372e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003732:	d115      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003738:	3308      	adds	r3, #8
 800373a:	2101      	movs	r1, #1
 800373c:	4618      	mov	r0, r3
 800373e:	f001 f9ad 	bl	8004a9c <RCCEx_PLL2_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003748:	e017      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800374a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800374e:	3328      	adds	r3, #40	@ 0x28
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f001 fa54 	bl	8004c00 <RCCEx_PLL3_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800375e:	e00c      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003766:	e008      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003768:	bf00      	nop
 800376a:	e006      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800376c:	bf00      	nop
 800376e:	e004      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003770:	bf00      	nop
 8003772:	e002      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003774:	bf00      	nop
 8003776:	e000      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10e      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003786:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800378a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800378e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003792:	4a02      	ldr	r2, [pc, #8]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003794:	430b      	orrs	r3, r1
 8003796:	6593      	str	r3, [r2, #88]	@ 0x58
 8003798:	e006      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800379a:	bf00      	nop
 800379c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80037b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80037be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037c2:	460b      	mov	r3, r1
 80037c4:	4313      	orrs	r3, r2
 80037c6:	d037      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80037c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037d2:	d00e      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80037d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037d8:	d816      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d018      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80037de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037e2:	d111      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e4:	4bc4      	ldr	r3, [pc, #784]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	4ac3      	ldr	r2, [pc, #780]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037f0:	e00f      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037f6:	3308      	adds	r3, #8
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 f94e 	bl	8004a9c <RCCEx_PLL2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003806:	e004      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003812:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800381a:	4bb7      	ldr	r3, [pc, #732]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800381c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003826:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003828:	4ab3      	ldr	r2, [pc, #716]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800382a:	430b      	orrs	r3, r1
 800382c:	6513      	str	r3, [r2, #80]	@ 0x50
 800382e:	e003      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003834:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800384e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d039      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800385c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385e:	2b03      	cmp	r3, #3
 8003860:	d81c      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003862:	a201      	add	r2, pc, #4	@ (adr r2, 8003868 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	080038a5 	.word	0x080038a5
 800386c:	08003879 	.word	0x08003879
 8003870:	08003887 	.word	0x08003887
 8003874:	080038a5 	.word	0x080038a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003878:	4b9f      	ldr	r3, [pc, #636]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	4a9e      	ldr	r2, [pc, #632]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800387e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003884:	e00f      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800388a:	3308      	adds	r3, #8
 800388c:	2102      	movs	r1, #2
 800388e:	4618      	mov	r0, r3
 8003890:	f001 f904 	bl	8004a9c <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800389a:	e004      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038a2:	e000      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80038a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038ae:	4b92      	ldr	r3, [pc, #584]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b2:	f023 0103 	bic.w	r1, r3, #3
 80038b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038bc:	4a8e      	ldr	r2, [pc, #568]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c2:	e003      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80038d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80038e6:	460b      	mov	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f000 8099 	beq.w	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ee:	4b83      	ldr	r3, [pc, #524]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a82      	ldr	r2, [pc, #520]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038fa:	f7fd fc35 	bl	8001168 <HAL_GetTick>
 80038fe:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003902:	e00b      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003904:	f7fd fc30 	bl	8001168 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b64      	cmp	r3, #100	@ 0x64
 8003912:	d903      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800391a:	e005      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800391c:	4b77      	ldr	r3, [pc, #476]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ed      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003928:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800392c:	2b00      	cmp	r3, #0
 800392e:	d173      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003930:	4b71      	ldr	r3, [pc, #452]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003932:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003938:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800393c:	4053      	eors	r3, r2
 800393e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003942:	2b00      	cmp	r3, #0
 8003944:	d015      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003946:	4b6c      	ldr	r3, [pc, #432]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800394e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003952:	4b69      	ldr	r3, [pc, #420]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	4a68      	ldr	r2, [pc, #416]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800395e:	4b66      	ldr	r3, [pc, #408]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003962:	4a65      	ldr	r2, [pc, #404]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003968:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800396a:	4a63      	ldr	r2, [pc, #396]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003970:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800397a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800397e:	d118      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd fbf2 	bl	8001168 <HAL_GetTick>
 8003984:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003988:	e00d      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398a:	f7fd fbed 	bl	8001168 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003994:	1ad2      	subs	r2, r2, r3
 8003996:	f241 3388 	movw	r3, #5000	@ 0x1388
 800399a:	429a      	cmp	r2, r3
 800399c:	d903      	bls.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80039a4:	e005      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039a6:	4b54      	ldr	r3, [pc, #336]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0eb      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80039b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d129      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039ca:	d10e      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x846>
 80039cc:	4b4a      	ldr	r3, [pc, #296]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80039d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039dc:	091a      	lsrs	r2, r3, #4
 80039de:	4b48      	ldr	r3, [pc, #288]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	4a45      	ldr	r2, [pc, #276]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6113      	str	r3, [r2, #16]
 80039e8:	e005      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80039ea:	4b43      	ldr	r3, [pc, #268]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	4a42      	ldr	r2, [pc, #264]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039f4:	6113      	str	r3, [r2, #16]
 80039f6:	4b40      	ldr	r3, [pc, #256]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80039fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a06:	4a3c      	ldr	r2, [pc, #240]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0c:	e008      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f002 0301 	and.w	r3, r2, #1
 8003a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f000 8090 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a4a:	2b28      	cmp	r3, #40	@ 0x28
 8003a4c:	d870      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003b39 	.word	0x08003b39
 8003a58:	08003b31 	.word	0x08003b31
 8003a5c:	08003b31 	.word	0x08003b31
 8003a60:	08003b31 	.word	0x08003b31
 8003a64:	08003b31 	.word	0x08003b31
 8003a68:	08003b31 	.word	0x08003b31
 8003a6c:	08003b31 	.word	0x08003b31
 8003a70:	08003b31 	.word	0x08003b31
 8003a74:	08003b05 	.word	0x08003b05
 8003a78:	08003b31 	.word	0x08003b31
 8003a7c:	08003b31 	.word	0x08003b31
 8003a80:	08003b31 	.word	0x08003b31
 8003a84:	08003b31 	.word	0x08003b31
 8003a88:	08003b31 	.word	0x08003b31
 8003a8c:	08003b31 	.word	0x08003b31
 8003a90:	08003b31 	.word	0x08003b31
 8003a94:	08003b1b 	.word	0x08003b1b
 8003a98:	08003b31 	.word	0x08003b31
 8003a9c:	08003b31 	.word	0x08003b31
 8003aa0:	08003b31 	.word	0x08003b31
 8003aa4:	08003b31 	.word	0x08003b31
 8003aa8:	08003b31 	.word	0x08003b31
 8003aac:	08003b31 	.word	0x08003b31
 8003ab0:	08003b31 	.word	0x08003b31
 8003ab4:	08003b39 	.word	0x08003b39
 8003ab8:	08003b31 	.word	0x08003b31
 8003abc:	08003b31 	.word	0x08003b31
 8003ac0:	08003b31 	.word	0x08003b31
 8003ac4:	08003b31 	.word	0x08003b31
 8003ac8:	08003b31 	.word	0x08003b31
 8003acc:	08003b31 	.word	0x08003b31
 8003ad0:	08003b31 	.word	0x08003b31
 8003ad4:	08003b39 	.word	0x08003b39
 8003ad8:	08003b31 	.word	0x08003b31
 8003adc:	08003b31 	.word	0x08003b31
 8003ae0:	08003b31 	.word	0x08003b31
 8003ae4:	08003b31 	.word	0x08003b31
 8003ae8:	08003b31 	.word	0x08003b31
 8003aec:	08003b31 	.word	0x08003b31
 8003af0:	08003b31 	.word	0x08003b31
 8003af4:	08003b39 	.word	0x08003b39
 8003af8:	58024400 	.word	0x58024400
 8003afc:	58024800 	.word	0x58024800
 8003b00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b08:	3308      	adds	r3, #8
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 ffc5 	bl	8004a9c <RCCEx_PLL2_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b18:	e00f      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b1e:	3328      	adds	r3, #40	@ 0x28
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 f86c 	bl	8004c00 <RCCEx_PLL3_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b2e:	e004      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b42:	4bc0      	ldr	r3, [pc, #768]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b52:	4abc      	ldr	r2, [pc, #752]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b58:	e003      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f002 0302 	and.w	r3, r2, #2
 8003b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b72:	2300      	movs	r3, #0
 8003b74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b78:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	d043      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d824      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003be1 	.word	0x08003be1
 8003b98:	08003bad 	.word	0x08003bad
 8003b9c:	08003bc3 	.word	0x08003bc3
 8003ba0:	08003be1 	.word	0x08003be1
 8003ba4:	08003be1 	.word	0x08003be1
 8003ba8:	08003be1 	.word	0x08003be1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 ff71 	bl	8004a9c <RCCEx_PLL2_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bc0:	e00f      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bc6:	3328      	adds	r3, #40	@ 0x28
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 f818 	bl	8004c00 <RCCEx_PLL3_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bd6:	e004      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bea:	4b96      	ldr	r3, [pc, #600]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bee:	f023 0107 	bic.w	r1, r3, #7
 8003bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bfa:	4a92      	ldr	r2, [pc, #584]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c00:	e003      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f002 0304 	and.w	r3, r2, #4
 8003c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c20:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4313      	orrs	r3, r2
 8003c28:	d043      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d824      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003c36:	a201      	add	r2, pc, #4	@ (adr r2, 8003c3c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	08003c89 	.word	0x08003c89
 8003c40:	08003c55 	.word	0x08003c55
 8003c44:	08003c6b 	.word	0x08003c6b
 8003c48:	08003c89 	.word	0x08003c89
 8003c4c:	08003c89 	.word	0x08003c89
 8003c50:	08003c89 	.word	0x08003c89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c58:	3308      	adds	r3, #8
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 ff1d 	bl	8004a9c <RCCEx_PLL2_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c68:	e00f      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c6e:	3328      	adds	r3, #40	@ 0x28
 8003c70:	2101      	movs	r1, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 ffc4 	bl	8004c00 <RCCEx_PLL3_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c7e:	e004      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c92:	4b6c      	ldr	r3, [pc, #432]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	f023 0107 	bic.w	r1, r3, #7
 8003c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ca2:	4a68      	ldr	r2, [pc, #416]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f002 0320 	and.w	r3, r2, #32
 8003cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d055      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cde:	d033      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ce4:	d82c      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cea:	d02f      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf0:	d826      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003cf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cf6:	d02b      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003cf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cfc:	d820      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d02:	d012      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003d04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d08:	d81a      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d022      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d12:	d115      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d18:	3308      	adds	r3, #8
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 febd 	bl	8004a9c <RCCEx_PLL2_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d28:	e015      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d2e:	3328      	adds	r3, #40	@ 0x28
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 ff64 	bl	8004c00 <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d46:	e006      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d48:	bf00      	nop
 8003d4a:	e004      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d4c:	bf00      	nop
 8003d4e:	e002      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d50:	bf00      	nop
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d6e:	4a35      	ldr	r2, [pc, #212]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d74:	e003      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	d058      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003da2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003da6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003daa:	d033      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003dac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003db0:	d82c      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db6:	d02f      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dbc:	d826      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003dbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dc2:	d02b      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003dc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dc8:	d820      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dce:	d012      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd4:	d81a      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d022      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dde:	d115      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de4:	3308      	adds	r3, #8
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fe57 	bl	8004a9c <RCCEx_PLL2_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003df4:	e015      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dfa:	3328      	adds	r3, #40	@ 0x28
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fefe 	bl	8004c00 <RCCEx_PLL3_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e12:	e006      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e14:	bf00      	nop
 8003e16:	e004      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e18:	bf00      	nop
 8003e1a:	e002      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e1c:	bf00      	nop
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10e      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e2a:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e3a:	4a02      	ldr	r2, [pc, #8]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e40:	e006      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003e42:	bf00      	nop
 8003e44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	d055      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e7c:	d033      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003e7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e82:	d82c      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e88:	d02f      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e8e:	d826      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e94:	d02b      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e9a:	d820      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ea0:	d012      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003ea2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ea6:	d81a      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d022      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eb0:	d115      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fdee 	bl	8004a9c <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ec6:	e015      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ecc:	3328      	adds	r3, #40	@ 0x28
 8003ece:	2102      	movs	r1, #2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fe95 	bl	8004c00 <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ee4:	e006      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e004      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003efc:	4ba1      	ldr	r3, [pc, #644]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f00:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f0c:	4a9d      	ldr	r2, [pc, #628]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f12:	e003      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f002 0308 	and.w	r3, r2, #8
 8003f28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003f36:	460b      	mov	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	d01e      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f4e:	3328      	adds	r3, #40	@ 0x28
 8003f50:	2102      	movs	r1, #2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fe54 	bl	8004c00 <RCCEx_PLL3_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f64:	4b87      	ldr	r3, [pc, #540]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f74:	4a83      	ldr	r2, [pc, #524]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f76:	430b      	orrs	r3, r1
 8003f78:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f002 0310 	and.w	r3, r2, #16
 8003f86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f90:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003f94:	460b      	mov	r3, r1
 8003f96:	4313      	orrs	r3, r2
 8003f98:	d01e      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa6:	d10c      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fac:	3328      	adds	r3, #40	@ 0x28
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fe25 	bl	8004c00 <RCCEx_PLL3_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fc2:	4b70      	ldr	r3, [pc, #448]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fd2:	4a6c      	ldr	r2, [pc, #432]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d03e      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ffc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004004:	d022      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800400a:	d81b      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004014:	d00b      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004016:	e015      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004018:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800401c:	3308      	adds	r3, #8
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fd3b 	bl	8004a9c <RCCEx_PLL2_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800402c:	e00f      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800402e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004032:	3328      	adds	r3, #40	@ 0x28
 8004034:	2102      	movs	r1, #2
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fde2 	bl	8004c00 <RCCEx_PLL3_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004042:	e004      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800404a:	e000      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800404c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004056:	4b4b      	ldr	r3, [pc, #300]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004062:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004066:	4a47      	ldr	r2, [pc, #284]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004068:	430b      	orrs	r3, r1
 800406a:	6593      	str	r3, [r2, #88]	@ 0x58
 800406c:	e003      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004072:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004082:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004084:	2300      	movs	r3, #0
 8004086:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004088:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800408c:	460b      	mov	r3, r1
 800408e:	4313      	orrs	r3, r2
 8004090:	d03b      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800409e:	d01f      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80040a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040a4:	d818      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80040a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040aa:	d003      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80040ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040b0:	d007      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80040b2:	e011      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b4:	4b33      	ldr	r3, [pc, #204]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	4a32      	ldr	r2, [pc, #200]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80040c0:	e00f      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040c6:	3328      	adds	r3, #40	@ 0x28
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fd98 	bl	8004c00 <RCCEx_PLL3_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80040d6:	e004      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80040e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ea:	4b26      	ldr	r3, [pc, #152]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80040f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fa:	4a22      	ldr	r2, [pc, #136]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004100:	e003      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004102:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004106:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004116:	673b      	str	r3, [r7, #112]	@ 0x70
 8004118:	2300      	movs	r3, #0
 800411a:	677b      	str	r3, [r7, #116]	@ 0x74
 800411c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004120:	460b      	mov	r3, r1
 8004122:	4313      	orrs	r3, r2
 8004124:	d034      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800412a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004134:	d007      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004136:	e011      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004138:	4b12      	ldr	r3, [pc, #72]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	4a11      	ldr	r2, [pc, #68]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004144:	e00e      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800414a:	3308      	adds	r3, #8
 800414c:	2102      	movs	r1, #2
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fca4 	bl	8004a9c <RCCEx_PLL2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800415a:	e003      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10d      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800416c:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800416e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004170:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417a:	4a02      	ldr	r2, [pc, #8]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800417c:	430b      	orrs	r3, r1
 800417e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004180:	e006      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800418c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800419c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800419e:	2300      	movs	r3, #0
 80041a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d00c      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041b0:	3328      	adds	r3, #40	@ 0x28
 80041b2:	2102      	movs	r1, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fd23 	bl	8004c00 <RCCEx_PLL3_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80041d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80041d4:	2300      	movs	r3, #0
 80041d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80041d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80041dc:	460b      	mov	r3, r1
 80041de:	4313      	orrs	r3, r2
 80041e0:	d038      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80041e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ee:	d018      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80041f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041f4:	d811      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80041f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041fa:	d014      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004200:	d80b      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d011      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420a:	d106      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420c:	4bc3      	ldr	r3, [pc, #780]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	4ac2      	ldr	r2, [pc, #776]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004216:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004218:	e008      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004220:	e004      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800422a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004234:	4bb9      	ldr	r3, [pc, #740]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004238:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800423c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004244:	4ab5      	ldr	r2, [pc, #724]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004246:	430b      	orrs	r3, r1
 8004248:	6553      	str	r3, [r2, #84]	@ 0x54
 800424a:	e003      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004250:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004260:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004262:	2300      	movs	r3, #0
 8004264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004266:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004270:	4baa      	ldr	r3, [pc, #680]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004274:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800427c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800427e:	4aa7      	ldr	r2, [pc, #668]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004280:	430b      	orrs	r3, r1
 8004282:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004290:	653b      	str	r3, [r7, #80]	@ 0x50
 8004292:	2300      	movs	r3, #0
 8004294:	657b      	str	r3, [r7, #84]	@ 0x54
 8004296:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d009      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042a0:	4b9e      	ldr	r3, [pc, #632]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80042a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	4a9b      	ldr	r2, [pc, #620]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80042b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80042c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c2:	2300      	movs	r3, #0
 80042c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80042d0:	4b92      	ldr	r3, [pc, #584]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80042d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042de:	4a8f      	ldr	r2, [pc, #572]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80042f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042f2:	2300      	movs	r3, #0
 80042f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	d00e      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004300:	4b86      	ldr	r3, [pc, #536]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	4a85      	ldr	r2, [pc, #532]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004306:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800430a:	6113      	str	r3, [r2, #16]
 800430c:	4b83      	ldr	r3, [pc, #524]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800430e:	6919      	ldr	r1, [r3, #16]
 8004310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004314:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004318:	4a80      	ldr	r2, [pc, #512]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800431a:	430b      	orrs	r3, r1
 800431c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800432a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800432c:	2300      	movs	r3, #0
 800432e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004330:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004334:	460b      	mov	r3, r1
 8004336:	4313      	orrs	r3, r2
 8004338:	d009      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800433a:	4b78      	ldr	r3, [pc, #480]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800433c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004348:	4a74      	ldr	r2, [pc, #464]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800434a:	430b      	orrs	r3, r1
 800434c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800434e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800435a:	633b      	str	r3, [r7, #48]	@ 0x30
 800435c:	2300      	movs	r3, #0
 800435e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004360:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004364:	460b      	mov	r3, r1
 8004366:	4313      	orrs	r3, r2
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800436a:	4b6c      	ldr	r3, [pc, #432]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800436c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800437a:	4a68      	ldr	r2, [pc, #416]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800437c:	430b      	orrs	r3, r1
 800437e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	2100      	movs	r1, #0
 800438a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004392:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d011      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800439c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043a0:	3308      	adds	r3, #8
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fb79 	bl	8004a9c <RCCEx_PLL2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80043b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80043c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	2100      	movs	r1, #0
 80043ca:	6239      	str	r1, [r7, #32]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d011      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e0:	3308      	adds	r3, #8
 80043e2:	2101      	movs	r1, #1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fb59 	bl	8004a9c <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80043f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	2100      	movs	r1, #0
 800440a:	61b9      	str	r1, [r7, #24]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d011      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800441c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004420:	3308      	adds	r3, #8
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fb39 	bl	8004a9c <RCCEx_PLL2_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004430:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800443c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	2100      	movs	r1, #0
 800444a:	6139      	str	r1, [r7, #16]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d011      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004460:	3328      	adds	r3, #40	@ 0x28
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fbcb 	bl	8004c00 <RCCEx_PLL3_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004470:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800447c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	2100      	movs	r1, #0
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004496:	460b      	mov	r3, r1
 8004498:	4313      	orrs	r3, r2
 800449a:	d011      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800449c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a0:	3328      	adds	r3, #40	@ 0x28
 80044a2:	2101      	movs	r1, #1
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fbab 	bl	8004c00 <RCCEx_PLL3_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80044b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80044c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	2100      	movs	r1, #0
 80044ca:	6039      	str	r1, [r7, #0]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d011      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e0:	3328      	adds	r3, #40	@ 0x28
 80044e2:	2102      	movs	r1, #2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fb8b 	bl	8004c00 <RCCEx_PLL3_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80044f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004500:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
}
 800450e:	4618      	mov	r0, r3
 8004510:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400

08004520 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004524:	f7fe fde2 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4904      	ldr	r1, [pc, #16]	@ (8004548 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	58024400 	.word	0x58024400
 8004548:	08006be0 	.word	0x08006be0

0800454c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	@ 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004554:	4ba1      	ldr	r3, [pc, #644]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800455e:	4b9f      	ldr	r3, [pc, #636]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004562:	0b1b      	lsrs	r3, r3, #12
 8004564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004568:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800456a:	4b9c      	ldr	r3, [pc, #624]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004576:	4b99      	ldr	r3, [pc, #612]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457a:	08db      	lsrs	r3, r3, #3
 800457c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8111 	beq.w	80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b02      	cmp	r3, #2
 800459e:	f000 8083 	beq.w	80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	f200 80a1 	bhi.w	80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d056      	beq.n	8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045b6:	e099      	b.n	80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b8:	4b88      	ldr	r3, [pc, #544]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02d      	beq.n	8004620 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045c4:	4b85      	ldr	r3, [pc, #532]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	08db      	lsrs	r3, r3, #3
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	4a84      	ldr	r2, [pc, #528]	@ (80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
 80045d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	ee07 3a90 	vmov	s15, r3
 80045dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b7b      	ldr	r3, [pc, #492]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004602:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800461e:	e087      	b.n	8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800462e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004632:	4b6a      	ldr	r3, [pc, #424]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 6a03 	vldr	s12, [r7, #12]
 8004646:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800464a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004662:	e065      	b.n	8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004676:	4b59      	ldr	r3, [pc, #356]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004686:	ed97 6a03 	vldr	s12, [r7, #12]
 800468a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800468e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800469a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046a6:	e043      	b.n	8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ba:	4b48      	ldr	r3, [pc, #288]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ea:	e021      	b.n	8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fe:	4b37      	ldr	r3, [pc, #220]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004712:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800472e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004730:	4b2a      	ldr	r3, [pc, #168]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004734:	0a5b      	lsrs	r3, r3, #9
 8004736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800474a:	edd7 6a07 	vldr	s13, [r7, #28]
 800474e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004756:	ee17 2a90 	vmov	r2, s15
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800475e:	4b1f      	ldr	r3, [pc, #124]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004762:	0c1b      	lsrs	r3, r3, #16
 8004764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004768:	ee07 3a90 	vmov	s15, r3
 800476c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004770:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004778:	edd7 6a07 	vldr	s13, [r7, #28]
 800477c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004784:	ee17 2a90 	vmov	r2, s15
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800478c:	4b13      	ldr	r3, [pc, #76]	@ (80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004790:	0e1b      	lsrs	r3, r3, #24
 8004792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b2:	ee17 2a90 	vmov	r2, s15
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047ba:	e008      	b.n	80047ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
}
 80047ce:	bf00      	nop
 80047d0:	3724      	adds	r7, #36	@ 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	58024400 	.word	0x58024400
 80047e0:	03d09000 	.word	0x03d09000
 80047e4:	46000000 	.word	0x46000000
 80047e8:	4c742400 	.word	0x4c742400
 80047ec:	4a742400 	.word	0x4a742400
 80047f0:	4af42400 	.word	0x4af42400

080047f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	@ 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047fc:	4ba1      	ldr	r3, [pc, #644]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004806:	4b9f      	ldr	r3, [pc, #636]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480a:	0d1b      	lsrs	r3, r3, #20
 800480c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004810:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004812:	4b9c      	ldr	r3, [pc, #624]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800481e:	4b99      	ldr	r3, [pc, #612]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	08db      	lsrs	r3, r3, #3
 8004824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8111 	beq.w	8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f000 8083 	beq.w	8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b02      	cmp	r3, #2
 800484e:	f200 80a1 	bhi.w	8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d056      	beq.n	800490c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800485e:	e099      	b.n	8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004860:	4b88      	ldr	r3, [pc, #544]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02d      	beq.n	80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800486c:	4b85      	ldr	r3, [pc, #532]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	4a84      	ldr	r2, [pc, #528]	@ (8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b7b      	ldr	r3, [pc, #492]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048c6:	e087      	b.n	80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b6a      	ldr	r3, [pc, #424]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800490a:	e065      	b.n	80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b59      	ldr	r3, [pc, #356]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004932:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800494e:	e043      	b.n	80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800495e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004962:	4b48      	ldr	r3, [pc, #288]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004972:	ed97 6a03 	vldr	s12, [r7, #12]
 8004976:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800497a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004992:	e021      	b.n	80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a6:	4b37      	ldr	r3, [pc, #220]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80049d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049dc:	0a5b      	lsrs	r3, r3, #9
 80049de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049fe:	ee17 2a90 	vmov	r2, s15
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a06:	4b1f      	ldr	r3, [pc, #124]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	0c1b      	lsrs	r3, r3, #16
 8004a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2c:	ee17 2a90 	vmov	r2, s15
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a34:	4b13      	ldr	r3, [pc, #76]	@ (8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a38:	0e1b      	lsrs	r3, r3, #24
 8004a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a5a:	ee17 2a90 	vmov	r2, s15
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a62:	e008      	b.n	8004a76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
}
 8004a76:	bf00      	nop
 8004a78:	3724      	adds	r7, #36	@ 0x24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	58024400 	.word	0x58024400
 8004a88:	03d09000 	.word	0x03d09000
 8004a8c:	46000000 	.word	0x46000000
 8004a90:	4c742400 	.word	0x4c742400
 8004a94:	4a742400 	.word	0x4a742400
 8004a98:	4af42400 	.word	0x4af42400

08004a9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004aaa:	4b53      	ldr	r3, [pc, #332]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d101      	bne.n	8004aba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e099      	b.n	8004bee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004aba:	4b4f      	ldr	r3, [pc, #316]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a4e      	ldr	r2, [pc, #312]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac6:	f7fc fb4f 	bl	8001168 <HAL_GetTick>
 8004aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004acc:	e008      	b.n	8004ae0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ace:	f7fc fb4b 	bl	8001168 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e086      	b.n	8004bee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ae0:	4b45      	ldr	r3, [pc, #276]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f0      	bne.n	8004ace <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004aec:	4b42      	ldr	r3, [pc, #264]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	031b      	lsls	r3, r3, #12
 8004afa:	493f      	ldr	r1, [pc, #252]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	025b      	lsls	r3, r3, #9
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	041b      	lsls	r3, r3, #16
 8004b1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	061b      	lsls	r3, r3, #24
 8004b2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b30:	4931      	ldr	r1, [pc, #196]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b36:	4b30      	ldr	r3, [pc, #192]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	492d      	ldr	r1, [pc, #180]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b48:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4c:	f023 0220 	bic.w	r2, r3, #32
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	4928      	ldr	r1, [pc, #160]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b5a:	4b27      	ldr	r3, [pc, #156]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	4a26      	ldr	r2, [pc, #152]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	f023 0310 	bic.w	r3, r3, #16
 8004b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b66:	4b24      	ldr	r3, [pc, #144]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b6a:	4b24      	ldr	r3, [pc, #144]	@ (8004bfc <RCCEx_PLL2_Config+0x160>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	69d2      	ldr	r2, [r2, #28]
 8004b72:	00d2      	lsls	r2, r2, #3
 8004b74:	4920      	ldr	r1, [pc, #128]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b80:	f043 0310 	orr.w	r3, r3, #16
 8004b84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	4a19      	ldr	r2, [pc, #100]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b98:	e00f      	b.n	8004bba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d106      	bne.n	8004bae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ba0:	4b15      	ldr	r3, [pc, #84]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba4:	4a14      	ldr	r2, [pc, #80]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004baa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bac:	e005      	b.n	8004bba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bae:	4b12      	ldr	r3, [pc, #72]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb2:	4a11      	ldr	r2, [pc, #68]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bba:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004bc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc6:	f7fc facf 	bl	8001168 <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bcc:	e008      	b.n	8004be0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bce:	f7fc facb 	bl	8001168 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e006      	b.n	8004bee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004be0:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	ffff0007 	.word	0xffff0007

08004c00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c0e:	4b53      	ldr	r3, [pc, #332]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d101      	bne.n	8004c1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e099      	b.n	8004d52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4e      	ldr	r2, [pc, #312]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2a:	f7fc fa9d 	bl	8001168 <HAL_GetTick>
 8004c2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c30:	e008      	b.n	8004c44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c32:	f7fc fa99 	bl	8001168 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e086      	b.n	8004d52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c44:	4b45      	ldr	r3, [pc, #276]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c50:	4b42      	ldr	r3, [pc, #264]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	051b      	lsls	r3, r3, #20
 8004c5e:	493f      	ldr	r1, [pc, #252]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	025b      	lsls	r3, r3, #9
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c94:	4931      	ldr	r1, [pc, #196]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c9a:	4b30      	ldr	r3, [pc, #192]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	492d      	ldr	r1, [pc, #180]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cac:	4b2b      	ldr	r3, [pc, #172]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	4928      	ldr	r1, [pc, #160]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cbe:	4b27      	ldr	r3, [pc, #156]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	4a26      	ldr	r2, [pc, #152]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cca:	4b24      	ldr	r3, [pc, #144]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cce:	4b24      	ldr	r3, [pc, #144]	@ (8004d60 <RCCEx_PLL3_Config+0x160>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	69d2      	ldr	r2, [r2, #28]
 8004cd6:	00d2      	lsls	r2, r2, #3
 8004cd8:	4920      	ldr	r1, [pc, #128]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cde:	4b1f      	ldr	r3, [pc, #124]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	4a19      	ldr	r2, [pc, #100]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cfc:	e00f      	b.n	8004d1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d106      	bne.n	8004d12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d04:	4b15      	ldr	r3, [pc, #84]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	4a14      	ldr	r2, [pc, #80]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d10:	e005      	b.n	8004d1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d12:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	4a11      	ldr	r2, [pc, #68]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a0e      	ldr	r2, [pc, #56]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fc fa1d 	bl	8001168 <HAL_GetTick>
 8004d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d30:	e008      	b.n	8004d44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d32:	f7fc fa19 	bl	8001168 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e006      	b.n	8004d52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <RCCEx_PLL3_Config+0x15c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	ffff0007 	.word	0xffff0007

08004d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e049      	b.n	8004e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fb fff6 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f000 fae0 	bl	8005368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d001      	beq.n	8004e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e054      	b.n	8004ed6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a26      	ldr	r2, [pc, #152]	@ (8004ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d022      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x80>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e56:	d01d      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x80>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a22      	ldr	r2, [pc, #136]	@ (8004ee8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x80>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a21      	ldr	r2, [pc, #132]	@ (8004eec <HAL_TIM_Base_Start_IT+0xd8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x80>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x80>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x80>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x80>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004efc <HAL_TIM_Base_Start_IT+0xe8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d115      	bne.n	8004ec0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	4b19      	ldr	r3, [pc, #100]	@ (8004f00 <HAL_TIM_Base_Start_IT+0xec>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d015      	beq.n	8004ed2 <HAL_TIM_Base_Start_IT+0xbe>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eac:	d011      	beq.n	8004ed2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebe:	e008      	b.n	8004ed2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40000c00 	.word	0x40000c00
 8004ef4:	40010400 	.word	0x40010400
 8004ef8:	40001800 	.word	0x40001800
 8004efc:	40014000 	.word	0x40014000
 8004f00:	00010007 	.word	0x00010007

08004f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d020      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01b      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0202 	mvn.w	r2, #2
 8004f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f9ec 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8004f54:	e005      	b.n	8004f62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f9de 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f9ef 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d020      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0204 	mvn.w	r2, #4
 8004f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f9c6 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8004fa0:	e005      	b.n	8004fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9b8 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f9c9 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d020      	beq.n	8005000 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01b      	beq.n	8005000 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0208 	mvn.w	r2, #8
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9a0 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f992 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f9a3 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	d020      	beq.n	800504c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01b      	beq.n	800504c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0210 	mvn.w	r2, #16
 800501c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2208      	movs	r2, #8
 8005022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f97a 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f96c 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f97d 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00c      	beq.n	8005070 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0201 	mvn.w	r2, #1
 8005068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f94a 	bl	8005304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	d104      	bne.n	8005084 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00c      	beq.n	800509e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fb41 	bl	8005720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00c      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fb39 	bl	8005734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00c      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f937 	bl	8005354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00c      	beq.n	800510a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f06f 0220 	mvn.w	r2, #32
 8005102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fb01 	bl	800570c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_TIM_ConfigClockSource+0x1c>
 800512c:	2302      	movs	r3, #2
 800512e:	e0dc      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x1d6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	4b6a      	ldr	r3, [pc, #424]	@ (80052f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800514c:	4013      	ands	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a64      	ldr	r2, [pc, #400]	@ (80052f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	f000 80a9 	beq.w	80052be <HAL_TIM_ConfigClockSource+0x1aa>
 800516c:	4a62      	ldr	r2, [pc, #392]	@ (80052f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	f200 80ae 	bhi.w	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005174:	4a61      	ldr	r2, [pc, #388]	@ (80052fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	f000 80a1 	beq.w	80052be <HAL_TIM_ConfigClockSource+0x1aa>
 800517c:	4a5f      	ldr	r2, [pc, #380]	@ (80052fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	f200 80a6 	bhi.w	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005184:	4a5e      	ldr	r2, [pc, #376]	@ (8005300 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005186:	4293      	cmp	r3, r2
 8005188:	f000 8099 	beq.w	80052be <HAL_TIM_ConfigClockSource+0x1aa>
 800518c:	4a5c      	ldr	r2, [pc, #368]	@ (8005300 <HAL_TIM_ConfigClockSource+0x1ec>)
 800518e:	4293      	cmp	r3, r2
 8005190:	f200 809e 	bhi.w	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005194:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005198:	f000 8091 	beq.w	80052be <HAL_TIM_ConfigClockSource+0x1aa>
 800519c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80051a0:	f200 8096 	bhi.w	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80051a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051a8:	f000 8089 	beq.w	80052be <HAL_TIM_ConfigClockSource+0x1aa>
 80051ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051b0:	f200 808e 	bhi.w	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80051b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b8:	d03e      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0x124>
 80051ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051be:	f200 8087 	bhi.w	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c6:	f000 8086 	beq.w	80052d6 <HAL_TIM_ConfigClockSource+0x1c2>
 80051ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ce:	d87f      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80051d0:	2b70      	cmp	r3, #112	@ 0x70
 80051d2:	d01a      	beq.n	800520a <HAL_TIM_ConfigClockSource+0xf6>
 80051d4:	2b70      	cmp	r3, #112	@ 0x70
 80051d6:	d87b      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80051d8:	2b60      	cmp	r3, #96	@ 0x60
 80051da:	d050      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x16a>
 80051dc:	2b60      	cmp	r3, #96	@ 0x60
 80051de:	d877      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80051e0:	2b50      	cmp	r3, #80	@ 0x50
 80051e2:	d03c      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x14a>
 80051e4:	2b50      	cmp	r3, #80	@ 0x50
 80051e6:	d873      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80051e8:	2b40      	cmp	r3, #64	@ 0x40
 80051ea:	d058      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x18a>
 80051ec:	2b40      	cmp	r3, #64	@ 0x40
 80051ee:	d86f      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80051f0:	2b30      	cmp	r3, #48	@ 0x30
 80051f2:	d064      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x1aa>
 80051f4:	2b30      	cmp	r3, #48	@ 0x30
 80051f6:	d86b      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d060      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x1aa>
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d867      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d05c      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x1aa>
 8005204:	2b10      	cmp	r3, #16
 8005206:	d05a      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x1aa>
 8005208:	e062      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800521a:	f000 f9c9 	bl	80055b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800522c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	609a      	str	r2, [r3, #8]
      break;
 8005236:	e04f      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005248:	f000 f9b2 	bl	80055b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800525a:	609a      	str	r2, [r3, #8]
      break;
 800525c:	e03c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800526a:	461a      	mov	r2, r3
 800526c:	f000 f922 	bl	80054b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2150      	movs	r1, #80	@ 0x50
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f97c 	bl	8005574 <TIM_ITRx_SetConfig>
      break;
 800527c:	e02c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800528a:	461a      	mov	r2, r3
 800528c:	f000 f941 	bl	8005512 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2160      	movs	r1, #96	@ 0x60
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f96c 	bl	8005574 <TIM_ITRx_SetConfig>
      break;
 800529c:	e01c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052aa:	461a      	mov	r2, r3
 80052ac:	f000 f902 	bl	80054b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2140      	movs	r1, #64	@ 0x40
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 f95c 	bl	8005574 <TIM_ITRx_SetConfig>
      break;
 80052bc:	e00c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f000 f953 	bl	8005574 <TIM_ITRx_SetConfig>
      break;
 80052ce:	e003      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      break;
 80052d4:	e000      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80052d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	ffceff88 	.word	0xffceff88
 80052f8:	00100040 	.word	0x00100040
 80052fc:	00100030 	.word	0x00100030
 8005300:	00100020 	.word	0x00100020

08005304 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a46      	ldr	r2, [pc, #280]	@ (8005494 <TIM_Base_SetConfig+0x12c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005386:	d00f      	beq.n	80053a8 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a43      	ldr	r2, [pc, #268]	@ (8005498 <TIM_Base_SetConfig+0x130>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00b      	beq.n	80053a8 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a42      	ldr	r2, [pc, #264]	@ (800549c <TIM_Base_SetConfig+0x134>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a41      	ldr	r2, [pc, #260]	@ (80054a0 <TIM_Base_SetConfig+0x138>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a40      	ldr	r2, [pc, #256]	@ (80054a4 <TIM_Base_SetConfig+0x13c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d108      	bne.n	80053ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a35      	ldr	r2, [pc, #212]	@ (8005494 <TIM_Base_SetConfig+0x12c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01f      	beq.n	8005402 <TIM_Base_SetConfig+0x9a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c8:	d01b      	beq.n	8005402 <TIM_Base_SetConfig+0x9a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a32      	ldr	r2, [pc, #200]	@ (8005498 <TIM_Base_SetConfig+0x130>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d017      	beq.n	8005402 <TIM_Base_SetConfig+0x9a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a31      	ldr	r2, [pc, #196]	@ (800549c <TIM_Base_SetConfig+0x134>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <TIM_Base_SetConfig+0x9a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a30      	ldr	r2, [pc, #192]	@ (80054a0 <TIM_Base_SetConfig+0x138>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_Base_SetConfig+0x9a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2f      	ldr	r2, [pc, #188]	@ (80054a4 <TIM_Base_SetConfig+0x13c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0x9a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2e      	ldr	r2, [pc, #184]	@ (80054a8 <TIM_Base_SetConfig+0x140>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0x9a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2d      	ldr	r2, [pc, #180]	@ (80054ac <TIM_Base_SetConfig+0x144>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0x9a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a2c      	ldr	r2, [pc, #176]	@ (80054b0 <TIM_Base_SetConfig+0x148>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a16      	ldr	r2, [pc, #88]	@ (8005494 <TIM_Base_SetConfig+0x12c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00f      	beq.n	8005460 <TIM_Base_SetConfig+0xf8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a18      	ldr	r2, [pc, #96]	@ (80054a4 <TIM_Base_SetConfig+0x13c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00b      	beq.n	8005460 <TIM_Base_SetConfig+0xf8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a17      	ldr	r2, [pc, #92]	@ (80054a8 <TIM_Base_SetConfig+0x140>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d007      	beq.n	8005460 <TIM_Base_SetConfig+0xf8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a16      	ldr	r2, [pc, #88]	@ (80054ac <TIM_Base_SetConfig+0x144>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_Base_SetConfig+0xf8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a15      	ldr	r2, [pc, #84]	@ (80054b0 <TIM_Base_SetConfig+0x148>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d103      	bne.n	8005468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d105      	bne.n	8005486 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f023 0201 	bic.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	611a      	str	r2, [r3, #16]
  }
}
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40010000 	.word	0x40010000
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40010400 	.word	0x40010400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800

080054b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f023 0201 	bic.w	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f023 030a 	bic.w	r3, r3, #10
 80054f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005512:	b480      	push	{r7}
 8005514:	b087      	sub	sp, #28
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f023 0210 	bic.w	r2, r3, #16
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800553c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	031b      	lsls	r3, r3, #12
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800554e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4b09      	ldr	r3, [pc, #36]	@ (80055ac <TIM_ITRx_SetConfig+0x38>)
 8005588:	4013      	ands	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	f043 0307 	orr.w	r3, r3, #7
 8005596:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	609a      	str	r2, [r3, #8]
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	ffcfff8f 	.word	0xffcfff8f

080055b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	021a      	lsls	r2, r3, #8
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	609a      	str	r2, [r3, #8]
}
 80055e4:	bf00      	nop
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005604:	2302      	movs	r3, #2
 8005606:	e06d      	b.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a30      	ldr	r2, [pc, #192]	@ (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2f      	ldr	r2, [pc, #188]	@ (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d108      	bne.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a20      	ldr	r2, [pc, #128]	@ (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567a:	d01d      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1d      	ldr	r2, [pc, #116]	@ (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1c      	ldr	r2, [pc, #112]	@ (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1a      	ldr	r2, [pc, #104]	@ (8005700 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a15      	ldr	r2, [pc, #84]	@ (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a16      	ldr	r2, [pc, #88]	@ (8005704 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a15      	ldr	r2, [pc, #84]	@ (8005708 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d10c      	bne.n	80056d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40001800 	.word	0x40001800
 8005708:	40014000 	.word	0x40014000

0800570c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e042      	b.n	80057e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fb fb2d 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2224      	movs	r2, #36	@ 0x24
 8005776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fe94 	bl	80064c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f825 	bl	80057e8 <UART_SetConfig>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e01b      	b.n	80057e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 ff13 	bl	8006604 <UART_CheckIdleState>
 80057de:	4603      	mov	r3, r0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ec:	b092      	sub	sp, #72	@ 0x48
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	431a      	orrs	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	431a      	orrs	r2, r3
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4313      	orrs	r3, r2
 800580e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4bbe      	ldr	r3, [pc, #760]	@ (8005b10 <UART_SetConfig+0x328>)
 8005818:	4013      	ands	r3, r2
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005820:	430b      	orrs	r3, r1
 8005822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4ab3      	ldr	r2, [pc, #716]	@ (8005b14 <UART_SetConfig+0x32c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005850:	4313      	orrs	r3, r2
 8005852:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	4baf      	ldr	r3, [pc, #700]	@ (8005b18 <UART_SetConfig+0x330>)
 800585c:	4013      	ands	r3, r2
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005864:	430b      	orrs	r3, r1
 8005866:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586e:	f023 010f 	bic.w	r1, r3, #15
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4aa6      	ldr	r2, [pc, #664]	@ (8005b1c <UART_SetConfig+0x334>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d177      	bne.n	8005978 <UART_SetConfig+0x190>
 8005888:	4ba5      	ldr	r3, [pc, #660]	@ (8005b20 <UART_SetConfig+0x338>)
 800588a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005890:	2b28      	cmp	r3, #40	@ 0x28
 8005892:	d86d      	bhi.n	8005970 <UART_SetConfig+0x188>
 8005894:	a201      	add	r2, pc, #4	@ (adr r2, 800589c <UART_SetConfig+0xb4>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	08005941 	.word	0x08005941
 80058a0:	08005971 	.word	0x08005971
 80058a4:	08005971 	.word	0x08005971
 80058a8:	08005971 	.word	0x08005971
 80058ac:	08005971 	.word	0x08005971
 80058b0:	08005971 	.word	0x08005971
 80058b4:	08005971 	.word	0x08005971
 80058b8:	08005971 	.word	0x08005971
 80058bc:	08005949 	.word	0x08005949
 80058c0:	08005971 	.word	0x08005971
 80058c4:	08005971 	.word	0x08005971
 80058c8:	08005971 	.word	0x08005971
 80058cc:	08005971 	.word	0x08005971
 80058d0:	08005971 	.word	0x08005971
 80058d4:	08005971 	.word	0x08005971
 80058d8:	08005971 	.word	0x08005971
 80058dc:	08005951 	.word	0x08005951
 80058e0:	08005971 	.word	0x08005971
 80058e4:	08005971 	.word	0x08005971
 80058e8:	08005971 	.word	0x08005971
 80058ec:	08005971 	.word	0x08005971
 80058f0:	08005971 	.word	0x08005971
 80058f4:	08005971 	.word	0x08005971
 80058f8:	08005971 	.word	0x08005971
 80058fc:	08005959 	.word	0x08005959
 8005900:	08005971 	.word	0x08005971
 8005904:	08005971 	.word	0x08005971
 8005908:	08005971 	.word	0x08005971
 800590c:	08005971 	.word	0x08005971
 8005910:	08005971 	.word	0x08005971
 8005914:	08005971 	.word	0x08005971
 8005918:	08005971 	.word	0x08005971
 800591c:	08005961 	.word	0x08005961
 8005920:	08005971 	.word	0x08005971
 8005924:	08005971 	.word	0x08005971
 8005928:	08005971 	.word	0x08005971
 800592c:	08005971 	.word	0x08005971
 8005930:	08005971 	.word	0x08005971
 8005934:	08005971 	.word	0x08005971
 8005938:	08005971 	.word	0x08005971
 800593c:	08005969 	.word	0x08005969
 8005940:	2301      	movs	r3, #1
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e326      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005948:	2304      	movs	r3, #4
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e322      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005950:	2308      	movs	r3, #8
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005956:	e31e      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005958:	2310      	movs	r3, #16
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595e:	e31a      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005960:	2320      	movs	r3, #32
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005966:	e316      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005968:	2340      	movs	r3, #64	@ 0x40
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596e:	e312      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005970:	2380      	movs	r3, #128	@ 0x80
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005976:	e30e      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a69      	ldr	r2, [pc, #420]	@ (8005b24 <UART_SetConfig+0x33c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d130      	bne.n	80059e4 <UART_SetConfig+0x1fc>
 8005982:	4b67      	ldr	r3, [pc, #412]	@ (8005b20 <UART_SetConfig+0x338>)
 8005984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b05      	cmp	r3, #5
 800598c:	d826      	bhi.n	80059dc <UART_SetConfig+0x1f4>
 800598e:	a201      	add	r2, pc, #4	@ (adr r2, 8005994 <UART_SetConfig+0x1ac>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059ad 	.word	0x080059ad
 8005998:	080059b5 	.word	0x080059b5
 800599c:	080059bd 	.word	0x080059bd
 80059a0:	080059c5 	.word	0x080059c5
 80059a4:	080059cd 	.word	0x080059cd
 80059a8:	080059d5 	.word	0x080059d5
 80059ac:	2300      	movs	r3, #0
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e2f0      	b.n	8005f96 <UART_SetConfig+0x7ae>
 80059b4:	2304      	movs	r3, #4
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ba:	e2ec      	b.n	8005f96 <UART_SetConfig+0x7ae>
 80059bc:	2308      	movs	r3, #8
 80059be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c2:	e2e8      	b.n	8005f96 <UART_SetConfig+0x7ae>
 80059c4:	2310      	movs	r3, #16
 80059c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ca:	e2e4      	b.n	8005f96 <UART_SetConfig+0x7ae>
 80059cc:	2320      	movs	r3, #32
 80059ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d2:	e2e0      	b.n	8005f96 <UART_SetConfig+0x7ae>
 80059d4:	2340      	movs	r3, #64	@ 0x40
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059da:	e2dc      	b.n	8005f96 <UART_SetConfig+0x7ae>
 80059dc:	2380      	movs	r3, #128	@ 0x80
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e2:	e2d8      	b.n	8005f96 <UART_SetConfig+0x7ae>
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a4f      	ldr	r2, [pc, #316]	@ (8005b28 <UART_SetConfig+0x340>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d130      	bne.n	8005a50 <UART_SetConfig+0x268>
 80059ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005b20 <UART_SetConfig+0x338>)
 80059f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	2b05      	cmp	r3, #5
 80059f8:	d826      	bhi.n	8005a48 <UART_SetConfig+0x260>
 80059fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005a00 <UART_SetConfig+0x218>)
 80059fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a00:	08005a19 	.word	0x08005a19
 8005a04:	08005a21 	.word	0x08005a21
 8005a08:	08005a29 	.word	0x08005a29
 8005a0c:	08005a31 	.word	0x08005a31
 8005a10:	08005a39 	.word	0x08005a39
 8005a14:	08005a41 	.word	0x08005a41
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1e:	e2ba      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005a20:	2304      	movs	r3, #4
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a26:	e2b6      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005a28:	2308      	movs	r3, #8
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2e:	e2b2      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005a30:	2310      	movs	r3, #16
 8005a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a36:	e2ae      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005a38:	2320      	movs	r3, #32
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3e:	e2aa      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005a40:	2340      	movs	r3, #64	@ 0x40
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a46:	e2a6      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005a48:	2380      	movs	r3, #128	@ 0x80
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4e:	e2a2      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a35      	ldr	r2, [pc, #212]	@ (8005b2c <UART_SetConfig+0x344>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d130      	bne.n	8005abc <UART_SetConfig+0x2d4>
 8005a5a:	4b31      	ldr	r3, [pc, #196]	@ (8005b20 <UART_SetConfig+0x338>)
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	d826      	bhi.n	8005ab4 <UART_SetConfig+0x2cc>
 8005a66:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <UART_SetConfig+0x284>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005a85 	.word	0x08005a85
 8005a70:	08005a8d 	.word	0x08005a8d
 8005a74:	08005a95 	.word	0x08005a95
 8005a78:	08005a9d 	.word	0x08005a9d
 8005a7c:	08005aa5 	.word	0x08005aa5
 8005a80:	08005aad 	.word	0x08005aad
 8005a84:	2300      	movs	r3, #0
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8a:	e284      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a92:	e280      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005a94:	2308      	movs	r3, #8
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9a:	e27c      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa2:	e278      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005aa4:	2320      	movs	r3, #32
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e274      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005aac:	2340      	movs	r3, #64	@ 0x40
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e270      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005ab4:	2380      	movs	r3, #128	@ 0x80
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aba:	e26c      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b30 <UART_SetConfig+0x348>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d142      	bne.n	8005b4c <UART_SetConfig+0x364>
 8005ac6:	4b16      	ldr	r3, [pc, #88]	@ (8005b20 <UART_SetConfig+0x338>)
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	d838      	bhi.n	8005b44 <UART_SetConfig+0x35c>
 8005ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <UART_SetConfig+0x2f0>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005af1 	.word	0x08005af1
 8005adc:	08005af9 	.word	0x08005af9
 8005ae0:	08005b01 	.word	0x08005b01
 8005ae4:	08005b09 	.word	0x08005b09
 8005ae8:	08005b35 	.word	0x08005b35
 8005aec:	08005b3d 	.word	0x08005b3d
 8005af0:	2300      	movs	r3, #0
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af6:	e24e      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afe:	e24a      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b06:	e246      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0e:	e242      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005b10:	cfff69f3 	.word	0xcfff69f3
 8005b14:	58000c00 	.word	0x58000c00
 8005b18:	11fff4ff 	.word	0x11fff4ff
 8005b1c:	40011000 	.word	0x40011000
 8005b20:	58024400 	.word	0x58024400
 8005b24:	40004400 	.word	0x40004400
 8005b28:	40004800 	.word	0x40004800
 8005b2c:	40004c00 	.word	0x40004c00
 8005b30:	40005000 	.word	0x40005000
 8005b34:	2320      	movs	r3, #32
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e22c      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005b3c:	2340      	movs	r3, #64	@ 0x40
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b42:	e228      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005b44:	2380      	movs	r3, #128	@ 0x80
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4a:	e224      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4ab1      	ldr	r2, [pc, #708]	@ (8005e18 <UART_SetConfig+0x630>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d176      	bne.n	8005c44 <UART_SetConfig+0x45c>
 8005b56:	4bb1      	ldr	r3, [pc, #708]	@ (8005e1c <UART_SetConfig+0x634>)
 8005b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b5e:	2b28      	cmp	r3, #40	@ 0x28
 8005b60:	d86c      	bhi.n	8005c3c <UART_SetConfig+0x454>
 8005b62:	a201      	add	r2, pc, #4	@ (adr r2, 8005b68 <UART_SetConfig+0x380>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005c0d 	.word	0x08005c0d
 8005b6c:	08005c3d 	.word	0x08005c3d
 8005b70:	08005c3d 	.word	0x08005c3d
 8005b74:	08005c3d 	.word	0x08005c3d
 8005b78:	08005c3d 	.word	0x08005c3d
 8005b7c:	08005c3d 	.word	0x08005c3d
 8005b80:	08005c3d 	.word	0x08005c3d
 8005b84:	08005c3d 	.word	0x08005c3d
 8005b88:	08005c15 	.word	0x08005c15
 8005b8c:	08005c3d 	.word	0x08005c3d
 8005b90:	08005c3d 	.word	0x08005c3d
 8005b94:	08005c3d 	.word	0x08005c3d
 8005b98:	08005c3d 	.word	0x08005c3d
 8005b9c:	08005c3d 	.word	0x08005c3d
 8005ba0:	08005c3d 	.word	0x08005c3d
 8005ba4:	08005c3d 	.word	0x08005c3d
 8005ba8:	08005c1d 	.word	0x08005c1d
 8005bac:	08005c3d 	.word	0x08005c3d
 8005bb0:	08005c3d 	.word	0x08005c3d
 8005bb4:	08005c3d 	.word	0x08005c3d
 8005bb8:	08005c3d 	.word	0x08005c3d
 8005bbc:	08005c3d 	.word	0x08005c3d
 8005bc0:	08005c3d 	.word	0x08005c3d
 8005bc4:	08005c3d 	.word	0x08005c3d
 8005bc8:	08005c25 	.word	0x08005c25
 8005bcc:	08005c3d 	.word	0x08005c3d
 8005bd0:	08005c3d 	.word	0x08005c3d
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005c3d 	.word	0x08005c3d
 8005bdc:	08005c3d 	.word	0x08005c3d
 8005be0:	08005c3d 	.word	0x08005c3d
 8005be4:	08005c3d 	.word	0x08005c3d
 8005be8:	08005c2d 	.word	0x08005c2d
 8005bec:	08005c3d 	.word	0x08005c3d
 8005bf0:	08005c3d 	.word	0x08005c3d
 8005bf4:	08005c3d 	.word	0x08005c3d
 8005bf8:	08005c3d 	.word	0x08005c3d
 8005bfc:	08005c3d 	.word	0x08005c3d
 8005c00:	08005c3d 	.word	0x08005c3d
 8005c04:	08005c3d 	.word	0x08005c3d
 8005c08:	08005c35 	.word	0x08005c35
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e1c0      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c14:	2304      	movs	r3, #4
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e1bc      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c1c:	2308      	movs	r3, #8
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c22:	e1b8      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c24:	2310      	movs	r3, #16
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2a:	e1b4      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c2c:	2320      	movs	r3, #32
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c32:	e1b0      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c34:	2340      	movs	r3, #64	@ 0x40
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e1ac      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c3c:	2380      	movs	r3, #128	@ 0x80
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e1a8      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a75      	ldr	r2, [pc, #468]	@ (8005e20 <UART_SetConfig+0x638>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d130      	bne.n	8005cb0 <UART_SetConfig+0x4c8>
 8005c4e:	4b73      	ldr	r3, [pc, #460]	@ (8005e1c <UART_SetConfig+0x634>)
 8005c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	2b05      	cmp	r3, #5
 8005c58:	d826      	bhi.n	8005ca8 <UART_SetConfig+0x4c0>
 8005c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c60 <UART_SetConfig+0x478>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c79 	.word	0x08005c79
 8005c64:	08005c81 	.word	0x08005c81
 8005c68:	08005c89 	.word	0x08005c89
 8005c6c:	08005c91 	.word	0x08005c91
 8005c70:	08005c99 	.word	0x08005c99
 8005c74:	08005ca1 	.word	0x08005ca1
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e18a      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c80:	2304      	movs	r3, #4
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e186      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c88:	2308      	movs	r3, #8
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e182      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c90:	2310      	movs	r3, #16
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e17e      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005c98:	2320      	movs	r3, #32
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e17a      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005ca0:	2340      	movs	r3, #64	@ 0x40
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e176      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005ca8:	2380      	movs	r3, #128	@ 0x80
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cae:	e172      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a5b      	ldr	r2, [pc, #364]	@ (8005e24 <UART_SetConfig+0x63c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d130      	bne.n	8005d1c <UART_SetConfig+0x534>
 8005cba:	4b58      	ldr	r3, [pc, #352]	@ (8005e1c <UART_SetConfig+0x634>)
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	d826      	bhi.n	8005d14 <UART_SetConfig+0x52c>
 8005cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ccc <UART_SetConfig+0x4e4>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005ce5 	.word	0x08005ce5
 8005cd0:	08005ced 	.word	0x08005ced
 8005cd4:	08005cf5 	.word	0x08005cf5
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005d0d 	.word	0x08005d0d
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e154      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005cec:	2304      	movs	r3, #4
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e150      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e14c      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d02:	e148      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005d04:	2320      	movs	r3, #32
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e144      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005d0c:	2340      	movs	r3, #64	@ 0x40
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e140      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005d14:	2380      	movs	r3, #128	@ 0x80
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e13c      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a41      	ldr	r2, [pc, #260]	@ (8005e28 <UART_SetConfig+0x640>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	f040 8082 	bne.w	8005e2c <UART_SetConfig+0x644>
 8005d28:	4b3c      	ldr	r3, [pc, #240]	@ (8005e1c <UART_SetConfig+0x634>)
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d30:	2b28      	cmp	r3, #40	@ 0x28
 8005d32:	d86d      	bhi.n	8005e10 <UART_SetConfig+0x628>
 8005d34:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <UART_SetConfig+0x554>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005de1 	.word	0x08005de1
 8005d40:	08005e11 	.word	0x08005e11
 8005d44:	08005e11 	.word	0x08005e11
 8005d48:	08005e11 	.word	0x08005e11
 8005d4c:	08005e11 	.word	0x08005e11
 8005d50:	08005e11 	.word	0x08005e11
 8005d54:	08005e11 	.word	0x08005e11
 8005d58:	08005e11 	.word	0x08005e11
 8005d5c:	08005de9 	.word	0x08005de9
 8005d60:	08005e11 	.word	0x08005e11
 8005d64:	08005e11 	.word	0x08005e11
 8005d68:	08005e11 	.word	0x08005e11
 8005d6c:	08005e11 	.word	0x08005e11
 8005d70:	08005e11 	.word	0x08005e11
 8005d74:	08005e11 	.word	0x08005e11
 8005d78:	08005e11 	.word	0x08005e11
 8005d7c:	08005df1 	.word	0x08005df1
 8005d80:	08005e11 	.word	0x08005e11
 8005d84:	08005e11 	.word	0x08005e11
 8005d88:	08005e11 	.word	0x08005e11
 8005d8c:	08005e11 	.word	0x08005e11
 8005d90:	08005e11 	.word	0x08005e11
 8005d94:	08005e11 	.word	0x08005e11
 8005d98:	08005e11 	.word	0x08005e11
 8005d9c:	08005df9 	.word	0x08005df9
 8005da0:	08005e11 	.word	0x08005e11
 8005da4:	08005e11 	.word	0x08005e11
 8005da8:	08005e11 	.word	0x08005e11
 8005dac:	08005e11 	.word	0x08005e11
 8005db0:	08005e11 	.word	0x08005e11
 8005db4:	08005e11 	.word	0x08005e11
 8005db8:	08005e11 	.word	0x08005e11
 8005dbc:	08005e01 	.word	0x08005e01
 8005dc0:	08005e11 	.word	0x08005e11
 8005dc4:	08005e11 	.word	0x08005e11
 8005dc8:	08005e11 	.word	0x08005e11
 8005dcc:	08005e11 	.word	0x08005e11
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e11 	.word	0x08005e11
 8005dd8:	08005e11 	.word	0x08005e11
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de6:	e0d6      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005de8:	2304      	movs	r3, #4
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e0d2      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005df0:	2308      	movs	r3, #8
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e0ce      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e0ca      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005e00:	2320      	movs	r3, #32
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e0c6      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005e08:	2340      	movs	r3, #64	@ 0x40
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e0c2      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e0be      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005e18:	40011400 	.word	0x40011400
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	40007800 	.word	0x40007800
 8005e24:	40007c00 	.word	0x40007c00
 8005e28:	40011800 	.word	0x40011800
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4aad      	ldr	r2, [pc, #692]	@ (80060e8 <UART_SetConfig+0x900>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d176      	bne.n	8005f24 <UART_SetConfig+0x73c>
 8005e36:	4bad      	ldr	r3, [pc, #692]	@ (80060ec <UART_SetConfig+0x904>)
 8005e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e3e:	2b28      	cmp	r3, #40	@ 0x28
 8005e40:	d86c      	bhi.n	8005f1c <UART_SetConfig+0x734>
 8005e42:	a201      	add	r2, pc, #4	@ (adr r2, 8005e48 <UART_SetConfig+0x660>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005eed 	.word	0x08005eed
 8005e4c:	08005f1d 	.word	0x08005f1d
 8005e50:	08005f1d 	.word	0x08005f1d
 8005e54:	08005f1d 	.word	0x08005f1d
 8005e58:	08005f1d 	.word	0x08005f1d
 8005e5c:	08005f1d 	.word	0x08005f1d
 8005e60:	08005f1d 	.word	0x08005f1d
 8005e64:	08005f1d 	.word	0x08005f1d
 8005e68:	08005ef5 	.word	0x08005ef5
 8005e6c:	08005f1d 	.word	0x08005f1d
 8005e70:	08005f1d 	.word	0x08005f1d
 8005e74:	08005f1d 	.word	0x08005f1d
 8005e78:	08005f1d 	.word	0x08005f1d
 8005e7c:	08005f1d 	.word	0x08005f1d
 8005e80:	08005f1d 	.word	0x08005f1d
 8005e84:	08005f1d 	.word	0x08005f1d
 8005e88:	08005efd 	.word	0x08005efd
 8005e8c:	08005f1d 	.word	0x08005f1d
 8005e90:	08005f1d 	.word	0x08005f1d
 8005e94:	08005f1d 	.word	0x08005f1d
 8005e98:	08005f1d 	.word	0x08005f1d
 8005e9c:	08005f1d 	.word	0x08005f1d
 8005ea0:	08005f1d 	.word	0x08005f1d
 8005ea4:	08005f1d 	.word	0x08005f1d
 8005ea8:	08005f05 	.word	0x08005f05
 8005eac:	08005f1d 	.word	0x08005f1d
 8005eb0:	08005f1d 	.word	0x08005f1d
 8005eb4:	08005f1d 	.word	0x08005f1d
 8005eb8:	08005f1d 	.word	0x08005f1d
 8005ebc:	08005f1d 	.word	0x08005f1d
 8005ec0:	08005f1d 	.word	0x08005f1d
 8005ec4:	08005f1d 	.word	0x08005f1d
 8005ec8:	08005f0d 	.word	0x08005f0d
 8005ecc:	08005f1d 	.word	0x08005f1d
 8005ed0:	08005f1d 	.word	0x08005f1d
 8005ed4:	08005f1d 	.word	0x08005f1d
 8005ed8:	08005f1d 	.word	0x08005f1d
 8005edc:	08005f1d 	.word	0x08005f1d
 8005ee0:	08005f1d 	.word	0x08005f1d
 8005ee4:	08005f1d 	.word	0x08005f1d
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef2:	e050      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e04c      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f02:	e048      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e044      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f0c:	2320      	movs	r3, #32
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e040      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f14:	2340      	movs	r3, #64	@ 0x40
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e03c      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f1c:	2380      	movs	r3, #128	@ 0x80
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e038      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a71      	ldr	r2, [pc, #452]	@ (80060f0 <UART_SetConfig+0x908>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d130      	bne.n	8005f90 <UART_SetConfig+0x7a8>
 8005f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80060ec <UART_SetConfig+0x904>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b05      	cmp	r3, #5
 8005f38:	d826      	bhi.n	8005f88 <UART_SetConfig+0x7a0>
 8005f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <UART_SetConfig+0x758>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f59 	.word	0x08005f59
 8005f44:	08005f61 	.word	0x08005f61
 8005f48:	08005f69 	.word	0x08005f69
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	2302      	movs	r3, #2
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5e:	e01a      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f66:	e016      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e012      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e00e      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f78:	2320      	movs	r3, #32
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e00a      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f80:	2340      	movs	r3, #64	@ 0x40
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e006      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f88:	2380      	movs	r3, #128	@ 0x80
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e002      	b.n	8005f96 <UART_SetConfig+0x7ae>
 8005f90:	2380      	movs	r3, #128	@ 0x80
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a55      	ldr	r2, [pc, #340]	@ (80060f0 <UART_SetConfig+0x908>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	f040 80f8 	bne.w	8006192 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fa2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	dc46      	bgt.n	8006038 <UART_SetConfig+0x850>
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	db75      	blt.n	800609a <UART_SetConfig+0x8b2>
 8005fae:	3b02      	subs	r3, #2
 8005fb0:	2b1e      	cmp	r3, #30
 8005fb2:	d872      	bhi.n	800609a <UART_SetConfig+0x8b2>
 8005fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fbc <UART_SetConfig+0x7d4>)
 8005fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fba:	bf00      	nop
 8005fbc:	0800603f 	.word	0x0800603f
 8005fc0:	0800609b 	.word	0x0800609b
 8005fc4:	08006047 	.word	0x08006047
 8005fc8:	0800609b 	.word	0x0800609b
 8005fcc:	0800609b 	.word	0x0800609b
 8005fd0:	0800609b 	.word	0x0800609b
 8005fd4:	08006057 	.word	0x08006057
 8005fd8:	0800609b 	.word	0x0800609b
 8005fdc:	0800609b 	.word	0x0800609b
 8005fe0:	0800609b 	.word	0x0800609b
 8005fe4:	0800609b 	.word	0x0800609b
 8005fe8:	0800609b 	.word	0x0800609b
 8005fec:	0800609b 	.word	0x0800609b
 8005ff0:	0800609b 	.word	0x0800609b
 8005ff4:	08006067 	.word	0x08006067
 8005ff8:	0800609b 	.word	0x0800609b
 8005ffc:	0800609b 	.word	0x0800609b
 8006000:	0800609b 	.word	0x0800609b
 8006004:	0800609b 	.word	0x0800609b
 8006008:	0800609b 	.word	0x0800609b
 800600c:	0800609b 	.word	0x0800609b
 8006010:	0800609b 	.word	0x0800609b
 8006014:	0800609b 	.word	0x0800609b
 8006018:	0800609b 	.word	0x0800609b
 800601c:	0800609b 	.word	0x0800609b
 8006020:	0800609b 	.word	0x0800609b
 8006024:	0800609b 	.word	0x0800609b
 8006028:	0800609b 	.word	0x0800609b
 800602c:	0800609b 	.word	0x0800609b
 8006030:	0800609b 	.word	0x0800609b
 8006034:	0800608d 	.word	0x0800608d
 8006038:	2b40      	cmp	r3, #64	@ 0x40
 800603a:	d02a      	beq.n	8006092 <UART_SetConfig+0x8aa>
 800603c:	e02d      	b.n	800609a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800603e:	f7fe fa6f 	bl	8004520 <HAL_RCCEx_GetD3PCLK1Freq>
 8006042:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006044:	e02f      	b.n	80060a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fa7e 	bl	800454c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006054:	e027      	b.n	80060a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006056:	f107 0318 	add.w	r3, r7, #24
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fbca 	bl	80047f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006064:	e01f      	b.n	80060a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006066:	4b21      	ldr	r3, [pc, #132]	@ (80060ec <UART_SetConfig+0x904>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006072:	4b1e      	ldr	r3, [pc, #120]	@ (80060ec <UART_SetConfig+0x904>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	08db      	lsrs	r3, r3, #3
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	4a1d      	ldr	r2, [pc, #116]	@ (80060f4 <UART_SetConfig+0x90c>)
 800607e:	fa22 f303 	lsr.w	r3, r2, r3
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006084:	e00f      	b.n	80060a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006086:	4b1b      	ldr	r3, [pc, #108]	@ (80060f4 <UART_SetConfig+0x90c>)
 8006088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800608a:	e00c      	b.n	80060a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800608c:	4b1a      	ldr	r3, [pc, #104]	@ (80060f8 <UART_SetConfig+0x910>)
 800608e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006090:	e009      	b.n	80060a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006098:	e005      	b.n	80060a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80060a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 81ee 	beq.w	800648a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	4a12      	ldr	r2, [pc, #72]	@ (80060fc <UART_SetConfig+0x914>)
 80060b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060b8:	461a      	mov	r2, r3
 80060ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80060c0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	4413      	add	r3, r2
 80060cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d305      	bcc.n	80060de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060da:	429a      	cmp	r2, r3
 80060dc:	d910      	bls.n	8006100 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060e4:	e1d1      	b.n	800648a <UART_SetConfig+0xca2>
 80060e6:	bf00      	nop
 80060e8:	40011c00 	.word	0x40011c00
 80060ec:	58024400 	.word	0x58024400
 80060f0:	58000c00 	.word	0x58000c00
 80060f4:	03d09000 	.word	0x03d09000
 80060f8:	003d0900 	.word	0x003d0900
 80060fc:	08006c00 	.word	0x08006c00
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006102:	2200      	movs	r2, #0
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	60fa      	str	r2, [r7, #12]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	4ac0      	ldr	r2, [pc, #768]	@ (8006410 <UART_SetConfig+0xc28>)
 800610e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006112:	b29b      	uxth	r3, r3
 8006114:	2200      	movs	r2, #0
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800611e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006122:	f7fa f8e3 	bl	80002ec <__aeabi_uldivmod>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4610      	mov	r0, r2
 800612c:	4619      	mov	r1, r3
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	020b      	lsls	r3, r1, #8
 8006138:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800613c:	0202      	lsls	r2, r0, #8
 800613e:	6979      	ldr	r1, [r7, #20]
 8006140:	6849      	ldr	r1, [r1, #4]
 8006142:	0849      	lsrs	r1, r1, #1
 8006144:	2000      	movs	r0, #0
 8006146:	460c      	mov	r4, r1
 8006148:	4605      	mov	r5, r0
 800614a:	eb12 0804 	adds.w	r8, r2, r4
 800614e:	eb43 0905 	adc.w	r9, r3, r5
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	469a      	mov	sl, r3
 800615a:	4693      	mov	fp, r2
 800615c:	4652      	mov	r2, sl
 800615e:	465b      	mov	r3, fp
 8006160:	4640      	mov	r0, r8
 8006162:	4649      	mov	r1, r9
 8006164:	f7fa f8c2 	bl	80002ec <__aeabi_uldivmod>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4613      	mov	r3, r2
 800616e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006176:	d308      	bcc.n	800618a <UART_SetConfig+0x9a2>
 8006178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800617e:	d204      	bcs.n	800618a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006186:	60da      	str	r2, [r3, #12]
 8006188:	e17f      	b.n	800648a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006190:	e17b      	b.n	800648a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800619a:	f040 80bd 	bne.w	8006318 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800619e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	dc48      	bgt.n	8006238 <UART_SetConfig+0xa50>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	db7b      	blt.n	80062a2 <UART_SetConfig+0xaba>
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d879      	bhi.n	80062a2 <UART_SetConfig+0xaba>
 80061ae:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <UART_SetConfig+0x9cc>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	0800623f 	.word	0x0800623f
 80061b8:	08006247 	.word	0x08006247
 80061bc:	080062a3 	.word	0x080062a3
 80061c0:	080062a3 	.word	0x080062a3
 80061c4:	0800624f 	.word	0x0800624f
 80061c8:	080062a3 	.word	0x080062a3
 80061cc:	080062a3 	.word	0x080062a3
 80061d0:	080062a3 	.word	0x080062a3
 80061d4:	0800625f 	.word	0x0800625f
 80061d8:	080062a3 	.word	0x080062a3
 80061dc:	080062a3 	.word	0x080062a3
 80061e0:	080062a3 	.word	0x080062a3
 80061e4:	080062a3 	.word	0x080062a3
 80061e8:	080062a3 	.word	0x080062a3
 80061ec:	080062a3 	.word	0x080062a3
 80061f0:	080062a3 	.word	0x080062a3
 80061f4:	0800626f 	.word	0x0800626f
 80061f8:	080062a3 	.word	0x080062a3
 80061fc:	080062a3 	.word	0x080062a3
 8006200:	080062a3 	.word	0x080062a3
 8006204:	080062a3 	.word	0x080062a3
 8006208:	080062a3 	.word	0x080062a3
 800620c:	080062a3 	.word	0x080062a3
 8006210:	080062a3 	.word	0x080062a3
 8006214:	080062a3 	.word	0x080062a3
 8006218:	080062a3 	.word	0x080062a3
 800621c:	080062a3 	.word	0x080062a3
 8006220:	080062a3 	.word	0x080062a3
 8006224:	080062a3 	.word	0x080062a3
 8006228:	080062a3 	.word	0x080062a3
 800622c:	080062a3 	.word	0x080062a3
 8006230:	080062a3 	.word	0x080062a3
 8006234:	08006295 	.word	0x08006295
 8006238:	2b40      	cmp	r3, #64	@ 0x40
 800623a:	d02e      	beq.n	800629a <UART_SetConfig+0xab2>
 800623c:	e031      	b.n	80062a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800623e:	f7fc ff85 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8006242:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006244:	e033      	b.n	80062ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006246:	f7fc ff97 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 800624a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800624c:	e02f      	b.n	80062ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800624e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe f97a 	bl	800454c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800625c:	e027      	b.n	80062ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800625e:	f107 0318 	add.w	r3, r7, #24
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fac6 	bl	80047f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800626c:	e01f      	b.n	80062ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800626e:	4b69      	ldr	r3, [pc, #420]	@ (8006414 <UART_SetConfig+0xc2c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800627a:	4b66      	ldr	r3, [pc, #408]	@ (8006414 <UART_SetConfig+0xc2c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	08db      	lsrs	r3, r3, #3
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	4a64      	ldr	r2, [pc, #400]	@ (8006418 <UART_SetConfig+0xc30>)
 8006286:	fa22 f303 	lsr.w	r3, r2, r3
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800628c:	e00f      	b.n	80062ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800628e:	4b62      	ldr	r3, [pc, #392]	@ (8006418 <UART_SetConfig+0xc30>)
 8006290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006292:	e00c      	b.n	80062ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006294:	4b61      	ldr	r3, [pc, #388]	@ (800641c <UART_SetConfig+0xc34>)
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006298:	e009      	b.n	80062ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a0:	e005      	b.n	80062ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80ea 	beq.w	800648a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	4a55      	ldr	r2, [pc, #340]	@ (8006410 <UART_SetConfig+0xc28>)
 80062bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c0:	461a      	mov	r2, r3
 80062c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062c8:	005a      	lsls	r2, r3, #1
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	441a      	add	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	d916      	bls.n	8006310 <UART_SetConfig+0xb28>
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062e8:	d212      	bcs.n	8006310 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f023 030f 	bic.w	r3, r3, #15
 80062f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	b29a      	uxth	r2, r3
 8006300:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006302:	4313      	orrs	r3, r2
 8006304:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800630c:	60da      	str	r2, [r3, #12]
 800630e:	e0bc      	b.n	800648a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006316:	e0b8      	b.n	800648a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006318:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800631c:	2b20      	cmp	r3, #32
 800631e:	dc4b      	bgt.n	80063b8 <UART_SetConfig+0xbd0>
 8006320:	2b00      	cmp	r3, #0
 8006322:	f2c0 8087 	blt.w	8006434 <UART_SetConfig+0xc4c>
 8006326:	2b20      	cmp	r3, #32
 8006328:	f200 8084 	bhi.w	8006434 <UART_SetConfig+0xc4c>
 800632c:	a201      	add	r2, pc, #4	@ (adr r2, 8006334 <UART_SetConfig+0xb4c>)
 800632e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006332:	bf00      	nop
 8006334:	080063bf 	.word	0x080063bf
 8006338:	080063c7 	.word	0x080063c7
 800633c:	08006435 	.word	0x08006435
 8006340:	08006435 	.word	0x08006435
 8006344:	080063cf 	.word	0x080063cf
 8006348:	08006435 	.word	0x08006435
 800634c:	08006435 	.word	0x08006435
 8006350:	08006435 	.word	0x08006435
 8006354:	080063df 	.word	0x080063df
 8006358:	08006435 	.word	0x08006435
 800635c:	08006435 	.word	0x08006435
 8006360:	08006435 	.word	0x08006435
 8006364:	08006435 	.word	0x08006435
 8006368:	08006435 	.word	0x08006435
 800636c:	08006435 	.word	0x08006435
 8006370:	08006435 	.word	0x08006435
 8006374:	080063ef 	.word	0x080063ef
 8006378:	08006435 	.word	0x08006435
 800637c:	08006435 	.word	0x08006435
 8006380:	08006435 	.word	0x08006435
 8006384:	08006435 	.word	0x08006435
 8006388:	08006435 	.word	0x08006435
 800638c:	08006435 	.word	0x08006435
 8006390:	08006435 	.word	0x08006435
 8006394:	08006435 	.word	0x08006435
 8006398:	08006435 	.word	0x08006435
 800639c:	08006435 	.word	0x08006435
 80063a0:	08006435 	.word	0x08006435
 80063a4:	08006435 	.word	0x08006435
 80063a8:	08006435 	.word	0x08006435
 80063ac:	08006435 	.word	0x08006435
 80063b0:	08006435 	.word	0x08006435
 80063b4:	08006427 	.word	0x08006427
 80063b8:	2b40      	cmp	r3, #64	@ 0x40
 80063ba:	d037      	beq.n	800642c <UART_SetConfig+0xc44>
 80063bc:	e03a      	b.n	8006434 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063be:	f7fc fec5 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 80063c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063c4:	e03c      	b.n	8006440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c6:	f7fc fed7 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 80063ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063cc:	e038      	b.n	8006440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe f8ba 	bl	800454c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063dc:	e030      	b.n	8006440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063de:	f107 0318 	add.w	r3, r7, #24
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fa06 	bl	80047f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ec:	e028      	b.n	8006440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ee:	4b09      	ldr	r3, [pc, #36]	@ (8006414 <UART_SetConfig+0xc2c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d012      	beq.n	8006420 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063fa:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <UART_SetConfig+0xc2c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	08db      	lsrs	r3, r3, #3
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	4a04      	ldr	r2, [pc, #16]	@ (8006418 <UART_SetConfig+0xc30>)
 8006406:	fa22 f303 	lsr.w	r3, r2, r3
 800640a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800640c:	e018      	b.n	8006440 <UART_SetConfig+0xc58>
 800640e:	bf00      	nop
 8006410:	08006c00 	.word	0x08006c00
 8006414:	58024400 	.word	0x58024400
 8006418:	03d09000 	.word	0x03d09000
 800641c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006420:	4b24      	ldr	r3, [pc, #144]	@ (80064b4 <UART_SetConfig+0xccc>)
 8006422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006424:	e00c      	b.n	8006440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006426:	4b24      	ldr	r3, [pc, #144]	@ (80064b8 <UART_SetConfig+0xcd0>)
 8006428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642a:	e009      	b.n	8006440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006432:	e005      	b.n	8006440 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800643e:	bf00      	nop
    }

    if (pclk != 0U)
 8006440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d021      	beq.n	800648a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644a:	4a1c      	ldr	r2, [pc, #112]	@ (80064bc <UART_SetConfig+0xcd4>)
 800644c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006450:	461a      	mov	r2, r3
 8006452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006454:	fbb3 f2f2 	udiv	r2, r3, r2
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	085b      	lsrs	r3, r3, #1
 800645e:	441a      	add	r2, r3
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	fbb2 f3f3 	udiv	r3, r2, r3
 8006468:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	2b0f      	cmp	r3, #15
 800646e:	d909      	bls.n	8006484 <UART_SetConfig+0xc9c>
 8006470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006476:	d205      	bcs.n	8006484 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647a:	b29a      	uxth	r2, r3
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	e002      	b.n	800648a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2201      	movs	r2, #1
 800648e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2201      	movs	r2, #1
 8006496:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2200      	movs	r2, #0
 800649e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2200      	movs	r2, #0
 80064a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80064a6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3748      	adds	r7, #72	@ 0x48
 80064ae:	46bd      	mov	sp, r7
 80064b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064b4:	03d09000 	.word	0x03d09000
 80064b8:	003d0900 	.word	0x003d0900
 80064bc:	08006c00 	.word	0x08006c00

080064c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01a      	beq.n	80065d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065be:	d10a      	bne.n	80065d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]
  }
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b098      	sub	sp, #96	@ 0x60
 8006608:	af02      	add	r7, sp, #8
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006614:	f7fa fda8 	bl	8001168 <HAL_GetTick>
 8006618:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b08      	cmp	r3, #8
 8006626:	d12f      	bne.n	8006688 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006628:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006630:	2200      	movs	r2, #0
 8006632:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f88e 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d022      	beq.n	8006688 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006652:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006656:	653b      	str	r3, [r7, #80]	@ 0x50
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006660:	647b      	str	r3, [r7, #68]	@ 0x44
 8006662:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800666e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e6      	bne.n	8006642 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e063      	b.n	8006750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b04      	cmp	r3, #4
 8006694:	d149      	bne.n	800672a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006696:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800669e:	2200      	movs	r2, #0
 80066a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f857 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d03c      	beq.n	800672a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	623b      	str	r3, [r7, #32]
   return(result);
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80066d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e6      	bne.n	80066b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006702:	61fa      	str	r2, [r7, #28]
 8006704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	69b9      	ldr	r1, [r7, #24]
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	617b      	str	r3, [r7, #20]
   return(result);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e012      	b.n	8006750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3758      	adds	r7, #88	@ 0x58
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006768:	e04f      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006770:	d04b      	beq.n	800680a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006772:	f7fa fcf9 	bl	8001168 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <UART_WaitOnFlagUntilTimeout+0x30>
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e04e      	b.n	800682a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d037      	beq.n	800680a <UART_WaitOnFlagUntilTimeout+0xb2>
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2b80      	cmp	r3, #128	@ 0x80
 800679e:	d034      	beq.n	800680a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b40      	cmp	r3, #64	@ 0x40
 80067a4:	d031      	beq.n	800680a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d110      	bne.n	80067d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2208      	movs	r2, #8
 80067ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f839 	bl	8006834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2208      	movs	r2, #8
 80067c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e029      	b.n	800682a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067e4:	d111      	bne.n	800680a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f81f 	bl	8006834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e00f      	b.n	800682a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4013      	ands	r3, r2
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	429a      	cmp	r2, r3
 8006818:	bf0c      	ite	eq
 800681a:	2301      	moveq	r3, #1
 800681c:	2300      	movne	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	461a      	mov	r2, r3
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	429a      	cmp	r2, r3
 8006826:	d0a0      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b095      	sub	sp, #84	@ 0x54
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006850:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800685a:	643b      	str	r3, [r7, #64]	@ 0x40
 800685c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e6      	bne.n	800683c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3308      	adds	r3, #8
 8006874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	61fb      	str	r3, [r7, #28]
   return(result);
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	4b1e      	ldr	r3, [pc, #120]	@ (80068fc <UART_EndRxTransfer+0xc8>)
 8006882:	4013      	ands	r3, r2
 8006884:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3308      	adds	r3, #8
 800688c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800688e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006890:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e5      	bne.n	800686e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d118      	bne.n	80068dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f023 0310 	bic.w	r3, r3, #16
 80068be:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6979      	ldr	r1, [r7, #20]
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	613b      	str	r3, [r7, #16]
   return(result);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e6      	bne.n	80068aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80068f0:	bf00      	nop
 80068f2:	3754      	adds	r7, #84	@ 0x54
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	effffffe 	.word	0xeffffffe

08006900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_UARTEx_DisableFifoMode+0x16>
 8006912:	2302      	movs	r3, #2
 8006914:	e027      	b.n	8006966 <HAL_UARTEx_DisableFifoMode+0x66>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2224      	movs	r2, #36	@ 0x24
 8006922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0201 	bic.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006986:	2302      	movs	r3, #2
 8006988:	e02d      	b.n	80069e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2224      	movs	r2, #36	@ 0x24
 8006996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0201 	bic.w	r2, r2, #1
 80069b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f850 	bl	8006a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e02d      	b.n	8006a62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2224      	movs	r2, #36	@ 0x24
 8006a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f812 	bl	8006a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d108      	bne.n	8006a8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a8c:	e031      	b.n	8006af2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a8e:	2310      	movs	r3, #16
 8006a90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a92:	2310      	movs	r3, #16
 8006a94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	0e5b      	lsrs	r3, r3, #25
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	0f5b      	lsrs	r3, r3, #29
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	7b3a      	ldrb	r2, [r7, #12]
 8006aba:	4911      	ldr	r1, [pc, #68]	@ (8006b00 <UARTEx_SetNbDataToProcess+0x94>)
 8006abc:	5c8a      	ldrb	r2, [r1, r2]
 8006abe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ac2:	7b3a      	ldrb	r2, [r7, #12]
 8006ac4:	490f      	ldr	r1, [pc, #60]	@ (8006b04 <UARTEx_SetNbDataToProcess+0x98>)
 8006ac6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	7b7a      	ldrb	r2, [r7, #13]
 8006ad8:	4909      	ldr	r1, [pc, #36]	@ (8006b00 <UARTEx_SetNbDataToProcess+0x94>)
 8006ada:	5c8a      	ldrb	r2, [r1, r2]
 8006adc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ae0:	7b7a      	ldrb	r2, [r7, #13]
 8006ae2:	4908      	ldr	r1, [pc, #32]	@ (8006b04 <UARTEx_SetNbDataToProcess+0x98>)
 8006ae4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ae6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006af2:	bf00      	nop
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	08006c18 	.word	0x08006c18
 8006b04:	08006c20 	.word	0x08006c20

08006b08 <memset>:
 8006b08:	4402      	add	r2, r0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d100      	bne.n	8006b12 <memset+0xa>
 8006b10:	4770      	bx	lr
 8006b12:	f803 1b01 	strb.w	r1, [r3], #1
 8006b16:	e7f9      	b.n	8006b0c <memset+0x4>

08006b18 <__libc_init_array>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b50 <__libc_init_array+0x38>)
 8006b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b54 <__libc_init_array+0x3c>)
 8006b1e:	1b64      	subs	r4, r4, r5
 8006b20:	10a4      	asrs	r4, r4, #2
 8006b22:	2600      	movs	r6, #0
 8006b24:	42a6      	cmp	r6, r4
 8006b26:	d109      	bne.n	8006b3c <__libc_init_array+0x24>
 8006b28:	4d0b      	ldr	r5, [pc, #44]	@ (8006b58 <__libc_init_array+0x40>)
 8006b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b5c <__libc_init_array+0x44>)
 8006b2c:	f000 f826 	bl	8006b7c <_init>
 8006b30:	1b64      	subs	r4, r4, r5
 8006b32:	10a4      	asrs	r4, r4, #2
 8006b34:	2600      	movs	r6, #0
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	d105      	bne.n	8006b46 <__libc_init_array+0x2e>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b40:	4798      	blx	r3
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7ee      	b.n	8006b24 <__libc_init_array+0xc>
 8006b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4a:	4798      	blx	r3
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	e7f2      	b.n	8006b36 <__libc_init_array+0x1e>
 8006b50:	08006c30 	.word	0x08006c30
 8006b54:	08006c30 	.word	0x08006c30
 8006b58:	08006c30 	.word	0x08006c30
 8006b5c:	08006c34 	.word	0x08006c34

08006b60 <memcpy>:
 8006b60:	440a      	add	r2, r1
 8006b62:	4291      	cmp	r1, r2
 8006b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b68:	d100      	bne.n	8006b6c <memcpy+0xc>
 8006b6a:	4770      	bx	lr
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b76:	4291      	cmp	r1, r2
 8006b78:	d1f9      	bne.n	8006b6e <memcpy+0xe>
 8006b7a:	bd10      	pop	{r4, pc}

08006b7c <_init>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr

08006b88 <_fini>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr
