
VDI_Tester_V0.0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055fc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080056b8  080056b8  000066b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d0  080057d0  00007100  2**0
                  CONTENTS
  4 .ARM          00000000  080057d0  080057d0  00007100  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057d0  080057d0  00007100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d0  080057d0  000067d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057d4  080057d4  000067d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  080057d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a60  20000100  080058d8  00007100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b60  080058d8  00007b60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103fa  00000000  00000000  00007128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003195  00000000  00000000  00017522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0001a6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0f  00000000  00000000  0001b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dee8  00000000  00000000  0001c0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a6f  00000000  00000000  00039f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4a85  00000000  00000000  0004c9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  001014c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00104874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000100 	.word	0x20000100
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080056a0 	.word	0x080056a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000104 	.word	0x20000104
 8000100:	080056a0 	.word	0x080056a0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 f9c2 	bl	80005a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f808 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f89a 	bl	8000360 <MX_GPIO_Init>
  MX_USB_Device_Init();
 800022c:	f004 fe0a 	bl	8004e44 <MX_USB_Device_Init>
  MX_FDCAN2_Init();
 8000230:	f000 f84e 	bl	80002d0 <MX_FDCAN2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	e7fd      	b.n	8000234 <main+0x18>

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b095      	sub	sp, #84	@ 0x54
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	2414      	movs	r4, #20
 8000240:	193b      	adds	r3, r7, r4
 8000242:	0018      	movs	r0, r3
 8000244:	233c      	movs	r3, #60	@ 0x3c
 8000246:	001a      	movs	r2, r3
 8000248:	2100      	movs	r1, #0
 800024a:	f005 f9fc 	bl	8005646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	0018      	movs	r0, r3
 8000252:	2310      	movs	r3, #16
 8000254:	001a      	movs	r2, r3
 8000256:	2100      	movs	r1, #0
 8000258:	f005 f9f5 	bl	8005646 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025c:	2380      	movs	r3, #128	@ 0x80
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	0018      	movs	r0, r3
 8000262:	f001 f9c7 	bl	80015f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000266:	193b      	adds	r3, r7, r4
 8000268:	2222      	movs	r2, #34	@ 0x22
 800026a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	193b      	adds	r3, r7, r4
 800026e:	2280      	movs	r2, #128	@ 0x80
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000274:	193b      	adds	r3, r7, r4
 8000276:	2280      	movs	r2, #128	@ 0x80
 8000278:	03d2      	lsls	r2, r2, #15
 800027a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2200      	movs	r2, #0
 8000280:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2240      	movs	r2, #64	@ 0x40
 8000286:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2200      	movs	r2, #0
 800028c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	193b      	adds	r3, r7, r4
 8000290:	0018      	movs	r0, r3
 8000292:	f001 f9ef 	bl	8001674 <HAL_RCC_OscConfig>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029a:	f000 f8a5 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2207      	movs	r2, #7
 80002a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2100      	movs	r1, #0
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 fd3a 	bl	8001d34 <HAL_RCC_ClockConfig>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002c4:	f000 f890 	bl	80003e8 <Error_Handler>
  }
}
 80002c8:	46c0      	nop			@ (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b015      	add	sp, #84	@ 0x54
 80002ce:	bd90      	pop	{r4, r7, pc}

080002d0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80002d4:	4b20      	ldr	r3, [pc, #128]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 80002d6:	4a21      	ldr	r2, [pc, #132]	@ (800035c <MX_FDCAN2_Init+0x8c>)
 80002d8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002da:	4b1f      	ldr	r3, [pc, #124]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 80002dc:	2200      	movs	r2, #0
 80002de:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80002e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80002ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80002f2:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80002f8:	4b17      	ldr	r3, [pc, #92]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80002fe:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 8000300:	2210      	movs	r2, #16
 8000302:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000304:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 8000306:	2201      	movs	r2, #1
 8000308:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800030a:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 800030c:	2202      	movs	r2, #2
 800030e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 8000312:	2202      	movs	r2, #2
 8000314:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 8000318:	2201      	movs	r2, #1
 800031a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800031c:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 800031e:	2201      	movs	r2, #1
 8000320:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000322:	4b0d      	ldr	r3, [pc, #52]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 8000324:	2201      	movs	r2, #1
 8000326:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000328:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 800032a:	2201      	movs	r2, #1
 800032c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800032e:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 8000330:	2200      	movs	r2, #0
 8000332:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000334:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 8000336:	2200      	movs	r2, #0
 8000338:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800033a:	4b07      	ldr	r3, [pc, #28]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 800033c:	2200      	movs	r2, #0
 800033e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <MX_FDCAN2_Init+0x88>)
 8000342:	0018      	movs	r0, r3
 8000344:	f000 faaa 	bl	800089c <HAL_FDCAN_Init>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800034c:	f000 f84c 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	46c0      	nop			@ (mov r8, r8)
 8000358:	2000011c 	.word	0x2000011c
 800035c:	40006800 	.word	0x40006800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b089      	sub	sp, #36	@ 0x24
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	240c      	movs	r4, #12
 8000368:	193b      	adds	r3, r7, r4
 800036a:	0018      	movs	r0, r3
 800036c:	2314      	movs	r3, #20
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f005 f968 	bl	8005646 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b1b      	ldr	r3, [pc, #108]	@ (80003e4 <MX_GPIO_Init+0x84>)
 8000378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800037a:	4b1a      	ldr	r3, [pc, #104]	@ (80003e4 <MX_GPIO_Init+0x84>)
 800037c:	2101      	movs	r1, #1
 800037e:	430a      	orrs	r2, r1
 8000380:	635a      	str	r2, [r3, #52]	@ 0x34
 8000382:	4b18      	ldr	r3, [pc, #96]	@ (80003e4 <MX_GPIO_Init+0x84>)
 8000384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000386:	2201      	movs	r2, #1
 8000388:	4013      	ands	r3, r2
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038e:	4b15      	ldr	r3, [pc, #84]	@ (80003e4 <MX_GPIO_Init+0x84>)
 8000390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000392:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <MX_GPIO_Init+0x84>)
 8000394:	2102      	movs	r1, #2
 8000396:	430a      	orrs	r2, r1
 8000398:	635a      	str	r2, [r3, #52]	@ 0x34
 800039a:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <MX_GPIO_Init+0x84>)
 800039c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800039e:	2202      	movs	r2, #2
 80003a0:	4013      	ands	r3, r2
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80003a6:	23a0      	movs	r3, #160	@ 0xa0
 80003a8:	05db      	lsls	r3, r3, #23
 80003aa:	2200      	movs	r2, #0
 80003ac:	213c      	movs	r1, #60	@ 0x3c
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 fdb2 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80003b4:	0021      	movs	r1, r4
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	223c      	movs	r2, #60	@ 0x3c
 80003ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2201      	movs	r2, #1
 80003c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	187a      	adds	r2, r7, r1
 80003d0:	23a0      	movs	r3, #160	@ 0xa0
 80003d2:	05db      	lsls	r3, r3, #23
 80003d4:	0011      	movs	r1, r2
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 fc32 	bl	8000c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003dc:	46c0      	nop			@ (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b009      	add	sp, #36	@ 0x24
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	40021000 	.word	0x40021000

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	46c0      	nop			@ (mov r8, r8)
 80003f2:	e7fd      	b.n	80003f0 <Error_Handler+0x8>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <HAL_MspInit+0x5c>)
 80003fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003fe:	4b14      	ldr	r3, [pc, #80]	@ (8000450 <HAL_MspInit+0x5c>)
 8000400:	2101      	movs	r1, #1
 8000402:	430a      	orrs	r2, r1
 8000404:	641a      	str	r2, [r3, #64]	@ 0x40
 8000406:	4b12      	ldr	r3, [pc, #72]	@ (8000450 <HAL_MspInit+0x5c>)
 8000408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800040a:	2201      	movs	r2, #1
 800040c:	4013      	ands	r3, r2
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <HAL_MspInit+0x5c>)
 8000414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000416:	4b0e      	ldr	r3, [pc, #56]	@ (8000450 <HAL_MspInit+0x5c>)
 8000418:	2180      	movs	r1, #128	@ 0x80
 800041a:	0549      	lsls	r1, r1, #21
 800041c:	430a      	orrs	r2, r1
 800041e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000420:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <HAL_MspInit+0x5c>)
 8000422:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000424:	2380      	movs	r3, #128	@ 0x80
 8000426:	055b      	lsls	r3, r3, #21
 8000428:	4013      	ands	r3, r2
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	2100      	movs	r1, #0
 8000432:	2004      	movs	r0, #4
 8000434:	f000 fa00 	bl	8000838 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8000438:	2004      	movs	r0, #4
 800043a:	f000 fa12 	bl	8000862 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800043e:	2380      	movs	r3, #128	@ 0x80
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	0018      	movs	r0, r3
 8000444:	f000 f936 	bl	80006b4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000448:	46c0      	nop			@ (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000

08000454 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b09d      	sub	sp, #116	@ 0x74
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	235c      	movs	r3, #92	@ 0x5c
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	0018      	movs	r0, r3
 8000462:	2314      	movs	r3, #20
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f005 f8ed 	bl	8005646 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800046c:	2410      	movs	r4, #16
 800046e:	193b      	adds	r3, r7, r4
 8000470:	0018      	movs	r0, r3
 8000472:	234c      	movs	r3, #76	@ 0x4c
 8000474:	001a      	movs	r2, r3
 8000476:	2100      	movs	r1, #0
 8000478:	f005 f8e5 	bl	8005646 <memset>
  if(hfdcan->Instance==FDCAN2)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a22      	ldr	r2, [pc, #136]	@ (800050c <HAL_FDCAN_MspInit+0xb8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d13e      	bne.n	8000504 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2280      	movs	r2, #128	@ 0x80
 800048a:	0492      	lsls	r2, r2, #18
 800048c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2200      	movs	r2, #0
 8000492:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	f001 fdd6 	bl	8002048 <HAL_RCCEx_PeriphCLKConfig>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80004a0:	f7ff ffa2 	bl	80003e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80004a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000510 <HAL_FDCAN_MspInit+0xbc>)
 80004a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004a8:	4b19      	ldr	r3, [pc, #100]	@ (8000510 <HAL_FDCAN_MspInit+0xbc>)
 80004aa:	2180      	movs	r1, #128	@ 0x80
 80004ac:	0149      	lsls	r1, r1, #5
 80004ae:	430a      	orrs	r2, r1
 80004b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004b2:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <HAL_FDCAN_MspInit+0xbc>)
 80004b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004b6:	2380      	movs	r3, #128	@ 0x80
 80004b8:	015b      	lsls	r3, r3, #5
 80004ba:	4013      	ands	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <HAL_FDCAN_MspInit+0xbc>)
 80004c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004c4:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <HAL_FDCAN_MspInit+0xbc>)
 80004c6:	2102      	movs	r1, #2
 80004c8:	430a      	orrs	r2, r1
 80004ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <HAL_FDCAN_MspInit+0xbc>)
 80004ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004d0:	2202      	movs	r2, #2
 80004d2:	4013      	ands	r3, r2
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004d8:	215c      	movs	r1, #92	@ 0x5c
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2203      	movs	r2, #3
 80004de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2202      	movs	r2, #2
 80004e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2203      	movs	r2, #3
 80004f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	4a06      	ldr	r2, [pc, #24]	@ (8000514 <HAL_FDCAN_MspInit+0xc0>)
 80004fc:	0019      	movs	r1, r3
 80004fe:	0010      	movs	r0, r2
 8000500:	f000 fb9e 	bl	8000c40 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b01d      	add	sp, #116	@ 0x74
 800050a:	bd90      	pop	{r4, r7, pc}
 800050c:	40006800 	.word	0x40006800
 8000510:	40021000 	.word	0x40021000
 8000514:	50000400 	.word	0x50000400

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	e7fd      	b.n	800051c <NMI_Handler+0x4>

08000520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	e7fd      	b.n	8000524 <HardFault_Handler+0x4>

08000528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000540:	f000 f89c 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000554:	480d      	ldr	r0, [pc, #52]	@ (800058c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000556:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000558:	f7ff fff7 	bl	800054a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480c      	ldr	r0, [pc, #48]	@ (8000590 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490d      	ldr	r1, [pc, #52]	@ (8000594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0a      	ldr	r2, [pc, #40]	@ (800059c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0a      	ldr	r4, [pc, #40]	@ (80005a0 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000582:	f005 f869 	bl	8005658 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000586:	f7ff fe49 	bl	800021c <main>

0800058a <LoopForever>:

LoopForever:
  b LoopForever
 800058a:	e7fe      	b.n	800058a <LoopForever>
  ldr   r0, =_estack
 800058c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000598:	080057d8 	.word	0x080057d8
  ldr r2, =_sbss
 800059c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80005a0:	20001b60 	.word	0x20001b60

080005a4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC1_COMP_IRQHandler>
	...

080005a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <HAL_Init+0x3c>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <HAL_Init+0x3c>)
 80005ba:	2180      	movs	r1, #128	@ 0x80
 80005bc:	0049      	lsls	r1, r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 f810 	bl	80005e8 <HAL_InitTick>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d003      	beq.n	80005d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e001      	b.n	80005d8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f7ff ff0e 	bl	80003f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	781b      	ldrb	r3, [r3, #0]
}
 80005dc:	0018      	movs	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	b002      	add	sp, #8
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40022000 	.word	0x40022000

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005f0:	230f      	movs	r3, #15
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <HAL_InitTick+0x88>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d02b      	beq.n	8000658 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <HAL_InitTick+0x8c>)
 8000602:	681c      	ldr	r4, [r3, #0]
 8000604:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <HAL_InitTick+0x88>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	0019      	movs	r1, r3
 800060a:	23fa      	movs	r3, #250	@ 0xfa
 800060c:	0098      	lsls	r0, r3, #2
 800060e:	f7ff fd79 	bl	8000104 <__udivsi3>
 8000612:	0003      	movs	r3, r0
 8000614:	0019      	movs	r1, r3
 8000616:	0020      	movs	r0, r4
 8000618:	f7ff fd74 	bl	8000104 <__udivsi3>
 800061c:	0003      	movs	r3, r0
 800061e:	0018      	movs	r0, r3
 8000620:	f000 f92f 	bl	8000882 <HAL_SYSTICK_Config>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d112      	bne.n	800064e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d80a      	bhi.n	8000644 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	2301      	movs	r3, #1
 8000632:	425b      	negs	r3, r3
 8000634:	2200      	movs	r2, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f000 f8fe 	bl	8000838 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063c:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <HAL_InitTick+0x90>)
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e00d      	b.n	8000660 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000644:	230f      	movs	r3, #15
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	e008      	b.n	8000660 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800064e:	230f      	movs	r3, #15
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e003      	b.n	8000660 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000658:	230f      	movs	r3, #15
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000660:	230f      	movs	r3, #15
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	781b      	ldrb	r3, [r3, #0]
}
 8000666:	0018      	movs	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	b005      	add	sp, #20
 800066c:	bd90      	pop	{r4, r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000008 	.word	0x20000008
 8000674:	20000000 	.word	0x20000000
 8000678:	20000004 	.word	0x20000004

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HAL_IncTick+0x1c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	001a      	movs	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	@ (800069c <HAL_IncTick+0x20>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	18d2      	adds	r2, r2, r3
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <HAL_IncTick+0x20>)
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	20000008 	.word	0x20000008
 800069c:	20000180 	.word	0x20000180

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	@ (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	20000180 	.word	0x20000180

080006b4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a06      	ldr	r2, [pc, #24]	@ (80006dc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80006c2:	4013      	ands	r3, r2
 80006c4:	0019      	movs	r1, r3
 80006c6:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	40010000 	.word	0x40010000
 80006dc:	fffff9ff 	.word	0xfffff9ff

080006e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80006f2:	d809      	bhi.n	8000708 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	231f      	movs	r3, #31
 80006fc:	401a      	ands	r2, r3
 80006fe:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <__NVIC_EnableIRQ+0x30>)
 8000700:	2101      	movs	r1, #1
 8000702:	4091      	lsls	r1, r2
 8000704:	000a      	movs	r2, r1
 8000706:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b002      	add	sp, #8
 800070e:	bd80      	pop	{r7, pc}
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	0002      	movs	r2, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b7f      	cmp	r3, #127	@ 0x7f
 8000728:	d828      	bhi.n	800077c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800072a:	4a2f      	ldr	r2, [pc, #188]	@ (80007e8 <__NVIC_SetPriority+0xd4>)
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b25b      	sxtb	r3, r3
 8000732:	089b      	lsrs	r3, r3, #2
 8000734:	33c0      	adds	r3, #192	@ 0xc0
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	589b      	ldr	r3, [r3, r2]
 800073a:	1dfa      	adds	r2, r7, #7
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	0011      	movs	r1, r2
 8000740:	2203      	movs	r2, #3
 8000742:	400a      	ands	r2, r1
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	21ff      	movs	r1, #255	@ 0xff
 8000748:	4091      	lsls	r1, r2
 800074a:	000a      	movs	r2, r1
 800074c:	43d2      	mvns	r2, r2
 800074e:	401a      	ands	r2, r3
 8000750:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	019b      	lsls	r3, r3, #6
 8000756:	22ff      	movs	r2, #255	@ 0xff
 8000758:	401a      	ands	r2, r3
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	0018      	movs	r0, r3
 8000760:	2303      	movs	r3, #3
 8000762:	4003      	ands	r3, r0
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000768:	481f      	ldr	r0, [pc, #124]	@ (80007e8 <__NVIC_SetPriority+0xd4>)
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b25b      	sxtb	r3, r3
 8000770:	089b      	lsrs	r3, r3, #2
 8000772:	430a      	orrs	r2, r1
 8000774:	33c0      	adds	r3, #192	@ 0xc0
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800077a:	e031      	b.n	80007e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <__NVIC_SetPriority+0xd8>)
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	0019      	movs	r1, r3
 8000784:	230f      	movs	r3, #15
 8000786:	400b      	ands	r3, r1
 8000788:	3b08      	subs	r3, #8
 800078a:	089b      	lsrs	r3, r3, #2
 800078c:	3306      	adds	r3, #6
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	18d3      	adds	r3, r2, r3
 8000792:	3304      	adds	r3, #4
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	1dfa      	adds	r2, r7, #7
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	0011      	movs	r1, r2
 800079c:	2203      	movs	r2, #3
 800079e:	400a      	ands	r2, r1
 80007a0:	00d2      	lsls	r2, r2, #3
 80007a2:	21ff      	movs	r1, #255	@ 0xff
 80007a4:	4091      	lsls	r1, r2
 80007a6:	000a      	movs	r2, r1
 80007a8:	43d2      	mvns	r2, r2
 80007aa:	401a      	ands	r2, r3
 80007ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	22ff      	movs	r2, #255	@ 0xff
 80007b4:	401a      	ands	r2, r3
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	0018      	movs	r0, r3
 80007bc:	2303      	movs	r3, #3
 80007be:	4003      	ands	r3, r0
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c4:	4809      	ldr	r0, [pc, #36]	@ (80007ec <__NVIC_SetPriority+0xd8>)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	001c      	movs	r4, r3
 80007cc:	230f      	movs	r3, #15
 80007ce:	4023      	ands	r3, r4
 80007d0:	3b08      	subs	r3, #8
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	430a      	orrs	r2, r1
 80007d6:	3306      	adds	r3, #6
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	18c3      	adds	r3, r0, r3
 80007dc:	3304      	adds	r3, #4
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b003      	add	sp, #12
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	2380      	movs	r3, #128	@ 0x80
 80007fe:	045b      	lsls	r3, r3, #17
 8000800:	429a      	cmp	r2, r3
 8000802:	d301      	bcc.n	8000808 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000804:	2301      	movs	r3, #1
 8000806:	e010      	b.n	800082a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000808:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <SysTick_Config+0x44>)
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	3a01      	subs	r2, #1
 800080e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000810:	2301      	movs	r3, #1
 8000812:	425b      	negs	r3, r3
 8000814:	2103      	movs	r1, #3
 8000816:	0018      	movs	r0, r3
 8000818:	f7ff ff7c 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <SysTick_Config+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <SysTick_Config+0x44>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	0018      	movs	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	210f      	movs	r1, #15
 8000844:	187b      	adds	r3, r7, r1
 8000846:	1c02      	adds	r2, r0, #0
 8000848:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	187b      	adds	r3, r7, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <__NVIC_SetPriority>
}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b004      	add	sp, #16
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	0002      	movs	r2, r0
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b25b      	sxtb	r3, r3
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff ff33 	bl	80006e0 <__NVIC_EnableIRQ>
}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff ffaf 	bl	80007f0 <SysTick_Config>
 8000892:	0003      	movs	r3, r0
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e14e      	b.n	8000b4c <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	225c      	movs	r2, #92	@ 0x5c
 80008b2:	5c9b      	ldrb	r3, [r3, r2]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d107      	bne.n	80008ca <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	225d      	movs	r2, #93	@ 0x5d
 80008be:	2100      	movs	r1, #0
 80008c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff fdc5 	bl	8000454 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	699a      	ldr	r2, [r3, #24]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2110      	movs	r1, #16
 80008d6:	438a      	bics	r2, r1
 80008d8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008da:	f7ff fee1 	bl	80006a0 <HAL_GetTick>
 80008de:	0003      	movs	r3, r0
 80008e0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80008e2:	e012      	b.n	800090a <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80008e4:	f7ff fedc 	bl	80006a0 <HAL_GetTick>
 80008e8:	0002      	movs	r2, r0
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	2b0a      	cmp	r3, #10
 80008f0:	d90b      	bls.n	800090a <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f6:	2201      	movs	r2, #1
 80008f8:	431a      	orrs	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	225c      	movs	r2, #92	@ 0x5c
 8000902:	2103      	movs	r1, #3
 8000904:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e120      	b.n	8000b4c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	2208      	movs	r2, #8
 8000912:	4013      	ands	r3, r2
 8000914:	2b08      	cmp	r3, #8
 8000916:	d0e5      	beq.n	80008e4 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	699a      	ldr	r2, [r3, #24]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2101      	movs	r1, #1
 8000924:	430a      	orrs	r2, r1
 8000926:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000928:	f7ff feba 	bl	80006a0 <HAL_GetTick>
 800092c:	0003      	movs	r3, r0
 800092e:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000930:	e012      	b.n	8000958 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000932:	f7ff feb5 	bl	80006a0 <HAL_GetTick>
 8000936:	0002      	movs	r2, r0
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	2b0a      	cmp	r3, #10
 800093e:	d90b      	bls.n	8000958 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000944:	2201      	movs	r2, #1
 8000946:	431a      	orrs	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	225c      	movs	r2, #92	@ 0x5c
 8000950:	2103      	movs	r1, #3
 8000952:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	e0f9      	b.n	8000b4c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	2201      	movs	r2, #1
 8000960:	4013      	ands	r3, r2
 8000962:	d0e6      	beq.n	8000932 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2102      	movs	r1, #2
 8000970:	430a      	orrs	r2, r1
 8000972:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a76      	ldr	r2, [pc, #472]	@ (8000b54 <HAL_FDCAN_Init+0x2b8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d103      	bne.n	8000986 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800097e:	4a76      	ldr	r2, [pc, #472]	@ (8000b58 <HAL_FDCAN_Init+0x2bc>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	7c1b      	ldrb	r3, [r3, #16]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d108      	bne.n	80009a0 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	699a      	ldr	r2, [r3, #24]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2140      	movs	r1, #64	@ 0x40
 800099a:	438a      	bics	r2, r1
 800099c:	619a      	str	r2, [r3, #24]
 800099e:	e007      	b.n	80009b0 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	699a      	ldr	r2, [r3, #24]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2140      	movs	r1, #64	@ 0x40
 80009ac:	430a      	orrs	r2, r1
 80009ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7c5b      	ldrb	r3, [r3, #17]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d109      	bne.n	80009cc <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	699a      	ldr	r2, [r3, #24]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2180      	movs	r1, #128	@ 0x80
 80009c4:	01c9      	lsls	r1, r1, #7
 80009c6:	430a      	orrs	r2, r1
 80009c8:	619a      	str	r2, [r3, #24]
 80009ca:	e007      	b.n	80009dc <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	699a      	ldr	r2, [r3, #24]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4961      	ldr	r1, [pc, #388]	@ (8000b5c <HAL_FDCAN_Init+0x2c0>)
 80009d8:	400a      	ands	r2, r1
 80009da:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7c9b      	ldrb	r3, [r3, #18]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d108      	bne.n	80009f6 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	495c      	ldr	r1, [pc, #368]	@ (8000b60 <HAL_FDCAN_Init+0x2c4>)
 80009f0:	400a      	ands	r2, r1
 80009f2:	619a      	str	r2, [r3, #24]
 80009f4:	e008      	b.n	8000a08 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	699a      	ldr	r2, [r3, #24]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2180      	movs	r1, #128	@ 0x80
 8000a02:	0149      	lsls	r1, r1, #5
 8000a04:	430a      	orrs	r2, r1
 8000a06:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a55      	ldr	r2, [pc, #340]	@ (8000b64 <HAL_FDCAN_Init+0x2c8>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	0019      	movs	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	699a      	ldr	r2, [r3, #24]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	21a4      	movs	r1, #164	@ 0xa4
 8000a2c:	438a      	bics	r2, r1
 8000a2e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	691a      	ldr	r2, [r3, #16]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	438a      	bics	r2, r1
 8000a3e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d108      	bne.n	8000a5a <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	699a      	ldr	r2, [r3, #24]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2104      	movs	r1, #4
 8000a54:	430a      	orrs	r2, r1
 8000a56:	619a      	str	r2, [r3, #24]
 8000a58:	e02c      	b.n	8000ab4 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d028      	beq.n	8000ab4 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d01c      	beq.n	8000aa4 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	699a      	ldr	r2, [r3, #24]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	430a      	orrs	r2, r1
 8000a78:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	691a      	ldr	r2, [r3, #16]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2110      	movs	r1, #16
 8000a86:	430a      	orrs	r2, r1
 8000a88:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d110      	bne.n	8000ab4 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	699a      	ldr	r2, [r3, #24]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	619a      	str	r2, [r3, #24]
 8000aa2:	e007      	b.n	8000ab4 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	699a      	ldr	r2, [r3, #24]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2120      	movs	r1, #32
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ac4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a1b      	ldr	r3, [r3, #32]
 8000aca:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000acc:	431a      	orrs	r2, r3
 8000ace:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000adc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ade:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689a      	ldr	r2, [r3, #8]
 8000ae4:	23c0      	movs	r3, #192	@ 0xc0
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d115      	bne.n	8000b18 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000af6:	3b01      	subs	r3, #1
 8000af8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000afa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b00:	3b01      	subs	r3, #1
 8000b02:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b04:	431a      	orrs	r2, r3
 8000b06:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b14:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b16:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	22c0      	movs	r2, #192	@ 0xc0
 8000b1e:	5899      	ldr	r1, [r3, r2]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	21c0      	movs	r1, #192	@ 0xc0
 8000b2c:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 f819 	bl	8000b68 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	225c      	movs	r2, #92	@ 0x5c
 8000b46:	2101      	movs	r1, #1
 8000b48:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b004      	add	sp, #16
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40006400 	.word	0x40006400
 8000b58:	40006500 	.word	0x40006500
 8000b5c:	ffffbfff 	.word	0xffffbfff
 8000b60:	ffffefff 	.word	0xffffefff
 8000b64:	fffffcff 	.word	0xfffffcff

08000b68 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000b70:	4b2f      	ldr	r3, [pc, #188]	@ (8000c30 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8000b72:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a2e      	ldr	r2, [pc, #184]	@ (8000c34 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d105      	bne.n	8000b8a <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	22d4      	movs	r2, #212	@ 0xd4
 8000b82:	0092      	lsls	r2, r2, #2
 8000b84:	4694      	mov	ip, r2
 8000b86:	4463      	add	r3, ip
 8000b88:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2280      	movs	r2, #128	@ 0x80
 8000b96:	589b      	ldr	r3, [r3, r2]
 8000b98:	4a27      	ldr	r2, [pc, #156]	@ (8000c38 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba2:	041a      	lsls	r2, r3, #16
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	2180      	movs	r1, #128	@ 0x80
 8000bac:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	3370      	adds	r3, #112	@ 0x70
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	589b      	ldr	r3, [r3, r2]
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c3c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bca:	061a      	lsls	r2, r3, #24
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	2180      	movs	r1, #128	@ 0x80
 8000bd4:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	33b0      	adds	r3, #176	@ 0xb0
 8000bda:	001a      	movs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3389      	adds	r3, #137	@ 0x89
 8000be4:	33ff      	adds	r3, #255	@ 0xff
 8000be6:	001a      	movs	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	2298      	movs	r2, #152	@ 0x98
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	189a      	adds	r2, r3, r2
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	229e      	movs	r2, #158	@ 0x9e
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	189a      	adds	r2, r3, r2
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e005      	b.n	8000c16 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3304      	adds	r3, #4
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	22d4      	movs	r2, #212	@ 0xd4
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	4463      	add	r3, ip
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d3f1      	bcc.n	8000c0a <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b004      	add	sp, #16
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	4000b400 	.word	0x4000b400
 8000c34:	40006800 	.word	0x40006800
 8000c38:	ffe0ffff 	.word	0xffe0ffff
 8000c3c:	f0ffffff 	.word	0xf0ffffff

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4e:	e14d      	b.n	8000eec <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d100      	bne.n	8000c68 <HAL_GPIO_Init+0x28>
 8000c66:	e13e      	b.n	8000ee6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	4013      	ands	r3, r2
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d005      	beq.n	8000c80 <HAL_GPIO_Init+0x40>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	0013      	movs	r3, r2
 8000c90:	43da      	mvns	r2, r3
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	0013      	movs	r3, r2
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	2201      	movs	r2, #1
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d017      	beq.n	8000d1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2203      	movs	r2, #3
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d123      	bne.n	8000d72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	58d3      	ldr	r3, [r2, r3]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	2107      	movs	r1, #7
 8000d56:	400b      	ands	r3, r1
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	0092      	lsls	r2, r2, #2
 8000d6e:	6939      	ldr	r1, [r7, #16]
 8000d70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	43da      	mvns	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2203      	movs	r2, #3
 8000d90:	401a      	ands	r2, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	23c0      	movs	r3, #192	@ 0xc0
 8000dac:	029b      	lsls	r3, r3, #10
 8000dae:	4013      	ands	r3, r2
 8000db0:	d100      	bne.n	8000db4 <HAL_GPIO_Init+0x174>
 8000db2:	e098      	b.n	8000ee6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000db4:	4a53      	ldr	r2, [pc, #332]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3318      	adds	r3, #24
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	589b      	ldr	r3, [r3, r2]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	220f      	movs	r2, #15
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	43da      	mvns	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	23a0      	movs	r3, #160	@ 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d019      	beq.n	8000e16 <HAL_GPIO_Init+0x1d6>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a48      	ldr	r2, [pc, #288]	@ (8000f08 <HAL_GPIO_Init+0x2c8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0x1d2>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a47      	ldr	r2, [pc, #284]	@ (8000f0c <HAL_GPIO_Init+0x2cc>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00d      	beq.n	8000e0e <HAL_GPIO_Init+0x1ce>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a46      	ldr	r2, [pc, #280]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d007      	beq.n	8000e0a <HAL_GPIO_Init+0x1ca>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a45      	ldr	r2, [pc, #276]	@ (8000f14 <HAL_GPIO_Init+0x2d4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_GPIO_Init+0x1c6>
 8000e02:	2304      	movs	r3, #4
 8000e04:	e008      	b.n	8000e18 <HAL_GPIO_Init+0x1d8>
 8000e06:	2305      	movs	r3, #5
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x1d8>
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e004      	b.n	8000e18 <HAL_GPIO_Init+0x1d8>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_Init+0x1d8>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <HAL_GPIO_Init+0x1d8>
 8000e16:	2300      	movs	r3, #0
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	00d2      	lsls	r2, r2, #3
 8000e20:	4093      	lsls	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e28:	4936      	ldr	r1, [pc, #216]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3318      	adds	r3, #24
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e36:	4b33      	ldr	r3, [pc, #204]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	035b      	lsls	r3, r3, #13
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	039b      	lsls	r3, r3, #14
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000e8c:	2384      	movs	r3, #132	@ 0x84
 8000e8e:	58d3      	ldr	r3, [r2, r3]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43da      	mvns	r2, r3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	029b      	lsls	r3, r3, #10
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eb0:	4914      	ldr	r1, [pc, #80]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000eb2:	2284      	movs	r2, #132	@ 0x84
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000eb8:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000eba:	2380      	movs	r3, #128	@ 0x80
 8000ebc:	58d3      	ldr	r3, [r2, r3]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	2380      	movs	r3, #128	@ 0x80
 8000ed0:	025b      	lsls	r3, r3, #9
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ede:	4909      	ldr	r1, [pc, #36]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000ee0:	2280      	movs	r2, #128	@ 0x80
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	40da      	lsrs	r2, r3
 8000ef4:	1e13      	subs	r3, r2, #0
 8000ef6:	d000      	beq.n	8000efa <HAL_GPIO_Init+0x2ba>
 8000ef8:	e6aa      	b.n	8000c50 <HAL_GPIO_Init+0x10>
  }
}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b006      	add	sp, #24
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021800 	.word	0x40021800
 8000f08:	50000400 	.word	0x50000400
 8000f0c:	50000800 	.word	0x50000800
 8000f10:	50000c00 	.word	0x50000c00
 8000f14:	50001000 	.word	0x50001000

08000f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	0008      	movs	r0, r1
 8000f22:	0011      	movs	r1, r2
 8000f24:	1cbb      	adds	r3, r7, #2
 8000f26:	1c02      	adds	r2, r0, #0
 8000f28:	801a      	strh	r2, [r3, #0]
 8000f2a:	1c7b      	adds	r3, r7, #1
 8000f2c:	1c0a      	adds	r2, r1, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f30:	1c7b      	adds	r3, r7, #1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d004      	beq.n	8000f42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f38:	1cbb      	adds	r3, r7, #2
 8000f3a:	881a      	ldrh	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f40:	e003      	b.n	8000f4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f42:	1cbb      	adds	r3, r7, #2
 8000f44:	881a      	ldrh	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e0ea      	b.n	800113c <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a76      	ldr	r2, [pc, #472]	@ (8001144 <HAL_PCD_Init+0x1f0>)
 8000f6a:	5c9b      	ldrb	r3, [r3, r2]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d108      	bne.n	8000f84 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	23a5      	movs	r3, #165	@ 0xa5
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	2100      	movs	r1, #0
 8000f7a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f004 f924 	bl	80051cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a6f      	ldr	r2, [pc, #444]	@ (8001144 <HAL_PCD_Init+0x1f0>)
 8000f88:	2103      	movs	r1, #3
 8000f8a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 faa9 	bl	80024e8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f96:	230f      	movs	r3, #15
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e049      	b.n	8001034 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fa0:	200f      	movs	r0, #15
 8000fa2:	183b      	adds	r3, r7, r0
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	0013      	movs	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	189b      	adds	r3, r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	18cb      	adds	r3, r1, r3
 8000fb2:	3315      	adds	r3, #21
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fb8:	183b      	adds	r3, r7, r0
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	18cb      	adds	r3, r1, r3
 8000fc8:	3314      	adds	r3, #20
 8000fca:	183a      	adds	r2, r7, r0
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fd0:	183b      	adds	r3, r7, r0
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	189b      	adds	r3, r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	18cb      	adds	r3, r1, r3
 8000fe0:	3317      	adds	r3, #23
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fe6:	183b      	adds	r3, r7, r0
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	0013      	movs	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	189b      	adds	r3, r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	18cb      	adds	r3, r1, r3
 8000ff6:	3324      	adds	r3, #36	@ 0x24
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ffc:	183b      	adds	r3, r7, r0
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	0013      	movs	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	189b      	adds	r3, r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	18cb      	adds	r3, r1, r3
 800100c:	3328      	adds	r3, #40	@ 0x28
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001012:	183b      	adds	r3, r7, r0
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	0013      	movs	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	189b      	adds	r3, r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	18cb      	adds	r3, r1, r3
 8001024:	3304      	adds	r3, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102a:	183b      	adds	r3, r7, r0
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	183b      	adds	r3, r7, r0
 8001030:	3201      	adds	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	210f      	movs	r1, #15
 800103a:	187a      	adds	r2, r7, r1
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d3ae      	bcc.n	8000fa0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e056      	b.n	80010f8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800104a:	240f      	movs	r4, #15
 800104c:	193b      	adds	r3, r7, r4
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	2356      	movs	r3, #86	@ 0x56
 8001054:	33ff      	adds	r3, #255	@ 0xff
 8001056:	0019      	movs	r1, r3
 8001058:	0013      	movs	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	189b      	adds	r3, r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	18c3      	adds	r3, r0, r3
 8001062:	185b      	adds	r3, r3, r1
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	23aa      	movs	r3, #170	@ 0xaa
 8001070:	0059      	lsls	r1, r3, #1
 8001072:	0013      	movs	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	189b      	adds	r3, r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	18c3      	adds	r3, r0, r3
 800107c:	185b      	adds	r3, r3, r1
 800107e:	193a      	adds	r2, r7, r4
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	2358      	movs	r3, #88	@ 0x58
 800108c:	33ff      	adds	r3, #255	@ 0xff
 800108e:	0019      	movs	r1, r3
 8001090:	0013      	movs	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	189b      	adds	r3, r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	18c3      	adds	r3, r0, r3
 800109a:	185b      	adds	r3, r3, r1
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	23b2      	movs	r3, #178	@ 0xb2
 80010a8:	0059      	lsls	r1, r3, #1
 80010aa:	0013      	movs	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	189b      	adds	r3, r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	18c3      	adds	r3, r0, r3
 80010b4:	185b      	adds	r3, r3, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	23b4      	movs	r3, #180	@ 0xb4
 80010c2:	0059      	lsls	r1, r3, #1
 80010c4:	0013      	movs	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	189b      	adds	r3, r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	18c3      	adds	r3, r0, r3
 80010ce:	185b      	adds	r3, r3, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	23b6      	movs	r3, #182	@ 0xb6
 80010dc:	0059      	lsls	r1, r3, #1
 80010de:	0013      	movs	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	18c3      	adds	r3, r0, r3
 80010e8:	185b      	adds	r3, r3, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	3201      	adds	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	791b      	ldrb	r3, [r3, #4]
 80010fc:	220f      	movs	r2, #15
 80010fe:	18ba      	adds	r2, r7, r2
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3a1      	bcc.n	800104a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	466a      	mov	r2, sp
 800110e:	7c19      	ldrb	r1, [r3, #16]
 8001110:	7011      	strb	r1, [r2, #0]
 8001112:	6859      	ldr	r1, [r3, #4]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f001 fa1f 	bl	800255a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <HAL_PCD_Init+0x1f0>)
 8001126:	2101      	movs	r1, #1
 8001128:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7b1b      	ldrb	r3, [r3, #12]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d103      	bne.n	800113a <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fa2c 	bl	8001592 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b005      	add	sp, #20
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	00000295 	.word	0x00000295

08001148 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	23a5      	movs	r3, #165	@ 0xa5
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_PCD_Start+0x18>
 800115c:	2302      	movs	r3, #2
 800115e:	e014      	b.n	800118a <HAL_PCD_Start+0x42>
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	23a5      	movs	r3, #165	@ 0xa5
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	2101      	movs	r1, #1
 8001168:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0018      	movs	r0, r3
 8001170:	f001 f9a6 	bl	80024c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0018      	movs	r0, r3
 800117a:	f002 ff0b 	bl	8003f94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	23a5      	movs	r3, #165	@ 0xa5
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	2100      	movs	r1, #0
 8001186:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	0018      	movs	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001192:	b590      	push	{r4, r7, lr}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	000c      	movs	r4, r1
 800119c:	0010      	movs	r0, r2
 800119e:	0019      	movs	r1, r3
 80011a0:	1cfb      	adds	r3, r7, #3
 80011a2:	1c22      	adds	r2, r4, #0
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	003b      	movs	r3, r7
 80011a8:	1c02      	adds	r2, r0, #0
 80011aa:	801a      	strh	r2, [r3, #0]
 80011ac:	1cbb      	adds	r3, r7, #2
 80011ae:	1c0a      	adds	r2, r1, #0
 80011b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80011b2:	230b      	movs	r3, #11
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011ba:	1cfb      	adds	r3, r7, #3
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da10      	bge.n	80011e6 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011c4:	1cfb      	adds	r3, r7, #3
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2207      	movs	r2, #7
 80011ca:	401a      	ands	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	189b      	adds	r3, r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	3310      	adds	r3, #16
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	3304      	adds	r3, #4
 80011dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2201      	movs	r2, #1
 80011e2:	705a      	strb	r2, [r3, #1]
 80011e4:	e010      	b.n	8001208 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011e6:	1cfb      	adds	r3, r7, #3
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2207      	movs	r2, #7
 80011ec:	401a      	ands	r2, r3
 80011ee:	0013      	movs	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	189b      	adds	r3, r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	3351      	adds	r3, #81	@ 0x51
 80011f8:	33ff      	adds	r3, #255	@ 0xff
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	18d3      	adds	r3, r2, r3
 80011fe:	3304      	adds	r3, #4
 8001200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001208:	1cfb      	adds	r3, r7, #3
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2207      	movs	r2, #7
 800120e:	4013      	ands	r3, r2
 8001210:	b2da      	uxtb	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001216:	003b      	movs	r3, r7
 8001218:	881a      	ldrh	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1cba      	adds	r2, r7, #2
 8001222:	7812      	ldrb	r2, [r2, #0]
 8001224:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d102      	bne.n	8001234 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	23a5      	movs	r3, #165	@ 0xa5
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	5cd3      	ldrb	r3, [r2, r3]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_PCD_EP_Open+0xb2>
 8001240:	2302      	movs	r3, #2
 8001242:	e013      	b.n	800126c <HAL_PCD_EP_Open+0xda>
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	23a5      	movs	r3, #165	@ 0xa5
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	2101      	movs	r1, #1
 800124c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	0011      	movs	r1, r2
 8001256:	0018      	movs	r0, r3
 8001258:	f001 f9aa 	bl	80025b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	23a5      	movs	r3, #165	@ 0xa5
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	2100      	movs	r1, #0
 8001264:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001266:	230b      	movs	r3, #11
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	781b      	ldrb	r3, [r3, #0]
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b005      	add	sp, #20
 8001272:	bd90      	pop	{r4, r7, pc}

08001274 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	000a      	movs	r2, r1
 800127e:	1cfb      	adds	r3, r7, #3
 8001280:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001282:	1cfb      	adds	r3, r7, #3
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	da10      	bge.n	80012ae <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800128c:	1cfb      	adds	r3, r7, #3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2207      	movs	r2, #7
 8001292:	401a      	ands	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	189b      	adds	r3, r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	3310      	adds	r3, #16
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	18d3      	adds	r3, r2, r3
 80012a2:	3304      	adds	r3, #4
 80012a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2201      	movs	r2, #1
 80012aa:	705a      	strb	r2, [r3, #1]
 80012ac:	e010      	b.n	80012d0 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012ae:	1cfb      	adds	r3, r7, #3
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2207      	movs	r2, #7
 80012b4:	401a      	ands	r2, r3
 80012b6:	0013      	movs	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	189b      	adds	r3, r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	3351      	adds	r3, #81	@ 0x51
 80012c0:	33ff      	adds	r3, #255	@ 0xff
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	18d3      	adds	r3, r2, r3
 80012c6:	3304      	adds	r3, #4
 80012c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80012d0:	1cfb      	adds	r3, r7, #3
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2207      	movs	r2, #7
 80012d6:	4013      	ands	r3, r2
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	23a5      	movs	r3, #165	@ 0xa5
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_PCD_EP_Close+0x7a>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e011      	b.n	8001312 <HAL_PCD_EP_Close+0x9e>
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	23a5      	movs	r3, #165	@ 0xa5
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	2101      	movs	r1, #1
 80012f6:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f001 fc89 	bl	8002c18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	23a5      	movs	r3, #165	@ 0xa5
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	2100      	movs	r1, #0
 800130e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b004      	add	sp, #16
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	200b      	movs	r0, #11
 8001328:	183b      	adds	r3, r7, r0
 800132a:	1c0a      	adds	r2, r1, #0
 800132c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800132e:	0001      	movs	r1, r0
 8001330:	187b      	adds	r3, r7, r1
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2207      	movs	r2, #7
 8001336:	401a      	ands	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	189b      	adds	r3, r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	3351      	adds	r3, #81	@ 0x51
 8001342:	33ff      	adds	r3, #255	@ 0xff
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	18d3      	adds	r3, r2, r3
 8001348:	3304      	adds	r3, #4
 800134a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2200      	movs	r2, #0
 8001362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001364:	187b      	adds	r3, r7, r1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2207      	movs	r2, #7
 800136a:	4013      	ands	r3, r2
 800136c:	b2da      	uxtb	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f001 fdb2 	bl	8002ee4 <USB_EPStartXfer>

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b006      	add	sp, #24
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	000a      	movs	r2, r1
 8001394:	1cfb      	adds	r3, r7, #3
 8001396:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001398:	1cfb      	adds	r3, r7, #3
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2207      	movs	r2, #7
 800139e:	401a      	ands	r2, r3
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	23b8      	movs	r3, #184	@ 0xb8
 80013a4:	0059      	lsls	r1, r3, #1
 80013a6:	0013      	movs	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	189b      	adds	r3, r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	18c3      	adds	r3, r0, r3
 80013b0:	185b      	adds	r3, r3, r1
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	200b      	movs	r0, #11
 80013ca:	183b      	adds	r3, r7, r0
 80013cc:	1c0a      	adds	r2, r1, #0
 80013ce:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d0:	183b      	adds	r3, r7, r0
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2207      	movs	r2, #7
 80013d6:	401a      	ands	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	189b      	adds	r3, r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	3310      	adds	r3, #16
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	18d3      	adds	r3, r2, r3
 80013e6:	3304      	adds	r3, #4
 80013e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2224      	movs	r2, #36	@ 0x24
 80013fa:	2101      	movs	r1, #1
 80013fc:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2201      	movs	r2, #1
 800140e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001410:	183b      	adds	r3, r7, r0
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2207      	movs	r2, #7
 8001416:	4013      	ands	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	0011      	movs	r1, r2
 8001426:	0018      	movs	r0, r3
 8001428:	f001 fd5c 	bl	8002ee4 <USB_EPStartXfer>

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b006      	add	sp, #24
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	000a      	movs	r2, r1
 8001440:	1cfb      	adds	r3, r7, #3
 8001442:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001444:	1cfb      	adds	r3, r7, #3
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2207      	movs	r2, #7
 800144a:	4013      	ands	r3, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	7912      	ldrb	r2, [r2, #4]
 8001450:	4293      	cmp	r3, r2
 8001452:	d901      	bls.n	8001458 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e048      	b.n	80014ea <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001458:	1cfb      	adds	r3, r7, #3
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b25b      	sxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	da10      	bge.n	8001484 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001462:	1cfb      	adds	r3, r7, #3
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2207      	movs	r2, #7
 8001468:	401a      	ands	r2, r3
 800146a:	0013      	movs	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	189b      	adds	r3, r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	3310      	adds	r3, #16
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	18d3      	adds	r3, r2, r3
 8001478:	3304      	adds	r3, #4
 800147a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	705a      	strb	r2, [r3, #1]
 8001482:	e00e      	b.n	80014a2 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001484:	1cfb      	adds	r3, r7, #3
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	0013      	movs	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	189b      	adds	r3, r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	3351      	adds	r3, #81	@ 0x51
 8001492:	33ff      	adds	r3, #255	@ 0xff
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	18d3      	adds	r3, r2, r3
 8001498:	3304      	adds	r3, #4
 800149a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2201      	movs	r2, #1
 80014a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014a8:	1cfb      	adds	r3, r7, #3
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2207      	movs	r2, #7
 80014ae:	4013      	ands	r3, r2
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	23a5      	movs	r3, #165	@ 0xa5
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_PCD_EP_SetStall+0x90>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e011      	b.n	80014ea <HAL_PCD_EP_SetStall+0xb4>
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	23a5      	movs	r3, #165	@ 0xa5
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	2101      	movs	r1, #1
 80014ce:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	0011      	movs	r1, r2
 80014d8:	0018      	movs	r0, r3
 80014da:	f002 fd19 	bl	8003f10 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	23a5      	movs	r3, #165	@ 0xa5
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	2100      	movs	r1, #0
 80014e6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b004      	add	sp, #16
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80014f2:	b590      	push	{r4, r7, lr}
 80014f4:	b087      	sub	sp, #28
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	0008      	movs	r0, r1
 80014fc:	0011      	movs	r1, r2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	240a      	movs	r4, #10
 8001502:	193b      	adds	r3, r7, r4
 8001504:	1c02      	adds	r2, r0, #0
 8001506:	801a      	strh	r2, [r3, #0]
 8001508:	2308      	movs	r3, #8
 800150a:	18fb      	adds	r3, r7, r3
 800150c:	1c0a      	adds	r2, r1, #0
 800150e:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001510:	0021      	movs	r1, r4
 8001512:	187b      	adds	r3, r7, r1
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	2280      	movs	r2, #128	@ 0x80
 8001518:	4013      	ands	r3, r2
 800151a:	b29b      	uxth	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00d      	beq.n	800153c <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001520:	187b      	adds	r3, r7, r1
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	2207      	movs	r2, #7
 8001526:	401a      	ands	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	189b      	adds	r3, r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	3310      	adds	r3, #16
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	18d3      	adds	r3, r2, r3
 8001536:	3304      	adds	r3, #4
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e00c      	b.n	8001556 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800153c:	230a      	movs	r3, #10
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	881a      	ldrh	r2, [r3, #0]
 8001542:	0013      	movs	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	189b      	adds	r3, r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	3351      	adds	r3, #81	@ 0x51
 800154c:	33ff      	adds	r3, #255	@ 0xff
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	18d3      	adds	r3, r2, r3
 8001552:	3304      	adds	r3, #4
 8001554:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001556:	2308      	movs	r3, #8
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d107      	bne.n	8001570 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2200      	movs	r2, #0
 8001564:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	b29a      	uxth	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	80da      	strh	r2, [r3, #6]
 800156e:	e00b      	b.n	8001588 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2201      	movs	r2, #1
 8001574:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	b29a      	uxth	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	0c1b      	lsrs	r3, r3, #16
 8001582:	b29a      	uxth	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b007      	add	sp, #28
 8001590:	bd90      	pop	{r4, r7, pc}

08001592 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	23b5      	movs	r3, #181	@ 0xb5
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	2101      	movs	r1, #1
 80015a8:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	23b3      	movs	r3, #179	@ 0xb3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	2100      	movs	r1, #0
 80015b2:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b8:	2201      	movs	r2, #1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c4:	2202      	movs	r2, #2
 80015c6:	431a      	orrs	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80015dc:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <HAL_PWREx_EnableVddUSB+0x18>)
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_PWREx_EnableVddUSB+0x18>)
 80015e2:	2180      	movs	r1, #128	@ 0x80
 80015e4:	00c9      	lsls	r1, r1, #3
 80015e6:	430a      	orrs	r2, r1
 80015e8:	605a      	str	r2, [r3, #4]
}
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40007000 	.word	0x40007000

080015f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a19      	ldr	r2, [pc, #100]	@ (8001668 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001602:	4013      	ands	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	429a      	cmp	r2, r3
 8001616:	d11f      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	0013      	movs	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	189b      	adds	r3, r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4912      	ldr	r1, [pc, #72]	@ (8001670 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001626:	0018      	movs	r0, r3
 8001628:	f7fe fd6c 	bl	8000104 <__udivsi3>
 800162c:	0003      	movs	r3, r0
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001632:	e008      	b.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3b01      	subs	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e001      	b.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e009      	b.n	800165a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	401a      	ands	r2, r3
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	429a      	cmp	r2, r3
 8001656:	d0ed      	beq.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b004      	add	sp, #16
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	40007000 	.word	0x40007000
 8001668:	fffff9ff 	.word	0xfffff9ff
 800166c:	20000000 	.word	0x20000000
 8001670:	000f4240 	.word	0x000f4240

08001674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	f000 fb50 	bl	8001d28 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	4013      	ands	r3, r2
 8001690:	d100      	bne.n	8001694 <HAL_RCC_OscConfig+0x20>
 8001692:	e07c      	b.n	800178e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001694:	4bc3      	ldr	r3, [pc, #780]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2238      	movs	r2, #56	@ 0x38
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169e:	4bc1      	ldr	r3, [pc, #772]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2203      	movs	r2, #3
 80016a4:	4013      	ands	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d102      	bne.n	80016b4 <HAL_RCC_OscConfig+0x40>
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d002      	beq.n	80016ba <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d10b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ba:	4bba      	ldr	r3, [pc, #744]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	029b      	lsls	r3, r3, #10
 80016c2:	4013      	ands	r3, r2
 80016c4:	d062      	beq.n	800178c <HAL_RCC_OscConfig+0x118>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d15e      	bne.n	800178c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e32a      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	025b      	lsls	r3, r3, #9
 80016da:	429a      	cmp	r2, r3
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_OscConfig+0x7a>
 80016de:	4bb1      	ldr	r3, [pc, #708]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4bb0      	ldr	r3, [pc, #704]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80016e4:	2180      	movs	r1, #128	@ 0x80
 80016e6:	0249      	lsls	r1, r1, #9
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e020      	b.n	8001730 <HAL_RCC_OscConfig+0xbc>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	23a0      	movs	r3, #160	@ 0xa0
 80016f4:	02db      	lsls	r3, r3, #11
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d10e      	bne.n	8001718 <HAL_RCC_OscConfig+0xa4>
 80016fa:	4baa      	ldr	r3, [pc, #680]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4ba9      	ldr	r3, [pc, #676]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001700:	2180      	movs	r1, #128	@ 0x80
 8001702:	02c9      	lsls	r1, r1, #11
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	4ba6      	ldr	r3, [pc, #664]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4ba5      	ldr	r3, [pc, #660]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800170e:	2180      	movs	r1, #128	@ 0x80
 8001710:	0249      	lsls	r1, r1, #9
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xbc>
 8001718:	4ba2      	ldr	r3, [pc, #648]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4ba1      	ldr	r3, [pc, #644]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800171e:	49a2      	ldr	r1, [pc, #648]	@ (80019a8 <HAL_RCC_OscConfig+0x334>)
 8001720:	400a      	ands	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	4b9f      	ldr	r3, [pc, #636]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b9e      	ldr	r3, [pc, #632]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800172a:	49a0      	ldr	r1, [pc, #640]	@ (80019ac <HAL_RCC_OscConfig+0x338>)
 800172c:	400a      	ands	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d014      	beq.n	8001762 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7fe ffb2 	bl	80006a0 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001742:	f7fe ffad 	bl	80006a0 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b64      	cmp	r3, #100	@ 0x64
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e2e9      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001754:	4b93      	ldr	r3, [pc, #588]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	029b      	lsls	r3, r3, #10
 800175c:	4013      	ands	r3, r2
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0xce>
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7fe ff9d 	bl	80006a0 <HAL_GetTick>
 8001766:	0003      	movs	r3, r0
 8001768:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7fe ff98 	bl	80006a0 <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	@ 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e2d4      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800177e:	4b89      	ldr	r3, [pc, #548]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	2380      	movs	r3, #128	@ 0x80
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	4013      	ands	r3, r2
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0xf8>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d100      	bne.n	800179a <HAL_RCC_OscConfig+0x126>
 8001798:	e099      	b.n	80018ce <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179a:	4b82      	ldr	r3, [pc, #520]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2238      	movs	r2, #56	@ 0x38
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a4:	4b7f      	ldr	r3, [pc, #508]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2203      	movs	r2, #3
 80017aa:	4013      	ands	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d102      	bne.n	80017ba <HAL_RCC_OscConfig+0x146>
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d135      	bne.n	800182c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c0:	4b78      	ldr	r3, [pc, #480]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_OscConfig+0x164>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e2a7      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b72      	ldr	r3, [pc, #456]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4a74      	ldr	r2, [pc, #464]	@ (80019b0 <HAL_RCC_OscConfig+0x33c>)
 80017de:	4013      	ands	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	021a      	lsls	r2, r3, #8
 80017e8:	4b6e      	ldr	r3, [pc, #440]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80017ea:	430a      	orrs	r2, r1
 80017ec:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d112      	bne.n	800181a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017f4:	4b6b      	ldr	r3, [pc, #428]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a6e      	ldr	r2, [pc, #440]	@ (80019b4 <HAL_RCC_OscConfig+0x340>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	4b68      	ldr	r3, [pc, #416]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001808:	4b66      	ldr	r3, [pc, #408]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0adb      	lsrs	r3, r3, #11
 800180e:	2207      	movs	r2, #7
 8001810:	4013      	ands	r3, r2
 8001812:	4a69      	ldr	r2, [pc, #420]	@ (80019b8 <HAL_RCC_OscConfig+0x344>)
 8001814:	40da      	lsrs	r2, r3
 8001816:	4b69      	ldr	r3, [pc, #420]	@ (80019bc <HAL_RCC_OscConfig+0x348>)
 8001818:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800181a:	4b69      	ldr	r3, [pc, #420]	@ (80019c0 <HAL_RCC_OscConfig+0x34c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	0018      	movs	r0, r3
 8001820:	f7fe fee2 	bl	80005e8 <HAL_InitTick>
 8001824:	1e03      	subs	r3, r0, #0
 8001826:	d051      	beq.n	80018cc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e27d      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d030      	beq.n	8001896 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001834:	4b5b      	ldr	r3, [pc, #364]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5e      	ldr	r2, [pc, #376]	@ (80019b4 <HAL_RCC_OscConfig+0x340>)
 800183a:	4013      	ands	r3, r2
 800183c:	0019      	movs	r1, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	4b58      	ldr	r3, [pc, #352]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b56      	ldr	r3, [pc, #344]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b55      	ldr	r3, [pc, #340]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800184e:	2180      	movs	r1, #128	@ 0x80
 8001850:	0049      	lsls	r1, r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7fe ff23 	bl	80006a0 <HAL_GetTick>
 800185a:	0003      	movs	r3, r0
 800185c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001860:	f7fe ff1e 	bl	80006a0 <HAL_GetTick>
 8001864:	0002      	movs	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e25a      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001872:	4b4c      	ldr	r3, [pc, #304]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4013      	ands	r3, r2
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	4b49      	ldr	r3, [pc, #292]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a4b      	ldr	r2, [pc, #300]	@ (80019b0 <HAL_RCC_OscConfig+0x33c>)
 8001884:	4013      	ands	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	021a      	lsls	r2, r3, #8
 800188e:	4b45      	ldr	r3, [pc, #276]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	e01b      	b.n	80018ce <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001896:	4b43      	ldr	r3, [pc, #268]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b42      	ldr	r3, [pc, #264]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800189c:	4949      	ldr	r1, [pc, #292]	@ (80019c4 <HAL_RCC_OscConfig+0x350>)
 800189e:	400a      	ands	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7fe fefd 	bl	80006a0 <HAL_GetTick>
 80018a6:	0003      	movs	r3, r0
 80018a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ac:	f7fe fef8 	bl	80006a0 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e234      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018be:	4b39      	ldr	r3, [pc, #228]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	2380      	movs	r3, #128	@ 0x80
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4013      	ands	r3, r2
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x238>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018cc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2208      	movs	r2, #8
 80018d4:	4013      	ands	r3, r2
 80018d6:	d047      	beq.n	8001968 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018d8:	4b32      	ldr	r3, [pc, #200]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2238      	movs	r2, #56	@ 0x38
 80018de:	4013      	ands	r3, r2
 80018e0:	2b18      	cmp	r3, #24
 80018e2:	d10a      	bne.n	80018fa <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018e4:	4b2f      	ldr	r3, [pc, #188]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 80018e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d03c      	beq.n	8001968 <HAL_RCC_OscConfig+0x2f4>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d138      	bne.n	8001968 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e216      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001902:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001904:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001906:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001908:	2101      	movs	r1, #1
 800190a:	430a      	orrs	r2, r1
 800190c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7fe fec7 	bl	80006a0 <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7fe fec2 	bl	80006a0 <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1fe      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d0f1      	beq.n	8001918 <HAL_RCC_OscConfig+0x2a4>
 8001934:	e018      	b.n	8001968 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001936:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001938:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800193c:	2101      	movs	r1, #1
 800193e:	438a      	bics	r2, r1
 8001940:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7fe fead 	bl	80006a0 <HAL_GetTick>
 8001946:	0003      	movs	r3, r0
 8001948:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7fe fea8 	bl	80006a0 <HAL_GetTick>
 8001950:	0002      	movs	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1e4      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001962:	2202      	movs	r2, #2
 8001964:	4013      	ands	r3, r2
 8001966:	d1f1      	bne.n	800194c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2204      	movs	r2, #4
 800196e:	4013      	ands	r3, r2
 8001970:	d100      	bne.n	8001974 <HAL_RCC_OscConfig+0x300>
 8001972:	e0c7      	b.n	8001b04 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001974:	231f      	movs	r3, #31
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2238      	movs	r2, #56	@ 0x38
 8001982:	4013      	ands	r3, r2
 8001984:	2b20      	cmp	r3, #32
 8001986:	d11f      	bne.n	80019c8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_RCC_OscConfig+0x330>)
 800198a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d100      	bne.n	8001994 <HAL_RCC_OscConfig+0x320>
 8001992:	e0b7      	b.n	8001b04 <HAL_RCC_OscConfig+0x490>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d000      	beq.n	800199e <HAL_RCC_OscConfig+0x32a>
 800199c:	e0b2      	b.n	8001b04 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1c2      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	40021000 	.word	0x40021000
 80019a8:	fffeffff 	.word	0xfffeffff
 80019ac:	fffbffff 	.word	0xfffbffff
 80019b0:	ffff80ff 	.word	0xffff80ff
 80019b4:	ffffc7ff 	.word	0xffffc7ff
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004
 80019c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019c8:	4bb5      	ldr	r3, [pc, #724]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 80019ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	055b      	lsls	r3, r3, #21
 80019d0:	4013      	ands	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_OscConfig+0x364>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x366>
 80019d8:	2300      	movs	r3, #0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d011      	beq.n	8001a02 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 80019e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019e2:	4baf      	ldr	r3, [pc, #700]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	0549      	lsls	r1, r1, #21
 80019e8:	430a      	orrs	r2, r1
 80019ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019ec:	4bac      	ldr	r3, [pc, #688]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 80019ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	055b      	lsls	r3, r3, #21
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019fa:	231f      	movs	r3, #31
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a02:	4ba8      	ldr	r3, [pc, #672]	@ (8001ca4 <HAL_RCC_OscConfig+0x630>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d11a      	bne.n	8001a44 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a0e:	4ba5      	ldr	r3, [pc, #660]	@ (8001ca4 <HAL_RCC_OscConfig+0x630>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4ba4      	ldr	r3, [pc, #656]	@ (8001ca4 <HAL_RCC_OscConfig+0x630>)
 8001a14:	2180      	movs	r1, #128	@ 0x80
 8001a16:	0049      	lsls	r1, r1, #1
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a1c:	f7fe fe40 	bl	80006a0 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a26:	f7fe fe3b 	bl	80006a0 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e177      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a38:	4b9a      	ldr	r3, [pc, #616]	@ (8001ca4 <HAL_RCC_OscConfig+0x630>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3e6>
 8001a4c:	4b94      	ldr	r3, [pc, #592]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001a4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a50:	4b93      	ldr	r3, [pc, #588]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001a52:	2101      	movs	r1, #1
 8001a54:	430a      	orrs	r2, r1
 8001a56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a58:	e01c      	b.n	8001a94 <HAL_RCC_OscConfig+0x420>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x408>
 8001a62:	4b8f      	ldr	r3, [pc, #572]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001a64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a66:	4b8e      	ldr	r3, [pc, #568]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001a68:	2104      	movs	r1, #4
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a6e:	4b8c      	ldr	r3, [pc, #560]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001a70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a72:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001a74:	2101      	movs	r1, #1
 8001a76:	430a      	orrs	r2, r1
 8001a78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0x420>
 8001a7c:	4b88      	ldr	r3, [pc, #544]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a80:	4b87      	ldr	r3, [pc, #540]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	438a      	bics	r2, r1
 8001a86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a88:	4b85      	ldr	r3, [pc, #532]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001a8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a8c:	4b84      	ldr	r3, [pc, #528]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001a8e:	2104      	movs	r1, #4
 8001a90:	438a      	bics	r2, r1
 8001a92:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d014      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7fe fe00 	bl	80006a0 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7fe fdfb 	bl	80006a0 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a7d      	ldr	r2, [pc, #500]	@ (8001ca8 <HAL_RCC_OscConfig+0x634>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e136      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aba:	4b79      	ldr	r3, [pc, #484]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x432>
 8001ac4:	e013      	b.n	8001aee <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7fe fdeb 	bl	80006a0 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ace:	e009      	b.n	8001ae4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7fe fde6 	bl	80006a0 <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	4a73      	ldr	r2, [pc, #460]	@ (8001ca8 <HAL_RCC_OscConfig+0x634>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e121      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae4:	4b6e      	ldr	r3, [pc, #440]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001aee:	231f      	movs	r3, #31
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d105      	bne.n	8001b04 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001af8:	4b69      	ldr	r3, [pc, #420]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001afa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001afc:	4b68      	ldr	r3, [pc, #416]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001afe:	496b      	ldr	r1, [pc, #428]	@ (8001cac <HAL_RCC_OscConfig+0x638>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d039      	beq.n	8001b82 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01b      	beq.n	8001b4e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b16:	4b62      	ldr	r3, [pc, #392]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b61      	ldr	r3, [pc, #388]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001b1c:	2180      	movs	r1, #128	@ 0x80
 8001b1e:	03c9      	lsls	r1, r1, #15
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7fe fdbc 	bl	80006a0 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2e:	f7fe fdb7 	bl	80006a0 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e0f3      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b40:	4b57      	ldr	r3, [pc, #348]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x4ba>
 8001b4c:	e019      	b.n	8001b82 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b4e:	4b54      	ldr	r3, [pc, #336]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b53      	ldr	r3, [pc, #332]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001b54:	4956      	ldr	r1, [pc, #344]	@ (8001cb0 <HAL_RCC_OscConfig+0x63c>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7fe fda1 	bl	80006a0 <HAL_GetTick>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b64:	f7fe fd9c 	bl	80006a0 <HAL_GetTick>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0d8      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	@ 0x80
 8001b7c:	041b      	lsls	r3, r3, #16
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d100      	bne.n	8001b8c <HAL_RCC_OscConfig+0x518>
 8001b8a:	e0cc      	b.n	8001d26 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b8c:	4b44      	ldr	r3, [pc, #272]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2238      	movs	r2, #56	@ 0x38
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d100      	bne.n	8001b9a <HAL_RCC_OscConfig+0x526>
 8001b98:	e07b      	b.n	8001c92 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d156      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001ba8:	4942      	ldr	r1, [pc, #264]	@ (8001cb4 <HAL_RCC_OscConfig+0x640>)
 8001baa:	400a      	ands	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7fe fd77 	bl	80006a0 <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7fe fd72 	bl	80006a0 <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e0ae      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bca:	4b35      	ldr	r3, [pc, #212]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	049b      	lsls	r3, r3, #18
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd6:	4b32      	ldr	r3, [pc, #200]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4a37      	ldr	r2, [pc, #220]	@ (8001cb8 <HAL_RCC_OscConfig+0x644>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c02:	431a      	orrs	r2, r3
 8001c04:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c06:	430a      	orrs	r2, r1
 8001c08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c10:	2180      	movs	r1, #128	@ 0x80
 8001c12:	0449      	lsls	r1, r1, #17
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c18:	4b21      	ldr	r3, [pc, #132]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c1e:	2180      	movs	r1, #128	@ 0x80
 8001c20:	0549      	lsls	r1, r1, #21
 8001c22:	430a      	orrs	r2, r1
 8001c24:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7fe fd3b 	bl	80006a0 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe fd36 	bl	80006a0 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e072      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	049b      	lsls	r3, r3, #18
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x5bc>
 8001c4e:	e06a      	b.n	8001d26 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c56:	4917      	ldr	r1, [pc, #92]	@ (8001cb4 <HAL_RCC_OscConfig+0x640>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7fe fd20 	bl	80006a0 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7fe fd1b 	bl	80006a0 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e057      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	049b      	lsls	r3, r3, #18
 8001c80:	4013      	ands	r3, r2
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_RCC_OscConfig+0x62c>)
 8001c8a:	490c      	ldr	r1, [pc, #48]	@ (8001cbc <HAL_RCC_OscConfig+0x648>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	e049      	b.n	8001d26 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d112      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e044      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	00001388 	.word	0x00001388
 8001cac:	efffffff 	.word	0xefffffff
 8001cb0:	ffbfffff 	.word	0xffbfffff
 8001cb4:	feffffff 	.word	0xfeffffff
 8001cb8:	11c1808c 	.word	0x11c1808c
 8001cbc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_RCC_OscConfig+0x6bc>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2203      	movs	r2, #3
 8001cca:	401a      	ands	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d126      	bne.n	8001d22 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2270      	movs	r2, #112	@ 0x70
 8001cd8:	401a      	ands	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d11f      	bne.n	8001d22 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	23fe      	movs	r3, #254	@ 0xfe
 8001ce6:	01db      	lsls	r3, r3, #7
 8001ce8:	401a      	ands	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d116      	bne.n	8001d22 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	23f8      	movs	r3, #248	@ 0xf8
 8001cf8:	039b      	lsls	r3, r3, #14
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10e      	bne.n	8001d22 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	23e0      	movs	r3, #224	@ 0xe0
 8001d08:	051b      	lsls	r3, r3, #20
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	0f5b      	lsrs	r3, r3, #29
 8001d18:	075a      	lsls	r2, r3, #29
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b008      	add	sp, #32
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000

08001d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0e9      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b76      	ldr	r3, [pc, #472]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	4013      	ands	r3, r2
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d91e      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b73      	ldr	r3, [pc, #460]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	4393      	bics	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	4b70      	ldr	r3, [pc, #448]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d68:	f7fe fc9a 	bl	80006a0 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d70:	e009      	b.n	8001d86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d72:	f7fe fc95 	bl	80006a0 <HAL_GetTick>
 8001d76:	0002      	movs	r2, r0
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0ca      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d86:	4b67      	ldr	r3, [pc, #412]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d1ee      	bne.n	8001d72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d015      	beq.n	8001dca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	d006      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001da8:	4b60      	ldr	r3, [pc, #384]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b5f      	ldr	r3, [pc, #380]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001dae:	21e0      	movs	r1, #224	@ 0xe0
 8001db0:	01c9      	lsls	r1, r1, #7
 8001db2:	430a      	orrs	r2, r1
 8001db4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4a5d      	ldr	r2, [pc, #372]	@ (8001f30 <HAL_RCC_ClockConfig+0x1fc>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	4b59      	ldr	r3, [pc, #356]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d057      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ddc:	4b53      	ldr	r3, [pc, #332]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	029b      	lsls	r3, r3, #10
 8001de4:	4013      	ands	r3, r2
 8001de6:	d12b      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e097      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df4:	4b4d      	ldr	r3, [pc, #308]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	049b      	lsls	r3, r3, #18
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d11f      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e08b      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0c:	4b47      	ldr	r3, [pc, #284]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4013      	ands	r3, r2
 8001e16:	d113      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e07f      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e24:	4b41      	ldr	r3, [pc, #260]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d108      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e074      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e32:	4b3e      	ldr	r3, [pc, #248]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e06d      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e40:	4b3a      	ldr	r3, [pc, #232]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2207      	movs	r2, #7
 8001e46:	4393      	bics	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4b37      	ldr	r3, [pc, #220]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e54:	f7fe fc24 	bl	80006a0 <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5c:	e009      	b.n	8001e72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5e:	f7fe fc1f 	bl	80006a0 <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	4a2f      	ldr	r2, [pc, #188]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e054      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	4b2e      	ldr	r3, [pc, #184]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2238      	movs	r2, #56	@ 0x38
 8001e78:	401a      	ands	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1ec      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e84:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2207      	movs	r2, #7
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d21e      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2207      	movs	r2, #7
 8001e98:	4393      	bics	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ea4:	f7fe fbfc 	bl	80006a0 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eac:	e009      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eae:	f7fe fbf7 	bl	80006a0 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e02c      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ec2:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	4013      	ands	r3, r2
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d1ee      	bne.n	8001eae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d009      	beq.n	8001eee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001eda:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4a15      	ldr	r2, [pc, #84]	@ (8001f34 <HAL_RCC_ClockConfig+0x200>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001eee:	f000 f829 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001ef2:	0001      	movs	r1, r0
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	220f      	movs	r2, #15
 8001efc:	401a      	ands	r2, r3
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <HAL_RCC_ClockConfig+0x204>)
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	58d3      	ldr	r3, [r2, r3]
 8001f04:	221f      	movs	r2, #31
 8001f06:	4013      	ands	r3, r2
 8001f08:	000a      	movs	r2, r1
 8001f0a:	40da      	lsrs	r2, r3
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <HAL_RCC_ClockConfig+0x208>)
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_ClockConfig+0x20c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7fe fb67 	bl	80005e8 <HAL_InitTick>
 8001f1a:	0003      	movs	r3, r0
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b004      	add	sp, #16
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40022000 	.word	0x40022000
 8001f28:	00001388 	.word	0x00001388
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	fffff0ff 	.word	0xfffff0ff
 8001f34:	ffff8fff 	.word	0xffff8fff
 8001f38:	08005700 	.word	0x08005700
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2238      	movs	r2, #56	@ 0x38
 8001f50:	4013      	ands	r3, r2
 8001f52:	d10f      	bne.n	8001f74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f54:	4b39      	ldr	r3, [pc, #228]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0adb      	lsrs	r3, r3, #11
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2201      	movs	r2, #1
 8001f60:	409a      	lsls	r2, r3
 8001f62:	0013      	movs	r3, r2
 8001f64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	4835      	ldr	r0, [pc, #212]	@ (8002040 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f6a:	f7fe f8cb 	bl	8000104 <__udivsi3>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	e05d      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f74:	4b31      	ldr	r3, [pc, #196]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2238      	movs	r2, #56	@ 0x38
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d102      	bne.n	8001f86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f80:	4b30      	ldr	r3, [pc, #192]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e054      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f86:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2238      	movs	r2, #56	@ 0x38
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d138      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f92:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2203      	movs	r2, #3
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f9c:	4b27      	ldr	r3, [pc, #156]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d10d      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	4824      	ldr	r0, [pc, #144]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fb4:	f7fe f8a6 	bl	8000104 <__udivsi3>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	0019      	movs	r1, r3
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	227f      	movs	r2, #127	@ 0x7f
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	434b      	muls	r3, r1
 8001fc8:	617b      	str	r3, [r7, #20]
        break;
 8001fca:	e00d      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	481c      	ldr	r0, [pc, #112]	@ (8002040 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fd0:	f7fe f898 	bl	8000104 <__udivsi3>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	4b18      	ldr	r3, [pc, #96]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	227f      	movs	r2, #127	@ 0x7f
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	434b      	muls	r3, r1
 8001fe4:	617b      	str	r3, [r7, #20]
        break;
 8001fe6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fe8:	4b14      	ldr	r3, [pc, #80]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0f5b      	lsrs	r3, r3, #29
 8001fee:	2207      	movs	r2, #7
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	6978      	ldr	r0, [r7, #20]
 8001ffa:	f7fe f883 	bl	8000104 <__udivsi3>
 8001ffe:	0003      	movs	r3, r0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	e015      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002004:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2238      	movs	r2, #56	@ 0x38
 800200a:	4013      	ands	r3, r2
 800200c:	2b20      	cmp	r3, #32
 800200e:	d103      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_RCC_GetSysClockFreq+0xf8>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2238      	movs	r2, #56	@ 0x38
 800201e:	4013      	ands	r3, r2
 8002020:	2b18      	cmp	r3, #24
 8002022:	d103      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002024:	23fa      	movs	r3, #250	@ 0xfa
 8002026:	01db      	lsls	r3, r3, #7
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e001      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002030:	693b      	ldr	r3, [r7, #16]
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b006      	add	sp, #24
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			@ (mov r8, r8)
 800203c:	40021000 	.word	0x40021000
 8002040:	00f42400 	.word	0x00f42400
 8002044:	007a1200 	.word	0x007a1200

08002048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002050:	2313      	movs	r3, #19
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002058:	2312      	movs	r3, #18
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	029b      	lsls	r3, r3, #10
 8002068:	4013      	ands	r3, r2
 800206a:	d100      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800206c:	e0ad      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206e:	2011      	movs	r0, #17
 8002070:	183b      	adds	r3, r7, r0
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b47      	ldr	r3, [pc, #284]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002078:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	055b      	lsls	r3, r3, #21
 800207e:	4013      	ands	r3, r2
 8002080:	d110      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b44      	ldr	r3, [pc, #272]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002086:	4b43      	ldr	r3, [pc, #268]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002088:	2180      	movs	r1, #128	@ 0x80
 800208a:	0549      	lsls	r1, r1, #21
 800208c:	430a      	orrs	r2, r1
 800208e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002090:	4b40      	ldr	r3, [pc, #256]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002092:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	055b      	lsls	r3, r3, #21
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	183b      	adds	r3, r7, r0
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80020aa:	2180      	movs	r1, #128	@ 0x80
 80020ac:	0049      	lsls	r1, r1, #1
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b2:	f7fe faf5 	bl	80006a0 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ba:	e00b      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020bc:	f7fe faf0 	bl	80006a0 <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d904      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020ca:	2313      	movs	r3, #19
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	2203      	movs	r2, #3
 80020d0:	701a      	strb	r2, [r3, #0]
        break;
 80020d2:	e005      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020d4:	4b30      	ldr	r3, [pc, #192]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	@ 0x80
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4013      	ands	r3, r2
 80020de:	d0ed      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020e0:	2313      	movs	r3, #19
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d15e      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020ee:	23c0      	movs	r3, #192	@ 0xc0
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4013      	ands	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d019      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	429a      	cmp	r2, r3
 8002104:	d014      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002106:	4b23      	ldr	r3, [pc, #140]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210a:	4a24      	ldr	r2, [pc, #144]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800210c:	4013      	ands	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002110:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002112:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002114:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0249      	lsls	r1, r1, #9
 800211a:	430a      	orrs	r2, r1
 800211c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002120:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002122:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002124:	491e      	ldr	r1, [pc, #120]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002126:	400a      	ands	r2, r1
 8002128:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2201      	movs	r2, #1
 8002134:	4013      	ands	r3, r2
 8002136:	d016      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe fab2 	bl	80006a0 <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002140:	e00c      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe faad 	bl	80006a0 <HAL_GetTick>
 8002146:	0002      	movs	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	4a15      	ldr	r2, [pc, #84]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d904      	bls.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002152:	2313      	movs	r3, #19
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2203      	movs	r2, #3
 8002158:	701a      	strb	r2, [r3, #0]
            break;
 800215a:	e004      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215c:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800215e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002160:	2202      	movs	r2, #2
 8002162:	4013      	ands	r3, r2
 8002164:	d0ed      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002166:	2313      	movs	r3, #19
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10a      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	4a09      	ldr	r2, [pc, #36]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800217e:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002180:	430a      	orrs	r2, r1
 8002182:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002184:	e016      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002186:	2312      	movs	r3, #18
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2213      	movs	r2, #19
 800218c:	18ba      	adds	r2, r7, r2
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e00f      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002194:	40021000 	.word	0x40021000
 8002198:	40007000 	.word	0x40007000
 800219c:	fffffcff 	.word	0xfffffcff
 80021a0:	fffeffff 	.word	0xfffeffff
 80021a4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a8:	2312      	movs	r3, #18
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	2213      	movs	r2, #19
 80021ae:	18ba      	adds	r2, r7, r2
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021b4:	2311      	movs	r3, #17
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4bb6      	ldr	r3, [pc, #728]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021c2:	4bb5      	ldr	r3, [pc, #724]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c4:	49b5      	ldr	r1, [pc, #724]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80021c6:	400a      	ands	r2, r1
 80021c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4013      	ands	r3, r2
 80021d2:	d009      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d4:	4bb0      	ldr	r3, [pc, #704]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d8:	2203      	movs	r2, #3
 80021da:	4393      	bics	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4bad      	ldr	r3, [pc, #692]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2202      	movs	r2, #2
 80021ee:	4013      	ands	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f2:	4ba9      	ldr	r3, [pc, #676]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f6:	220c      	movs	r2, #12
 80021f8:	4393      	bics	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	4ba5      	ldr	r3, [pc, #660]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002202:	430a      	orrs	r2, r1
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2204      	movs	r2, #4
 800220c:	4013      	ands	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002210:	4ba1      	ldr	r3, [pc, #644]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002214:	2230      	movs	r2, #48	@ 0x30
 8002216:	4393      	bics	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	4b9e      	ldr	r3, [pc, #632]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002220:	430a      	orrs	r2, r1
 8002222:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2210      	movs	r2, #16
 800222a:	4013      	ands	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800222e:	4b9a      	ldr	r3, [pc, #616]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002232:	4a9b      	ldr	r2, [pc, #620]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002234:	4013      	ands	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	4b96      	ldr	r3, [pc, #600]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800223e:	430a      	orrs	r2, r1
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	015b      	lsls	r3, r3, #5
 800224a:	4013      	ands	r3, r2
 800224c:	d009      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800224e:	4b92      	ldr	r3, [pc, #584]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002252:	4a94      	ldr	r2, [pc, #592]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002254:	4013      	ands	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	4b8e      	ldr	r3, [pc, #568]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800225e:	430a      	orrs	r2, r1
 8002260:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4013      	ands	r3, r2
 800226c:	d009      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800226e:	4b8a      	ldr	r3, [pc, #552]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002272:	4a8d      	ldr	r2, [pc, #564]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002274:	4013      	ands	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800227c:	4b86      	ldr	r3, [pc, #536]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800227e:	430a      	orrs	r2, r1
 8002280:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	@ 0x80
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4013      	ands	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800228e:	4b82      	ldr	r3, [pc, #520]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002292:	4a86      	ldr	r2, [pc, #536]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002294:	4013      	ands	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800229c:	4b7e      	ldr	r3, [pc, #504]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2220      	movs	r2, #32
 80022a8:	4013      	ands	r3, r2
 80022aa:	d009      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	4a7f      	ldr	r2, [pc, #508]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	4b77      	ldr	r3, [pc, #476]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2240      	movs	r2, #64	@ 0x40
 80022c6:	4013      	ands	r3, r2
 80022c8:	d009      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022ca:	4b73      	ldr	r3, [pc, #460]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ce:	4a79      	ldr	r2, [pc, #484]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022da:	430a      	orrs	r2, r1
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	01db      	lsls	r3, r3, #7
 80022e6:	4013      	ands	r3, r2
 80022e8:	d015      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	0899      	lsrs	r1, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022f6:	4b68      	ldr	r3, [pc, #416]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002300:	2380      	movs	r3, #128	@ 0x80
 8002302:	05db      	lsls	r3, r3, #23
 8002304:	429a      	cmp	r2, r3
 8002306:	d106      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002308:	4b63      	ldr	r3, [pc, #396]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	4b62      	ldr	r3, [pc, #392]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800230e:	2180      	movs	r1, #128	@ 0x80
 8002310:	0249      	lsls	r1, r1, #9
 8002312:	430a      	orrs	r2, r1
 8002314:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	031b      	lsls	r3, r3, #12
 800231e:	4013      	ands	r3, r2
 8002320:	d009      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002322:	4b5d      	ldr	r3, [pc, #372]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002326:	2240      	movs	r2, #64	@ 0x40
 8002328:	4393      	bics	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002330:	4b59      	ldr	r3, [pc, #356]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002332:	430a      	orrs	r2, r1
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	039b      	lsls	r3, r3, #14
 800233e:	4013      	ands	r3, r2
 8002340:	d016      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002342:	4b55      	ldr	r3, [pc, #340]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002346:	4a5c      	ldr	r2, [pc, #368]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002350:	4b51      	ldr	r3, [pc, #324]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002352:	430a      	orrs	r2, r1
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	03db      	lsls	r3, r3, #15
 800235e:	429a      	cmp	r2, r3
 8002360:	d106      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002362:	4b4d      	ldr	r3, [pc, #308]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	4b4c      	ldr	r3, [pc, #304]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002368:	2180      	movs	r1, #128	@ 0x80
 800236a:	0449      	lsls	r1, r1, #17
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	03db      	lsls	r3, r3, #15
 8002378:	4013      	ands	r3, r2
 800237a:	d016      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800237c:	4b46      	ldr	r3, [pc, #280]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800237e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002380:	4a4e      	ldr	r2, [pc, #312]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002382:	4013      	ands	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800238a:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800238c:	430a      	orrs	r2, r1
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	045b      	lsls	r3, r3, #17
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800239c:	4b3e      	ldr	r3, [pc, #248]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	0449      	lsls	r1, r1, #17
 80023a6:	430a      	orrs	r2, r1
 80023a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	4013      	ands	r3, r2
 80023b4:	d014      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80023b6:	4b38      	ldr	r3, [pc, #224]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	2203      	movs	r2, #3
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	4b34      	ldr	r3, [pc, #208]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d106      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023d2:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	4b30      	ldr	r3, [pc, #192]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d8:	2180      	movs	r1, #128	@ 0x80
 80023da:	0249      	lsls	r1, r1, #9
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	019b      	lsls	r3, r3, #6
 80023e8:	4013      	ands	r3, r2
 80023ea:	d014      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80023ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	220c      	movs	r2, #12
 80023f2:	4393      	bics	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023fa:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023fc:	430a      	orrs	r2, r1
 80023fe:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	2b04      	cmp	r3, #4
 8002406:	d106      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800240e:	2180      	movs	r1, #128	@ 0x80
 8002410:	0249      	lsls	r1, r1, #9
 8002412:	430a      	orrs	r2, r1
 8002414:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	@ 0x80
 800241c:	045b      	lsls	r3, r3, #17
 800241e:	4013      	ands	r3, r2
 8002420:	d016      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002422:	4b1d      	ldr	r3, [pc, #116]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	4a22      	ldr	r2, [pc, #136]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002432:	430a      	orrs	r2, r1
 8002434:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800243a:	2380      	movs	r3, #128	@ 0x80
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	429a      	cmp	r2, r3
 8002440:	d106      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002448:	2180      	movs	r1, #128	@ 0x80
 800244a:	0449      	lsls	r1, r1, #17
 800244c:	430a      	orrs	r2, r1
 800244e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	049b      	lsls	r3, r3, #18
 8002458:	4013      	ands	r3, r2
 800245a:	d016      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800245c:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002460:	4a10      	ldr	r2, [pc, #64]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800246a:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800246c:	430a      	orrs	r2, r1
 800246e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002482:	2180      	movs	r1, #128	@ 0x80
 8002484:	0449      	lsls	r1, r1, #17
 8002486:	430a      	orrs	r2, r1
 8002488:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800248a:	2312      	movs	r3, #18
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	781b      	ldrb	r3, [r3, #0]
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b006      	add	sp, #24
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	efffffff 	.word	0xefffffff
 80024a0:	fffff3ff 	.word	0xfffff3ff
 80024a4:	fffffcff 	.word	0xfffffcff
 80024a8:	fff3ffff 	.word	0xfff3ffff
 80024ac:	ffcfffff 	.word	0xffcfffff
 80024b0:	ffffcfff 	.word	0xffffcfff
 80024b4:	ffff3fff 	.word	0xffff3fff
 80024b8:	ffbfffff 	.word	0xffbfffff
 80024bc:	feffffff 	.word	0xfeffffff

080024c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80024ce:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <USB_EnableGlobalInt+0x24>)
 80024d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b004      	add	sp, #16
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	0000bf80 	.word	0x0000bf80

080024e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <USB_DisableGlobalInt+0x24>)
 80024f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	43d2      	mvns	r2, r2
 80024fc:	401a      	ands	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b004      	add	sp, #16
 800250a:	bd80      	pop	{r7, pc}
 800250c:	0000bf80 	.word	0x0000bf80

08002510 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	000a      	movs	r2, r1
 800251a:	1cfb      	adds	r3, r7, #3
 800251c:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800251e:	1cfb      	adds	r3, r7, #3
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	085a      	lsrs	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	641a      	str	r2, [r3, #64]	@ 0x40
 8002532:	e00d      	b.n	8002550 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 8002534:	1cfb      	adds	r3, r7, #3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	2280      	movs	r2, #128	@ 0x80
 8002542:	0612      	lsls	r2, r2, #24
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	641a      	str	r2, [r3, #64]	@ 0x40
 800254a:	e001      	b.n	8002550 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b002      	add	sp, #8
 8002558:	bd80      	pop	{r7, pc}

0800255a <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800255a:	b084      	sub	sp, #16
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	2004      	movs	r0, #4
 8002566:	2420      	movs	r4, #32
 8002568:	1900      	adds	r0, r0, r4
 800256a:	19c0      	adds	r0, r0, r7
 800256c:	6001      	str	r1, [r0, #0]
 800256e:	6042      	str	r2, [r0, #4]
 8002570:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	2201      	movs	r2, #1
 800257e:	4393      	bics	r3, r2
 8002580:	001a      	movs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8002586:	250f      	movs	r5, #15
 8002588:	197c      	adds	r4, r7, r5
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2100      	movs	r1, #0
 800258e:	0018      	movs	r0, r3
 8002590:	f7ff ffbe 	bl	8002510 <USB_SetCurrentMode>
 8002594:	0003      	movs	r3, r0
 8002596:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800259e:	197b      	adds	r3, r7, r5
 80025a0:	781b      	ldrb	r3, [r3, #0]
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b004      	add	sp, #16
 80025a8:	bcb0      	pop	{r4, r5, r7}
 80025aa:	bc08      	pop	{r3}
 80025ac:	b004      	add	sp, #16
 80025ae:	4718      	bx	r3

080025b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b09e      	sub	sp, #120	@ 0x78
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80025ba:	2377      	movs	r3, #119	@ 0x77
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	18d3      	adds	r3, r2, r3
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4adc      	ldr	r2, [pc, #880]	@ (8002940 <USB_ActivateEndpoint+0x390>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	78db      	ldrb	r3, [r3, #3]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d00e      	beq.n	80025fa <USB_ActivateEndpoint+0x4a>
 80025dc:	dc19      	bgt.n	8002612 <USB_ActivateEndpoint+0x62>
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d01c      	beq.n	800261c <USB_ActivateEndpoint+0x6c>
 80025e2:	dc16      	bgt.n	8002612 <USB_ActivateEndpoint+0x62>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <USB_ActivateEndpoint+0x3e>
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d00c      	beq.n	8002606 <USB_ActivateEndpoint+0x56>
 80025ec:	e011      	b.n	8002612 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80025ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4313      	orrs	r3, r2
 80025f6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 80025f8:	e011      	b.n	800261e <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80025fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025fc:	22c0      	movs	r2, #192	@ 0xc0
 80025fe:	00d2      	lsls	r2, r2, #3
 8002600:	4313      	orrs	r3, r2
 8002602:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8002604:	e00b      	b.n	800261e <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002606:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002608:	2280      	movs	r2, #128	@ 0x80
 800260a:	00d2      	lsls	r2, r2, #3
 800260c:	4313      	orrs	r3, r2
 800260e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8002610:	e005      	b.n	800261e <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8002612:	2377      	movs	r3, #119	@ 0x77
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
      break;
 800261a:	e000      	b.n	800261e <USB_ActivateEndpoint+0x6e>
      break;
 800261c:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	18d3      	adds	r3, r2, r3
 8002628:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800262a:	49c6      	ldr	r1, [pc, #792]	@ (8002944 <USB_ActivateEndpoint+0x394>)
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	18d3      	adds	r3, r2, r3
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4ac2      	ldr	r2, [pc, #776]	@ (8002948 <USB_ActivateEndpoint+0x398>)
 800263e:	4013      	ands	r3, r2
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	7812      	ldrb	r2, [r2, #0]
 8002644:	4313      	orrs	r3, r2
 8002646:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	18d3      	adds	r3, r2, r3
 8002652:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002654:	49bb      	ldr	r1, [pc, #748]	@ (8002944 <USB_ActivateEndpoint+0x394>)
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	7b1b      	ldrb	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d000      	beq.n	8002664 <USB_ActivateEndpoint+0xb4>
 8002662:	e155      	b.n	8002910 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d06e      	beq.n	800274a <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4ab6      	ldr	r2, [pc, #728]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 8002674:	4694      	mov	ip, r2
 8002676:	4463      	add	r3, ip
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	49b2      	ldr	r1, [pc, #712]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 8002682:	468c      	mov	ip, r1
 8002684:	4463      	add	r3, ip
 8002686:	0c12      	lsrs	r2, r2, #16
 8002688:	0412      	lsls	r2, r2, #16
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4aae      	ldr	r2, [pc, #696]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 8002694:	4694      	mov	ip, r2
 8002696:	4463      	add	r3, ip
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	88db      	ldrh	r3, [r3, #6]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	009a      	lsls	r2, r3, #2
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	48a8      	ldr	r0, [pc, #672]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 80026ac:	4684      	mov	ip, r0
 80026ae:	4463      	add	r3, ip
 80026b0:	430a      	orrs	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	18d3      	adds	r3, r2, r3
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2240      	movs	r2, #64	@ 0x40
 80026c6:	4013      	ands	r3, r2
 80026c8:	d011      	beq.n	80026ee <USB_ActivateEndpoint+0x13e>
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	18d3      	adds	r3, r2, r3
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a9c      	ldr	r2, [pc, #624]	@ (8002948 <USB_ActivateEndpoint+0x398>)
 80026d8:	4013      	ands	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	18d3      	adds	r3, r2, r3
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4999      	ldr	r1, [pc, #612]	@ (8002950 <USB_ActivateEndpoint+0x3a0>)
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	78db      	ldrb	r3, [r3, #3]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d016      	beq.n	8002724 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	18d3      	adds	r3, r2, r3
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a94      	ldr	r2, [pc, #592]	@ (8002954 <USB_ActivateEndpoint+0x3a4>)
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	4053      	eors	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	18d3      	adds	r3, r2, r3
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4989      	ldr	r1, [pc, #548]	@ (8002944 <USB_ActivateEndpoint+0x394>)
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e261      	b.n	8002be8 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	18d3      	adds	r3, r2, r3
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a88      	ldr	r2, [pc, #544]	@ (8002954 <USB_ActivateEndpoint+0x3a4>)
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	18d3      	adds	r3, r2, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4980      	ldr	r1, [pc, #512]	@ (8002944 <USB_ActivateEndpoint+0x394>)
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e24e      	b.n	8002be8 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4a7e      	ldr	r2, [pc, #504]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 8002752:	4694      	mov	ip, r2
 8002754:	4463      	add	r3, ip
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	497b      	ldr	r1, [pc, #492]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 8002760:	468c      	mov	ip, r1
 8002762:	4463      	add	r3, ip
 8002764:	0c12      	lsrs	r2, r2, #16
 8002766:	0412      	lsls	r2, r2, #16
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4a76      	ldr	r2, [pc, #472]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 8002772:	4694      	mov	ip, r2
 8002774:	4463      	add	r3, ip
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	88db      	ldrh	r3, [r3, #6]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	b29b      	uxth	r3, r3
 8002780:	009a      	lsls	r2, r3, #2
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4870      	ldr	r0, [pc, #448]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 800278a:	4684      	mov	ip, r0
 800278c:	4463      	add	r3, ip
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4a6c      	ldr	r2, [pc, #432]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 800279a:	4694      	mov	ip, r2
 800279c:	4463      	add	r3, ip
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4969      	ldr	r1, [pc, #420]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 80027a8:	468c      	mov	ip, r1
 80027aa:	4463      	add	r3, ip
 80027ac:	0192      	lsls	r2, r2, #6
 80027ae:	0992      	lsrs	r2, r2, #6
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80027b8:	d920      	bls.n	80027fc <USB_ActivateEndpoint+0x24c>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	221f      	movs	r2, #31
 80027c8:	4013      	ands	r3, r2
 80027ca:	d102      	bne.n	80027d2 <USB_ActivateEndpoint+0x222>
 80027cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ce:	3b01      	subs	r3, #1
 80027d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4a5c      	ldr	r2, [pc, #368]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 80027da:	4694      	mov	ip, r2
 80027dc:	4463      	add	r3, ip
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	431a      	orrs	r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4957      	ldr	r1, [pc, #348]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 80027ee:	468c      	mov	ip, r1
 80027f0:	4463      	add	r3, ip
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	0609      	lsls	r1, r1, #24
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e032      	b.n	8002862 <USB_ActivateEndpoint+0x2b2>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d111      	bne.n	8002828 <USB_ActivateEndpoint+0x278>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4a50      	ldr	r2, [pc, #320]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 800280c:	4694      	mov	ip, r2
 800280e:	4463      	add	r3, ip
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	494c      	ldr	r1, [pc, #304]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 800281a:	468c      	mov	ip, r1
 800281c:	4463      	add	r3, ip
 800281e:	2180      	movs	r1, #128	@ 0x80
 8002820:	0609      	lsls	r1, r1, #24
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	e01c      	b.n	8002862 <USB_ActivateEndpoint+0x2b2>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2201      	movs	r2, #1
 8002836:	4013      	ands	r3, r2
 8002838:	d002      	beq.n	8002840 <USB_ActivateEndpoint+0x290>
 800283a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283c:	3301      	adds	r3, #1
 800283e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4a41      	ldr	r2, [pc, #260]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 8002848:	4694      	mov	ip, r2
 800284a:	4463      	add	r3, ip
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002850:	069a      	lsls	r2, r3, #26
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	483c      	ldr	r0, [pc, #240]	@ (800294c <USB_ActivateEndpoint+0x39c>)
 800285a:	4684      	mov	ip, r0
 800285c:	4463      	add	r3, ip
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	18d3      	adds	r3, r2, r3
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002870:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	01db      	lsls	r3, r3, #7
 8002876:	4013      	ands	r3, r2
 8002878:	d011      	beq.n	800289e <USB_ActivateEndpoint+0x2ee>
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	18d3      	adds	r3, r2, r3
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a30      	ldr	r2, [pc, #192]	@ (8002948 <USB_ActivateEndpoint+0x398>)
 8002888:	4013      	ands	r3, r2
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	18d3      	adds	r3, r2, r3
 8002896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002898:	492f      	ldr	r1, [pc, #188]	@ (8002958 <USB_ActivateEndpoint+0x3a8>)
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d11c      	bne.n	80028e0 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	18d3      	adds	r3, r2, r3
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2a      	ldr	r2, [pc, #168]	@ (800295c <USB_ActivateEndpoint+0x3ac>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2280      	movs	r2, #128	@ 0x80
 80028bc:	0152      	lsls	r2, r2, #5
 80028be:	4053      	eors	r3, r2
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	0192      	lsls	r2, r2, #6
 80028c8:	4053      	eors	r3, r2
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	18d3      	adds	r3, r2, r3
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	491a      	ldr	r1, [pc, #104]	@ (8002944 <USB_ActivateEndpoint+0x394>)
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e183      	b.n	8002be8 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	18d3      	adds	r3, r2, r3
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1b      	ldr	r2, [pc, #108]	@ (800295c <USB_ActivateEndpoint+0x3ac>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	2280      	movs	r2, #128	@ 0x80
 80028f6:	0192      	lsls	r2, r2, #6
 80028f8:	4053      	eors	r3, r2
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	18d3      	adds	r3, r2, r3
 8002906:	6a3a      	ldr	r2, [r7, #32]
 8002908:	490e      	ldr	r1, [pc, #56]	@ (8002944 <USB_ActivateEndpoint+0x394>)
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e16b      	b.n	8002be8 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	78db      	ldrb	r3, [r3, #3]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d125      	bne.n	8002964 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	18d3      	adds	r3, r2, r3
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a08      	ldr	r2, [pc, #32]	@ (8002948 <USB_ActivateEndpoint+0x398>)
 8002926:	4013      	ands	r3, r2
 8002928:	663b      	str	r3, [r7, #96]	@ 0x60
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	18d3      	adds	r3, r2, r3
 8002934:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002936:	490a      	ldr	r1, [pc, #40]	@ (8002960 <USB_ActivateEndpoint+0x3b0>)
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e024      	b.n	8002988 <USB_ActivateEndpoint+0x3d8>
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	07ff898f 	.word	0x07ff898f
 8002944:	00008080 	.word	0x00008080
 8002948:	07ff8f8f 	.word	0x07ff8f8f
 800294c:	40009800 	.word	0x40009800
 8002950:	000080c0 	.word	0x000080c0
 8002954:	07ff8fbf 	.word	0x07ff8fbf
 8002958:	0000c080 	.word	0x0000c080
 800295c:	07ffbf8f 	.word	0x07ffbf8f
 8002960:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	18d3      	adds	r3, r2, r3
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4aa1      	ldr	r2, [pc, #644]	@ (8002bf8 <USB_ActivateEndpoint+0x648>)
 8002972:	4013      	ands	r3, r2
 8002974:	667b      	str	r3, [r7, #100]	@ 0x64
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	18d3      	adds	r3, r2, r3
 8002980:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002982:	499e      	ldr	r1, [pc, #632]	@ (8002bfc <USB_ActivateEndpoint+0x64c>)
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4a9c      	ldr	r2, [pc, #624]	@ (8002c00 <USB_ActivateEndpoint+0x650>)
 8002990:	4694      	mov	ip, r2
 8002992:	4463      	add	r3, ip
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4998      	ldr	r1, [pc, #608]	@ (8002c00 <USB_ActivateEndpoint+0x650>)
 800299e:	468c      	mov	ip, r1
 80029a0:	4463      	add	r3, ip
 80029a2:	0c12      	lsrs	r2, r2, #16
 80029a4:	0412      	lsls	r2, r2, #16
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4a94      	ldr	r2, [pc, #592]	@ (8002c00 <USB_ActivateEndpoint+0x650>)
 80029b0:	4694      	mov	ip, r2
 80029b2:	4463      	add	r3, ip
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	891b      	ldrh	r3, [r3, #8]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	009a      	lsls	r2, r3, #2
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	488e      	ldr	r0, [pc, #568]	@ (8002c00 <USB_ActivateEndpoint+0x650>)
 80029c8:	4684      	mov	ip, r0
 80029ca:	4463      	add	r3, ip
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4a8a      	ldr	r2, [pc, #552]	@ (8002c00 <USB_ActivateEndpoint+0x650>)
 80029d8:	4694      	mov	ip, r2
 80029da:	4463      	add	r3, ip
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4986      	ldr	r1, [pc, #536]	@ (8002c00 <USB_ActivateEndpoint+0x650>)
 80029e6:	468c      	mov	ip, r1
 80029e8:	4463      	add	r3, ip
 80029ea:	0c12      	lsrs	r2, r2, #16
 80029ec:	0412      	lsls	r2, r2, #16
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4a82      	ldr	r2, [pc, #520]	@ (8002c00 <USB_ActivateEndpoint+0x650>)
 80029f8:	4694      	mov	ip, r2
 80029fa:	4463      	add	r3, ip
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	895b      	ldrh	r3, [r3, #10]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	009a      	lsls	r2, r3, #2
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	487c      	ldr	r0, [pc, #496]	@ (8002c00 <USB_ActivateEndpoint+0x650>)
 8002a10:	4684      	mov	ip, r0
 8002a12:	4463      	add	r3, ip
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	785b      	ldrb	r3, [r3, #1]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d169      	bne.n	8002af4 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	18d3      	adds	r3, r2, r3
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	01db      	lsls	r3, r3, #7
 8002a34:	4013      	ands	r3, r2
 8002a36:	d011      	beq.n	8002a5c <USB_ActivateEndpoint+0x4ac>
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a6f      	ldr	r2, [pc, #444]	@ (8002c04 <USB_ActivateEndpoint+0x654>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	18d3      	adds	r3, r2, r3
 8002a54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a56:	496c      	ldr	r1, [pc, #432]	@ (8002c08 <USB_ActivateEndpoint+0x658>)
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	18d3      	adds	r3, r2, r3
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6c:	2240      	movs	r2, #64	@ 0x40
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d011      	beq.n	8002a96 <USB_ActivateEndpoint+0x4e6>
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	18d3      	adds	r3, r2, r3
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a61      	ldr	r2, [pc, #388]	@ (8002c04 <USB_ActivateEndpoint+0x654>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	18d3      	adds	r3, r2, r3
 8002a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a90:	495e      	ldr	r1, [pc, #376]	@ (8002c0c <USB_ActivateEndpoint+0x65c>)
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	18d3      	adds	r3, r2, r3
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c10 <USB_ActivateEndpoint+0x660>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aaa:	2280      	movs	r2, #128	@ 0x80
 8002aac:	0152      	lsls	r2, r2, #5
 8002aae:	4053      	eors	r3, r2
 8002ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	2280      	movs	r2, #128	@ 0x80
 8002ab6:	0192      	lsls	r2, r2, #6
 8002ab8:	4053      	eors	r3, r2
 8002aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	18d3      	adds	r3, r2, r3
 8002ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ac8:	494c      	ldr	r1, [pc, #304]	@ (8002bfc <USB_ActivateEndpoint+0x64c>)
 8002aca:	430a      	orrs	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	18d3      	adds	r3, r2, r3
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a4e      	ldr	r2, [pc, #312]	@ (8002c14 <USB_ActivateEndpoint+0x664>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aec:	4943      	ldr	r1, [pc, #268]	@ (8002bfc <USB_ActivateEndpoint+0x64c>)
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e079      	b.n	8002be8 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	18d3      	adds	r3, r2, r3
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b04:	2380      	movs	r3, #128	@ 0x80
 8002b06:	01db      	lsls	r3, r3, #7
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d011      	beq.n	8002b30 <USB_ActivateEndpoint+0x580>
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	18d3      	adds	r3, r2, r3
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a3a      	ldr	r2, [pc, #232]	@ (8002c04 <USB_ActivateEndpoint+0x654>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	18d3      	adds	r3, r2, r3
 8002b28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b2a:	4937      	ldr	r1, [pc, #220]	@ (8002c08 <USB_ActivateEndpoint+0x658>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	18d3      	adds	r3, r2, r3
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b40:	2240      	movs	r2, #64	@ 0x40
 8002b42:	4013      	ands	r3, r2
 8002b44:	d011      	beq.n	8002b6a <USB_ActivateEndpoint+0x5ba>
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	18d3      	adds	r3, r2, r3
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a2c      	ldr	r2, [pc, #176]	@ (8002c04 <USB_ActivateEndpoint+0x654>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	18d3      	adds	r3, r2, r3
 8002b62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b64:	4929      	ldr	r1, [pc, #164]	@ (8002c0c <USB_ActivateEndpoint+0x65c>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	78db      	ldrb	r3, [r3, #3]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d016      	beq.n	8002ba0 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	18d3      	adds	r3, r2, r3
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a25      	ldr	r2, [pc, #148]	@ (8002c14 <USB_ActivateEndpoint+0x664>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b86:	2220      	movs	r2, #32
 8002b88:	4053      	eors	r3, r2
 8002b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	18d3      	adds	r3, r2, r3
 8002b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b98:	4918      	ldr	r1, [pc, #96]	@ (8002bfc <USB_ActivateEndpoint+0x64c>)
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	e011      	b.n	8002bc4 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	18d3      	adds	r3, r2, r3
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <USB_ActivateEndpoint+0x664>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	18d3      	adds	r3, r2, r3
 8002bbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bbe:	490f      	ldr	r1, [pc, #60]	@ (8002bfc <USB_ActivateEndpoint+0x64c>)
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	18d3      	adds	r3, r2, r3
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8002c10 <USB_ActivateEndpoint+0x660>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	18d3      	adds	r3, r2, r3
 8002be0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002be2:	4906      	ldr	r1, [pc, #24]	@ (8002bfc <USB_ActivateEndpoint+0x64c>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8002be8:	2377      	movs	r3, #119	@ 0x77
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	781b      	ldrb	r3, [r3, #0]
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b01e      	add	sp, #120	@ 0x78
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	07ff8e8f 	.word	0x07ff8e8f
 8002bfc:	00008080 	.word	0x00008080
 8002c00:	40009800 	.word	0x40009800
 8002c04:	07ff8f8f 	.word	0x07ff8f8f
 8002c08:	0000c080 	.word	0x0000c080
 8002c0c:	000080c0 	.word	0x000080c0
 8002c10:	07ffbf8f 	.word	0x07ffbf8f
 8002c14:	07ff8fbf 	.word	0x07ff8fbf

08002c18 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b096      	sub	sp, #88	@ 0x58
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	7b1b      	ldrb	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d164      	bne.n	8002cf4 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	785b      	ldrb	r3, [r3, #1]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d02f      	beq.n	8002c92 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	18d3      	adds	r3, r2, r3
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2240      	movs	r2, #64	@ 0x40
 8002c44:	4013      	ands	r3, r2
 8002c46:	d011      	beq.n	8002c6c <USB_DeactivateEndpoint+0x54>
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	18d3      	adds	r3, r2, r3
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a9d      	ldr	r2, [pc, #628]	@ (8002ecc <USB_DeactivateEndpoint+0x2b4>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	18d3      	adds	r3, r2, r3
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	499a      	ldr	r1, [pc, #616]	@ (8002ed0 <USB_DeactivateEndpoint+0x2b8>)
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	18d3      	adds	r3, r2, r3
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a96      	ldr	r2, [pc, #600]	@ (8002ed4 <USB_DeactivateEndpoint+0x2bc>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	18d3      	adds	r3, r2, r3
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	4993      	ldr	r1, [pc, #588]	@ (8002ed8 <USB_DeactivateEndpoint+0x2c0>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e117      	b.n	8002ec2 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	18d3      	adds	r3, r2, r3
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	2380      	movs	r3, #128	@ 0x80
 8002ca4:	01db      	lsls	r3, r3, #7
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d011      	beq.n	8002cce <USB_DeactivateEndpoint+0xb6>
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	18d3      	adds	r3, r2, r3
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a85      	ldr	r2, [pc, #532]	@ (8002ecc <USB_DeactivateEndpoint+0x2b4>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	18d3      	adds	r3, r2, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4984      	ldr	r1, [pc, #528]	@ (8002edc <USB_DeactivateEndpoint+0x2c4>)
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	18d3      	adds	r3, r2, r3
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a81      	ldr	r2, [pc, #516]	@ (8002ee0 <USB_DeactivateEndpoint+0x2c8>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	497a      	ldr	r1, [pc, #488]	@ (8002ed8 <USB_DeactivateEndpoint+0x2c0>)
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e0e6      	b.n	8002ec2 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	785b      	ldrb	r3, [r3, #1]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d171      	bne.n	8002de0 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	18d3      	adds	r3, r2, r3
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	01db      	lsls	r3, r3, #7
 8002d10:	4013      	ands	r3, r2
 8002d12:	d011      	beq.n	8002d38 <USB_DeactivateEndpoint+0x120>
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	18d3      	adds	r3, r2, r3
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6a      	ldr	r2, [pc, #424]	@ (8002ecc <USB_DeactivateEndpoint+0x2b4>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	18d3      	adds	r3, r2, r3
 8002d30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d32:	496a      	ldr	r1, [pc, #424]	@ (8002edc <USB_DeactivateEndpoint+0x2c4>)
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	18d3      	adds	r3, r2, r3
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d48:	2240      	movs	r2, #64	@ 0x40
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d011      	beq.n	8002d72 <USB_DeactivateEndpoint+0x15a>
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	18d3      	adds	r3, r2, r3
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ecc <USB_DeactivateEndpoint+0x2b4>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	18d3      	adds	r3, r2, r3
 8002d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d6c:	4958      	ldr	r1, [pc, #352]	@ (8002ed0 <USB_DeactivateEndpoint+0x2b8>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	18d3      	adds	r3, r2, r3
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a53      	ldr	r2, [pc, #332]	@ (8002ecc <USB_DeactivateEndpoint+0x2b4>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	18d3      	adds	r3, r2, r3
 8002d8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d90:	494f      	ldr	r1, [pc, #316]	@ (8002ed0 <USB_DeactivateEndpoint+0x2b8>)
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	18d3      	adds	r3, r2, r3
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a4f      	ldr	r2, [pc, #316]	@ (8002ee0 <USB_DeactivateEndpoint+0x2c8>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	18d3      	adds	r3, r2, r3
 8002db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db4:	4948      	ldr	r1, [pc, #288]	@ (8002ed8 <USB_DeactivateEndpoint+0x2c0>)
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	18d3      	adds	r3, r2, r3
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a43      	ldr	r2, [pc, #268]	@ (8002ed4 <USB_DeactivateEndpoint+0x2bc>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	623b      	str	r3, [r7, #32]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	18d3      	adds	r3, r2, r3
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	493f      	ldr	r1, [pc, #252]	@ (8002ed8 <USB_DeactivateEndpoint+0x2c0>)
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e070      	b.n	8002ec2 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	18d3      	adds	r3, r2, r3
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	01db      	lsls	r3, r3, #7
 8002df4:	4013      	ands	r3, r2
 8002df6:	d011      	beq.n	8002e1c <USB_DeactivateEndpoint+0x204>
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	18d3      	adds	r3, r2, r3
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a31      	ldr	r2, [pc, #196]	@ (8002ecc <USB_DeactivateEndpoint+0x2b4>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	18d3      	adds	r3, r2, r3
 8002e14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002e16:	4931      	ldr	r1, [pc, #196]	@ (8002edc <USB_DeactivateEndpoint+0x2c4>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	18d3      	adds	r3, r2, r3
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e2c:	2240      	movs	r2, #64	@ 0x40
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d011      	beq.n	8002e56 <USB_DeactivateEndpoint+0x23e>
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	18d3      	adds	r3, r2, r3
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a23      	ldr	r2, [pc, #140]	@ (8002ecc <USB_DeactivateEndpoint+0x2b4>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	18d3      	adds	r3, r2, r3
 8002e4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e50:	491f      	ldr	r1, [pc, #124]	@ (8002ed0 <USB_DeactivateEndpoint+0x2b8>)
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	18d3      	adds	r3, r2, r3
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1a      	ldr	r2, [pc, #104]	@ (8002ecc <USB_DeactivateEndpoint+0x2b4>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	18d3      	adds	r3, r2, r3
 8002e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e74:	4919      	ldr	r1, [pc, #100]	@ (8002edc <USB_DeactivateEndpoint+0x2c4>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	18d3      	adds	r3, r2, r3
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a13      	ldr	r2, [pc, #76]	@ (8002ed4 <USB_DeactivateEndpoint+0x2bc>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	18d3      	adds	r3, r2, r3
 8002e96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e98:	490f      	ldr	r1, [pc, #60]	@ (8002ed8 <USB_DeactivateEndpoint+0x2c0>)
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	18d3      	adds	r3, r2, r3
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee0 <USB_DeactivateEndpoint+0x2c8>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	18d3      	adds	r3, r2, r3
 8002eba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ebc:	4906      	ldr	r1, [pc, #24]	@ (8002ed8 <USB_DeactivateEndpoint+0x2c0>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b016      	add	sp, #88	@ 0x58
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	07ff8f8f 	.word	0x07ff8f8f
 8002ed0:	000080c0 	.word	0x000080c0
 8002ed4:	07ff8fbf 	.word	0x07ff8fbf
 8002ed8:	00008080 	.word	0x00008080
 8002edc:	0000c080 	.word	0x0000c080
 8002ee0:	07ffbf8f 	.word	0x07ffbf8f

08002ee4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b097      	sub	sp, #92	@ 0x5c
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <USB_EPStartXfer+0x16>
 8002ef6:	f000 fcbf 	bl	8003878 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d903      	bls.n	8002f0e <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f0c:	e002      	b.n	8002f14 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	7b1b      	ldrb	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d12b      	bne.n	8002f74 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6959      	ldr	r1, [r3, #20]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	88da      	ldrh	r2, [r3, #6]
 8002f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f001 f843 	bl	8003fb4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4ace      	ldr	r2, [pc, #824]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8002f36:	4694      	mov	ip, r2
 8002f38:	4463      	add	r3, ip
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	49cb      	ldr	r1, [pc, #812]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8002f44:	468c      	mov	ip, r1
 8002f46:	4463      	add	r3, ip
 8002f48:	0412      	lsls	r2, r2, #16
 8002f4a:	0c12      	lsrs	r2, r2, #16
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4ac6      	ldr	r2, [pc, #792]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8002f56:	4694      	mov	ip, r2
 8002f58:	4463      	add	r3, ip
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f5e:	041a      	lsls	r2, r3, #16
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	48c2      	ldr	r0, [pc, #776]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8002f68:	4684      	mov	ip, r0
 8002f6a:	4463      	add	r3, ip
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f000 fc67 	bl	8003842 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	78db      	ldrb	r3, [r3, #3]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d000      	beq.n	8002f7e <USB_EPStartXfer+0x9a>
 8002f7c:	e31a      	b.n	80035b4 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6a1a      	ldr	r2, [r3, #32]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d800      	bhi.n	8002f8c <USB_EPStartXfer+0xa8>
 8002f8a:	e2c7      	b.n	800351c <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	18d3      	adds	r3, r2, r3
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4ab6      	ldr	r2, [pc, #728]	@ (8003274 <USB_EPStartXfer+0x390>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	18d3      	adds	r3, r2, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	49b3      	ldr	r1, [pc, #716]	@ (8003278 <USB_EPStartXfer+0x394>)
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6a1a      	ldr	r2, [r3, #32]
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	1ad2      	subs	r2, r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	18d3      	adds	r3, r2, r3
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2240      	movs	r2, #64	@ 0x40
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d100      	bne.n	8002fd0 <USB_EPStartXfer+0xec>
 8002fce:	e155      	b.n	800327c <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d162      	bne.n	800309e <USB_EPStartXfer+0x1ba>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4aa4      	ldr	r2, [pc, #656]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8002fe0:	4694      	mov	ip, r2
 8002fe2:	4463      	add	r3, ip
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	49a0      	ldr	r1, [pc, #640]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8002fee:	468c      	mov	ip, r1
 8002ff0:	4463      	add	r3, ip
 8002ff2:	0192      	lsls	r2, r2, #6
 8002ff4:	0992      	lsrs	r2, r2, #6
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffa:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ffc:	d91e      	bls.n	800303c <USB_EPStartXfer+0x158>
 8002ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	653b      	str	r3, [r7, #80]	@ 0x50
 8003004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003006:	221f      	movs	r2, #31
 8003008:	4013      	ands	r3, r2
 800300a:	d102      	bne.n	8003012 <USB_EPStartXfer+0x12e>
 800300c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800300e:	3b01      	subs	r3, #1
 8003010:	653b      	str	r3, [r7, #80]	@ 0x50
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4a95      	ldr	r2, [pc, #596]	@ (8003270 <USB_EPStartXfer+0x38c>)
 800301a:	4694      	mov	ip, r2
 800301c:	4463      	add	r3, ip
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003022:	069b      	lsls	r3, r3, #26
 8003024:	431a      	orrs	r2, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4990      	ldr	r1, [pc, #576]	@ (8003270 <USB_EPStartXfer+0x38c>)
 800302e:	468c      	mov	ip, r1
 8003030:	4463      	add	r3, ip
 8003032:	2180      	movs	r1, #128	@ 0x80
 8003034:	0609      	lsls	r1, r1, #24
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	e055      	b.n	80030e8 <USB_EPStartXfer+0x204>
 800303c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303e:	2b00      	cmp	r3, #0
 8003040:	d111      	bne.n	8003066 <USB_EPStartXfer+0x182>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4a89      	ldr	r2, [pc, #548]	@ (8003270 <USB_EPStartXfer+0x38c>)
 800304a:	4694      	mov	ip, r2
 800304c:	4463      	add	r3, ip
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4986      	ldr	r1, [pc, #536]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003058:	468c      	mov	ip, r1
 800305a:	4463      	add	r3, ip
 800305c:	2180      	movs	r1, #128	@ 0x80
 800305e:	0609      	lsls	r1, r1, #24
 8003060:	430a      	orrs	r2, r1
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	e040      	b.n	80030e8 <USB_EPStartXfer+0x204>
 8003066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	653b      	str	r3, [r7, #80]	@ 0x50
 800306c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306e:	2201      	movs	r2, #1
 8003070:	4013      	ands	r3, r2
 8003072:	d002      	beq.n	800307a <USB_EPStartXfer+0x196>
 8003074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003076:	3301      	adds	r3, #1
 8003078:	653b      	str	r3, [r7, #80]	@ 0x50
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4a7b      	ldr	r2, [pc, #492]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003082:	4694      	mov	ip, r2
 8003084:	4463      	add	r3, ip
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800308a:	069a      	lsls	r2, r3, #26
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4877      	ldr	r0, [pc, #476]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003094:	4684      	mov	ip, r0
 8003096:	4463      	add	r3, ip
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	e024      	b.n	80030e8 <USB_EPStartXfer+0x204>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d120      	bne.n	80030e8 <USB_EPStartXfer+0x204>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4a70      	ldr	r2, [pc, #448]	@ (8003270 <USB_EPStartXfer+0x38c>)
 80030ae:	4694      	mov	ip, r2
 80030b0:	4463      	add	r3, ip
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	496d      	ldr	r1, [pc, #436]	@ (8003270 <USB_EPStartXfer+0x38c>)
 80030bc:	468c      	mov	ip, r1
 80030be:	4463      	add	r3, ip
 80030c0:	0412      	lsls	r2, r2, #16
 80030c2:	0c12      	lsrs	r2, r2, #16
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4a68      	ldr	r2, [pc, #416]	@ (8003270 <USB_EPStartXfer+0x38c>)
 80030ce:	4694      	mov	ip, r2
 80030d0:	4463      	add	r3, ip
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d6:	041a      	lsls	r2, r3, #16
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4864      	ldr	r0, [pc, #400]	@ (8003270 <USB_EPStartXfer+0x38c>)
 80030e0:	4684      	mov	ip, r0
 80030e2:	4463      	add	r3, ip
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80030e8:	201a      	movs	r0, #26
 80030ea:	183b      	adds	r3, r7, r0
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	8952      	ldrh	r2, [r2, #10]
 80030f0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6959      	ldr	r1, [r3, #20]
 80030f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f8:	b29c      	uxth	r4, r3
 80030fa:	183b      	adds	r3, r7, r0
 80030fc:	881a      	ldrh	r2, [r3, #0]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	0023      	movs	r3, r4
 8003102:	f000 ff57 	bl	8003fb4 <USB_WritePMA>
            ep->xfer_buff += len;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310c:	18d2      	adds	r2, r2, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6a1a      	ldr	r2, [r3, #32]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	429a      	cmp	r2, r3
 800311c:	d906      	bls.n	800312c <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003124:	1ad2      	subs	r2, r2, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	621a      	str	r2, [r3, #32]
 800312a:	e005      	b.n	8003138 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d162      	bne.n	8003206 <USB_EPStartXfer+0x322>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4a4a      	ldr	r2, [pc, #296]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003148:	4694      	mov	ip, r2
 800314a:	4463      	add	r3, ip
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4946      	ldr	r1, [pc, #280]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003156:	468c      	mov	ip, r1
 8003158:	4463      	add	r3, ip
 800315a:	0192      	lsls	r2, r2, #6
 800315c:	0992      	lsrs	r2, r2, #6
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003162:	2b3e      	cmp	r3, #62	@ 0x3e
 8003164:	d91e      	bls.n	80031a4 <USB_EPStartXfer+0x2c0>
 8003166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800316c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316e:	221f      	movs	r2, #31
 8003170:	4013      	ands	r3, r2
 8003172:	d102      	bne.n	800317a <USB_EPStartXfer+0x296>
 8003174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003176:	3b01      	subs	r3, #1
 8003178:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4a3b      	ldr	r2, [pc, #236]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003182:	4694      	mov	ip, r2
 8003184:	4463      	add	r3, ip
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800318a:	069b      	lsls	r3, r3, #26
 800318c:	431a      	orrs	r2, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4936      	ldr	r1, [pc, #216]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003196:	468c      	mov	ip, r1
 8003198:	4463      	add	r3, ip
 800319a:	2180      	movs	r1, #128	@ 0x80
 800319c:	0609      	lsls	r1, r1, #24
 800319e:	430a      	orrs	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	e055      	b.n	8003250 <USB_EPStartXfer+0x36c>
 80031a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d111      	bne.n	80031ce <USB_EPStartXfer+0x2ea>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003270 <USB_EPStartXfer+0x38c>)
 80031b2:	4694      	mov	ip, r2
 80031b4:	4463      	add	r3, ip
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	492c      	ldr	r1, [pc, #176]	@ (8003270 <USB_EPStartXfer+0x38c>)
 80031c0:	468c      	mov	ip, r1
 80031c2:	4463      	add	r3, ip
 80031c4:	2180      	movs	r1, #128	@ 0x80
 80031c6:	0609      	lsls	r1, r1, #24
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e040      	b.n	8003250 <USB_EPStartXfer+0x36c>
 80031ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d6:	2201      	movs	r2, #1
 80031d8:	4013      	ands	r3, r2
 80031da:	d002      	beq.n	80031e2 <USB_EPStartXfer+0x2fe>
 80031dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031de:	3301      	adds	r3, #1
 80031e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4a21      	ldr	r2, [pc, #132]	@ (8003270 <USB_EPStartXfer+0x38c>)
 80031ea:	4694      	mov	ip, r2
 80031ec:	4463      	add	r3, ip
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f2:	069a      	lsls	r2, r3, #26
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	481d      	ldr	r0, [pc, #116]	@ (8003270 <USB_EPStartXfer+0x38c>)
 80031fc:	4684      	mov	ip, r0
 80031fe:	4463      	add	r3, ip
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e024      	b.n	8003250 <USB_EPStartXfer+0x36c>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	785b      	ldrb	r3, [r3, #1]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d120      	bne.n	8003250 <USB_EPStartXfer+0x36c>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4a16      	ldr	r2, [pc, #88]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003216:	4694      	mov	ip, r2
 8003218:	4463      	add	r3, ip
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4913      	ldr	r1, [pc, #76]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003224:	468c      	mov	ip, r1
 8003226:	4463      	add	r3, ip
 8003228:	0412      	lsls	r2, r2, #16
 800322a:	0c12      	lsrs	r2, r2, #16
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4a0e      	ldr	r2, [pc, #56]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003236:	4694      	mov	ip, r2
 8003238:	4463      	add	r3, ip
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323e:	041a      	lsls	r2, r3, #16
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	480a      	ldr	r0, [pc, #40]	@ (8003270 <USB_EPStartXfer+0x38c>)
 8003248:	4684      	mov	ip, r0
 800324a:	4463      	add	r3, ip
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003250:	201a      	movs	r0, #26
 8003252:	183b      	adds	r3, r7, r0
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	8912      	ldrh	r2, [r2, #8]
 8003258:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6959      	ldr	r1, [r3, #20]
 800325e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003260:	b29c      	uxth	r4, r3
 8003262:	183b      	adds	r3, r7, r0
 8003264:	881a      	ldrh	r2, [r3, #0]
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	0023      	movs	r3, r4
 800326a:	f000 fea3 	bl	8003fb4 <USB_WritePMA>
 800326e:	e2e8      	b.n	8003842 <USB_EPStartXfer+0x95e>
 8003270:	40009800 	.word	0x40009800
 8003274:	07ff8f8f 	.word	0x07ff8f8f
 8003278:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	785b      	ldrb	r3, [r3, #1]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d162      	bne.n	800334a <USB_EPStartXfer+0x466>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4ac7      	ldr	r2, [pc, #796]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800328c:	4694      	mov	ip, r2
 800328e:	4463      	add	r3, ip
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	49c3      	ldr	r1, [pc, #780]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800329a:	468c      	mov	ip, r1
 800329c:	4463      	add	r3, ip
 800329e:	0192      	lsls	r2, r2, #6
 80032a0:	0992      	lsrs	r2, r2, #6
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80032a8:	d91e      	bls.n	80032e8 <USB_EPStartXfer+0x404>
 80032aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b2:	221f      	movs	r2, #31
 80032b4:	4013      	ands	r3, r2
 80032b6:	d102      	bne.n	80032be <USB_EPStartXfer+0x3da>
 80032b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032ba:	3b01      	subs	r3, #1
 80032bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4ab8      	ldr	r2, [pc, #736]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 80032c6:	4694      	mov	ip, r2
 80032c8:	4463      	add	r3, ip
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032ce:	069b      	lsls	r3, r3, #26
 80032d0:	431a      	orrs	r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	49b3      	ldr	r1, [pc, #716]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 80032da:	468c      	mov	ip, r1
 80032dc:	4463      	add	r3, ip
 80032de:	2180      	movs	r1, #128	@ 0x80
 80032e0:	0609      	lsls	r1, r1, #24
 80032e2:	430a      	orrs	r2, r1
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e055      	b.n	8003394 <USB_EPStartXfer+0x4b0>
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d111      	bne.n	8003312 <USB_EPStartXfer+0x42e>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4aac      	ldr	r2, [pc, #688]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 80032f6:	4694      	mov	ip, r2
 80032f8:	4463      	add	r3, ip
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	49a9      	ldr	r1, [pc, #676]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 8003304:	468c      	mov	ip, r1
 8003306:	4463      	add	r3, ip
 8003308:	2180      	movs	r1, #128	@ 0x80
 800330a:	0609      	lsls	r1, r1, #24
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e040      	b.n	8003394 <USB_EPStartXfer+0x4b0>
 8003312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800331a:	2201      	movs	r2, #1
 800331c:	4013      	ands	r3, r2
 800331e:	d002      	beq.n	8003326 <USB_EPStartXfer+0x442>
 8003320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003322:	3301      	adds	r3, #1
 8003324:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4a9e      	ldr	r2, [pc, #632]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800332e:	4694      	mov	ip, r2
 8003330:	4463      	add	r3, ip
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003336:	069a      	lsls	r2, r3, #26
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	489a      	ldr	r0, [pc, #616]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 8003340:	4684      	mov	ip, r0
 8003342:	4463      	add	r3, ip
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e024      	b.n	8003394 <USB_EPStartXfer+0x4b0>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d120      	bne.n	8003394 <USB_EPStartXfer+0x4b0>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4a93      	ldr	r2, [pc, #588]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800335a:	4694      	mov	ip, r2
 800335c:	4463      	add	r3, ip
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4990      	ldr	r1, [pc, #576]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 8003368:	468c      	mov	ip, r1
 800336a:	4463      	add	r3, ip
 800336c:	0412      	lsls	r2, r2, #16
 800336e:	0c12      	lsrs	r2, r2, #16
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4a8b      	ldr	r2, [pc, #556]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800337a:	4694      	mov	ip, r2
 800337c:	4463      	add	r3, ip
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003382:	041a      	lsls	r2, r3, #16
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4887      	ldr	r0, [pc, #540]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800338c:	4684      	mov	ip, r0
 800338e:	4463      	add	r3, ip
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003394:	201a      	movs	r0, #26
 8003396:	183b      	adds	r3, r7, r0
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	8912      	ldrh	r2, [r2, #8]
 800339c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6959      	ldr	r1, [r3, #20]
 80033a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a4:	b29c      	uxth	r4, r3
 80033a6:	183b      	adds	r3, r7, r0
 80033a8:	881a      	ldrh	r2, [r3, #0]
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	0023      	movs	r3, r4
 80033ae:	f000 fe01 	bl	8003fb4 <USB_WritePMA>
            ep->xfer_buff += len;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b8:	18d2      	adds	r2, r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6a1a      	ldr	r2, [r3, #32]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d906      	bls.n	80033d8 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6a1a      	ldr	r2, [r3, #32]
 80033ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d0:	1ad2      	subs	r2, r2, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	621a      	str	r2, [r3, #32]
 80033d6:	e005      	b.n	80033e4 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2200      	movs	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d162      	bne.n	80034b2 <USB_EPStartXfer+0x5ce>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4a6d      	ldr	r2, [pc, #436]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 80033f4:	4694      	mov	ip, r2
 80033f6:	4463      	add	r3, ip
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4969      	ldr	r1, [pc, #420]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 8003402:	468c      	mov	ip, r1
 8003404:	4463      	add	r3, ip
 8003406:	0192      	lsls	r2, r2, #6
 8003408:	0992      	lsrs	r2, r2, #6
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003410:	d91e      	bls.n	8003450 <USB_EPStartXfer+0x56c>
 8003412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	647b      	str	r3, [r7, #68]	@ 0x44
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	221f      	movs	r2, #31
 800341c:	4013      	ands	r3, r2
 800341e:	d102      	bne.n	8003426 <USB_EPStartXfer+0x542>
 8003420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003422:	3b01      	subs	r3, #1
 8003424:	647b      	str	r3, [r7, #68]	@ 0x44
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4a5e      	ldr	r2, [pc, #376]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800342e:	4694      	mov	ip, r2
 8003430:	4463      	add	r3, ip
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003436:	069b      	lsls	r3, r3, #26
 8003438:	431a      	orrs	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4959      	ldr	r1, [pc, #356]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 8003442:	468c      	mov	ip, r1
 8003444:	4463      	add	r3, ip
 8003446:	2180      	movs	r1, #128	@ 0x80
 8003448:	0609      	lsls	r1, r1, #24
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	e055      	b.n	80034fc <USB_EPStartXfer+0x618>
 8003450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003452:	2b00      	cmp	r3, #0
 8003454:	d111      	bne.n	800347a <USB_EPStartXfer+0x596>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4a52      	ldr	r2, [pc, #328]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800345e:	4694      	mov	ip, r2
 8003460:	4463      	add	r3, ip
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	494f      	ldr	r1, [pc, #316]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800346c:	468c      	mov	ip, r1
 800346e:	4463      	add	r3, ip
 8003470:	2180      	movs	r1, #128	@ 0x80
 8003472:	0609      	lsls	r1, r1, #24
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	e040      	b.n	80034fc <USB_EPStartXfer+0x618>
 800347a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003482:	2201      	movs	r2, #1
 8003484:	4013      	ands	r3, r2
 8003486:	d002      	beq.n	800348e <USB_EPStartXfer+0x5aa>
 8003488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800348a:	3301      	adds	r3, #1
 800348c:	647b      	str	r3, [r7, #68]	@ 0x44
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4a44      	ldr	r2, [pc, #272]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 8003496:	4694      	mov	ip, r2
 8003498:	4463      	add	r3, ip
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800349e:	069a      	lsls	r2, r3, #26
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4840      	ldr	r0, [pc, #256]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 80034a8:	4684      	mov	ip, r0
 80034aa:	4463      	add	r3, ip
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	e024      	b.n	80034fc <USB_EPStartXfer+0x618>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d120      	bne.n	80034fc <USB_EPStartXfer+0x618>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4a39      	ldr	r2, [pc, #228]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 80034c2:	4694      	mov	ip, r2
 80034c4:	4463      	add	r3, ip
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4936      	ldr	r1, [pc, #216]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 80034d0:	468c      	mov	ip, r1
 80034d2:	4463      	add	r3, ip
 80034d4:	0412      	lsls	r2, r2, #16
 80034d6:	0c12      	lsrs	r2, r2, #16
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4a31      	ldr	r2, [pc, #196]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 80034e2:	4694      	mov	ip, r2
 80034e4:	4463      	add	r3, ip
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ea:	041a      	lsls	r2, r3, #16
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	482d      	ldr	r0, [pc, #180]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 80034f4:	4684      	mov	ip, r0
 80034f6:	4463      	add	r3, ip
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80034fc:	201a      	movs	r0, #26
 80034fe:	183b      	adds	r3, r7, r0
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	8952      	ldrh	r2, [r2, #10]
 8003504:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6959      	ldr	r1, [r3, #20]
 800350a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350c:	b29c      	uxth	r4, r3
 800350e:	183b      	adds	r3, r7, r0
 8003510:	881a      	ldrh	r2, [r3, #0]
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	0023      	movs	r3, r4
 8003516:	f000 fd4d 	bl	8003fb4 <USB_WritePMA>
 800351a:	e192      	b.n	8003842 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	18d3      	adds	r3, r2, r3
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1f      	ldr	r2, [pc, #124]	@ (80035ac <USB_EPStartXfer+0x6c8>)
 8003530:	4013      	ands	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	18d3      	adds	r3, r2, r3
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	491b      	ldr	r1, [pc, #108]	@ (80035b0 <USB_EPStartXfer+0x6cc>)
 8003542:	430a      	orrs	r2, r1
 8003544:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4a16      	ldr	r2, [pc, #88]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800354e:	4694      	mov	ip, r2
 8003550:	4463      	add	r3, ip
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4913      	ldr	r1, [pc, #76]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800355c:	468c      	mov	ip, r1
 800355e:	4463      	add	r3, ip
 8003560:	0412      	lsls	r2, r2, #16
 8003562:	0c12      	lsrs	r2, r2, #16
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4a0e      	ldr	r2, [pc, #56]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 800356e:	4694      	mov	ip, r2
 8003570:	4463      	add	r3, ip
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003576:	041a      	lsls	r2, r3, #16
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	480a      	ldr	r0, [pc, #40]	@ (80035a8 <USB_EPStartXfer+0x6c4>)
 8003580:	4684      	mov	ip, r0
 8003582:	4463      	add	r3, ip
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003588:	201a      	movs	r0, #26
 800358a:	183b      	adds	r3, r7, r0
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	8912      	ldrh	r2, [r2, #8]
 8003590:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6959      	ldr	r1, [r3, #20]
 8003596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003598:	b29c      	uxth	r4, r3
 800359a:	183b      	adds	r3, r7, r0
 800359c:	881a      	ldrh	r2, [r3, #0]
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	0023      	movs	r3, r4
 80035a2:	f000 fd07 	bl	8003fb4 <USB_WritePMA>
 80035a6:	e14c      	b.n	8003842 <USB_EPStartXfer+0x95e>
 80035a8:	40009800 	.word	0x40009800
 80035ac:	07ff8e8f 	.word	0x07ff8e8f
 80035b0:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6a1a      	ldr	r2, [r3, #32]
 80035b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ba:	1ad2      	subs	r2, r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	18d3      	adds	r3, r2, r3
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2240      	movs	r2, #64	@ 0x40
 80035ce:	4013      	ands	r3, r2
 80035d0:	d100      	bne.n	80035d4 <USB_EPStartXfer+0x6f0>
 80035d2:	e09b      	b.n	800370c <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	785b      	ldrb	r3, [r3, #1]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d162      	bne.n	80036a2 <USB_EPStartXfer+0x7be>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4ad6      	ldr	r2, [pc, #856]	@ (800393c <USB_EPStartXfer+0xa58>)
 80035e4:	4694      	mov	ip, r2
 80035e6:	4463      	add	r3, ip
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	49d2      	ldr	r1, [pc, #840]	@ (800393c <USB_EPStartXfer+0xa58>)
 80035f2:	468c      	mov	ip, r1
 80035f4:	4463      	add	r3, ip
 80035f6:	0192      	lsls	r2, r2, #6
 80035f8:	0992      	lsrs	r2, r2, #6
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8003600:	d91e      	bls.n	8003640 <USB_EPStartXfer+0x75c>
 8003602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	643b      	str	r3, [r7, #64]	@ 0x40
 8003608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360a:	221f      	movs	r2, #31
 800360c:	4013      	ands	r3, r2
 800360e:	d102      	bne.n	8003616 <USB_EPStartXfer+0x732>
 8003610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003612:	3b01      	subs	r3, #1
 8003614:	643b      	str	r3, [r7, #64]	@ 0x40
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4ac7      	ldr	r2, [pc, #796]	@ (800393c <USB_EPStartXfer+0xa58>)
 800361e:	4694      	mov	ip, r2
 8003620:	4463      	add	r3, ip
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003626:	069b      	lsls	r3, r3, #26
 8003628:	431a      	orrs	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	49c2      	ldr	r1, [pc, #776]	@ (800393c <USB_EPStartXfer+0xa58>)
 8003632:	468c      	mov	ip, r1
 8003634:	4463      	add	r3, ip
 8003636:	2180      	movs	r1, #128	@ 0x80
 8003638:	0609      	lsls	r1, r1, #24
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	e055      	b.n	80036ec <USB_EPStartXfer+0x808>
 8003640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003642:	2b00      	cmp	r3, #0
 8003644:	d111      	bne.n	800366a <USB_EPStartXfer+0x786>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4abb      	ldr	r2, [pc, #748]	@ (800393c <USB_EPStartXfer+0xa58>)
 800364e:	4694      	mov	ip, r2
 8003650:	4463      	add	r3, ip
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	49b8      	ldr	r1, [pc, #736]	@ (800393c <USB_EPStartXfer+0xa58>)
 800365c:	468c      	mov	ip, r1
 800365e:	4463      	add	r3, ip
 8003660:	2180      	movs	r1, #128	@ 0x80
 8003662:	0609      	lsls	r1, r1, #24
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	e040      	b.n	80036ec <USB_EPStartXfer+0x808>
 800366a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003672:	2201      	movs	r2, #1
 8003674:	4013      	ands	r3, r2
 8003676:	d002      	beq.n	800367e <USB_EPStartXfer+0x79a>
 8003678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367a:	3301      	adds	r3, #1
 800367c:	643b      	str	r3, [r7, #64]	@ 0x40
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4aad      	ldr	r2, [pc, #692]	@ (800393c <USB_EPStartXfer+0xa58>)
 8003686:	4694      	mov	ip, r2
 8003688:	4463      	add	r3, ip
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800368e:	069a      	lsls	r2, r3, #26
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	48a9      	ldr	r0, [pc, #676]	@ (800393c <USB_EPStartXfer+0xa58>)
 8003698:	4684      	mov	ip, r0
 800369a:	4463      	add	r3, ip
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	e024      	b.n	80036ec <USB_EPStartXfer+0x808>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d120      	bne.n	80036ec <USB_EPStartXfer+0x808>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4aa2      	ldr	r2, [pc, #648]	@ (800393c <USB_EPStartXfer+0xa58>)
 80036b2:	4694      	mov	ip, r2
 80036b4:	4463      	add	r3, ip
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	499f      	ldr	r1, [pc, #636]	@ (800393c <USB_EPStartXfer+0xa58>)
 80036c0:	468c      	mov	ip, r1
 80036c2:	4463      	add	r3, ip
 80036c4:	0412      	lsls	r2, r2, #16
 80036c6:	0c12      	lsrs	r2, r2, #16
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4a9a      	ldr	r2, [pc, #616]	@ (800393c <USB_EPStartXfer+0xa58>)
 80036d2:	4694      	mov	ip, r2
 80036d4:	4463      	add	r3, ip
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036da:	041a      	lsls	r2, r3, #16
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4896      	ldr	r0, [pc, #600]	@ (800393c <USB_EPStartXfer+0xa58>)
 80036e4:	4684      	mov	ip, r0
 80036e6:	4463      	add	r3, ip
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 80036ec:	201a      	movs	r0, #26
 80036ee:	183b      	adds	r3, r7, r0
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	8952      	ldrh	r2, [r2, #10]
 80036f4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6959      	ldr	r1, [r3, #20]
 80036fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fc:	b29c      	uxth	r4, r3
 80036fe:	183b      	adds	r3, r7, r0
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	0023      	movs	r3, r4
 8003706:	f000 fc55 	bl	8003fb4 <USB_WritePMA>
 800370a:	e09a      	b.n	8003842 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d162      	bne.n	80037da <USB_EPStartXfer+0x8f6>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4a88      	ldr	r2, [pc, #544]	@ (800393c <USB_EPStartXfer+0xa58>)
 800371c:	4694      	mov	ip, r2
 800371e:	4463      	add	r3, ip
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4984      	ldr	r1, [pc, #528]	@ (800393c <USB_EPStartXfer+0xa58>)
 800372a:	468c      	mov	ip, r1
 800372c:	4463      	add	r3, ip
 800372e:	0192      	lsls	r2, r2, #6
 8003730:	0992      	lsrs	r2, r2, #6
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003736:	2b3e      	cmp	r3, #62	@ 0x3e
 8003738:	d91e      	bls.n	8003778 <USB_EPStartXfer+0x894>
 800373a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003742:	221f      	movs	r2, #31
 8003744:	4013      	ands	r3, r2
 8003746:	d102      	bne.n	800374e <USB_EPStartXfer+0x86a>
 8003748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374a:	3b01      	subs	r3, #1
 800374c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4a79      	ldr	r2, [pc, #484]	@ (800393c <USB_EPStartXfer+0xa58>)
 8003756:	4694      	mov	ip, r2
 8003758:	4463      	add	r3, ip
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800375e:	069b      	lsls	r3, r3, #26
 8003760:	431a      	orrs	r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4974      	ldr	r1, [pc, #464]	@ (800393c <USB_EPStartXfer+0xa58>)
 800376a:	468c      	mov	ip, r1
 800376c:	4463      	add	r3, ip
 800376e:	2180      	movs	r1, #128	@ 0x80
 8003770:	0609      	lsls	r1, r1, #24
 8003772:	430a      	orrs	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e055      	b.n	8003824 <USB_EPStartXfer+0x940>
 8003778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377a:	2b00      	cmp	r3, #0
 800377c:	d111      	bne.n	80037a2 <USB_EPStartXfer+0x8be>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4a6d      	ldr	r2, [pc, #436]	@ (800393c <USB_EPStartXfer+0xa58>)
 8003786:	4694      	mov	ip, r2
 8003788:	4463      	add	r3, ip
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	496a      	ldr	r1, [pc, #424]	@ (800393c <USB_EPStartXfer+0xa58>)
 8003794:	468c      	mov	ip, r1
 8003796:	4463      	add	r3, ip
 8003798:	2180      	movs	r1, #128	@ 0x80
 800379a:	0609      	lsls	r1, r1, #24
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	e040      	b.n	8003824 <USB_EPStartXfer+0x940>
 80037a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	d002      	beq.n	80037b6 <USB_EPStartXfer+0x8d2>
 80037b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b2:	3301      	adds	r3, #1
 80037b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4a5f      	ldr	r2, [pc, #380]	@ (800393c <USB_EPStartXfer+0xa58>)
 80037be:	4694      	mov	ip, r2
 80037c0:	4463      	add	r3, ip
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c6:	069a      	lsls	r2, r3, #26
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	485b      	ldr	r0, [pc, #364]	@ (800393c <USB_EPStartXfer+0xa58>)
 80037d0:	4684      	mov	ip, r0
 80037d2:	4463      	add	r3, ip
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e024      	b.n	8003824 <USB_EPStartXfer+0x940>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	785b      	ldrb	r3, [r3, #1]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d120      	bne.n	8003824 <USB_EPStartXfer+0x940>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4a54      	ldr	r2, [pc, #336]	@ (800393c <USB_EPStartXfer+0xa58>)
 80037ea:	4694      	mov	ip, r2
 80037ec:	4463      	add	r3, ip
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4951      	ldr	r1, [pc, #324]	@ (800393c <USB_EPStartXfer+0xa58>)
 80037f8:	468c      	mov	ip, r1
 80037fa:	4463      	add	r3, ip
 80037fc:	0412      	lsls	r2, r2, #16
 80037fe:	0c12      	lsrs	r2, r2, #16
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4a4c      	ldr	r2, [pc, #304]	@ (800393c <USB_EPStartXfer+0xa58>)
 800380a:	4694      	mov	ip, r2
 800380c:	4463      	add	r3, ip
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003812:	041a      	lsls	r2, r3, #16
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4848      	ldr	r0, [pc, #288]	@ (800393c <USB_EPStartXfer+0xa58>)
 800381c:	4684      	mov	ip, r0
 800381e:	4463      	add	r3, ip
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003824:	201a      	movs	r0, #26
 8003826:	183b      	adds	r3, r7, r0
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	8912      	ldrh	r2, [r2, #8]
 800382c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6959      	ldr	r1, [r3, #20]
 8003832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003834:	b29c      	uxth	r4, r3
 8003836:	183b      	adds	r3, r7, r0
 8003838:	881a      	ldrh	r2, [r3, #0]
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	0023      	movs	r3, r4
 800383e:	f000 fbb9 	bl	8003fb4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	18d3      	adds	r3, r2, r3
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a3c      	ldr	r2, [pc, #240]	@ (8003940 <USB_EPStartXfer+0xa5c>)
 8003850:	4013      	ands	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2210      	movs	r2, #16
 8003858:	4053      	eors	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	4053      	eors	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	18d3      	adds	r3, r2, r3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4934      	ldr	r1, [pc, #208]	@ (8003944 <USB_EPStartXfer+0xa60>)
 8003872:	430a      	orrs	r2, r1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e340      	b.n	8003efa <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	7b1b      	ldrb	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d000      	beq.n	8003882 <USB_EPStartXfer+0x99e>
 8003880:	e07e      	b.n	8003980 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	d909      	bls.n	80038a2 <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389a:	1ad2      	subs	r2, r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	619a      	str	r2, [r3, #24]
 80038a0:	e005      	b.n	80038ae <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2200      	movs	r2, #0
 80038ac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4a21      	ldr	r2, [pc, #132]	@ (800393c <USB_EPStartXfer+0xa58>)
 80038b6:	4694      	mov	ip, r2
 80038b8:	4463      	add	r3, ip
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	491e      	ldr	r1, [pc, #120]	@ (800393c <USB_EPStartXfer+0xa58>)
 80038c4:	468c      	mov	ip, r1
 80038c6:	4463      	add	r3, ip
 80038c8:	0192      	lsls	r2, r2, #6
 80038ca:	0992      	lsrs	r2, r2, #6
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80038d2:	d91e      	bls.n	8003912 <USB_EPStartXfer+0xa2e>
 80038d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038dc:	221f      	movs	r2, #31
 80038de:	4013      	ands	r3, r2
 80038e0:	d102      	bne.n	80038e8 <USB_EPStartXfer+0xa04>
 80038e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e4:	3b01      	subs	r3, #1
 80038e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4a13      	ldr	r2, [pc, #76]	@ (800393c <USB_EPStartXfer+0xa58>)
 80038f0:	4694      	mov	ip, r2
 80038f2:	4463      	add	r3, ip
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f8:	069b      	lsls	r3, r3, #26
 80038fa:	431a      	orrs	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	490e      	ldr	r1, [pc, #56]	@ (800393c <USB_EPStartXfer+0xa58>)
 8003904:	468c      	mov	ip, r1
 8003906:	4463      	add	r3, ip
 8003908:	2180      	movs	r1, #128	@ 0x80
 800390a:	0609      	lsls	r1, r1, #24
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	e2d7      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
 8003912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003914:	2b00      	cmp	r3, #0
 8003916:	d117      	bne.n	8003948 <USB_EPStartXfer+0xa64>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4a07      	ldr	r2, [pc, #28]	@ (800393c <USB_EPStartXfer+0xa58>)
 8003920:	4694      	mov	ip, r2
 8003922:	4463      	add	r3, ip
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4903      	ldr	r1, [pc, #12]	@ (800393c <USB_EPStartXfer+0xa58>)
 800392e:	468c      	mov	ip, r1
 8003930:	4463      	add	r3, ip
 8003932:	2180      	movs	r1, #128	@ 0x80
 8003934:	0609      	lsls	r1, r1, #24
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e2c2      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
 800393c:	40009800 	.word	0x40009800
 8003940:	07ff8fbf 	.word	0x07ff8fbf
 8003944:	00008080 	.word	0x00008080
 8003948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800394e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003950:	2201      	movs	r2, #1
 8003952:	4013      	ands	r3, r2
 8003954:	d002      	beq.n	800395c <USB_EPStartXfer+0xa78>
 8003956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003958:	3301      	adds	r3, #1
 800395a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4ac4      	ldr	r2, [pc, #784]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003964:	4694      	mov	ip, r2
 8003966:	4463      	add	r3, ip
 8003968:	6859      	ldr	r1, [r3, #4]
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396c:	069a      	lsls	r2, r3, #26
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	48bf      	ldr	r0, [pc, #764]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003976:	4684      	mov	ip, r0
 8003978:	4463      	add	r3, ip
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	e2a0      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	78db      	ldrb	r3, [r3, #3]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d000      	beq.n	800398a <USB_EPStartXfer+0xaa6>
 8003988:	e15f      	b.n	8003c4a <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d168      	bne.n	8003a64 <USB_EPStartXfer+0xb80>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4ab6      	ldr	r2, [pc, #728]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 800399a:	4694      	mov	ip, r2
 800399c:	4463      	add	r3, ip
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	49b3      	ldr	r1, [pc, #716]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 80039a8:	468c      	mov	ip, r1
 80039aa:	4463      	add	r3, ip
 80039ac:	0192      	lsls	r2, r2, #6
 80039ae:	0992      	lsrs	r2, r2, #6
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80039b8:	d920      	bls.n	80039fc <USB_EPStartXfer+0xb18>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	221f      	movs	r2, #31
 80039c8:	4013      	ands	r3, r2
 80039ca:	d102      	bne.n	80039d2 <USB_EPStartXfer+0xaee>
 80039cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ce:	3b01      	subs	r3, #1
 80039d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4aa6      	ldr	r2, [pc, #664]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 80039da:	4694      	mov	ip, r2
 80039dc:	4463      	add	r3, ip
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e2:	069b      	lsls	r3, r3, #26
 80039e4:	431a      	orrs	r2, r3
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	49a1      	ldr	r1, [pc, #644]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 80039ee:	468c      	mov	ip, r1
 80039f0:	4463      	add	r3, ip
 80039f2:	2180      	movs	r1, #128	@ 0x80
 80039f4:	0609      	lsls	r1, r1, #24
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e059      	b.n	8003ab0 <USB_EPStartXfer+0xbcc>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d111      	bne.n	8003a28 <USB_EPStartXfer+0xb44>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4a9a      	ldr	r2, [pc, #616]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003a0c:	4694      	mov	ip, r2
 8003a0e:	4463      	add	r3, ip
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4996      	ldr	r1, [pc, #600]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003a1a:	468c      	mov	ip, r1
 8003a1c:	4463      	add	r3, ip
 8003a1e:	2180      	movs	r1, #128	@ 0x80
 8003a20:	0609      	lsls	r1, r1, #24
 8003a22:	430a      	orrs	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e043      	b.n	8003ab0 <USB_EPStartXfer+0xbcc>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2201      	movs	r2, #1
 8003a36:	4013      	ands	r3, r2
 8003a38:	d002      	beq.n	8003a40 <USB_EPStartXfer+0xb5c>
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4a8b      	ldr	r2, [pc, #556]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003a48:	4694      	mov	ip, r2
 8003a4a:	4463      	add	r3, ip
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a50:	069a      	lsls	r2, r3, #26
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4886      	ldr	r0, [pc, #536]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003a5a:	4684      	mov	ip, r0
 8003a5c:	4463      	add	r3, ip
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e025      	b.n	8003ab0 <USB_EPStartXfer+0xbcc>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	785b      	ldrb	r3, [r3, #1]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d121      	bne.n	8003ab0 <USB_EPStartXfer+0xbcc>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4a80      	ldr	r2, [pc, #512]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003a74:	4694      	mov	ip, r2
 8003a76:	4463      	add	r3, ip
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	497c      	ldr	r1, [pc, #496]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003a82:	468c      	mov	ip, r1
 8003a84:	4463      	add	r3, ip
 8003a86:	0412      	lsls	r2, r2, #16
 8003a88:	0c12      	lsrs	r2, r2, #16
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4a78      	ldr	r2, [pc, #480]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003a94:	4694      	mov	ip, r2
 8003a96:	4463      	add	r3, ip
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	041a      	lsls	r2, r3, #16
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4873      	ldr	r0, [pc, #460]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003aa8:	4684      	mov	ip, r0
 8003aaa:	4463      	add	r3, ip
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d168      	bne.n	8003b8a <USB_EPStartXfer+0xca6>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4a6d      	ldr	r2, [pc, #436]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003ac0:	4694      	mov	ip, r2
 8003ac2:	4463      	add	r3, ip
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4969      	ldr	r1, [pc, #420]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003ace:	468c      	mov	ip, r1
 8003ad0:	4463      	add	r3, ip
 8003ad2:	0192      	lsls	r2, r2, #6
 8003ad4:	0992      	lsrs	r2, r2, #6
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ade:	d920      	bls.n	8003b22 <USB_EPStartXfer+0xc3e>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	221f      	movs	r2, #31
 8003aee:	4013      	ands	r3, r2
 8003af0:	d102      	bne.n	8003af8 <USB_EPStartXfer+0xc14>
 8003af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af4:	3b01      	subs	r3, #1
 8003af6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4a5d      	ldr	r2, [pc, #372]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003b00:	4694      	mov	ip, r2
 8003b02:	4463      	add	r3, ip
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	069b      	lsls	r3, r3, #26
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4958      	ldr	r1, [pc, #352]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003b14:	468c      	mov	ip, r1
 8003b16:	4463      	add	r3, ip
 8003b18:	2180      	movs	r1, #128	@ 0x80
 8003b1a:	0609      	lsls	r1, r1, #24
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	e059      	b.n	8003bd6 <USB_EPStartXfer+0xcf2>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d111      	bne.n	8003b4e <USB_EPStartXfer+0xc6a>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4a50      	ldr	r2, [pc, #320]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003b32:	4694      	mov	ip, r2
 8003b34:	4463      	add	r3, ip
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	494d      	ldr	r1, [pc, #308]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003b40:	468c      	mov	ip, r1
 8003b42:	4463      	add	r3, ip
 8003b44:	2180      	movs	r1, #128	@ 0x80
 8003b46:	0609      	lsls	r1, r1, #24
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	e043      	b.n	8003bd6 <USB_EPStartXfer+0xcf2>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d002      	beq.n	8003b66 <USB_EPStartXfer+0xc82>
 8003b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b62:	3301      	adds	r3, #1
 8003b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4a41      	ldr	r2, [pc, #260]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003b6e:	4694      	mov	ip, r2
 8003b70:	4463      	add	r3, ip
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	069a      	lsls	r2, r3, #26
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	483d      	ldr	r0, [pc, #244]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003b80:	4684      	mov	ip, r0
 8003b82:	4463      	add	r3, ip
 8003b84:	430a      	orrs	r2, r1
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	e025      	b.n	8003bd6 <USB_EPStartXfer+0xcf2>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	785b      	ldrb	r3, [r3, #1]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d121      	bne.n	8003bd6 <USB_EPStartXfer+0xcf2>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4a36      	ldr	r2, [pc, #216]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003b9a:	4694      	mov	ip, r2
 8003b9c:	4463      	add	r3, ip
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4933      	ldr	r1, [pc, #204]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003ba8:	468c      	mov	ip, r1
 8003baa:	4463      	add	r3, ip
 8003bac:	0412      	lsls	r2, r2, #16
 8003bae:	0c12      	lsrs	r2, r2, #16
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003bba:	4694      	mov	ip, r2
 8003bbc:	4463      	add	r3, ip
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	041a      	lsls	r2, r3, #16
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4829      	ldr	r0, [pc, #164]	@ (8003c74 <USB_EPStartXfer+0xd90>)
 8003bce:	4684      	mov	ip, r0
 8003bd0:	4463      	add	r3, ip
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d100      	bne.n	8003be0 <USB_EPStartXfer+0xcfc>
 8003bde:	e170      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	18d3      	adds	r3, r2, r3
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2126      	movs	r1, #38	@ 0x26
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	881a      	ldrh	r2, [r3, #0]
 8003bf6:	2380      	movs	r3, #128	@ 0x80
 8003bf8:	01db      	lsls	r3, r3, #7
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d004      	beq.n	8003c08 <USB_EPStartXfer+0xd24>
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	2240      	movs	r2, #64	@ 0x40
 8003c04:	4013      	ands	r3, r2
 8003c06:	d10d      	bne.n	8003c24 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8003c08:	2126      	movs	r1, #38	@ 0x26
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	881a      	ldrh	r2, [r3, #0]
 8003c0e:	2380      	movs	r3, #128	@ 0x80
 8003c10:	01db      	lsls	r3, r3, #7
 8003c12:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003c14:	d000      	beq.n	8003c18 <USB_EPStartXfer+0xd34>
 8003c16:	e154      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	2240      	movs	r2, #64	@ 0x40
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d000      	beq.n	8003c24 <USB_EPStartXfer+0xd40>
 8003c22:	e14e      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	18d3      	adds	r3, r2, r3
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a11      	ldr	r2, [pc, #68]	@ (8003c78 <USB_EPStartXfer+0xd94>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	623b      	str	r3, [r7, #32]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	18d3      	adds	r3, r2, r3
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	490e      	ldr	r1, [pc, #56]	@ (8003c7c <USB_EPStartXfer+0xd98>)
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e13b      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	78db      	ldrb	r3, [r3, #3]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d000      	beq.n	8003c54 <USB_EPStartXfer+0xd70>
 8003c52:	e134      	b.n	8003ebe <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d90f      	bls.n	8003c80 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6c:	1ad2      	subs	r2, r2, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	619a      	str	r2, [r3, #24]
 8003c72:	e00b      	b.n	8003c8c <USB_EPStartXfer+0xda8>
 8003c74:	40009800 	.word	0x40009800
 8003c78:	07ff8f8f 	.word	0x07ff8f8f
 8003c7c:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d162      	bne.n	8003d5a <USB_EPStartXfer+0xe76>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4a9a      	ldr	r2, [pc, #616]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003c9c:	4694      	mov	ip, r2
 8003c9e:	4463      	add	r3, ip
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4996      	ldr	r1, [pc, #600]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003caa:	468c      	mov	ip, r1
 8003cac:	4463      	add	r3, ip
 8003cae:	0192      	lsls	r2, r2, #6
 8003cb0:	0992      	lsrs	r2, r2, #6
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cb8:	d91e      	bls.n	8003cf8 <USB_EPStartXfer+0xe14>
 8003cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc2:	221f      	movs	r2, #31
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d102      	bne.n	8003cce <USB_EPStartXfer+0xdea>
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4a8b      	ldr	r2, [pc, #556]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003cd6:	4694      	mov	ip, r2
 8003cd8:	4463      	add	r3, ip
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cde:	069b      	lsls	r3, r3, #26
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4986      	ldr	r1, [pc, #536]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003cea:	468c      	mov	ip, r1
 8003cec:	4463      	add	r3, ip
 8003cee:	2180      	movs	r1, #128	@ 0x80
 8003cf0:	0609      	lsls	r1, r1, #24
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e055      	b.n	8003da4 <USB_EPStartXfer+0xec0>
 8003cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d111      	bne.n	8003d22 <USB_EPStartXfer+0xe3e>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4a7f      	ldr	r2, [pc, #508]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003d06:	4694      	mov	ip, r2
 8003d08:	4463      	add	r3, ip
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	497c      	ldr	r1, [pc, #496]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003d14:	468c      	mov	ip, r1
 8003d16:	4463      	add	r3, ip
 8003d18:	2180      	movs	r1, #128	@ 0x80
 8003d1a:	0609      	lsls	r1, r1, #24
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e040      	b.n	8003da4 <USB_EPStartXfer+0xec0>
 8003d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d002      	beq.n	8003d36 <USB_EPStartXfer+0xe52>
 8003d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d32:	3301      	adds	r3, #1
 8003d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4a71      	ldr	r2, [pc, #452]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003d3e:	4694      	mov	ip, r2
 8003d40:	4463      	add	r3, ip
 8003d42:	6819      	ldr	r1, [r3, #0]
 8003d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d46:	069a      	lsls	r2, r3, #26
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	486d      	ldr	r0, [pc, #436]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003d50:	4684      	mov	ip, r0
 8003d52:	4463      	add	r3, ip
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e024      	b.n	8003da4 <USB_EPStartXfer+0xec0>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	785b      	ldrb	r3, [r3, #1]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d120      	bne.n	8003da4 <USB_EPStartXfer+0xec0>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4a66      	ldr	r2, [pc, #408]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003d6a:	4694      	mov	ip, r2
 8003d6c:	4463      	add	r3, ip
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4963      	ldr	r1, [pc, #396]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003d78:	468c      	mov	ip, r1
 8003d7a:	4463      	add	r3, ip
 8003d7c:	0412      	lsls	r2, r2, #16
 8003d7e:	0c12      	lsrs	r2, r2, #16
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4a5e      	ldr	r2, [pc, #376]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003d8a:	4694      	mov	ip, r2
 8003d8c:	4463      	add	r3, ip
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d92:	041a      	lsls	r2, r3, #16
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	485a      	ldr	r0, [pc, #360]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003d9c:	4684      	mov	ip, r0
 8003d9e:	4463      	add	r3, ip
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d162      	bne.n	8003e72 <USB_EPStartXfer+0xf8e>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4a54      	ldr	r2, [pc, #336]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003db4:	4694      	mov	ip, r2
 8003db6:	4463      	add	r3, ip
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4950      	ldr	r1, [pc, #320]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003dc2:	468c      	mov	ip, r1
 8003dc4:	4463      	add	r3, ip
 8003dc6:	0192      	lsls	r2, r2, #6
 8003dc8:	0992      	lsrs	r2, r2, #6
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dce:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dd0:	d91e      	bls.n	8003e10 <USB_EPStartXfer+0xf2c>
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dda:	221f      	movs	r2, #31
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d102      	bne.n	8003de6 <USB_EPStartXfer+0xf02>
 8003de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de2:	3b01      	subs	r3, #1
 8003de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4a45      	ldr	r2, [pc, #276]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003dee:	4694      	mov	ip, r2
 8003df0:	4463      	add	r3, ip
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df6:	069b      	lsls	r3, r3, #26
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4940      	ldr	r1, [pc, #256]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003e02:	468c      	mov	ip, r1
 8003e04:	4463      	add	r3, ip
 8003e06:	2180      	movs	r1, #128	@ 0x80
 8003e08:	0609      	lsls	r1, r1, #24
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	e058      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
 8003e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d111      	bne.n	8003e3a <USB_EPStartXfer+0xf56>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4a39      	ldr	r2, [pc, #228]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003e1e:	4694      	mov	ip, r2
 8003e20:	4463      	add	r3, ip
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4936      	ldr	r1, [pc, #216]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003e2c:	468c      	mov	ip, r1
 8003e2e:	4463      	add	r3, ip
 8003e30:	2180      	movs	r1, #128	@ 0x80
 8003e32:	0609      	lsls	r1, r1, #24
 8003e34:	430a      	orrs	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	e043      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
 8003e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e42:	2201      	movs	r2, #1
 8003e44:	4013      	ands	r3, r2
 8003e46:	d002      	beq.n	8003e4e <USB_EPStartXfer+0xf6a>
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4a2b      	ldr	r2, [pc, #172]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003e56:	4694      	mov	ip, r2
 8003e58:	4463      	add	r3, ip
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	069a      	lsls	r2, r3, #26
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4827      	ldr	r0, [pc, #156]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003e68:	4684      	mov	ip, r0
 8003e6a:	4463      	add	r3, ip
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	e027      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d123      	bne.n	8003ec2 <USB_EPStartXfer+0xfde>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4a20      	ldr	r2, [pc, #128]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003e82:	4694      	mov	ip, r2
 8003e84:	4463      	add	r3, ip
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	491d      	ldr	r1, [pc, #116]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003e90:	468c      	mov	ip, r1
 8003e92:	4463      	add	r3, ip
 8003e94:	0412      	lsls	r2, r2, #16
 8003e96:	0c12      	lsrs	r2, r2, #16
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4a18      	ldr	r2, [pc, #96]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003ea2:	4694      	mov	ip, r2
 8003ea4:	4463      	add	r3, ip
 8003ea6:	6859      	ldr	r1, [r3, #4]
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eaa:	041a      	lsls	r2, r3, #16
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4814      	ldr	r0, [pc, #80]	@ (8003f04 <USB_EPStartXfer+0x1020>)
 8003eb4:	4684      	mov	ip, r0
 8003eb6:	4463      	add	r3, ip
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	e001      	b.n	8003ec2 <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e01c      	b.n	8003efc <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	18d3      	adds	r3, r2, r3
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a0e      	ldr	r2, [pc, #56]	@ (8003f08 <USB_EPStartXfer+0x1024>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2280      	movs	r2, #128	@ 0x80
 8003ed8:	0152      	lsls	r2, r2, #5
 8003eda:	4053      	eors	r3, r2
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2280      	movs	r2, #128	@ 0x80
 8003ee2:	0192      	lsls	r2, r2, #6
 8003ee4:	4053      	eors	r3, r2
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	4905      	ldr	r1, [pc, #20]	@ (8003f0c <USB_EPStartXfer+0x1028>)
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b017      	add	sp, #92	@ 0x5c
 8003f02:	bd90      	pop	{r4, r7, pc}
 8003f04:	40009800 	.word	0x40009800
 8003f08:	07ffbf8f 	.word	0x07ffbf8f
 8003f0c:	00008080 	.word	0x00008080

08003f10 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	18d3      	adds	r3, r2, r3
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a16      	ldr	r2, [pc, #88]	@ (8003f88 <USB_EPSetStall+0x78>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2210      	movs	r2, #16
 8003f38:	4053      	eors	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	18d3      	adds	r3, r2, r3
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	4910      	ldr	r1, [pc, #64]	@ (8003f8c <USB_EPSetStall+0x7c>)
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e016      	b.n	8003f7e <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	18d3      	adds	r3, r2, r3
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f90 <USB_EPSetStall+0x80>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2280      	movs	r2, #128	@ 0x80
 8003f66:	0152      	lsls	r2, r2, #5
 8003f68:	4053      	eors	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4904      	ldr	r1, [pc, #16]	@ (8003f8c <USB_EPSetStall+0x7c>)
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	0018      	movs	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b004      	add	sp, #16
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	07ff8fbf 	.word	0x07ff8fbf
 8003f8c:	00008080 	.word	0x00008080
 8003f90:	07ffbf8f 	.word	0x07ffbf8f

08003f94 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa0:	2280      	movs	r2, #128	@ 0x80
 8003fa2:	0212      	lsls	r2, r2, #8
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	@ 0x28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	1dbb      	adds	r3, r7, #6
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	1c0a      	adds	r2, r1, #0
 8003fc8:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	3303      	adds	r3, #3
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8003fd4:	2016      	movs	r0, #22
 8003fd6:	183b      	adds	r3, r7, r0
 8003fd8:	1d3a      	adds	r2, r7, #4
 8003fda:	8812      	ldrh	r2, [r2, #0]
 8003fdc:	2103      	movs	r1, #3
 8003fde:	400a      	ands	r2, r1
 8003fe0:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8003fe6:	183b      	adds	r3, r7, r0
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <USB_WritePMA+0x40>
  {
    NbWords--;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8003ff4:	1dbb      	adds	r3, r7, #6
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	4a28      	ldr	r2, [pc, #160]	@ (800409c <USB_WritePMA+0xe8>)
 8003ffa:	4694      	mov	ip, r2
 8003ffc:	4463      	add	r3, ip
 8003ffe:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	e01f      	b.n	8004046 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	781a      	ldrb	r2, [r3, #0]
 800400a:	7859      	ldrb	r1, [r3, #1]
 800400c:	0209      	lsls	r1, r1, #8
 800400e:	430a      	orrs	r2, r1
 8004010:	7899      	ldrb	r1, [r3, #2]
 8004012:	0409      	lsls	r1, r1, #16
 8004014:	430a      	orrs	r2, r1
 8004016:	78db      	ldrb	r3, [r3, #3]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	4313      	orrs	r3, r2
 800401c:	001a      	movs	r2, r3
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	3304      	adds	r3, #4
 8004026:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	3301      	adds	r3, #1
 800402c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	3301      	adds	r3, #1
 8004032:	613b      	str	r3, [r7, #16]
    pBuf++;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	3301      	adds	r3, #1
 8004038:	613b      	str	r3, [r7, #16]
    pBuf++;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	3301      	adds	r3, #1
 800403e:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	3b01      	subs	r3, #1
 8004044:	623b      	str	r3, [r7, #32]
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1dc      	bne.n	8004006 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800404c:	2316      	movs	r3, #22
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01e      	beq.n	8004094 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	001a      	movs	r2, r3
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	409a      	lsls	r2, r3
 8004066:	0013      	movs	r3, r2
 8004068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406a:	4313      	orrs	r3, r2
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	3301      	adds	r3, #1
 8004072:	623b      	str	r3, [r7, #32]
      pBuf++;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	3301      	adds	r3, #1
 8004078:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800407a:	2116      	movs	r1, #22
 800407c:	187b      	adds	r3, r7, r1
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	187b      	adds	r3, r7, r1
 8004082:	3a01      	subs	r2, #1
 8004084:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8004086:	187b      	adds	r3, r7, r1
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e5      	bne.n	800405a <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004092:	601a      	str	r2, [r3, #0]
  }
}
 8004094:	46c0      	nop			@ (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b00a      	add	sp, #40	@ 0x28
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40009800 	.word	0x40009800

080040a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	000a      	movs	r2, r1
 80040aa:	1cfb      	adds	r3, r7, #3
 80040ac:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80040ae:	2387      	movs	r3, #135	@ 0x87
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	0018      	movs	r0, r3
 80040b4:	f001 fa7c 	bl	80055b0 <USBD_static_malloc>
 80040b8:	0003      	movs	r3, r0
 80040ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	23b5      	movs	r3, #181	@ 0xb5
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	58d2      	ldr	r2, [r2, r3]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	32b0      	adds	r2, #176	@ 0xb0
 80040ce:	0092      	lsls	r2, r2, #2
 80040d0:	2100      	movs	r1, #0
 80040d2:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 80040d4:	2302      	movs	r3, #2
 80040d6:	e0e9      	b.n	80042ac <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80040d8:	2387      	movs	r3, #135	@ 0x87
 80040da:	009a      	lsls	r2, r3, #2
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2100      	movs	r1, #0
 80040e0:	0018      	movs	r0, r3
 80040e2:	f001 fab0 	bl	8005646 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	23b5      	movs	r3, #181	@ 0xb5
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	58d2      	ldr	r2, [r2, r3]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	32b0      	adds	r2, #176	@ 0xb0
 80040f2:	0092      	lsls	r2, r2, #2
 80040f4:	68f9      	ldr	r1, [r7, #12]
 80040f6:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	23b5      	movs	r3, #181	@ 0xb5
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	58d2      	ldr	r2, [r2, r3]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	32b0      	adds	r2, #176	@ 0xb0
 8004104:	0092      	lsls	r2, r2, #2
 8004106:	58d1      	ldr	r1, [r2, r3]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	23af      	movs	r3, #175	@ 0xaf
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	7c1b      	ldrb	r3, [r3, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d13c      	bne.n	8004192 <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004118:	4b66      	ldr	r3, [pc, #408]	@ (80042b4 <USBD_CDC_Init+0x214>)
 800411a:	7819      	ldrb	r1, [r3, #0]
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f001 f941 	bl	80053aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004128:	4b62      	ldr	r3, [pc, #392]	@ (80042b4 <USBD_CDC_Init+0x214>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	001a      	movs	r2, r3
 800412e:	230f      	movs	r3, #15
 8004130:	401a      	ands	r2, r3
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	0013      	movs	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	189b      	adds	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	18cb      	adds	r3, r1, r3
 800413e:	3324      	adds	r3, #36	@ 0x24
 8004140:	2201      	movs	r2, #1
 8004142:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004144:	4b5c      	ldr	r3, [pc, #368]	@ (80042b8 <USBD_CDC_Init+0x218>)
 8004146:	7819      	ldrb	r1, [r3, #0]
 8004148:	2380      	movs	r3, #128	@ 0x80
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f001 f92b 	bl	80053aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004154:	4b58      	ldr	r3, [pc, #352]	@ (80042b8 <USBD_CDC_Init+0x218>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	001a      	movs	r2, r3
 800415a:	230f      	movs	r3, #15
 800415c:	401a      	ands	r2, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	23b2      	movs	r3, #178	@ 0xb2
 8004162:	0059      	lsls	r1, r3, #1
 8004164:	0013      	movs	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	189b      	adds	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	18c3      	adds	r3, r0, r3
 800416e:	185b      	adds	r3, r3, r1
 8004170:	2201      	movs	r2, #1
 8004172:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004174:	4b51      	ldr	r3, [pc, #324]	@ (80042bc <USBD_CDC_Init+0x21c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	001a      	movs	r2, r3
 800417a:	230f      	movs	r3, #15
 800417c:	401a      	ands	r2, r3
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	0013      	movs	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	189b      	adds	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	18cb      	adds	r3, r1, r3
 800418a:	3326      	adds	r3, #38	@ 0x26
 800418c:	2210      	movs	r2, #16
 800418e:	801a      	strh	r2, [r3, #0]
 8004190:	e039      	b.n	8004206 <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004192:	4b48      	ldr	r3, [pc, #288]	@ (80042b4 <USBD_CDC_Init+0x214>)
 8004194:	7819      	ldrb	r1, [r3, #0]
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	2340      	movs	r3, #64	@ 0x40
 800419a:	2202      	movs	r2, #2
 800419c:	f001 f905 	bl	80053aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80041a0:	4b44      	ldr	r3, [pc, #272]	@ (80042b4 <USBD_CDC_Init+0x214>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	001a      	movs	r2, r3
 80041a6:	230f      	movs	r3, #15
 80041a8:	401a      	ands	r2, r3
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	0013      	movs	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	18cb      	adds	r3, r1, r3
 80041b6:	3324      	adds	r3, #36	@ 0x24
 80041b8:	2201      	movs	r2, #1
 80041ba:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80041bc:	4b3e      	ldr	r3, [pc, #248]	@ (80042b8 <USBD_CDC_Init+0x218>)
 80041be:	7819      	ldrb	r1, [r3, #0]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	2340      	movs	r3, #64	@ 0x40
 80041c4:	2202      	movs	r2, #2
 80041c6:	f001 f8f0 	bl	80053aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80041ca:	4b3b      	ldr	r3, [pc, #236]	@ (80042b8 <USBD_CDC_Init+0x218>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	001a      	movs	r2, r3
 80041d0:	230f      	movs	r3, #15
 80041d2:	401a      	ands	r2, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	23b2      	movs	r3, #178	@ 0xb2
 80041d8:	0059      	lsls	r1, r3, #1
 80041da:	0013      	movs	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	18c3      	adds	r3, r0, r3
 80041e4:	185b      	adds	r3, r3, r1
 80041e6:	2201      	movs	r2, #1
 80041e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80041ea:	4b34      	ldr	r3, [pc, #208]	@ (80042bc <USBD_CDC_Init+0x21c>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	001a      	movs	r2, r3
 80041f0:	230f      	movs	r3, #15
 80041f2:	401a      	ands	r2, r3
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	0013      	movs	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	189b      	adds	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	18cb      	adds	r3, r1, r3
 8004200:	3326      	adds	r3, #38	@ 0x26
 8004202:	2210      	movs	r2, #16
 8004204:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004206:	4b2d      	ldr	r3, [pc, #180]	@ (80042bc <USBD_CDC_Init+0x21c>)
 8004208:	7819      	ldrb	r1, [r3, #0]
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	2308      	movs	r3, #8
 800420e:	2203      	movs	r2, #3
 8004210:	f001 f8cb 	bl	80053aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004214:	4b29      	ldr	r3, [pc, #164]	@ (80042bc <USBD_CDC_Init+0x21c>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	001a      	movs	r2, r3
 800421a:	230f      	movs	r3, #15
 800421c:	401a      	ands	r2, r3
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	0013      	movs	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	189b      	adds	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	18cb      	adds	r3, r1, r3
 800422a:	3324      	adds	r3, #36	@ 0x24
 800422c:	2201      	movs	r2, #1
 800422e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	2381      	movs	r3, #129	@ 0x81
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	2100      	movs	r1, #0
 8004238:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	23b5      	movs	r3, #181	@ 0xb5
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	58d3      	ldr	r3, [r2, r3]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	33b0      	adds	r3, #176	@ 0xb0
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	18d3      	adds	r3, r2, r3
 800424a:	3304      	adds	r3, #4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	2385      	movs	r3, #133	@ 0x85
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	2100      	movs	r1, #0
 800425a:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	2386      	movs	r3, #134	@ 0x86
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	2100      	movs	r1, #0
 8004264:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	2381      	movs	r3, #129	@ 0x81
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	58d3      	ldr	r3, [r2, r3]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 8004272:	2302      	movs	r3, #2
 8004274:	e01a      	b.n	80042ac <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7c1b      	ldrb	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800427e:	4b0e      	ldr	r3, [pc, #56]	@ (80042b8 <USBD_CDC_Init+0x218>)
 8004280:	7819      	ldrb	r1, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	2381      	movs	r3, #129	@ 0x81
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	58d2      	ldr	r2, [r2, r3]
 800428a:	2380      	movs	r3, #128	@ 0x80
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f001 f948 	bl	8005524 <USBD_LL_PrepareReceive>
 8004294:	e009      	b.n	80042aa <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004296:	4b08      	ldr	r3, [pc, #32]	@ (80042b8 <USBD_CDC_Init+0x218>)
 8004298:	7819      	ldrb	r1, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	2381      	movs	r3, #129	@ 0x81
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	58d2      	ldr	r2, [r2, r3]
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	2340      	movs	r3, #64	@ 0x40
 80042a6:	f001 f93d 	bl	8005524 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b004      	add	sp, #16
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000093 	.word	0x20000093
 80042b8:	20000094 	.word	0x20000094
 80042bc:	20000095 	.word	0x20000095

080042c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	000a      	movs	r2, r1
 80042ca:	1cfb      	adds	r3, r7, #3
 80042cc:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80042ce:	4b41      	ldr	r3, [pc, #260]	@ (80043d4 <USBD_CDC_DeInit+0x114>)
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f001 f89e 	bl	8005418 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80042dc:	4b3d      	ldr	r3, [pc, #244]	@ (80043d4 <USBD_CDC_DeInit+0x114>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	001a      	movs	r2, r3
 80042e2:	230f      	movs	r3, #15
 80042e4:	401a      	ands	r2, r3
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	0013      	movs	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	18cb      	adds	r3, r1, r3
 80042f2:	3324      	adds	r3, #36	@ 0x24
 80042f4:	2200      	movs	r2, #0
 80042f6:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80042f8:	4b37      	ldr	r3, [pc, #220]	@ (80043d8 <USBD_CDC_DeInit+0x118>)
 80042fa:	781a      	ldrb	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	0011      	movs	r1, r2
 8004300:	0018      	movs	r0, r3
 8004302:	f001 f889 	bl	8005418 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004306:	4b34      	ldr	r3, [pc, #208]	@ (80043d8 <USBD_CDC_DeInit+0x118>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	001a      	movs	r2, r3
 800430c:	230f      	movs	r3, #15
 800430e:	401a      	ands	r2, r3
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	23b2      	movs	r3, #178	@ 0xb2
 8004314:	0059      	lsls	r1, r3, #1
 8004316:	0013      	movs	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	189b      	adds	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	18c3      	adds	r3, r0, r3
 8004320:	185b      	adds	r3, r3, r1
 8004322:	2200      	movs	r2, #0
 8004324:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004326:	4b2d      	ldr	r3, [pc, #180]	@ (80043dc <USBD_CDC_DeInit+0x11c>)
 8004328:	781a      	ldrb	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0011      	movs	r1, r2
 800432e:	0018      	movs	r0, r3
 8004330:	f001 f872 	bl	8005418 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004334:	4b29      	ldr	r3, [pc, #164]	@ (80043dc <USBD_CDC_DeInit+0x11c>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	001a      	movs	r2, r3
 800433a:	230f      	movs	r3, #15
 800433c:	401a      	ands	r2, r3
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	0013      	movs	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	189b      	adds	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	18cb      	adds	r3, r1, r3
 800434a:	3324      	adds	r3, #36	@ 0x24
 800434c:	2200      	movs	r2, #0
 800434e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004350:	4b22      	ldr	r3, [pc, #136]	@ (80043dc <USBD_CDC_DeInit+0x11c>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	001a      	movs	r2, r3
 8004356:	230f      	movs	r3, #15
 8004358:	401a      	ands	r2, r3
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	0013      	movs	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	189b      	adds	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	18cb      	adds	r3, r1, r3
 8004366:	3326      	adds	r3, #38	@ 0x26
 8004368:	2200      	movs	r2, #0
 800436a:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	23b5      	movs	r3, #181	@ 0xb5
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	58d2      	ldr	r2, [r2, r3]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	32b0      	adds	r2, #176	@ 0xb0
 8004378:	0092      	lsls	r2, r2, #2
 800437a:	58d3      	ldr	r3, [r2, r3]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d024      	beq.n	80043ca <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	23b5      	movs	r3, #181	@ 0xb5
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	58d3      	ldr	r3, [r2, r3]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	33b0      	adds	r3, #176	@ 0xb0
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	18d3      	adds	r3, r2, r3
 8004390:	3304      	adds	r3, #4
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	23b5      	movs	r3, #181	@ 0xb5
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	58d2      	ldr	r2, [r2, r3]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	32b0      	adds	r2, #176	@ 0xb0
 80043a4:	0092      	lsls	r2, r2, #2
 80043a6:	58d3      	ldr	r3, [r2, r3]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f001 f90d 	bl	80055c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	23b5      	movs	r3, #181	@ 0xb5
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	58d2      	ldr	r2, [r2, r3]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	32b0      	adds	r2, #176	@ 0xb0
 80043ba:	0092      	lsls	r2, r2, #2
 80043bc:	2100      	movs	r1, #0
 80043be:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	23af      	movs	r3, #175	@ 0xaf
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	2100      	movs	r1, #0
 80043c8:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b002      	add	sp, #8
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000093 	.word	0x20000093
 80043d8:	20000094 	.word	0x20000094
 80043dc:	20000095 	.word	0x20000095

080043e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	23b5      	movs	r3, #181	@ 0xb5
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	58d2      	ldr	r2, [r2, r3]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	32b0      	adds	r2, #176	@ 0xb0
 80043f6:	0092      	lsls	r2, r2, #2
 80043f8:	58d3      	ldr	r3, [r2, r3]
 80043fa:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80043fc:	230d      	movs	r3, #13
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8004404:	230a      	movs	r3, #10
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	2200      	movs	r2, #0
 800440a:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800440c:	2317      	movs	r3, #23
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 800441a:	2303      	movs	r3, #3
 800441c:	e0d1      	b.n	80045c2 <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	001a      	movs	r2, r3
 8004424:	2360      	movs	r3, #96	@ 0x60
 8004426:	4013      	ands	r3, r2
 8004428:	d05b      	beq.n	80044e2 <USBD_CDC_Setup+0x102>
 800442a:	2b20      	cmp	r3, #32
 800442c:	d000      	beq.n	8004430 <USBD_CDC_Setup+0x50>
 800442e:	e0ba      	b.n	80045a6 <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	88db      	ldrh	r3, [r3, #6]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d043      	beq.n	80044c0 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b25b      	sxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	da22      	bge.n	8004488 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	23b5      	movs	r3, #181	@ 0xb5
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	58d3      	ldr	r3, [r2, r3]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	33b0      	adds	r3, #176	@ 0xb0
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	18d3      	adds	r3, r2, r3
 8004452:	3304      	adds	r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800445c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	88d2      	ldrh	r2, [r2, #6]
 8004462:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	88db      	ldrh	r3, [r3, #6]
 8004468:	220e      	movs	r2, #14
 800446a:	18ba      	adds	r2, r7, r2
 800446c:	b299      	uxth	r1, r3
 800446e:	2907      	cmp	r1, #7
 8004470:	d900      	bls.n	8004474 <USBD_CDC_Setup+0x94>
 8004472:	2307      	movs	r3, #7
 8004474:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004476:	6939      	ldr	r1, [r7, #16]
 8004478:	230e      	movs	r3, #14
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	881a      	ldrh	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0018      	movs	r0, r3
 8004482:	f000 fca3 	bl	8004dcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004486:	e099      	b.n	80045bc <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	7859      	ldrb	r1, [r3, #1]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	88db      	ldrh	r3, [r3, #6]
 8004498:	2b3f      	cmp	r3, #63	@ 0x3f
 800449a:	d803      	bhi.n	80044a4 <USBD_CDC_Setup+0xc4>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	88db      	ldrh	r3, [r3, #6]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	e000      	b.n	80044a6 <USBD_CDC_Setup+0xc6>
 80044a4:	2240      	movs	r2, #64	@ 0x40
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4948      	ldr	r1, [pc, #288]	@ (80045cc <USBD_CDC_Setup+0x1ec>)
 80044aa:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4a46      	ldr	r2, [pc, #280]	@ (80045cc <USBD_CDC_Setup+0x1ec>)
 80044b2:	5c9b      	ldrb	r3, [r3, r2]
 80044b4:	001a      	movs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 fca3 	bl	8004e04 <USBD_CtlPrepareRx>
      break;
 80044be:	e07d      	b.n	80045bc <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	23b5      	movs	r3, #181	@ 0xb5
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	58d3      	ldr	r3, [r2, r3]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	33b0      	adds	r3, #176	@ 0xb0
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	18d3      	adds	r3, r2, r3
 80044d0:	3304      	adds	r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	7850      	ldrb	r0, [r2, #1]
 80044da:	6839      	ldr	r1, [r7, #0]
 80044dc:	2200      	movs	r2, #0
 80044de:	4798      	blx	r3
      break;
 80044e0:	e06c      	b.n	80045bc <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	2b0b      	cmp	r3, #11
 80044e8:	d03c      	beq.n	8004564 <USBD_CDC_Setup+0x184>
 80044ea:	dc4d      	bgt.n	8004588 <USBD_CDC_Setup+0x1a8>
 80044ec:	2b0a      	cmp	r3, #10
 80044ee:	d01f      	beq.n	8004530 <USBD_CDC_Setup+0x150>
 80044f0:	dc4a      	bgt.n	8004588 <USBD_CDC_Setup+0x1a8>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <USBD_CDC_Setup+0x11c>
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d051      	beq.n	800459e <USBD_CDC_Setup+0x1be>
 80044fa:	e045      	b.n	8004588 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	23a7      	movs	r3, #167	@ 0xa7
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	5cd3      	ldrb	r3, [r2, r3]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b03      	cmp	r3, #3
 8004508:	d107      	bne.n	800451a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800450a:	230a      	movs	r3, #10
 800450c:	18f9      	adds	r1, r7, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	0018      	movs	r0, r3
 8004514:	f000 fc5a 	bl	8004dcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004518:	e044      	b.n	80045a4 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	0011      	movs	r1, r2
 8004520:	0018      	movs	r0, r3
 8004522:	f000 fbcb 	bl	8004cbc <USBD_CtlError>
            ret = USBD_FAIL;
 8004526:	2317      	movs	r3, #23
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	2203      	movs	r2, #3
 800452c:	701a      	strb	r2, [r3, #0]
          break;
 800452e:	e039      	b.n	80045a4 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	23a7      	movs	r3, #167	@ 0xa7
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	5cd3      	ldrb	r3, [r2, r3]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b03      	cmp	r3, #3
 800453c:	d107      	bne.n	800454e <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800453e:	230d      	movs	r3, #13
 8004540:	18f9      	adds	r1, r7, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	0018      	movs	r0, r3
 8004548:	f000 fc40 	bl	8004dcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800454c:	e02a      	b.n	80045a4 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0011      	movs	r1, r2
 8004554:	0018      	movs	r0, r3
 8004556:	f000 fbb1 	bl	8004cbc <USBD_CtlError>
            ret = USBD_FAIL;
 800455a:	2317      	movs	r3, #23
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	2203      	movs	r2, #3
 8004560:	701a      	strb	r2, [r3, #0]
          break;
 8004562:	e01f      	b.n	80045a4 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	23a7      	movs	r3, #167	@ 0xa7
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	5cd3      	ldrb	r3, [r2, r3]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b03      	cmp	r3, #3
 8004570:	d017      	beq.n	80045a2 <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	0011      	movs	r1, r2
 8004578:	0018      	movs	r0, r3
 800457a:	f000 fb9f 	bl	8004cbc <USBD_CtlError>
            ret = USBD_FAIL;
 800457e:	2317      	movs	r3, #23
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	2203      	movs	r2, #3
 8004584:	701a      	strb	r2, [r3, #0]
          }
          break;
 8004586:	e00c      	b.n	80045a2 <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0011      	movs	r1, r2
 800458e:	0018      	movs	r0, r3
 8004590:	f000 fb94 	bl	8004cbc <USBD_CtlError>
          ret = USBD_FAIL;
 8004594:	2317      	movs	r3, #23
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	2203      	movs	r2, #3
 800459a:	701a      	strb	r2, [r3, #0]
          break;
 800459c:	e002      	b.n	80045a4 <USBD_CDC_Setup+0x1c4>
          break;
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	e00c      	b.n	80045bc <USBD_CDC_Setup+0x1dc>
          break;
 80045a2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80045a4:	e00a      	b.n	80045bc <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	0011      	movs	r1, r2
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 fb85 	bl	8004cbc <USBD_CtlError>
      ret = USBD_FAIL;
 80045b2:	2317      	movs	r3, #23
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	2203      	movs	r2, #3
 80045b8:	701a      	strb	r2, [r3, #0]
      break;
 80045ba:	46c0      	nop			@ (mov r8, r8)
  }

  return (uint8_t)ret;
 80045bc:	2317      	movs	r3, #23
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	781b      	ldrb	r3, [r3, #0]
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b006      	add	sp, #24
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	00000201 	.word	0x00000201

080045d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	000a      	movs	r2, r1
 80045da:	1cfb      	adds	r3, r7, #3
 80045dc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	23b2      	movs	r3, #178	@ 0xb2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	58d3      	ldr	r3, [r2, r3]
 80045e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	23b5      	movs	r3, #181	@ 0xb5
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	58d2      	ldr	r2, [r2, r3]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	32b0      	adds	r2, #176	@ 0xb0
 80045f4:	0092      	lsls	r2, r2, #2
 80045f6:	58d3      	ldr	r3, [r2, r3]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e072      	b.n	80046e6 <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	23b5      	movs	r3, #181	@ 0xb5
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	58d2      	ldr	r2, [r2, r3]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	32b0      	adds	r2, #176	@ 0xb0
 800460c:	0092      	lsls	r2, r2, #2
 800460e:	58d3      	ldr	r3, [r2, r3]
 8004610:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004612:	1cfb      	adds	r3, r7, #3
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	220f      	movs	r2, #15
 8004618:	401a      	ands	r2, r3
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	0013      	movs	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	189b      	adds	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	18cb      	adds	r3, r1, r3
 8004626:	3318      	adds	r3, #24
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d031      	beq.n	8004692 <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800462e:	1cfb      	adds	r3, r7, #3
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	220f      	movs	r2, #15
 8004634:	401a      	ands	r2, r3
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	0013      	movs	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	189b      	adds	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	18cb      	adds	r3, r1, r3
 8004642:	3318      	adds	r3, #24
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	1cfb      	adds	r3, r7, #3
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	220f      	movs	r2, #15
 800464c:	401a      	ands	r2, r3
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	0013      	movs	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	189b      	adds	r3, r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	18cb      	adds	r3, r1, r3
 800465a:	3324      	adds	r3, #36	@ 0x24
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	0019      	movs	r1, r3
 8004660:	f7fb fdd6 	bl	8000210 <__aeabi_uidivmod>
 8004664:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004666:	d114      	bne.n	8004692 <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004668:	1cfb      	adds	r3, r7, #3
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	220f      	movs	r2, #15
 800466e:	401a      	ands	r2, r3
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	0013      	movs	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	189b      	adds	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	18cb      	adds	r3, r1, r3
 800467c:	3318      	adds	r3, #24
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004682:	1cfb      	adds	r3, r7, #3
 8004684:	7819      	ldrb	r1, [r3, #0]
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	2300      	movs	r3, #0
 800468a:	2200      	movs	r2, #0
 800468c:	f000 ff1a 	bl	80054c4 <USBD_LL_Transmit>
 8004690:	e028      	b.n	80046e4 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	2385      	movs	r3, #133	@ 0x85
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	2100      	movs	r1, #0
 800469a:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	23b5      	movs	r3, #181	@ 0xb5
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	58d3      	ldr	r3, [r2, r3]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	33b0      	adds	r3, #176	@ 0xb0
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	18d3      	adds	r3, r2, r3
 80046ac:	3304      	adds	r3, #4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	23b5      	movs	r3, #181	@ 0xb5
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	58d3      	ldr	r3, [r2, r3]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	33b0      	adds	r3, #176	@ 0xb0
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	18d3      	adds	r3, r2, r3
 80046c6:	3304      	adds	r3, #4
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691c      	ldr	r4, [r3, #16]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	2382      	movs	r3, #130	@ 0x82
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	58d0      	ldr	r0, [r2, r3]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2284      	movs	r2, #132	@ 0x84
 80046d8:	0092      	lsls	r2, r2, #2
 80046da:	1899      	adds	r1, r3, r2
 80046dc:	1cfb      	adds	r3, r7, #3
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	001a      	movs	r2, r3
 80046e2:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b005      	add	sp, #20
 80046ec:	bd90      	pop	{r4, r7, pc}

080046ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	000a      	movs	r2, r1
 80046f8:	1cfb      	adds	r3, r7, #3
 80046fa:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	23b5      	movs	r3, #181	@ 0xb5
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	58d2      	ldr	r2, [r2, r3]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	32b0      	adds	r2, #176	@ 0xb0
 8004708:	0092      	lsls	r2, r2, #2
 800470a:	58d3      	ldr	r3, [r2, r3]
 800470c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	23b5      	movs	r3, #181	@ 0xb5
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	58d2      	ldr	r2, [r2, r3]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	32b0      	adds	r2, #176	@ 0xb0
 800471a:	0092      	lsls	r2, r2, #2
 800471c:	58d3      	ldr	r3, [r2, r3]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 8004722:	2303      	movs	r3, #3
 8004724:	e022      	b.n	800476c <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004726:	1cfb      	adds	r3, r7, #3
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f000 ff28 	bl	8005584 <USBD_LL_GetRxDataSize>
 8004734:	0001      	movs	r1, r0
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	2383      	movs	r3, #131	@ 0x83
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	23b5      	movs	r3, #181	@ 0xb5
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	58d3      	ldr	r3, [r2, r3]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	33b0      	adds	r3, #176	@ 0xb0
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	18d3      	adds	r3, r2, r3
 800474e:	3304      	adds	r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	68f9      	ldr	r1, [r7, #12]
 8004756:	2381      	movs	r3, #129	@ 0x81
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	58c8      	ldr	r0, [r1, r3]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2183      	movs	r1, #131	@ 0x83
 8004760:	0089      	lsls	r1, r1, #2
 8004762:	468c      	mov	ip, r1
 8004764:	4463      	add	r3, ip
 8004766:	0019      	movs	r1, r3
 8004768:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b004      	add	sp, #16
 8004772:	bd80      	pop	{r7, pc}

08004774 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	23b5      	movs	r3, #181	@ 0xb5
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	58d2      	ldr	r2, [r2, r3]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	32b0      	adds	r2, #176	@ 0xb0
 8004788:	0092      	lsls	r2, r2, #2
 800478a:	58d3      	ldr	r3, [r2, r3]
 800478c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004794:	2303      	movs	r3, #3
 8004796:	e02b      	b.n	80047f0 <USBD_CDC_EP0_RxReady+0x7c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	23b5      	movs	r3, #181	@ 0xb5
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	58d3      	ldr	r3, [r2, r3]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	33b0      	adds	r3, #176	@ 0xb0
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	18d3      	adds	r3, r2, r3
 80047a8:	3304      	adds	r3, #4
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01e      	beq.n	80047ee <USBD_CDC_EP0_RxReady+0x7a>
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	5cd3      	ldrb	r3, [r2, r3]
 80047b8:	2bff      	cmp	r3, #255	@ 0xff
 80047ba:	d018      	beq.n	80047ee <USBD_CDC_EP0_RxReady+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	23b5      	movs	r3, #181	@ 0xb5
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	58d3      	ldr	r3, [r2, r3]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	33b0      	adds	r3, #176	@ 0xb0
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	18d3      	adds	r3, r2, r3
 80047cc:	3304      	adds	r3, #4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	68f9      	ldr	r1, [r7, #12]
 80047d4:	2280      	movs	r2, #128	@ 0x80
 80047d6:	0092      	lsls	r2, r2, #2
 80047d8:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 80047da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4c06      	ldr	r4, [pc, #24]	@ (80047f8 <USBD_CDC_EP0_RxReady+0x84>)
 80047e0:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80047e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	2380      	movs	r3, #128	@ 0x80
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	21ff      	movs	r1, #255	@ 0xff
 80047ec:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b005      	add	sp, #20
 80047f6:	bd90      	pop	{r4, r7, pc}
 80047f8:	00000201 	.word	0x00000201

080047fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004804:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8004806:	2182      	movs	r1, #130	@ 0x82
 8004808:	0018      	movs	r0, r3
 800480a:	f000 f9f6 	bl	8004bfa <USBD_GetEpDesc>
 800480e:	0003      	movs	r3, r0
 8004810:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004812:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8004814:	2101      	movs	r1, #1
 8004816:	0018      	movs	r0, r3
 8004818:	f000 f9ef 	bl	8004bfa <USBD_GetEpDesc>
 800481c:	0003      	movs	r3, r0
 800481e:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004820:	4b19      	ldr	r3, [pc, #100]	@ (8004888 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8004822:	2181      	movs	r1, #129	@ 0x81
 8004824:	0018      	movs	r0, r3
 8004826:	f000 f9e8 	bl	8004bfa <USBD_GetEpDesc>
 800482a:	0003      	movs	r3, r0
 800482c:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2210      	movs	r2, #16
 8004838:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00b      	beq.n	8004858 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	791a      	ldrb	r2, [r3, #4]
 8004844:	2100      	movs	r1, #0
 8004846:	400a      	ands	r2, r1
 8004848:	1c11      	adds	r1, r2, #0
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	430a      	orrs	r2, r1
 800484e:	711a      	strb	r2, [r3, #4]
 8004850:	795a      	ldrb	r2, [r3, #5]
 8004852:	2100      	movs	r1, #0
 8004854:	400a      	ands	r2, r1
 8004856:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	791a      	ldrb	r2, [r3, #4]
 8004862:	2100      	movs	r1, #0
 8004864:	400a      	ands	r2, r1
 8004866:	1c11      	adds	r1, r2, #0
 8004868:	2240      	movs	r2, #64	@ 0x40
 800486a:	430a      	orrs	r2, r1
 800486c:	711a      	strb	r2, [r3, #4]
 800486e:	795a      	ldrb	r2, [r3, #5]
 8004870:	2100      	movs	r1, #0
 8004872:	400a      	ands	r2, r1
 8004874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2243      	movs	r2, #67	@ 0x43
 800487a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800487c:	4b02      	ldr	r3, [pc, #8]	@ (8004888 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 800487e:	0018      	movs	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	b006      	add	sp, #24
 8004884:	bd80      	pop	{r7, pc}
 8004886:	46c0      	nop			@ (mov r8, r8)
 8004888:	20000050 	.word	0x20000050

0800488c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004894:	4b20      	ldr	r3, [pc, #128]	@ (8004918 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8004896:	2182      	movs	r1, #130	@ 0x82
 8004898:	0018      	movs	r0, r3
 800489a:	f000 f9ae 	bl	8004bfa <USBD_GetEpDesc>
 800489e:	0003      	movs	r3, r0
 80048a0:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80048a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004918 <USBD_CDC_GetHSCfgDesc+0x8c>)
 80048a4:	2101      	movs	r1, #1
 80048a6:	0018      	movs	r0, r3
 80048a8:	f000 f9a7 	bl	8004bfa <USBD_GetEpDesc>
 80048ac:	0003      	movs	r3, r0
 80048ae:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80048b0:	4b19      	ldr	r3, [pc, #100]	@ (8004918 <USBD_CDC_GetHSCfgDesc+0x8c>)
 80048b2:	2181      	movs	r1, #129	@ 0x81
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 f9a0 	bl	8004bfa <USBD_GetEpDesc>
 80048ba:	0003      	movs	r3, r0
 80048bc:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2210      	movs	r2, #16
 80048c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	791a      	ldrb	r2, [r3, #4]
 80048d4:	2100      	movs	r1, #0
 80048d6:	400a      	ands	r2, r1
 80048d8:	711a      	strb	r2, [r3, #4]
 80048da:	795a      	ldrb	r2, [r3, #5]
 80048dc:	2100      	movs	r1, #0
 80048de:	400a      	ands	r2, r1
 80048e0:	1c11      	adds	r1, r2, #0
 80048e2:	2202      	movs	r2, #2
 80048e4:	430a      	orrs	r2, r1
 80048e6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	791a      	ldrb	r2, [r3, #4]
 80048f2:	2100      	movs	r1, #0
 80048f4:	400a      	ands	r2, r1
 80048f6:	711a      	strb	r2, [r3, #4]
 80048f8:	795a      	ldrb	r2, [r3, #5]
 80048fa:	2100      	movs	r1, #0
 80048fc:	400a      	ands	r2, r1
 80048fe:	1c11      	adds	r1, r2, #0
 8004900:	2202      	movs	r2, #2
 8004902:	430a      	orrs	r2, r1
 8004904:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2243      	movs	r2, #67	@ 0x43
 800490a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800490c:	4b02      	ldr	r3, [pc, #8]	@ (8004918 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 800490e:	0018      	movs	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	b006      	add	sp, #24
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	20000050 	.word	0x20000050

0800491c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004924:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8004926:	2182      	movs	r1, #130	@ 0x82
 8004928:	0018      	movs	r0, r3
 800492a:	f000 f966 	bl	8004bfa <USBD_GetEpDesc>
 800492e:	0003      	movs	r3, r0
 8004930:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004932:	4b1d      	ldr	r3, [pc, #116]	@ (80049a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8004934:	2101      	movs	r1, #1
 8004936:	0018      	movs	r0, r3
 8004938:	f000 f95f 	bl	8004bfa <USBD_GetEpDesc>
 800493c:	0003      	movs	r3, r0
 800493e:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004940:	4b19      	ldr	r3, [pc, #100]	@ (80049a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8004942:	2181      	movs	r1, #129	@ 0x81
 8004944:	0018      	movs	r0, r3
 8004946:	f000 f958 	bl	8004bfa <USBD_GetEpDesc>
 800494a:	0003      	movs	r3, r0
 800494c:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2210      	movs	r2, #16
 8004958:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	791a      	ldrb	r2, [r3, #4]
 8004964:	2100      	movs	r1, #0
 8004966:	400a      	ands	r2, r1
 8004968:	1c11      	adds	r1, r2, #0
 800496a:	2240      	movs	r2, #64	@ 0x40
 800496c:	430a      	orrs	r2, r1
 800496e:	711a      	strb	r2, [r3, #4]
 8004970:	795a      	ldrb	r2, [r3, #5]
 8004972:	2100      	movs	r1, #0
 8004974:	400a      	ands	r2, r1
 8004976:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	791a      	ldrb	r2, [r3, #4]
 8004982:	2100      	movs	r1, #0
 8004984:	400a      	ands	r2, r1
 8004986:	1c11      	adds	r1, r2, #0
 8004988:	2240      	movs	r2, #64	@ 0x40
 800498a:	430a      	orrs	r2, r1
 800498c:	711a      	strb	r2, [r3, #4]
 800498e:	795a      	ldrb	r2, [r3, #5]
 8004990:	2100      	movs	r1, #0
 8004992:	400a      	ands	r2, r1
 8004994:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2243      	movs	r2, #67	@ 0x43
 800499a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800499c:	4b02      	ldr	r3, [pc, #8]	@ (80049a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b006      	add	sp, #24
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	20000050 	.word	0x20000050

080049ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	220a      	movs	r2, #10
 80049b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80049ba:	4b02      	ldr	r3, [pc, #8]	@ (80049c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b002      	add	sp, #8
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	2000000c 	.word	0x2000000c

080049c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80049d8:	2303      	movs	r3, #3
 80049da:	e00b      	b.n	80049f4 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	23b5      	movs	r3, #181	@ 0xb5
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	58d3      	ldr	r3, [r2, r3]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	33b0      	adds	r3, #176	@ 0xb0
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	18d3      	adds	r3, r2, r3
 80049ec:	3304      	adds	r3, #4
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	0018      	movs	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b002      	add	sp, #8
 80049fa:	bd80      	pop	{r7, pc}

080049fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	23b5      	movs	r3, #181	@ 0xb5
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	58d2      	ldr	r2, [r2, r3]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	32b0      	adds	r2, #176	@ 0xb0
 8004a14:	0092      	lsls	r2, r2, #2
 8004a16:	58d3      	ldr	r3, [r2, r3]
 8004a18:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e00a      	b.n	8004a3a <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	2382      	movs	r3, #130	@ 0x82
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	2384      	movs	r3, #132	@ 0x84
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b006      	add	sp, #24
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	23b5      	movs	r3, #181	@ 0xb5
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	58d2      	ldr	r2, [r2, r3]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	32b0      	adds	r2, #176	@ 0xb0
 8004a58:	0092      	lsls	r2, r2, #2
 8004a5a:	58d3      	ldr	r3, [r2, r3]
 8004a5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e005      	b.n	8004a74 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	2381      	movs	r3, #129	@ 0x81
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b004      	add	sp, #16
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	23b5      	movs	r3, #181	@ 0xb5
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	58d2      	ldr	r2, [r2, r3]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	32b0      	adds	r2, #176	@ 0xb0
 8004a90:	0092      	lsls	r2, r2, #2
 8004a92:	58d3      	ldr	r3, [r2, r3]
 8004a94:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	23b5      	movs	r3, #181	@ 0xb5
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	58d2      	ldr	r2, [r2, r3]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	32b0      	adds	r2, #176	@ 0xb0
 8004aa2:	0092      	lsls	r2, r2, #2
 8004aa4:	58d3      	ldr	r3, [r2, r3]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e01a      	b.n	8004ae4 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	7c1b      	ldrb	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <USBD_CDC_ReceivePacket+0x70>)
 8004ab8:	7819      	ldrb	r1, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	2381      	movs	r3, #129	@ 0x81
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	58d2      	ldr	r2, [r2, r3]
 8004ac2:	2380      	movs	r3, #128	@ 0x80
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fd2c 	bl	8005524 <USBD_LL_PrepareReceive>
 8004acc:	e009      	b.n	8004ae2 <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ace:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <USBD_CDC_ReceivePacket+0x70>)
 8004ad0:	7819      	ldrb	r1, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	2381      	movs	r3, #129	@ 0x81
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	58d2      	ldr	r2, [r2, r3]
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	2340      	movs	r3, #64	@ 0x40
 8004ade:	f000 fd21 	bl	8005524 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b004      	add	sp, #16
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20000094 	.word	0x20000094

08004af0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004af0:	b5b0      	push	{r4, r5, r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	1dfb      	adds	r3, r7, #7
 8004afc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e029      	b.n	8004b5c <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	23ae      	movs	r3, #174	@ 0xae
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	2100      	movs	r1, #0
 8004b10:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	23b1      	movs	r3, #177	@ 0xb1
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	2100      	movs	r1, #0
 8004b1a:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	23b4      	movs	r3, #180	@ 0xb4
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	2100      	movs	r1, #0
 8004b24:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	23ad      	movs	r3, #173	@ 0xad
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	23a7      	movs	r3, #167	@ 0xa7
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1dfa      	adds	r2, r7, #7
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004b48:	2517      	movs	r5, #23
 8004b4a:	197c      	adds	r4, r7, r5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f000 fb94 	bl	800527c <USBD_LL_Init>
 8004b54:	0003      	movs	r3, r0
 8004b56:	7023      	strb	r3, [r4, #0]

  return ret;
 8004b58:	197b      	adds	r3, r7, r5
 8004b5a:	781b      	ldrb	r3, [r3, #0]
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b006      	add	sp, #24
 8004b62:	bdb0      	pop	{r4, r5, r7, pc}

08004b64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004b6e:	230e      	movs	r3, #14
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	2200      	movs	r2, #0
 8004b74:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e02b      	b.n	8004bd8 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	23ae      	movs	r3, #174	@ 0xae
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	6839      	ldr	r1, [r7, #0]
 8004b88:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	23b5      	movs	r3, #181	@ 0xb5
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	58d2      	ldr	r2, [r2, r3]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	32ae      	adds	r2, #174	@ 0xae
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	58d3      	ldr	r3, [r2, r3]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d011      	beq.n	8004bc4 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	23b5      	movs	r3, #181	@ 0xb5
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	58d2      	ldr	r2, [r2, r3]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	32ae      	adds	r2, #174	@ 0xae
 8004bac:	0092      	lsls	r2, r2, #2
 8004bae:	58d3      	ldr	r3, [r2, r3]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb2:	220e      	movs	r2, #14
 8004bb4:	18ba      	adds	r2, r7, r2
 8004bb6:	0010      	movs	r0, r2
 8004bb8:	4798      	blx	r3
 8004bba:	0001      	movs	r1, r0
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	23b4      	movs	r3, #180	@ 0xb4
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	23b6      	movs	r3, #182	@ 0xb6
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	58d3      	ldr	r3, [r2, r3]
 8004bcc:	1c59      	adds	r1, r3, #1
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	23b6      	movs	r3, #182	@ 0xb6
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b004      	add	sp, #16
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 fbb8 	bl	8005360 <USBD_LL_Start>
 8004bf0:	0003      	movs	r3, r0
}
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b002      	add	sp, #8
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	000a      	movs	r2, r1
 8004c04:	1cfb      	adds	r3, r7, #3
 8004c06:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	789a      	ldrb	r2, [r3, #2]
 8004c18:	78db      	ldrb	r3, [r3, #3]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	7812      	ldrb	r2, [r2, #0]
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d92a      	bls.n	8004c7e <USBD_GetEpDesc+0x84>
  {
    ptr = desc->bLength;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	230a      	movs	r3, #10
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 8004c34:	e016      	b.n	8004c64 <USBD_GetEpDesc+0x6a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004c36:	230a      	movs	r3, #10
 8004c38:	18fa      	adds	r2, r7, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	0011      	movs	r1, r2
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 f822 	bl	8004c88 <USBD_GetNextDesc>
 8004c44:	0003      	movs	r3, r0
 8004c46:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	2b05      	cmp	r3, #5
 8004c4e:	d109      	bne.n	8004c64 <USBD_GetEpDesc+0x6a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	789b      	ldrb	r3, [r3, #2]
 8004c58:	1cfa      	adds	r2, r7, #3
 8004c5a:	7812      	ldrb	r2, [r2, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d00d      	beq.n	8004c7c <USBD_GetEpDesc+0x82>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	789a      	ldrb	r2, [r3, #2]
 8004c68:	78db      	ldrb	r3, [r3, #3]
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	230a      	movs	r3, #10
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d8dd      	bhi.n	8004c36 <USBD_GetEpDesc+0x3c>
 8004c7a:	e000      	b.n	8004c7e <USBD_GetEpDesc+0x84>
          break;
 8004c7c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 8004c7e:	693b      	ldr	r3, [r7, #16]
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b006      	add	sp, #24
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	001a      	movs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b004      	add	sp, #16
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2180      	movs	r1, #128	@ 0x80
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 fbcf 	bl	800546e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f000 fbca 	bl	800546e <USBD_LL_StallEP>
}
 8004cda:	46c0      	nop			@ (mov r8, r8)
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	b002      	add	sp, #8
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004ce2:	b590      	push	{r4, r7, lr}
 8004ce4:	b087      	sub	sp, #28
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004cee:	2417      	movs	r4, #23
 8004cf0:	193b      	adds	r3, r7, r4
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d044      	beq.n	8004d86 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	0018      	movs	r0, r3
 8004d04:	f000 f843 	bl	8004d8e <USBD_GetLen>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	18db      	adds	r3, r3, r3
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8004d16:	193b      	adds	r3, r7, r4
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	18d3      	adds	r3, r2, r3
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	701a      	strb	r2, [r3, #0]
  idx++;
 8004d24:	193b      	adds	r3, r7, r4
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	193b      	adds	r3, r7, r4
 8004d2a:	3201      	adds	r2, #1
 8004d2c:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004d2e:	193b      	adds	r3, r7, r4
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	18d3      	adds	r3, r2, r3
 8004d36:	2203      	movs	r2, #3
 8004d38:	701a      	strb	r2, [r3, #0]
  idx++;
 8004d3a:	193b      	adds	r3, r7, r4
 8004d3c:	781a      	ldrb	r2, [r3, #0]
 8004d3e:	193b      	adds	r3, r7, r4
 8004d40:	3201      	adds	r2, #1
 8004d42:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8004d44:	e01a      	b.n	8004d7c <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 8004d46:	2117      	movs	r1, #23
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	18d3      	adds	r3, r2, r3
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	7812      	ldrb	r2, [r2, #0]
 8004d54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]
    idx++;
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	781a      	ldrb	r2, [r3, #0]
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	3201      	adds	r2, #1
 8004d64:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	18d3      	adds	r3, r2, r3
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
    idx++;
 8004d72:	187b      	adds	r3, r7, r1
 8004d74:	781a      	ldrb	r2, [r3, #0]
 8004d76:	187b      	adds	r3, r7, r1
 8004d78:	3201      	adds	r2, #1
 8004d7a:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e0      	bne.n	8004d46 <USBD_GetString+0x64>
 8004d84:	e000      	b.n	8004d88 <USBD_GetString+0xa6>
    return;
 8004d86:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b007      	add	sp, #28
 8004d8c:	bd90      	pop	{r4, r7, pc}

08004d8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004d96:	230f      	movs	r3, #15
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8004da2:	e008      	b.n	8004db6 <USBD_GetLen+0x28>
  {
    len++;
 8004da4:	210f      	movs	r1, #15
 8004da6:	187b      	adds	r3, r7, r1
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	187b      	adds	r3, r7, r1
 8004dac:	3201      	adds	r2, #1
 8004dae:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	3301      	adds	r3, #1
 8004db4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f2      	bne.n	8004da4 <USBD_GetLen+0x16>
  }

  return len;
 8004dbe:	230f      	movs	r3, #15
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	781b      	ldrb	r3, [r3, #0]
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b004      	add	sp, #16
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	23a5      	movs	r3, #165	@ 0xa5
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	2102      	movs	r1, #2
 8004de0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	2100      	movs	r1, #0
 8004df6:	f000 fb65 	bl	80054c4 <USBD_LL_Transmit>

  return USBD_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b004      	add	sp, #16
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	23a5      	movs	r3, #165	@ 0xa5
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	2103      	movs	r1, #3
 8004e18:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	23ac      	movs	r3, #172	@ 0xac
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	23ae      	movs	r3, #174	@ 0xae
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	2100      	movs	r1, #0
 8004e36:	f000 fb75 	bl	8005524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b004      	add	sp, #16
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8004e48:	4914      	ldr	r1, [pc, #80]	@ (8004e9c <MX_USB_Device_Init+0x58>)
 8004e4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ea0 <MX_USB_Device_Init+0x5c>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7ff fe4e 	bl	8004af0 <USBD_Init>
 8004e54:	1e03      	subs	r3, r0, #0
 8004e56:	d001      	beq.n	8004e5c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8004e58:	f7fb fac6 	bl	80003e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8004e5c:	4a11      	ldr	r2, [pc, #68]	@ (8004ea4 <MX_USB_Device_Init+0x60>)
 8004e5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <MX_USB_Device_Init+0x5c>)
 8004e60:	0011      	movs	r1, r2
 8004e62:	0018      	movs	r0, r3
 8004e64:	f7ff fe7e 	bl	8004b64 <USBD_RegisterClass>
 8004e68:	1e03      	subs	r3, r0, #0
 8004e6a:	d001      	beq.n	8004e70 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 8004e6c:	f7fb fabc 	bl	80003e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8004e70:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea8 <MX_USB_Device_Init+0x64>)
 8004e72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea0 <MX_USB_Device_Init+0x5c>)
 8004e74:	0011      	movs	r1, r2
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7ff fda6 	bl	80049c8 <USBD_CDC_RegisterInterface>
 8004e7c:	1e03      	subs	r3, r0, #0
 8004e7e:	d001      	beq.n	8004e84 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8004e80:	f7fb fab2 	bl	80003e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8004e84:	4b06      	ldr	r3, [pc, #24]	@ (8004ea0 <MX_USB_Device_Init+0x5c>)
 8004e86:	0018      	movs	r0, r3
 8004e88:	f7ff feaa 	bl	8004be0 <USBD_Start>
 8004e8c:	1e03      	subs	r3, r0, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8004e90:	f7fb faaa 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8004e94:	46c0      	nop			@ (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	200000ac 	.word	0x200000ac
 8004ea0:	20000184 	.word	0x20000184
 8004ea4:	20000018 	.word	0x20000018
 8004ea8:	20000098 	.word	0x20000098

08004eac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004eb0:	4907      	ldr	r1, [pc, #28]	@ (8004ed0 <CDC_Init_FS+0x24>)
 8004eb2:	4b08      	ldr	r3, [pc, #32]	@ (8004ed4 <CDC_Init_FS+0x28>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7ff fda0 	bl	80049fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004ebc:	4a06      	ldr	r2, [pc, #24]	@ (8004ed8 <CDC_Init_FS+0x2c>)
 8004ebe:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <CDC_Init_FS+0x28>)
 8004ec0:	0011      	movs	r1, r2
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f7ff fdbd 	bl	8004a42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8004ec8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004eca:	0018      	movs	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000c60 	.word	0x20000c60
 8004ed4:	20000184 	.word	0x20000184
 8004ed8:	20000460 	.word	0x20000460

08004edc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8004ee0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6039      	str	r1, [r7, #0]
 8004ef0:	0011      	movs	r1, r2
 8004ef2:	1dfb      	adds	r3, r7, #7
 8004ef4:	1c02      	adds	r2, r0, #0
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	1d3b      	adds	r3, r7, #4
 8004efa:	1c0a      	adds	r2, r1, #0
 8004efc:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8004efe:	1dfb      	adds	r3, r7, #7
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b23      	cmp	r3, #35	@ 0x23
 8004f04:	d804      	bhi.n	8004f10 <CDC_Control_FS+0x28>
 8004f06:	009a      	lsls	r2, r3, #2
 8004f08:	4b04      	ldr	r3, [pc, #16]	@ (8004f1c <CDC_Control_FS+0x34>)
 8004f0a:	18d3      	adds	r3, r2, r3
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004f10:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8004f12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004f14:	0018      	movs	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b002      	add	sp, #8
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	08005740 	.word	0x08005740

08004f20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4b06      	ldr	r3, [pc, #24]	@ (8004f48 <CDC_Receive_FS+0x28>)
 8004f2e:	0011      	movs	r1, r2
 8004f30:	0018      	movs	r0, r3
 8004f32:	f7ff fd86 	bl	8004a42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004f36:	4b04      	ldr	r3, [pc, #16]	@ (8004f48 <CDC_Receive_FS+0x28>)
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff fd9f 	bl	8004a7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8004f3e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004f40:	0018      	movs	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b002      	add	sp, #8
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000184 	.word	0x20000184

08004f4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	1dfb      	adds	r3, r7, #7
 8004f58:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8004f5a:	2117      	movs	r1, #23
 8004f5c:	187b      	adds	r3, r7, r1
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8004f62:	187b      	adds	r3, r7, r1
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	b25b      	sxtb	r3, r3
}
 8004f68:	0018      	movs	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b006      	add	sp, #24
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	0002      	movs	r2, r0
 8004f78:	6039      	str	r1, [r7, #0]
 8004f7a:	1dfb      	adds	r3, r7, #7
 8004f7c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2212      	movs	r2, #18
 8004f82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8004f84:	4b02      	ldr	r3, [pc, #8]	@ (8004f90 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8004f86:	0018      	movs	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b002      	add	sp, #8
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			@ (mov r8, r8)
 8004f90:	200000cc 	.word	0x200000cc

08004f94 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	1dfb      	adds	r3, r7, #7
 8004fa0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004fa8:	4b02      	ldr	r3, [pc, #8]	@ (8004fb4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b002      	add	sp, #8
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	200000e0 	.word	0x200000e0

08004fb8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	0002      	movs	r2, r0
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	1dfb      	adds	r3, r7, #7
 8004fc4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8004fc6:	1dfb      	adds	r3, r7, #7
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	4908      	ldr	r1, [pc, #32]	@ (8004ff4 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8004fd2:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <USBD_CDC_ProductStrDescriptor+0x40>)
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7ff fe84 	bl	8004ce2 <USBD_GetString>
 8004fda:	e005      	b.n	8004fe8 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	4905      	ldr	r1, [pc, #20]	@ (8004ff4 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8004fe0:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <USBD_CDC_ProductStrDescriptor+0x40>)
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f7ff fe7d 	bl	8004ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004fe8:	4b02      	ldr	r3, [pc, #8]	@ (8004ff4 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 8004fea:	0018      	movs	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b002      	add	sp, #8
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	20001460 	.word	0x20001460
 8004ff8:	080056b8 	.word	0x080056b8

08004ffc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	0002      	movs	r2, r0
 8005004:	6039      	str	r1, [r7, #0]
 8005006:	1dfb      	adds	r3, r7, #7
 8005008:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	4904      	ldr	r1, [pc, #16]	@ (8005020 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800500e:	4b05      	ldr	r3, [pc, #20]	@ (8005024 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 8005010:	0018      	movs	r0, r3
 8005012:	f7ff fe66 	bl	8004ce2 <USBD_GetString>
  return USBD_StrDesc;
 8005016:	4b02      	ldr	r3, [pc, #8]	@ (8005020 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 8005018:	0018      	movs	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	b002      	add	sp, #8
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20001460 	.word	0x20001460
 8005024:	080056d0 	.word	0x080056d0

08005028 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	0002      	movs	r2, r0
 8005030:	6039      	str	r1, [r7, #0]
 8005032:	1dfb      	adds	r3, r7, #7
 8005034:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	221a      	movs	r2, #26
 800503a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800503c:	f000 f84c 	bl	80050d8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8005040:	4b02      	ldr	r3, [pc, #8]	@ (800504c <USBD_CDC_SerialStrDescriptor+0x24>)
}
 8005042:	0018      	movs	r0, r3
 8005044:	46bd      	mov	sp, r7
 8005046:	b002      	add	sp, #8
 8005048:	bd80      	pop	{r7, pc}
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	200000e4 	.word	0x200000e4

08005050 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	0002      	movs	r2, r0
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	1dfb      	adds	r3, r7, #7
 800505c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800505e:	1dfb      	adds	r3, r7, #7
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	4908      	ldr	r1, [pc, #32]	@ (800508c <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800506a:	4b09      	ldr	r3, [pc, #36]	@ (8005090 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800506c:	0018      	movs	r0, r3
 800506e:	f7ff fe38 	bl	8004ce2 <USBD_GetString>
 8005072:	e005      	b.n	8005080 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	4905      	ldr	r1, [pc, #20]	@ (800508c <USBD_CDC_ConfigStrDescriptor+0x3c>)
 8005078:	4b05      	ldr	r3, [pc, #20]	@ (8005090 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800507a:	0018      	movs	r0, r3
 800507c:	f7ff fe31 	bl	8004ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005080:	4b02      	ldr	r3, [pc, #8]	@ (800508c <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b002      	add	sp, #8
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	20001460 	.word	0x20001460
 8005090:	080056e4 	.word	0x080056e4

08005094 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	0002      	movs	r2, r0
 800509c:	6039      	str	r1, [r7, #0]
 800509e:	1dfb      	adds	r3, r7, #7
 80050a0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80050a2:	1dfb      	adds	r3, r7, #7
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	4908      	ldr	r1, [pc, #32]	@ (80050d0 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 80050ae:	4b09      	ldr	r3, [pc, #36]	@ (80050d4 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7ff fe16 	bl	8004ce2 <USBD_GetString>
 80050b6:	e005      	b.n	80050c4 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	4905      	ldr	r1, [pc, #20]	@ (80050d0 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 80050bc:	4b05      	ldr	r3, [pc, #20]	@ (80050d4 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 80050be:	0018      	movs	r0, r3
 80050c0:	f7ff fe0f 	bl	8004ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80050c4:	4b02      	ldr	r3, [pc, #8]	@ (80050d0 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 80050c6:	0018      	movs	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	b002      	add	sp, #8
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	46c0      	nop			@ (mov r8, r8)
 80050d0:	20001460 	.word	0x20001460
 80050d4:	080056f0 	.word	0x080056f0

080050d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80050de:	4b10      	ldr	r3, [pc, #64]	@ (8005120 <Get_SerialNum+0x48>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80050e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005124 <Get_SerialNum+0x4c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80050ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <Get_SerialNum+0x50>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	18d3      	adds	r3, r2, r3
 80050f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80050fe:	490b      	ldr	r1, [pc, #44]	@ (800512c <Get_SerialNum+0x54>)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2208      	movs	r2, #8
 8005104:	0018      	movs	r0, r3
 8005106:	f000 f815 	bl	8005134 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800510a:	4909      	ldr	r1, [pc, #36]	@ (8005130 <Get_SerialNum+0x58>)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2204      	movs	r2, #4
 8005110:	0018      	movs	r0, r3
 8005112:	f000 f80f 	bl	8005134 <IntToUnicode>
  }
}
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	46bd      	mov	sp, r7
 800511a:	b004      	add	sp, #16
 800511c:	bd80      	pop	{r7, pc}
 800511e:	46c0      	nop			@ (mov r8, r8)
 8005120:	1fff7590 	.word	0x1fff7590
 8005124:	1fff7594 	.word	0x1fff7594
 8005128:	1fff7598 	.word	0x1fff7598
 800512c:	200000e6 	.word	0x200000e6
 8005130:	200000f6 	.word	0x200000f6

08005134 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	1dfb      	adds	r3, r7, #7
 8005140:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8005142:	2117      	movs	r1, #23
 8005144:	187b      	adds	r3, r7, r1
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800514a:	187b      	adds	r3, r7, r1
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	e02f      	b.n	80051b2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	0f1b      	lsrs	r3, r3, #28
 8005156:	2b09      	cmp	r3, #9
 8005158:	d80d      	bhi.n	8005176 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	0f1b      	lsrs	r3, r3, #28
 800515e:	b2da      	uxtb	r2, r3
 8005160:	2317      	movs	r3, #23
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	0019      	movs	r1, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	185b      	adds	r3, r3, r1
 800516e:	3230      	adds	r2, #48	@ 0x30
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	e00c      	b.n	8005190 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	0f1b      	lsrs	r3, r3, #28
 800517a:	b2da      	uxtb	r2, r3
 800517c:	2317      	movs	r3, #23
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	0019      	movs	r1, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	185b      	adds	r3, r3, r1
 800518a:	3237      	adds	r2, #55	@ 0x37
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005196:	2117      	movs	r1, #23
 8005198:	187b      	adds	r3, r7, r1
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	3301      	adds	r3, #1
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	18d3      	adds	r3, r2, r3
 80051a4:	2200      	movs	r2, #0
 80051a6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80051a8:	187b      	adds	r3, r7, r1
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	187b      	adds	r3, r7, r1
 80051ae:	3201      	adds	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	2317      	movs	r3, #23
 80051b4:	18fa      	adds	r2, r7, r3
 80051b6:	1dfb      	adds	r3, r7, #7
 80051b8:	7812      	ldrb	r2, [r2, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d3c8      	bcc.n	8005152 <IntToUnicode+0x1e>
  }
}
 80051c0:	46c0      	nop			@ (mov r8, r8)
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b006      	add	sp, #24
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80051cc:	b590      	push	{r4, r7, lr}
 80051ce:	b099      	sub	sp, #100	@ 0x64
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051d4:	2414      	movs	r4, #20
 80051d6:	193b      	adds	r3, r7, r4
 80051d8:	0018      	movs	r0, r3
 80051da:	234c      	movs	r3, #76	@ 0x4c
 80051dc:	001a      	movs	r2, r3
 80051de:	2100      	movs	r1, #0
 80051e0:	f000 fa31 	bl	8005646 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a21      	ldr	r2, [pc, #132]	@ (8005270 <HAL_PCD_MspInit+0xa4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d13b      	bne.n	8005266 <HAL_PCD_MspInit+0x9a>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80051ee:	193b      	adds	r3, r7, r4
 80051f0:	2280      	movs	r2, #128	@ 0x80
 80051f2:	0452      	lsls	r2, r2, #17
 80051f4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80051f6:	193b      	adds	r3, r7, r4
 80051f8:	2200      	movs	r2, #0
 80051fa:	645a      	str	r2, [r3, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051fc:	193b      	adds	r3, r7, r4
 80051fe:	0018      	movs	r0, r3
 8005200:	f7fc ff22 	bl	8002048 <HAL_RCCEx_PeriphCLKConfig>
 8005204:	1e03      	subs	r3, r0, #0
 8005206:	d001      	beq.n	800520c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8005208:	f7fb f8ee 	bl	80003e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800520c:	4b19      	ldr	r3, [pc, #100]	@ (8005274 <HAL_PCD_MspInit+0xa8>)
 800520e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005210:	4b18      	ldr	r3, [pc, #96]	@ (8005274 <HAL_PCD_MspInit+0xa8>)
 8005212:	2180      	movs	r1, #128	@ 0x80
 8005214:	0189      	lsls	r1, r1, #6
 8005216:	430a      	orrs	r2, r1
 8005218:	63da      	str	r2, [r3, #60]	@ 0x3c
 800521a:	4b16      	ldr	r3, [pc, #88]	@ (8005274 <HAL_PCD_MspInit+0xa8>)
 800521c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800521e:	2380      	movs	r3, #128	@ 0x80
 8005220:	019b      	lsls	r3, r3, #6
 8005222:	4013      	ands	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005228:	4b12      	ldr	r3, [pc, #72]	@ (8005274 <HAL_PCD_MspInit+0xa8>)
 800522a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800522c:	2380      	movs	r3, #128	@ 0x80
 800522e:	055b      	lsls	r3, r3, #21
 8005230:	4013      	ands	r3, r2
 8005232:	d116      	bne.n	8005262 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005234:	4b0f      	ldr	r3, [pc, #60]	@ (8005274 <HAL_PCD_MspInit+0xa8>)
 8005236:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005238:	4b0e      	ldr	r3, [pc, #56]	@ (8005274 <HAL_PCD_MspInit+0xa8>)
 800523a:	2180      	movs	r1, #128	@ 0x80
 800523c:	0549      	lsls	r1, r1, #21
 800523e:	430a      	orrs	r2, r1
 8005240:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005242:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <HAL_PCD_MspInit+0xa8>)
 8005244:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005246:	2380      	movs	r3, #128	@ 0x80
 8005248:	055b      	lsls	r3, r3, #21
 800524a:	4013      	ands	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8005250:	f7fc f9c2 	bl	80015d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005254:	4b07      	ldr	r3, [pc, #28]	@ (8005274 <HAL_PCD_MspInit+0xa8>)
 8005256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005258:	4b06      	ldr	r3, [pc, #24]	@ (8005274 <HAL_PCD_MspInit+0xa8>)
 800525a:	4907      	ldr	r1, [pc, #28]	@ (8005278 <HAL_PCD_MspInit+0xac>)
 800525c:	400a      	ands	r2, r1
 800525e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 8005260:	e001      	b.n	8005266 <HAL_PCD_MspInit+0x9a>
      HAL_PWREx_EnableVddUSB();
 8005262:	f7fc f9b9 	bl	80015d8 <HAL_PWREx_EnableVddUSB>
}
 8005266:	46c0      	nop			@ (mov r8, r8)
 8005268:	46bd      	mov	sp, r7
 800526a:	b019      	add	sp, #100	@ 0x64
 800526c:	bd90      	pop	{r4, r7, pc}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	40005c00 	.word	0x40005c00
 8005274:	40021000 	.word	0x40021000
 8005278:	efffffff 	.word	0xefffffff

0800527c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 8005284:	4a34      	ldr	r2, [pc, #208]	@ (8005358 <USBD_LL_Init+0xdc>)
 8005286:	23b7      	movs	r3, #183	@ 0xb7
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	23b2      	movs	r3, #178	@ 0xb2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4930      	ldr	r1, [pc, #192]	@ (8005358 <USBD_LL_Init+0xdc>)
 8005296:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8005298:	4b2f      	ldr	r3, [pc, #188]	@ (8005358 <USBD_LL_Init+0xdc>)
 800529a:	4a30      	ldr	r2, [pc, #192]	@ (800535c <USBD_LL_Init+0xe0>)
 800529c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800529e:	4b2e      	ldr	r3, [pc, #184]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052a0:	2208      	movs	r2, #8
 80052a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 80052a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052a6:	2208      	movs	r2, #8
 80052a8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 80052aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052ac:	2202      	movs	r2, #2
 80052ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80052b0:	4b29      	ldr	r3, [pc, #164]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052b2:	2202      	movs	r2, #2
 80052b4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80052b6:	4b28      	ldr	r3, [pc, #160]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80052bc:	4b26      	ldr	r3, [pc, #152]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052be:	2200      	movs	r2, #0
 80052c0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80052c2:	4b25      	ldr	r3, [pc, #148]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80052c8:	4b23      	ldr	r3, [pc, #140]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80052ce:	4b22      	ldr	r3, [pc, #136]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80052d4:	4b20      	ldr	r3, [pc, #128]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80052da:	4b1f      	ldr	r3, [pc, #124]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052dc:	2200      	movs	r2, #0
 80052de:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80052e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005358 <USBD_LL_Init+0xdc>)
 80052e2:	0018      	movs	r0, r3
 80052e4:	f7fb fe36 	bl	8000f54 <HAL_PCD_Init>
 80052e8:	1e03      	subs	r3, r0, #0
 80052ea:	d001      	beq.n	80052f0 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 80052ec:	f7fb f87c 	bl	80003e8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	23b2      	movs	r3, #178	@ 0xb2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	58d0      	ldr	r0, [r2, r3]
 80052f8:	2318      	movs	r3, #24
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	f7fc f8f8 	bl	80014f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	23b2      	movs	r3, #178	@ 0xb2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	58d0      	ldr	r0, [r2, r3]
 800530a:	2358      	movs	r3, #88	@ 0x58
 800530c:	2200      	movs	r2, #0
 800530e:	2180      	movs	r1, #128	@ 0x80
 8005310:	f7fc f8ef 	bl	80014f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	23b2      	movs	r3, #178	@ 0xb2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	58d0      	ldr	r0, [r2, r3]
 800531c:	23c0      	movs	r3, #192	@ 0xc0
 800531e:	2200      	movs	r2, #0
 8005320:	2181      	movs	r1, #129	@ 0x81
 8005322:	f7fc f8e6 	bl	80014f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	23b2      	movs	r3, #178	@ 0xb2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	58d0      	ldr	r0, [r2, r3]
 800532e:	2388      	movs	r3, #136	@ 0x88
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	2200      	movs	r2, #0
 8005334:	2101      	movs	r1, #1
 8005336:	f7fc f8dc 	bl	80014f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	23b2      	movs	r3, #178	@ 0xb2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	58d0      	ldr	r0, [r2, r3]
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	2200      	movs	r2, #0
 8005348:	2182      	movs	r1, #130	@ 0x82
 800534a:	f7fc f8d2 	bl	80014f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	0018      	movs	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	b002      	add	sp, #8
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20001660 	.word	0x20001660
 800535c:	40005c00 	.word	0x40005c00

08005360 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005368:	210f      	movs	r1, #15
 800536a:	187b      	adds	r3, r7, r1
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005370:	260e      	movs	r6, #14
 8005372:	19bb      	adds	r3, r7, r6
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	23b2      	movs	r3, #178	@ 0xb2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	58d3      	ldr	r3, [r2, r3]
 8005380:	000d      	movs	r5, r1
 8005382:	187c      	adds	r4, r7, r1
 8005384:	0018      	movs	r0, r3
 8005386:	f7fb fedf 	bl	8001148 <HAL_PCD_Start>
 800538a:	0003      	movs	r3, r0
 800538c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800538e:	19bc      	adds	r4, r7, r6
 8005390:	197b      	adds	r3, r7, r5
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	0018      	movs	r0, r3
 8005396:	f000 f91f 	bl	80055d8 <USBD_Get_USB_Status>
 800539a:	0003      	movs	r3, r0
 800539c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800539e:	19bb      	adds	r3, r7, r6
 80053a0:	781b      	ldrb	r3, [r3, #0]
}
 80053a2:	0018      	movs	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b005      	add	sp, #20
 80053a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80053aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	000c      	movs	r4, r1
 80053b4:	0010      	movs	r0, r2
 80053b6:	0019      	movs	r1, r3
 80053b8:	1cfb      	adds	r3, r7, #3
 80053ba:	1c22      	adds	r2, r4, #0
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	1cbb      	adds	r3, r7, #2
 80053c0:	1c02      	adds	r2, r0, #0
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	003b      	movs	r3, r7
 80053c6:	1c0a      	adds	r2, r1, #0
 80053c8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80053ca:	260f      	movs	r6, #15
 80053cc:	19bb      	adds	r3, r7, r6
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80053d2:	250e      	movs	r5, #14
 80053d4:	197b      	adds	r3, r7, r5
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	23b2      	movs	r3, #178	@ 0xb2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	58d0      	ldr	r0, [r2, r3]
 80053e2:	19bc      	adds	r4, r7, r6
 80053e4:	1cbb      	adds	r3, r7, #2
 80053e6:	781d      	ldrb	r5, [r3, #0]
 80053e8:	003b      	movs	r3, r7
 80053ea:	881a      	ldrh	r2, [r3, #0]
 80053ec:	1cfb      	adds	r3, r7, #3
 80053ee:	7819      	ldrb	r1, [r3, #0]
 80053f0:	002b      	movs	r3, r5
 80053f2:	f7fb fece 	bl	8001192 <HAL_PCD_EP_Open>
 80053f6:	0003      	movs	r3, r0
 80053f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80053fa:	250e      	movs	r5, #14
 80053fc:	197c      	adds	r4, r7, r5
 80053fe:	19bb      	adds	r3, r7, r6
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	0018      	movs	r0, r3
 8005404:	f000 f8e8 	bl	80055d8 <USBD_Get_USB_Status>
 8005408:	0003      	movs	r3, r0
 800540a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800540c:	197b      	adds	r3, r7, r5
 800540e:	781b      	ldrb	r3, [r3, #0]
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b005      	add	sp, #20
 8005416:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005418 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	000a      	movs	r2, r1
 8005422:	1cfb      	adds	r3, r7, #3
 8005424:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005426:	210f      	movs	r1, #15
 8005428:	187b      	adds	r3, r7, r1
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800542e:	260e      	movs	r6, #14
 8005430:	19bb      	adds	r3, r7, r6
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	23b2      	movs	r3, #178	@ 0xb2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	58d2      	ldr	r2, [r2, r3]
 800543e:	000d      	movs	r5, r1
 8005440:	187c      	adds	r4, r7, r1
 8005442:	1cfb      	adds	r3, r7, #3
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	0019      	movs	r1, r3
 8005448:	0010      	movs	r0, r2
 800544a:	f7fb ff13 	bl	8001274 <HAL_PCD_EP_Close>
 800544e:	0003      	movs	r3, r0
 8005450:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005452:	19bc      	adds	r4, r7, r6
 8005454:	197b      	adds	r3, r7, r5
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	0018      	movs	r0, r3
 800545a:	f000 f8bd 	bl	80055d8 <USBD_Get_USB_Status>
 800545e:	0003      	movs	r3, r0
 8005460:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8005462:	19bb      	adds	r3, r7, r6
 8005464:	781b      	ldrb	r3, [r3, #0]
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b005      	add	sp, #20
 800546c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800546e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800546e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	000a      	movs	r2, r1
 8005478:	1cfb      	adds	r3, r7, #3
 800547a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800547c:	210f      	movs	r1, #15
 800547e:	187b      	adds	r3, r7, r1
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005484:	260e      	movs	r6, #14
 8005486:	19bb      	adds	r3, r7, r6
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	23b2      	movs	r3, #178	@ 0xb2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	58d2      	ldr	r2, [r2, r3]
 8005494:	000d      	movs	r5, r1
 8005496:	187c      	adds	r4, r7, r1
 8005498:	1cfb      	adds	r3, r7, #3
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	0019      	movs	r1, r3
 800549e:	0010      	movs	r0, r2
 80054a0:	f7fb ffc9 	bl	8001436 <HAL_PCD_EP_SetStall>
 80054a4:	0003      	movs	r3, r0
 80054a6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80054a8:	19bc      	adds	r4, r7, r6
 80054aa:	197b      	adds	r3, r7, r5
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	0018      	movs	r0, r3
 80054b0:	f000 f892 	bl	80055d8 <USBD_Get_USB_Status>
 80054b4:	0003      	movs	r3, r0
 80054b6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80054b8:	19bb      	adds	r3, r7, r6
 80054ba:	781b      	ldrb	r3, [r3, #0]
}
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	b005      	add	sp, #20
 80054c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054c4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80054c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	230b      	movs	r3, #11
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	1c0a      	adds	r2, r1, #0
 80054d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054d8:	2617      	movs	r6, #23
 80054da:	19bb      	adds	r3, r7, r6
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80054e0:	2516      	movs	r5, #22
 80054e2:	197b      	adds	r3, r7, r5
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	23b2      	movs	r3, #178	@ 0xb2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	58d0      	ldr	r0, [r2, r3]
 80054f0:	19bc      	adds	r4, r7, r6
 80054f2:	683d      	ldr	r5, [r7, #0]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	230b      	movs	r3, #11
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	7819      	ldrb	r1, [r3, #0]
 80054fc:	002b      	movs	r3, r5
 80054fe:	f7fb ff5d 	bl	80013bc <HAL_PCD_EP_Transmit>
 8005502:	0003      	movs	r3, r0
 8005504:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005506:	2516      	movs	r5, #22
 8005508:	197c      	adds	r4, r7, r5
 800550a:	19bb      	adds	r3, r7, r6
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	0018      	movs	r0, r3
 8005510:	f000 f862 	bl	80055d8 <USBD_Get_USB_Status>
 8005514:	0003      	movs	r3, r0
 8005516:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8005518:	197b      	adds	r3, r7, r5
 800551a:	781b      	ldrb	r3, [r3, #0]
}
 800551c:	0018      	movs	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	b007      	add	sp, #28
 8005522:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005524 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	230b      	movs	r3, #11
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	1c0a      	adds	r2, r1, #0
 8005536:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005538:	2617      	movs	r6, #23
 800553a:	19bb      	adds	r3, r7, r6
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005540:	2516      	movs	r5, #22
 8005542:	197b      	adds	r3, r7, r5
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	23b2      	movs	r3, #178	@ 0xb2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	58d0      	ldr	r0, [r2, r3]
 8005550:	19bc      	adds	r4, r7, r6
 8005552:	683d      	ldr	r5, [r7, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	230b      	movs	r3, #11
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	7819      	ldrb	r1, [r3, #0]
 800555c:	002b      	movs	r3, r5
 800555e:	f7fb fedc 	bl	800131a <HAL_PCD_EP_Receive>
 8005562:	0003      	movs	r3, r0
 8005564:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005566:	2516      	movs	r5, #22
 8005568:	197c      	adds	r4, r7, r5
 800556a:	19bb      	adds	r3, r7, r6
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 f832 	bl	80055d8 <USBD_Get_USB_Status>
 8005574:	0003      	movs	r3, r0
 8005576:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8005578:	197b      	adds	r3, r7, r5
 800557a:	781b      	ldrb	r3, [r3, #0]
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b007      	add	sp, #28
 8005582:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005584 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	000a      	movs	r2, r1
 800558e:	1cfb      	adds	r3, r7, #3
 8005590:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	23b2      	movs	r3, #178	@ 0xb2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	58d2      	ldr	r2, [r2, r3]
 800559a:	1cfb      	adds	r3, r7, #3
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	0019      	movs	r1, r3
 80055a0:	0010      	movs	r0, r2
 80055a2:	f7fb fef2 	bl	800138a <HAL_PCD_EP_GetRxCount>
 80055a6:	0003      	movs	r3, r0
}
 80055a8:	0018      	movs	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	b002      	add	sp, #8
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80055b8:	4b02      	ldr	r3, [pc, #8]	@ (80055c4 <USBD_static_malloc+0x14>)
}
 80055ba:	0018      	movs	r0, r3
 80055bc:	46bd      	mov	sp, r7
 80055be:	b002      	add	sp, #8
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	46c0      	nop			@ (mov r8, r8)
 80055c4:	20001940 	.word	0x20001940

080055c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]

}
 80055d0:	46c0      	nop			@ (mov r8, r8)
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b002      	add	sp, #8
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	0002      	movs	r2, r0
 80055e0:	1dfb      	adds	r3, r7, #7
 80055e2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80055e4:	230f      	movs	r3, #15
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80055ec:	1dfb      	adds	r3, r7, #7
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d017      	beq.n	8005624 <USBD_Get_USB_Status+0x4c>
 80055f4:	dc1b      	bgt.n	800562e <USBD_Get_USB_Status+0x56>
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d00f      	beq.n	800561a <USBD_Get_USB_Status+0x42>
 80055fa:	dc18      	bgt.n	800562e <USBD_Get_USB_Status+0x56>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <USBD_Get_USB_Status+0x2e>
 8005600:	2b01      	cmp	r3, #1
 8005602:	d005      	beq.n	8005610 <USBD_Get_USB_Status+0x38>
 8005604:	e013      	b.n	800562e <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005606:	230f      	movs	r3, #15
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]
    break;
 800560e:	e013      	b.n	8005638 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005610:	230f      	movs	r3, #15
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	2203      	movs	r2, #3
 8005616:	701a      	strb	r2, [r3, #0]
    break;
 8005618:	e00e      	b.n	8005638 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800561a:	230f      	movs	r3, #15
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	2201      	movs	r2, #1
 8005620:	701a      	strb	r2, [r3, #0]
    break;
 8005622:	e009      	b.n	8005638 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005624:	230f      	movs	r3, #15
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	2203      	movs	r2, #3
 800562a:	701a      	strb	r2, [r3, #0]
    break;
 800562c:	e004      	b.n	8005638 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800562e:	230f      	movs	r3, #15
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	2203      	movs	r2, #3
 8005634:	701a      	strb	r2, [r3, #0]
    break;
 8005636:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8005638:	230f      	movs	r3, #15
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	781b      	ldrb	r3, [r3, #0]
}
 800563e:	0018      	movs	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	b004      	add	sp, #16
 8005644:	bd80      	pop	{r7, pc}

08005646 <memset>:
 8005646:	0003      	movs	r3, r0
 8005648:	1882      	adds	r2, r0, r2
 800564a:	4293      	cmp	r3, r2
 800564c:	d100      	bne.n	8005650 <memset+0xa>
 800564e:	4770      	bx	lr
 8005650:	7019      	strb	r1, [r3, #0]
 8005652:	3301      	adds	r3, #1
 8005654:	e7f9      	b.n	800564a <memset+0x4>
	...

08005658 <__libc_init_array>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	2600      	movs	r6, #0
 800565c:	4c0c      	ldr	r4, [pc, #48]	@ (8005690 <__libc_init_array+0x38>)
 800565e:	4d0d      	ldr	r5, [pc, #52]	@ (8005694 <__libc_init_array+0x3c>)
 8005660:	1b64      	subs	r4, r4, r5
 8005662:	10a4      	asrs	r4, r4, #2
 8005664:	42a6      	cmp	r6, r4
 8005666:	d109      	bne.n	800567c <__libc_init_array+0x24>
 8005668:	2600      	movs	r6, #0
 800566a:	f000 f819 	bl	80056a0 <_init>
 800566e:	4c0a      	ldr	r4, [pc, #40]	@ (8005698 <__libc_init_array+0x40>)
 8005670:	4d0a      	ldr	r5, [pc, #40]	@ (800569c <__libc_init_array+0x44>)
 8005672:	1b64      	subs	r4, r4, r5
 8005674:	10a4      	asrs	r4, r4, #2
 8005676:	42a6      	cmp	r6, r4
 8005678:	d105      	bne.n	8005686 <__libc_init_array+0x2e>
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	00b3      	lsls	r3, r6, #2
 800567e:	58eb      	ldr	r3, [r5, r3]
 8005680:	4798      	blx	r3
 8005682:	3601      	adds	r6, #1
 8005684:	e7ee      	b.n	8005664 <__libc_init_array+0xc>
 8005686:	00b3      	lsls	r3, r6, #2
 8005688:	58eb      	ldr	r3, [r5, r3]
 800568a:	4798      	blx	r3
 800568c:	3601      	adds	r6, #1
 800568e:	e7f2      	b.n	8005676 <__libc_init_array+0x1e>
 8005690:	080057d0 	.word	0x080057d0
 8005694:	080057d0 	.word	0x080057d0
 8005698:	080057d4 	.word	0x080057d4
 800569c:	080057d0 	.word	0x080057d0

080056a0 <_init>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a6:	bc08      	pop	{r3}
 80056a8:	469e      	mov	lr, r3
 80056aa:	4770      	bx	lr

080056ac <_fini>:
 80056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ae:	46c0      	nop			@ (mov r8, r8)
 80056b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b2:	bc08      	pop	{r3}
 80056b4:	469e      	mov	lr, r3
 80056b6:	4770      	bx	lr
