
VDI_Bridge_V0.0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000274c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002808  08002808  00003808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002848  08002848  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002848  08002848  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002848  08002848  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002848  08002848  00003848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800284c  0800284c  0000384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002850  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  0800285c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  0800285c  000040dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c803  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c64  00000000  00000000  00010837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000124a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5b  00000000  00000000  00013208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b72c  00000000  00000000  00013c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e57f  00000000  00000000  0002f38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b705a  00000000  00000000  0003d90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4968  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003064  00000000  00000000  000f49ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f7a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080027f0 	.word	0x080027f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080027f0 	.word	0x080027f0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa5e 	bl	80006e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f808 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8f2 	bl	8000410 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800022c:	f000 f84c 	bl	80002c8 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000230:	f000 f892 	bl	8000358 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	e7fd      	b.n	8000234 <main+0x18>

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b095      	sub	sp, #84	@ 0x54
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	2414      	movs	r4, #20
 8000240:	193b      	adds	r3, r7, r4
 8000242:	0018      	movs	r0, r3
 8000244:	233c      	movs	r3, #60	@ 0x3c
 8000246:	001a      	movs	r2, r3
 8000248:	2100      	movs	r1, #0
 800024a:	f002 faa5 	bl	8002798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	0018      	movs	r0, r3
 8000252:	2310      	movs	r3, #16
 8000254:	001a      	movs	r2, r3
 8000256:	2100      	movs	r1, #0
 8000258:	f002 fa9e 	bl	8002798 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025c:	2380      	movs	r3, #128	@ 0x80
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	0018      	movs	r0, r3
 8000262:	f000 ff13 	bl	800108c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	193b      	adds	r3, r7, r4
 8000268:	2202      	movs	r2, #2
 800026a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	193b      	adds	r3, r7, r4
 800026e:	2280      	movs	r2, #128	@ 0x80
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000274:	193b      	adds	r3, r7, r4
 8000276:	2200      	movs	r2, #0
 8000278:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027a:	193b      	adds	r3, r7, r4
 800027c:	2240      	movs	r2, #64	@ 0x40
 800027e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000280:	193b      	adds	r3, r7, r4
 8000282:	2200      	movs	r2, #0
 8000284:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	193b      	adds	r3, r7, r4
 8000288:	0018      	movs	r0, r3
 800028a:	f000 ff3f 	bl	800110c <HAL_RCC_OscConfig>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000292:	f000 f901 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2207      	movs	r2, #7
 800029a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2100      	movs	r1, #0
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fa8a 	bl	80017cc <HAL_RCC_ClockConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002bc:	f000 f8ec 	bl	8000498 <Error_Handler>
  }
}
 80002c0:	46c0      	nop			@ (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b015      	add	sp, #84	@ 0x54
 80002c6:	bd90      	pop	{r4, r7, pc}

080002c8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80002cc:	4b20      	ldr	r3, [pc, #128]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 80002ce:	4a21      	ldr	r2, [pc, #132]	@ (8000354 <MX_FDCAN2_Init+0x8c>)
 80002d0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80002de:	4b1c      	ldr	r3, [pc, #112]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80002e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80002ea:	4b19      	ldr	r3, [pc, #100]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80002f0:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80002f6:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 80002f8:	2210      	movs	r2, #16
 80002fa:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80002fc:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 80002fe:	2201      	movs	r2, #1
 8000300:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 5;
 8000302:	4b13      	ldr	r3, [pc, #76]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 8000304:	2205      	movs	r2, #5
 8000306:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000308:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 800030a:	2202      	movs	r2, #2
 800030c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800030e:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 8000310:	2201      	movs	r2, #1
 8000312:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000314:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 8000316:	2201      	movs	r2, #1
 8000318:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800031a:	4b0d      	ldr	r3, [pc, #52]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 800031c:	2201      	movs	r2, #1
 800031e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000320:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 8000322:	2201      	movs	r2, #1
 8000324:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 8000328:	2200      	movs	r2, #0
 800032a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800032c:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 800032e:	2200      	movs	r2, #0
 8000330:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000332:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 8000334:	2200      	movs	r2, #0
 8000336:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000338:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <MX_FDCAN2_Init+0x88>)
 800033a:	0018      	movs	r0, r3
 800033c:	f000 fb4a 	bl	80009d4 <HAL_FDCAN_Init>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d001      	beq.n	8000348 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000344:	f000 f8a8 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	46c0      	nop			@ (mov r8, r8)
 8000350:	20000028 	.word	0x20000028
 8000354:	40006800 	.word	0x40006800

08000358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035e:	2310      	movs	r3, #16
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	0018      	movs	r0, r3
 8000364:	2310      	movs	r3, #16
 8000366:	001a      	movs	r2, r3
 8000368:	2100      	movs	r1, #0
 800036a:	f002 fa15 	bl	8002798 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	0018      	movs	r0, r3
 8000372:	230c      	movs	r3, #12
 8000374:	001a      	movs	r2, r3
 8000376:	2100      	movs	r1, #0
 8000378:	f002 fa0e 	bl	8002798 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800037c:	4b21      	ldr	r3, [pc, #132]	@ (8000404 <MX_TIM1_Init+0xac>)
 800037e:	4a22      	ldr	r2, [pc, #136]	@ (8000408 <MX_TIM1_Init+0xb0>)
 8000380:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000382:	4b20      	ldr	r3, [pc, #128]	@ (8000404 <MX_TIM1_Init+0xac>)
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000388:	4b1e      	ldr	r3, [pc, #120]	@ (8000404 <MX_TIM1_Init+0xac>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800038e:	4b1d      	ldr	r3, [pc, #116]	@ (8000404 <MX_TIM1_Init+0xac>)
 8000390:	4a1e      	ldr	r2, [pc, #120]	@ (800040c <MX_TIM1_Init+0xb4>)
 8000392:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000394:	4b1b      	ldr	r3, [pc, #108]	@ (8000404 <MX_TIM1_Init+0xac>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800039a:	4b1a      	ldr	r3, [pc, #104]	@ (8000404 <MX_TIM1_Init+0xac>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a0:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <MX_TIM1_Init+0xac>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003a6:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <MX_TIM1_Init+0xac>)
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 fdd5 	bl	8001f58 <HAL_TIM_Base_Init>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80003b2:	f000 f871 	bl	8000498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b6:	2110      	movs	r1, #16
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2280      	movs	r2, #128	@ 0x80
 80003bc:	0152      	lsls	r2, r2, #5
 80003be:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003c0:	187a      	adds	r2, r7, r1
 80003c2:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <MX_TIM1_Init+0xac>)
 80003c4:	0011      	movs	r1, r2
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 ff26 	bl	8002218 <HAL_TIM_ConfigClockSource>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80003d0:	f000 f862 	bl	8000498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003e6:	1d3a      	adds	r2, r7, #4
 80003e8:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <MX_TIM1_Init+0xac>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 f945 	bl	800267c <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80003f6:	f000 f84f 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b008      	add	sp, #32
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	2000008c 	.word	0x2000008c
 8000408:	40012c00 	.word	0x40012c00
 800040c:	0000ffff 	.word	0x0000ffff

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b089      	sub	sp, #36	@ 0x24
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	240c      	movs	r4, #12
 8000418:	193b      	adds	r3, r7, r4
 800041a:	0018      	movs	r0, r3
 800041c:	2314      	movs	r3, #20
 800041e:	001a      	movs	r2, r3
 8000420:	2100      	movs	r1, #0
 8000422:	f002 f9b9 	bl	8002798 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <MX_GPIO_Init+0x80>)
 8000428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800042a:	4b19      	ldr	r3, [pc, #100]	@ (8000490 <MX_GPIO_Init+0x80>)
 800042c:	2102      	movs	r1, #2
 800042e:	430a      	orrs	r2, r1
 8000430:	635a      	str	r2, [r3, #52]	@ 0x34
 8000432:	4b17      	ldr	r3, [pc, #92]	@ (8000490 <MX_GPIO_Init+0x80>)
 8000434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000436:	2202      	movs	r2, #2
 8000438:	4013      	ands	r3, r2
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b14      	ldr	r3, [pc, #80]	@ (8000490 <MX_GPIO_Init+0x80>)
 8000440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000442:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <MX_GPIO_Init+0x80>)
 8000444:	2101      	movs	r1, #1
 8000446:	430a      	orrs	r2, r1
 8000448:	635a      	str	r2, [r3, #52]	@ 0x34
 800044a:	4b11      	ldr	r3, [pc, #68]	@ (8000490 <MX_GPIO_Init+0x80>)
 800044c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800044e:	2201      	movs	r2, #1
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8000456:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_GPIO_Init+0x84>)
 8000458:	2200      	movs	r2, #0
 800045a:	2180      	movs	r1, #128	@ 0x80
 800045c:	0018      	movs	r0, r3
 800045e:	f000 fdf7 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8000462:	0021      	movs	r1, r4
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2201      	movs	r2, #1
 800046e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800047c:	187b      	adds	r3, r7, r1
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <MX_GPIO_Init+0x84>)
 8000480:	0019      	movs	r1, r3
 8000482:	0010      	movs	r0, r2
 8000484:	f000 fc78 	bl	8000d78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b009      	add	sp, #36	@ 0x24
 800048e:	bd90      	pop	{r4, r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	50000400 	.word	0x50000400

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a0:	46c0      	nop			@ (mov r8, r8)
 80004a2:	e7fd      	b.n	80004a0 <Error_Handler+0x8>

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004aa:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004c8:	2180      	movs	r1, #128	@ 0x80
 80004ca:	0549      	lsls	r1, r1, #21
 80004cc:	430a      	orrs	r2, r1
 80004ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <HAL_MspInit+0x4c>)
 80004d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	055b      	lsls	r3, r3, #21
 80004d8:	4013      	ands	r3, r2
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80004de:	2380      	movs	r3, #128	@ 0x80
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f982 	bl	80007ec <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b09d      	sub	sp, #116	@ 0x74
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	235c      	movs	r3, #92	@ 0x5c
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	0018      	movs	r0, r3
 8000502:	2314      	movs	r3, #20
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f002 f946 	bl	8002798 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050c:	2410      	movs	r4, #16
 800050e:	193b      	adds	r3, r7, r4
 8000510:	0018      	movs	r0, r3
 8000512:	234c      	movs	r3, #76	@ 0x4c
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f002 f93e 	bl	8002798 <memset>
  if(hfdcan->Instance==FDCAN2)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a22      	ldr	r2, [pc, #136]	@ (80005ac <HAL_FDCAN_MspInit+0xb8>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d13e      	bne.n	80005a4 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2280      	movs	r2, #128	@ 0x80
 800052a:	0492      	lsls	r2, r2, #18
 800052c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2200      	movs	r2, #0
 8000532:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000534:	193b      	adds	r3, r7, r4
 8000536:	0018      	movs	r0, r3
 8000538:	f001 fad2 	bl	8001ae0 <HAL_RCCEx_PeriphCLKConfig>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000540:	f7ff ffaa 	bl	8000498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000544:	4b1a      	ldr	r3, [pc, #104]	@ (80005b0 <HAL_FDCAN_MspInit+0xbc>)
 8000546:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000548:	4b19      	ldr	r3, [pc, #100]	@ (80005b0 <HAL_FDCAN_MspInit+0xbc>)
 800054a:	2180      	movs	r1, #128	@ 0x80
 800054c:	0149      	lsls	r1, r1, #5
 800054e:	430a      	orrs	r2, r1
 8000550:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000552:	4b17      	ldr	r3, [pc, #92]	@ (80005b0 <HAL_FDCAN_MspInit+0xbc>)
 8000554:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000556:	2380      	movs	r3, #128	@ 0x80
 8000558:	015b      	lsls	r3, r3, #5
 800055a:	4013      	ands	r3, r2
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <HAL_FDCAN_MspInit+0xbc>)
 8000562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000564:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HAL_FDCAN_MspInit+0xbc>)
 8000566:	2102      	movs	r1, #2
 8000568:	430a      	orrs	r2, r1
 800056a:	635a      	str	r2, [r3, #52]	@ 0x34
 800056c:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <HAL_FDCAN_MspInit+0xbc>)
 800056e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000570:	2202      	movs	r2, #2
 8000572:	4013      	ands	r3, r2
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000578:	215c      	movs	r1, #92	@ 0x5c
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2203      	movs	r2, #3
 800057e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2202      	movs	r2, #2
 8000584:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2203      	movs	r2, #3
 8000596:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000598:	187b      	adds	r3, r7, r1
 800059a:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <HAL_FDCAN_MspInit+0xc0>)
 800059c:	0019      	movs	r1, r3
 800059e:	0010      	movs	r0, r2
 80005a0:	f000 fbea 	bl	8000d78 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b01d      	add	sp, #116	@ 0x74
 80005aa:	bd90      	pop	{r4, r7, pc}
 80005ac:	40006800 	.word	0x40006800
 80005b0:	40021000 	.word	0x40021000
 80005b4:	50000400 	.word	0x50000400

080005b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b097      	sub	sp, #92	@ 0x5c
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c0:	240c      	movs	r4, #12
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	0018      	movs	r0, r3
 80005c6:	234c      	movs	r3, #76	@ 0x4c
 80005c8:	001a      	movs	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	f002 f8e4 	bl	8002798 <memset>
  if(htim_base->Instance==TIM1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a15      	ldr	r2, [pc, #84]	@ (800062c <HAL_TIM_Base_MspInit+0x74>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d124      	bne.n	8000624 <HAL_TIM_Base_MspInit+0x6c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	0392      	lsls	r2, r2, #14
 80005e0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2200      	movs	r2, #0
 80005e6:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fa78 	bl	8001ae0 <HAL_RCCEx_PeriphCLKConfig>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80005f4:	f7ff ff50 	bl	8000498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <HAL_TIM_Base_MspInit+0x78>)
 80005fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <HAL_TIM_Base_MspInit+0x78>)
 80005fe:	2180      	movs	r1, #128	@ 0x80
 8000600:	0109      	lsls	r1, r1, #4
 8000602:	430a      	orrs	r2, r1
 8000604:	641a      	str	r2, [r3, #64]	@ 0x40
 8000606:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <HAL_TIM_Base_MspInit+0x78>)
 8000608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800060a:	2380      	movs	r3, #128	@ 0x80
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	4013      	ands	r3, r2
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	200d      	movs	r0, #13
 800061a:	f000 f9a9 	bl	8000970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800061e:	200d      	movs	r0, #13
 8000620:	f000 f9bb 	bl	800099a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b017      	add	sp, #92	@ 0x5c
 800062a:	bd90      	pop	{r4, r7, pc}
 800062c:	40012c00 	.word	0x40012c00
 8000630:	40021000 	.word	0x40021000

08000634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	e7fd      	b.n	8000638 <NMI_Handler+0x4>

0800063c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000640:	46c0      	nop			@ (mov r8, r8)
 8000642:	e7fd      	b.n	8000640 <HardFault_Handler+0x4>

08000644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065c:	f000 f8aa 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800066c:	4b03      	ldr	r3, [pc, #12]	@ (800067c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fcca 	bl	8002008 <HAL_TIM_IRQHandler>

  // HEARTBEAT  alle 100ms senden


  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	2000008c 	.word	0x2000008c

08000680 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800068c:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000690:	f7ff fff6 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480c      	ldr	r0, [pc, #48]	@ (80006c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000696:	490d      	ldr	r1, [pc, #52]	@ (80006cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000698:	4a0d      	ldr	r2, [pc, #52]	@ (80006d0 <LoopForever+0xe>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ac:	4c0a      	ldr	r4, [pc, #40]	@ (80006d8 <LoopForever+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ba:	f002 f875 	bl	80027a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006be:	f7ff fdad 	bl	800021c <main>

080006c2 <LoopForever>:

LoopForever:
  b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   r0, =_estack
 80006c4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d0:	08002850 	.word	0x08002850
  ldr r2, =_sbss
 80006d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d8:	200000dc 	.word	0x200000dc

080006dc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_COMP_IRQHandler>
	...

080006e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <HAL_Init+0x3c>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <HAL_Init+0x3c>)
 80006f2:	2180      	movs	r1, #128	@ 0x80
 80006f4:	0049      	lsls	r1, r1, #1
 80006f6:	430a      	orrs	r2, r1
 80006f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fa:	2003      	movs	r0, #3
 80006fc:	f000 f810 	bl	8000720 <HAL_InitTick>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d003      	beq.n	800070c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e001      	b.n	8000710 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff feca 	bl	80004a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781b      	ldrb	r3, [r3, #0]
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	b002      	add	sp, #8
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000728:	230f      	movs	r3, #15
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000730:	4b1d      	ldr	r3, [pc, #116]	@ (80007a8 <HAL_InitTick+0x88>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d02b      	beq.n	8000790 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000738:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <HAL_InitTick+0x8c>)
 800073a:	681c      	ldr	r4, [r3, #0]
 800073c:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <HAL_InitTick+0x88>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	0019      	movs	r1, r3
 8000742:	23fa      	movs	r3, #250	@ 0xfa
 8000744:	0098      	lsls	r0, r3, #2
 8000746:	f7ff fcdd 	bl	8000104 <__udivsi3>
 800074a:	0003      	movs	r3, r0
 800074c:	0019      	movs	r1, r3
 800074e:	0020      	movs	r0, r4
 8000750:	f7ff fcd8 	bl	8000104 <__udivsi3>
 8000754:	0003      	movs	r3, r0
 8000756:	0018      	movs	r0, r3
 8000758:	f000 f92f 	bl	80009ba <HAL_SYSTICK_Config>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d112      	bne.n	8000786 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d80a      	bhi.n	800077c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	2301      	movs	r3, #1
 800076a:	425b      	negs	r3, r3
 800076c:	2200      	movs	r2, #0
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f8fe 	bl	8000970 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000774:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <HAL_InitTick+0x90>)
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	e00d      	b.n	8000798 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800077c:	230f      	movs	r3, #15
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e008      	b.n	8000798 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000786:	230f      	movs	r3, #15
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e003      	b.n	8000798 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000790:	230f      	movs	r3, #15
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000798:	230f      	movs	r3, #15
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	781b      	ldrb	r3, [r3, #0]
}
 800079e:	0018      	movs	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b005      	add	sp, #20
 80007a4:	bd90      	pop	{r4, r7, pc}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000004 	.word	0x20000004

080007b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <HAL_IncTick+0x1c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <HAL_IncTick+0x20>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	18d2      	adds	r2, r2, r3
 80007c4:	4b03      	ldr	r3, [pc, #12]	@ (80007d4 <HAL_IncTick+0x20>)
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	20000008 	.word	0x20000008
 80007d4:	200000d8 	.word	0x200000d8

080007d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  return uwTick;
 80007dc:	4b02      	ldr	r3, [pc, #8]	@ (80007e8 <HAL_GetTick+0x10>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	200000d8 	.word	0x200000d8

080007ec <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a06      	ldr	r2, [pc, #24]	@ (8000814 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80007fa:	4013      	ands	r3, r2
 80007fc:	0019      	movs	r1, r3
 80007fe:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	430a      	orrs	r2, r1
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	40010000 	.word	0x40010000
 8000814:	fffff9ff 	.word	0xfffff9ff

08000818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	0002      	movs	r2, r0
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b7f      	cmp	r3, #127	@ 0x7f
 800082a:	d809      	bhi.n	8000840 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	001a      	movs	r2, r3
 8000832:	231f      	movs	r3, #31
 8000834:	401a      	ands	r2, r3
 8000836:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <__NVIC_EnableIRQ+0x30>)
 8000838:	2101      	movs	r1, #1
 800083a:	4091      	lsls	r1, r2
 800083c:	000a      	movs	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b002      	add	sp, #8
 8000846:	bd80      	pop	{r7, pc}
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	0002      	movs	r2, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000860:	d828      	bhi.n	80008b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000862:	4a2f      	ldr	r2, [pc, #188]	@ (8000920 <__NVIC_SetPriority+0xd4>)
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b25b      	sxtb	r3, r3
 800086a:	089b      	lsrs	r3, r3, #2
 800086c:	33c0      	adds	r3, #192	@ 0xc0
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	589b      	ldr	r3, [r3, r2]
 8000872:	1dfa      	adds	r2, r7, #7
 8000874:	7812      	ldrb	r2, [r2, #0]
 8000876:	0011      	movs	r1, r2
 8000878:	2203      	movs	r2, #3
 800087a:	400a      	ands	r2, r1
 800087c:	00d2      	lsls	r2, r2, #3
 800087e:	21ff      	movs	r1, #255	@ 0xff
 8000880:	4091      	lsls	r1, r2
 8000882:	000a      	movs	r2, r1
 8000884:	43d2      	mvns	r2, r2
 8000886:	401a      	ands	r2, r3
 8000888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	019b      	lsls	r3, r3, #6
 800088e:	22ff      	movs	r2, #255	@ 0xff
 8000890:	401a      	ands	r2, r3
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	0018      	movs	r0, r3
 8000898:	2303      	movs	r3, #3
 800089a:	4003      	ands	r3, r0
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a0:	481f      	ldr	r0, [pc, #124]	@ (8000920 <__NVIC_SetPriority+0xd4>)
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	089b      	lsrs	r3, r3, #2
 80008aa:	430a      	orrs	r2, r1
 80008ac:	33c0      	adds	r3, #192	@ 0xc0
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008b2:	e031      	b.n	8000918 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000924 <__NVIC_SetPriority+0xd8>)
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	0019      	movs	r1, r3
 80008bc:	230f      	movs	r3, #15
 80008be:	400b      	ands	r3, r1
 80008c0:	3b08      	subs	r3, #8
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	3306      	adds	r3, #6
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	3304      	adds	r3, #4
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	1dfa      	adds	r2, r7, #7
 80008d0:	7812      	ldrb	r2, [r2, #0]
 80008d2:	0011      	movs	r1, r2
 80008d4:	2203      	movs	r2, #3
 80008d6:	400a      	ands	r2, r1
 80008d8:	00d2      	lsls	r2, r2, #3
 80008da:	21ff      	movs	r1, #255	@ 0xff
 80008dc:	4091      	lsls	r1, r2
 80008de:	000a      	movs	r2, r1
 80008e0:	43d2      	mvns	r2, r2
 80008e2:	401a      	ands	r2, r3
 80008e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	019b      	lsls	r3, r3, #6
 80008ea:	22ff      	movs	r2, #255	@ 0xff
 80008ec:	401a      	ands	r2, r3
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	0018      	movs	r0, r3
 80008f4:	2303      	movs	r3, #3
 80008f6:	4003      	ands	r3, r0
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <__NVIC_SetPriority+0xd8>)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	001c      	movs	r4, r3
 8000904:	230f      	movs	r3, #15
 8000906:	4023      	ands	r3, r4
 8000908:	3b08      	subs	r3, #8
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	430a      	orrs	r2, r1
 800090e:	3306      	adds	r3, #6
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	18c3      	adds	r3, r0, r3
 8000914:	3304      	adds	r3, #4
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b003      	add	sp, #12
 800091e:	bd90      	pop	{r4, r7, pc}
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	1e5a      	subs	r2, r3, #1
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	045b      	lsls	r3, r3, #17
 8000938:	429a      	cmp	r2, r3
 800093a:	d301      	bcc.n	8000940 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093c:	2301      	movs	r3, #1
 800093e:	e010      	b.n	8000962 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <SysTick_Config+0x44>)
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	3a01      	subs	r2, #1
 8000946:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000948:	2301      	movs	r3, #1
 800094a:	425b      	negs	r3, r3
 800094c:	2103      	movs	r1, #3
 800094e:	0018      	movs	r0, r3
 8000950:	f7ff ff7c 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <SysTick_Config+0x44>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	@ (800096c <SysTick_Config+0x44>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	0018      	movs	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	b002      	add	sp, #8
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	e000e010 	.word	0xe000e010

08000970 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
 800097a:	210f      	movs	r1, #15
 800097c:	187b      	adds	r3, r7, r1
 800097e:	1c02      	adds	r2, r0, #0
 8000980:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	187b      	adds	r3, r7, r1
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b25b      	sxtb	r3, r3
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff ff5d 	bl	800084c <__NVIC_SetPriority>
}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b004      	add	sp, #16
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	0002      	movs	r2, r0
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff ff33 	bl	8000818 <__NVIC_EnableIRQ>
}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff ffaf 	bl	8000928 <SysTick_Config>
 80009ca:	0003      	movs	r3, r0
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e14e      	b.n	8000c84 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	225c      	movs	r2, #92	@ 0x5c
 80009ea:	5c9b      	ldrb	r3, [r3, r2]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d107      	bne.n	8000a02 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	225d      	movs	r2, #93	@ 0x5d
 80009f6:	2100      	movs	r1, #0
 80009f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff fd79 	bl	80004f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	699a      	ldr	r2, [r3, #24]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2110      	movs	r1, #16
 8000a0e:	438a      	bics	r2, r1
 8000a10:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a12:	f7ff fee1 	bl	80007d8 <HAL_GetTick>
 8000a16:	0003      	movs	r3, r0
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000a1a:	e012      	b.n	8000a42 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000a1c:	f7ff fedc 	bl	80007d8 <HAL_GetTick>
 8000a20:	0002      	movs	r2, r0
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	2b0a      	cmp	r3, #10
 8000a28:	d90b      	bls.n	8000a42 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2e:	2201      	movs	r2, #1
 8000a30:	431a      	orrs	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	225c      	movs	r2, #92	@ 0x5c
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e120      	b.n	8000c84 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	2208      	movs	r2, #8
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	d0e5      	beq.n	8000a1c <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a60:	f7ff feba 	bl	80007d8 <HAL_GetTick>
 8000a64:	0003      	movs	r3, r0
 8000a66:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000a68:	e012      	b.n	8000a90 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000a6a:	f7ff feb5 	bl	80007d8 <HAL_GetTick>
 8000a6e:	0002      	movs	r2, r0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	2b0a      	cmp	r3, #10
 8000a76:	d90b      	bls.n	8000a90 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	225c      	movs	r2, #92	@ 0x5c
 8000a88:	2103      	movs	r1, #3
 8000a8a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e0f9      	b.n	8000c84 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	2201      	movs	r2, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	d0e6      	beq.n	8000a6a <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	699a      	ldr	r2, [r3, #24]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a76      	ldr	r2, [pc, #472]	@ (8000c8c <HAL_FDCAN_Init+0x2b8>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d103      	bne.n	8000abe <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000ab6:	4a76      	ldr	r2, [pc, #472]	@ (8000c90 <HAL_FDCAN_Init+0x2bc>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7c1b      	ldrb	r3, [r3, #16]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d108      	bne.n	8000ad8 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	699a      	ldr	r2, [r3, #24]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	438a      	bics	r2, r1
 8000ad4:	619a      	str	r2, [r3, #24]
 8000ad6:	e007      	b.n	8000ae8 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	699a      	ldr	r2, [r3, #24]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2140      	movs	r1, #64	@ 0x40
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7c5b      	ldrb	r3, [r3, #17]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d109      	bne.n	8000b04 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	699a      	ldr	r2, [r3, #24]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2180      	movs	r1, #128	@ 0x80
 8000afc:	01c9      	lsls	r1, r1, #7
 8000afe:	430a      	orrs	r2, r1
 8000b00:	619a      	str	r2, [r3, #24]
 8000b02:	e007      	b.n	8000b14 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	699a      	ldr	r2, [r3, #24]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4961      	ldr	r1, [pc, #388]	@ (8000c94 <HAL_FDCAN_Init+0x2c0>)
 8000b10:	400a      	ands	r2, r1
 8000b12:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7c9b      	ldrb	r3, [r3, #18]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d108      	bne.n	8000b2e <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	699a      	ldr	r2, [r3, #24]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	495c      	ldr	r1, [pc, #368]	@ (8000c98 <HAL_FDCAN_Init+0x2c4>)
 8000b28:	400a      	ands	r2, r1
 8000b2a:	619a      	str	r2, [r3, #24]
 8000b2c:	e008      	b.n	8000b40 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	699a      	ldr	r2, [r3, #24]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2180      	movs	r1, #128	@ 0x80
 8000b3a:	0149      	lsls	r1, r1, #5
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	4a55      	ldr	r2, [pc, #340]	@ (8000c9c <HAL_FDCAN_Init+0x2c8>)
 8000b48:	4013      	ands	r3, r2
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	699a      	ldr	r2, [r3, #24]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	21a4      	movs	r1, #164	@ 0xa4
 8000b64:	438a      	bics	r2, r1
 8000b66:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2110      	movs	r1, #16
 8000b74:	438a      	bics	r2, r1
 8000b76:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d108      	bne.n	8000b92 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	699a      	ldr	r2, [r3, #24]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	619a      	str	r2, [r3, #24]
 8000b90:	e02c      	b.n	8000bec <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d028      	beq.n	8000bec <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d01c      	beq.n	8000bdc <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2180      	movs	r1, #128	@ 0x80
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2110      	movs	r1, #16
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d110      	bne.n	8000bec <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	699a      	ldr	r2, [r3, #24]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	619a      	str	r2, [r3, #24]
 8000bda:	e007      	b.n	8000bec <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	699a      	ldr	r2, [r3, #24]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2120      	movs	r1, #32
 8000be8:	430a      	orrs	r2, r1
 8000bea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69db      	ldr	r3, [r3, #28]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000bfc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000c04:	431a      	orrs	r2, r3
 8000c06:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000c14:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c16:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	23c0      	movs	r3, #192	@ 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d115      	bne.n	8000c50 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c28:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c32:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c44:	3b01      	subs	r3, #1
 8000c46:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000c4c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c4e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	22c0      	movs	r2, #192	@ 0xc0
 8000c56:	5899      	ldr	r1, [r3, r2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	21c0      	movs	r1, #192	@ 0xc0
 8000c64:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 f819 	bl	8000ca0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	225c      	movs	r2, #92	@ 0x5c
 8000c7e:	2101      	movs	r1, #1
 8000c80:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b004      	add	sp, #16
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40006400 	.word	0x40006400
 8000c90:	40006500 	.word	0x40006500
 8000c94:	ffffbfff 	.word	0xffffbfff
 8000c98:	ffffefff 	.word	0xffffefff
 8000c9c:	fffffcff 	.word	0xfffffcff

08000ca0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d68 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8000caa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8000d6c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d105      	bne.n	8000cc2 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	22d4      	movs	r2, #212	@ 0xd4
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	589b      	ldr	r3, [r3, r2]
 8000cd0:	4a27      	ldr	r2, [pc, #156]	@ (8000d70 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cda:	041a      	lsls	r2, r3, #16
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	2180      	movs	r1, #128	@ 0x80
 8000ce4:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	3370      	adds	r3, #112	@ 0x70
 8000cea:	001a      	movs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2280      	movs	r2, #128	@ 0x80
 8000cf6:	589b      	ldr	r3, [r3, r2]
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d02:	061a      	lsls	r2, r3, #24
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	2180      	movs	r1, #128	@ 0x80
 8000d0c:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	33b0      	adds	r3, #176	@ 0xb0
 8000d12:	001a      	movs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	3389      	adds	r3, #137	@ 0x89
 8000d1c:	33ff      	adds	r3, #255	@ 0xff
 8000d1e:	001a      	movs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2298      	movs	r2, #152	@ 0x98
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	189a      	adds	r2, r3, r2
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	229e      	movs	r2, #158	@ 0x9e
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	189a      	adds	r2, r3, r2
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	e005      	b.n	8000d4e <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	22d4      	movs	r2, #212	@ 0xd4
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4694      	mov	ip, r2
 8000d56:	4463      	add	r3, ip
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3f1      	bcc.n	8000d42 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b004      	add	sp, #16
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	4000b400 	.word	0x4000b400
 8000d6c:	40006800 	.word	0x40006800
 8000d70:	ffe0ffff 	.word	0xffe0ffff
 8000d74:	f0ffffff 	.word	0xf0ffffff

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d86:	e14d      	b.n	8001024 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4091      	lsls	r1, r2
 8000d92:	000a      	movs	r2, r1
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d100      	bne.n	8000da0 <HAL_GPIO_Init+0x28>
 8000d9e:	e13e      	b.n	800101e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2203      	movs	r2, #3
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d005      	beq.n	8000db8 <HAL_GPIO_Init+0x40>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d130      	bne.n	8000e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	43da      	mvns	r2, r3
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dee:	2201      	movs	r2, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	2201      	movs	r2, #1
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2203      	movs	r2, #3
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d017      	beq.n	8000e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d123      	bne.n	8000eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	58d3      	ldr	r3, [r2, r3]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	2207      	movs	r2, #7
 8000e74:	4013      	ands	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	400b      	ands	r3, r1
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	6939      	ldr	r1, [r7, #16]
 8000ea8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	23c0      	movs	r3, #192	@ 0xc0
 8000ee4:	029b      	lsls	r3, r3, #10
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d100      	bne.n	8000eec <HAL_GPIO_Init+0x174>
 8000eea:	e098      	b.n	800101e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000eec:	4a53      	ldr	r2, [pc, #332]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	589b      	ldr	r3, [r3, r2]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2203      	movs	r2, #3
 8000efe:	4013      	ands	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	220f      	movs	r2, #15
 8000f04:	409a      	lsls	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	43da      	mvns	r2, r3
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	23a0      	movs	r3, #160	@ 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_Init+0x1d6>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a48      	ldr	r2, [pc, #288]	@ (8001040 <HAL_GPIO_Init+0x2c8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x1d2>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a47      	ldr	r2, [pc, #284]	@ (8001044 <HAL_GPIO_Init+0x2cc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x1ce>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a46      	ldr	r2, [pc, #280]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x1ca>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a45      	ldr	r2, [pc, #276]	@ (800104c <HAL_GPIO_Init+0x2d4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x1c6>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e008      	b.n	8000f50 <HAL_GPIO_Init+0x1d8>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x1d8>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <HAL_GPIO_Init+0x1d8>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x1d8>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x1d8>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	2103      	movs	r1, #3
 8000f54:	400a      	ands	r2, r1
 8000f56:	00d2      	lsls	r2, r2, #3
 8000f58:	4093      	lsls	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f60:	4936      	ldr	r1, [pc, #216]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3318      	adds	r3, #24
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f6e:	4b33      	ldr	r3, [pc, #204]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	43da      	mvns	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	035b      	lsls	r3, r3, #13
 8000f86:	4013      	ands	r3, r2
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f92:	4b2a      	ldr	r3, [pc, #168]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f98:	4b28      	ldr	r3, [pc, #160]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43da      	mvns	r2, r3
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	039b      	lsls	r3, r3, #14
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8000fc4:	2384      	movs	r3, #132	@ 0x84
 8000fc6:	58d3      	ldr	r3, [r2, r3]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	029b      	lsls	r3, r3, #10
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fe8:	4914      	ldr	r1, [pc, #80]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8000fea:	2284      	movs	r2, #132	@ 0x84
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000ff0:	4a12      	ldr	r2, [pc, #72]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8000ff2:	2380      	movs	r3, #128	@ 0x80
 8000ff4:	58d3      	ldr	r3, [r2, r3]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	2380      	movs	r3, #128	@ 0x80
 8001008:	025b      	lsls	r3, r3, #9
 800100a:	4013      	ands	r3, r2
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001016:	4909      	ldr	r1, [pc, #36]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8001018:	2280      	movs	r2, #128	@ 0x80
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	40da      	lsrs	r2, r3
 800102c:	1e13      	subs	r3, r2, #0
 800102e:	d000      	beq.n	8001032 <HAL_GPIO_Init+0x2ba>
 8001030:	e6aa      	b.n	8000d88 <HAL_GPIO_Init+0x10>
  }
}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	46c0      	nop			@ (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b006      	add	sp, #24
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021800 	.word	0x40021800
 8001040:	50000400 	.word	0x50000400
 8001044:	50000800 	.word	0x50000800
 8001048:	50000c00 	.word	0x50000c00
 800104c:	50001000 	.word	0x50001000

08001050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	0008      	movs	r0, r1
 800105a:	0011      	movs	r1, r2
 800105c:	1cbb      	adds	r3, r7, #2
 800105e:	1c02      	adds	r2, r0, #0
 8001060:	801a      	strh	r2, [r3, #0]
 8001062:	1c7b      	adds	r3, r7, #1
 8001064:	1c0a      	adds	r2, r1, #0
 8001066:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001068:	1c7b      	adds	r3, r7, #1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d004      	beq.n	800107a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001070:	1cbb      	adds	r3, r7, #2
 8001072:	881a      	ldrh	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001078:	e003      	b.n	8001082 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800107a:	1cbb      	adds	r3, r7, #2
 800107c:	881a      	ldrh	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800109a:	4013      	ands	r3, r2
 800109c:	0019      	movs	r1, r3
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	2380      	movs	r3, #128	@ 0x80
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d11f      	bne.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	0013      	movs	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	189b      	adds	r3, r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4912      	ldr	r1, [pc, #72]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff f820 	bl	8000104 <__udivsi3>
 80010c4:	0003      	movs	r3, r0
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ca:	e008      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e001      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e009      	b.n	80010f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010de:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	2380      	movs	r3, #128	@ 0x80
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	401a      	ands	r2, r3
 80010e8:	2380      	movs	r3, #128	@ 0x80
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d0ed      	beq.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b004      	add	sp, #16
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	40007000 	.word	0x40007000
 8001100:	fffff9ff 	.word	0xfffff9ff
 8001104:	20000000 	.word	0x20000000
 8001108:	000f4240 	.word	0x000f4240

0800110c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	f000 fb50 	bl	80017c0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	4013      	ands	r3, r2
 8001128:	d100      	bne.n	800112c <HAL_RCC_OscConfig+0x20>
 800112a:	e07c      	b.n	8001226 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112c:	4bc3      	ldr	r3, [pc, #780]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2238      	movs	r2, #56	@ 0x38
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001136:	4bc1      	ldr	r3, [pc, #772]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2203      	movs	r2, #3
 800113c:	4013      	ands	r3, r2
 800113e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b10      	cmp	r3, #16
 8001144:	d102      	bne.n	800114c <HAL_RCC_OscConfig+0x40>
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d002      	beq.n	8001152 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d10b      	bne.n	800116a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001152:	4bba      	ldr	r3, [pc, #744]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	2380      	movs	r3, #128	@ 0x80
 8001158:	029b      	lsls	r3, r3, #10
 800115a:	4013      	ands	r3, r2
 800115c:	d062      	beq.n	8001224 <HAL_RCC_OscConfig+0x118>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d15e      	bne.n	8001224 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e32a      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	2380      	movs	r3, #128	@ 0x80
 8001170:	025b      	lsls	r3, r3, #9
 8001172:	429a      	cmp	r2, r3
 8001174:	d107      	bne.n	8001186 <HAL_RCC_OscConfig+0x7a>
 8001176:	4bb1      	ldr	r3, [pc, #708]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4bb0      	ldr	r3, [pc, #704]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 800117c:	2180      	movs	r1, #128	@ 0x80
 800117e:	0249      	lsls	r1, r1, #9
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e020      	b.n	80011c8 <HAL_RCC_OscConfig+0xbc>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	23a0      	movs	r3, #160	@ 0xa0
 800118c:	02db      	lsls	r3, r3, #11
 800118e:	429a      	cmp	r2, r3
 8001190:	d10e      	bne.n	80011b0 <HAL_RCC_OscConfig+0xa4>
 8001192:	4baa      	ldr	r3, [pc, #680]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4ba9      	ldr	r3, [pc, #676]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001198:	2180      	movs	r1, #128	@ 0x80
 800119a:	02c9      	lsls	r1, r1, #11
 800119c:	430a      	orrs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	4ba6      	ldr	r3, [pc, #664]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4ba5      	ldr	r3, [pc, #660]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80011a6:	2180      	movs	r1, #128	@ 0x80
 80011a8:	0249      	lsls	r1, r1, #9
 80011aa:	430a      	orrs	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0xbc>
 80011b0:	4ba2      	ldr	r3, [pc, #648]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4ba1      	ldr	r3, [pc, #644]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80011b6:	49a2      	ldr	r1, [pc, #648]	@ (8001440 <HAL_RCC_OscConfig+0x334>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	4b9f      	ldr	r3, [pc, #636]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b9e      	ldr	r3, [pc, #632]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80011c2:	49a0      	ldr	r1, [pc, #640]	@ (8001444 <HAL_RCC_OscConfig+0x338>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d014      	beq.n	80011fa <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fb02 	bl	80007d8 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011da:	f7ff fafd 	bl	80007d8 <HAL_GetTick>
 80011de:	0002      	movs	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b64      	cmp	r3, #100	@ 0x64
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e2e9      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ec:	4b93      	ldr	r3, [pc, #588]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	029b      	lsls	r3, r3, #10
 80011f4:	4013      	ands	r3, r2
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0xce>
 80011f8:	e015      	b.n	8001226 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fa:	f7ff faed 	bl	80007d8 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff fae8 	bl	80007d8 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	@ 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e2d4      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001216:	4b89      	ldr	r3, [pc, #548]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	029b      	lsls	r3, r3, #10
 800121e:	4013      	ands	r3, r2
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0xf8>
 8001222:	e000      	b.n	8001226 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2202      	movs	r2, #2
 800122c:	4013      	ands	r3, r2
 800122e:	d100      	bne.n	8001232 <HAL_RCC_OscConfig+0x126>
 8001230:	e099      	b.n	8001366 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001232:	4b82      	ldr	r3, [pc, #520]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2238      	movs	r2, #56	@ 0x38
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800123c:	4b7f      	ldr	r3, [pc, #508]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2203      	movs	r2, #3
 8001242:	4013      	ands	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b10      	cmp	r3, #16
 800124a:	d102      	bne.n	8001252 <HAL_RCC_OscConfig+0x146>
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d002      	beq.n	8001258 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d135      	bne.n	80012c4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001258:	4b78      	ldr	r3, [pc, #480]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4013      	ands	r3, r2
 8001262:	d005      	beq.n	8001270 <HAL_RCC_OscConfig+0x164>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e2a7      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b72      	ldr	r3, [pc, #456]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a74      	ldr	r2, [pc, #464]	@ (8001448 <HAL_RCC_OscConfig+0x33c>)
 8001276:	4013      	ands	r3, r2
 8001278:	0019      	movs	r1, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	021a      	lsls	r2, r3, #8
 8001280:	4b6e      	ldr	r3, [pc, #440]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001282:	430a      	orrs	r2, r1
 8001284:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d112      	bne.n	80012b2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800128c:	4b6b      	ldr	r3, [pc, #428]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a6e      	ldr	r2, [pc, #440]	@ (800144c <HAL_RCC_OscConfig+0x340>)
 8001292:	4013      	ands	r3, r2
 8001294:	0019      	movs	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	4b68      	ldr	r3, [pc, #416]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012a0:	4b66      	ldr	r3, [pc, #408]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0adb      	lsrs	r3, r3, #11
 80012a6:	2207      	movs	r2, #7
 80012a8:	4013      	ands	r3, r2
 80012aa:	4a69      	ldr	r2, [pc, #420]	@ (8001450 <HAL_RCC_OscConfig+0x344>)
 80012ac:	40da      	lsrs	r2, r3
 80012ae:	4b69      	ldr	r3, [pc, #420]	@ (8001454 <HAL_RCC_OscConfig+0x348>)
 80012b0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012b2:	4b69      	ldr	r3, [pc, #420]	@ (8001458 <HAL_RCC_OscConfig+0x34c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff fa32 	bl	8000720 <HAL_InitTick>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d051      	beq.n	8001364 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e27d      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d030      	beq.n	800132e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012cc:	4b5b      	ldr	r3, [pc, #364]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a5e      	ldr	r2, [pc, #376]	@ (800144c <HAL_RCC_OscConfig+0x340>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	0019      	movs	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691a      	ldr	r2, [r3, #16]
 80012da:	4b58      	ldr	r3, [pc, #352]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b56      	ldr	r3, [pc, #344]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b55      	ldr	r3, [pc, #340]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80012e6:	2180      	movs	r1, #128	@ 0x80
 80012e8:	0049      	lsls	r1, r1, #1
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ee:	f7ff fa73 	bl	80007d8 <HAL_GetTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fa6e 	bl	80007d8 <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e25a      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130a:	4b4c      	ldr	r3, [pc, #304]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	2380      	movs	r3, #128	@ 0x80
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4013      	ands	r3, r2
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4a4b      	ldr	r2, [pc, #300]	@ (8001448 <HAL_RCC_OscConfig+0x33c>)
 800131c:	4013      	ands	r3, r2
 800131e:	0019      	movs	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	021a      	lsls	r2, r3, #8
 8001326:	4b45      	ldr	r3, [pc, #276]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001328:	430a      	orrs	r2, r1
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	e01b      	b.n	8001366 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800132e:	4b43      	ldr	r3, [pc, #268]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b42      	ldr	r3, [pc, #264]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001334:	4949      	ldr	r1, [pc, #292]	@ (800145c <HAL_RCC_OscConfig+0x350>)
 8001336:	400a      	ands	r2, r1
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133a:	f7ff fa4d 	bl	80007d8 <HAL_GetTick>
 800133e:	0003      	movs	r3, r0
 8001340:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fa48 	bl	80007d8 <HAL_GetTick>
 8001348:	0002      	movs	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e234      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001356:	4b39      	ldr	r3, [pc, #228]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4013      	ands	r3, r2
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x238>
 8001362:	e000      	b.n	8001366 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001364:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2208      	movs	r2, #8
 800136c:	4013      	ands	r3, r2
 800136e:	d047      	beq.n	8001400 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001370:	4b32      	ldr	r3, [pc, #200]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2238      	movs	r2, #56	@ 0x38
 8001376:	4013      	ands	r3, r2
 8001378:	2b18      	cmp	r3, #24
 800137a:	d10a      	bne.n	8001392 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800137c:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 800137e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001380:	2202      	movs	r2, #2
 8001382:	4013      	ands	r3, r2
 8001384:	d03c      	beq.n	8001400 <HAL_RCC_OscConfig+0x2f4>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d138      	bne.n	8001400 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e216      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d019      	beq.n	80013ce <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800139a:	4b28      	ldr	r3, [pc, #160]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 800139c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800139e:	4b27      	ldr	r3, [pc, #156]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80013a0:	2101      	movs	r1, #1
 80013a2:	430a      	orrs	r2, r1
 80013a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fa17 	bl	80007d8 <HAL_GetTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fa12 	bl	80007d8 <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1fe      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c2:	4b1e      	ldr	r3, [pc, #120]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	2202      	movs	r2, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d0f1      	beq.n	80013b0 <HAL_RCC_OscConfig+0x2a4>
 80013cc:	e018      	b.n	8001400 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013ce:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80013d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013d2:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80013d4:	2101      	movs	r1, #1
 80013d6:	438a      	bics	r2, r1
 80013d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff f9fd 	bl	80007d8 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff f9f8 	bl	80007d8 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1e4      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013fa:	2202      	movs	r2, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d1f1      	bne.n	80013e4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2204      	movs	r2, #4
 8001406:	4013      	ands	r3, r2
 8001408:	d100      	bne.n	800140c <HAL_RCC_OscConfig+0x300>
 800140a:	e0c7      	b.n	800159c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140c:	231f      	movs	r3, #31
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001414:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2238      	movs	r2, #56	@ 0x38
 800141a:	4013      	ands	r3, r2
 800141c:	2b20      	cmp	r3, #32
 800141e:	d11f      	bne.n	8001460 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_RCC_OscConfig+0x330>)
 8001422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001424:	2202      	movs	r2, #2
 8001426:	4013      	ands	r3, r2
 8001428:	d100      	bne.n	800142c <HAL_RCC_OscConfig+0x320>
 800142a:	e0b7      	b.n	800159c <HAL_RCC_OscConfig+0x490>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d000      	beq.n	8001436 <HAL_RCC_OscConfig+0x32a>
 8001434:	e0b2      	b.n	800159c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e1c2      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	40021000 	.word	0x40021000
 8001440:	fffeffff 	.word	0xfffeffff
 8001444:	fffbffff 	.word	0xfffbffff
 8001448:	ffff80ff 	.word	0xffff80ff
 800144c:	ffffc7ff 	.word	0xffffc7ff
 8001450:	00f42400 	.word	0x00f42400
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004
 800145c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001460:	4bb5      	ldr	r3, [pc, #724]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	055b      	lsls	r3, r3, #21
 8001468:	4013      	ands	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_RCC_OscConfig+0x364>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x366>
 8001470:	2300      	movs	r3, #0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d011      	beq.n	800149a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4bb0      	ldr	r3, [pc, #704]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800147a:	4baf      	ldr	r3, [pc, #700]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 800147c:	2180      	movs	r1, #128	@ 0x80
 800147e:	0549      	lsls	r1, r1, #21
 8001480:	430a      	orrs	r2, r1
 8001482:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001484:	4bac      	ldr	r3, [pc, #688]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	055b      	lsls	r3, r3, #21
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001492:	231f      	movs	r3, #31
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800149a:	4ba8      	ldr	r3, [pc, #672]	@ (800173c <HAL_RCC_OscConfig+0x630>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2380      	movs	r3, #128	@ 0x80
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	d11a      	bne.n	80014dc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014a6:	4ba5      	ldr	r3, [pc, #660]	@ (800173c <HAL_RCC_OscConfig+0x630>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4ba4      	ldr	r3, [pc, #656]	@ (800173c <HAL_RCC_OscConfig+0x630>)
 80014ac:	2180      	movs	r1, #128	@ 0x80
 80014ae:	0049      	lsls	r1, r1, #1
 80014b0:	430a      	orrs	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014b4:	f7ff f990 	bl	80007d8 <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff f98b 	bl	80007d8 <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e177      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d0:	4b9a      	ldr	r3, [pc, #616]	@ (800173c <HAL_RCC_OscConfig+0x630>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2380      	movs	r3, #128	@ 0x80
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4013      	ands	r3, r2
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x3e6>
 80014e4:	4b94      	ldr	r3, [pc, #592]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80014e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014e8:	4b93      	ldr	r3, [pc, #588]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	430a      	orrs	r2, r1
 80014ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014f0:	e01c      	b.n	800152c <HAL_RCC_OscConfig+0x420>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x408>
 80014fa:	4b8f      	ldr	r3, [pc, #572]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80014fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014fe:	4b8e      	ldr	r3, [pc, #568]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001500:	2104      	movs	r1, #4
 8001502:	430a      	orrs	r2, r1
 8001504:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001506:	4b8c      	ldr	r3, [pc, #560]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001508:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800150a:	4b8b      	ldr	r3, [pc, #556]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 800150c:	2101      	movs	r1, #1
 800150e:	430a      	orrs	r2, r1
 8001510:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001512:	e00b      	b.n	800152c <HAL_RCC_OscConfig+0x420>
 8001514:	4b88      	ldr	r3, [pc, #544]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001516:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001518:	4b87      	ldr	r3, [pc, #540]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 800151a:	2101      	movs	r1, #1
 800151c:	438a      	bics	r2, r1
 800151e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001520:	4b85      	ldr	r3, [pc, #532]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001522:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001524:	4b84      	ldr	r3, [pc, #528]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001526:	2104      	movs	r1, #4
 8001528:	438a      	bics	r2, r1
 800152a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d014      	beq.n	800155e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff f950 	bl	80007d8 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800153c:	e009      	b.n	8001552 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7ff f94b 	bl	80007d8 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4a7d      	ldr	r2, [pc, #500]	@ (8001740 <HAL_RCC_OscConfig+0x634>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e136      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001552:	4b79      	ldr	r3, [pc, #484]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x432>
 800155c:	e013      	b.n	8001586 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff f93b 	bl	80007d8 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001566:	e009      	b.n	800157c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff f936 	bl	80007d8 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	4a73      	ldr	r2, [pc, #460]	@ (8001740 <HAL_RCC_OscConfig+0x634>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e121      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800157c:	4b6e      	ldr	r3, [pc, #440]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 800157e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001586:	231f      	movs	r3, #31
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001590:	4b69      	ldr	r3, [pc, #420]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001592:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001594:	4b68      	ldr	r3, [pc, #416]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001596:	496b      	ldr	r1, [pc, #428]	@ (8001744 <HAL_RCC_OscConfig+0x638>)
 8001598:	400a      	ands	r2, r1
 800159a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2220      	movs	r2, #32
 80015a2:	4013      	ands	r3, r2
 80015a4:	d039      	beq.n	800161a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d01b      	beq.n	80015e6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015ae:	4b62      	ldr	r3, [pc, #392]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b61      	ldr	r3, [pc, #388]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80015b4:	2180      	movs	r1, #128	@ 0x80
 80015b6:	03c9      	lsls	r1, r1, #15
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff f90c 	bl	80007d8 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c6:	f7ff f907 	bl	80007d8 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0f3      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80015d8:	4b57      	ldr	r3, [pc, #348]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	4013      	ands	r3, r2
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x4ba>
 80015e4:	e019      	b.n	800161a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015e6:	4b54      	ldr	r3, [pc, #336]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80015ec:	4956      	ldr	r1, [pc, #344]	@ (8001748 <HAL_RCC_OscConfig+0x63c>)
 80015ee:	400a      	ands	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff f8f1 	bl	80007d8 <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015fc:	f7ff f8ec 	bl	80007d8 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0d8      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800160e:	4b4a      	ldr	r3, [pc, #296]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	@ 0x80
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	4013      	ands	r3, r2
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d100      	bne.n	8001624 <HAL_RCC_OscConfig+0x518>
 8001622:	e0cc      	b.n	80017be <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001624:	4b44      	ldr	r3, [pc, #272]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2238      	movs	r2, #56	@ 0x38
 800162a:	4013      	ands	r3, r2
 800162c:	2b10      	cmp	r3, #16
 800162e:	d100      	bne.n	8001632 <HAL_RCC_OscConfig+0x526>
 8001630:	e07b      	b.n	800172a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d156      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b3f      	ldr	r3, [pc, #252]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b3e      	ldr	r3, [pc, #248]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001640:	4942      	ldr	r1, [pc, #264]	@ (800174c <HAL_RCC_OscConfig+0x640>)
 8001642:	400a      	ands	r2, r1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff f8c7 	bl	80007d8 <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff f8c2 	bl	80007d8 <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0ae      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001662:	4b35      	ldr	r3, [pc, #212]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	@ 0x80
 8001668:	049b      	lsls	r3, r3, #18
 800166a:	4013      	ands	r3, r2
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166e:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	4a37      	ldr	r2, [pc, #220]	@ (8001750 <HAL_RCC_OscConfig+0x644>)
 8001674:	4013      	ands	r3, r2
 8001676:	0019      	movs	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169a:	431a      	orrs	r2, r3
 800169c:	4b26      	ldr	r3, [pc, #152]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 800169e:	430a      	orrs	r2, r1
 80016a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a2:	4b25      	ldr	r3, [pc, #148]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b24      	ldr	r3, [pc, #144]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80016a8:	2180      	movs	r1, #128	@ 0x80
 80016aa:	0449      	lsls	r1, r1, #17
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80016b0:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80016b6:	2180      	movs	r1, #128	@ 0x80
 80016b8:	0549      	lsls	r1, r1, #21
 80016ba:	430a      	orrs	r2, r1
 80016bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016be:	f7ff f88b 	bl	80007d8 <HAL_GetTick>
 80016c2:	0003      	movs	r3, r0
 80016c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff f886 	bl	80007d8 <HAL_GetTick>
 80016cc:	0002      	movs	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e072      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016da:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	049b      	lsls	r3, r3, #18
 80016e2:	4013      	ands	r3, r2
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x5bc>
 80016e6:	e06a      	b.n	80017be <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 80016ee:	4917      	ldr	r1, [pc, #92]	@ (800174c <HAL_RCC_OscConfig+0x640>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff f870 	bl	80007d8 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff f86b 	bl	80007d8 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e057      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	049b      	lsls	r3, r3, #18
 8001718:	4013      	ands	r3, r2
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_RCC_OscConfig+0x62c>)
 8001722:	490c      	ldr	r1, [pc, #48]	@ (8001754 <HAL_RCC_OscConfig+0x648>)
 8001724:	400a      	ands	r2, r1
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	e049      	b.n	80017be <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d112      	bne.n	8001758 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e044      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	40021000 	.word	0x40021000
 800173c:	40007000 	.word	0x40007000
 8001740:	00001388 	.word	0x00001388
 8001744:	efffffff 	.word	0xefffffff
 8001748:	ffbfffff 	.word	0xffbfffff
 800174c:	feffffff 	.word	0xfeffffff
 8001750:	11c1808c 	.word	0x11c1808c
 8001754:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001758:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <HAL_RCC_OscConfig+0x6bc>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2203      	movs	r2, #3
 8001762:	401a      	ands	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001768:	429a      	cmp	r2, r3
 800176a:	d126      	bne.n	80017ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2270      	movs	r2, #112	@ 0x70
 8001770:	401a      	ands	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d11f      	bne.n	80017ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	23fe      	movs	r3, #254	@ 0xfe
 800177e:	01db      	lsls	r3, r3, #7
 8001780:	401a      	ands	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001786:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d116      	bne.n	80017ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	23f8      	movs	r3, #248	@ 0xf8
 8001790:	039b      	lsls	r3, r3, #14
 8001792:	401a      	ands	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d10e      	bne.n	80017ba <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	23e0      	movs	r3, #224	@ 0xe0
 80017a0:	051b      	lsls	r3, r3, #20
 80017a2:	401a      	ands	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	0f5b      	lsrs	r3, r3, #29
 80017b0:	075a      	lsls	r2, r3, #29
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b008      	add	sp, #32
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0e9      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e0:	4b76      	ldr	r3, [pc, #472]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2207      	movs	r2, #7
 80017e6:	4013      	ands	r3, r2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d91e      	bls.n	800182c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b73      	ldr	r3, [pc, #460]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2207      	movs	r2, #7
 80017f4:	4393      	bics	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	4b70      	ldr	r3, [pc, #448]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001800:	f7fe ffea 	bl	80007d8 <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001808:	e009      	b.n	800181e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180a:	f7fe ffe5 	bl	80007d8 <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	4a6a      	ldr	r2, [pc, #424]	@ (80019c0 <HAL_RCC_ClockConfig+0x1f4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0ca      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800181e:	4b67      	ldr	r3, [pc, #412]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2207      	movs	r2, #7
 8001824:	4013      	ands	r3, r2
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d1ee      	bne.n	800180a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2202      	movs	r2, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d015      	beq.n	8001862 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2204      	movs	r2, #4
 800183c:	4013      	ands	r3, r2
 800183e:	d006      	beq.n	800184e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001840:	4b60      	ldr	r3, [pc, #384]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	4b5f      	ldr	r3, [pc, #380]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001846:	21e0      	movs	r1, #224	@ 0xe0
 8001848:	01c9      	lsls	r1, r1, #7
 800184a:	430a      	orrs	r2, r1
 800184c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184e:	4b5d      	ldr	r3, [pc, #372]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	4a5d      	ldr	r2, [pc, #372]	@ (80019c8 <HAL_RCC_ClockConfig+0x1fc>)
 8001854:	4013      	ands	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	4b59      	ldr	r3, [pc, #356]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2201      	movs	r2, #1
 8001868:	4013      	ands	r3, r2
 800186a:	d057      	beq.n	800191c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d107      	bne.n	8001884 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001874:	4b53      	ldr	r3, [pc, #332]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	029b      	lsls	r3, r3, #10
 800187c:	4013      	ands	r3, r2
 800187e:	d12b      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e097      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d107      	bne.n	800189c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188c:	4b4d      	ldr	r3, [pc, #308]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2380      	movs	r3, #128	@ 0x80
 8001892:	049b      	lsls	r3, r3, #18
 8001894:	4013      	ands	r3, r2
 8001896:	d11f      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e08b      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	4b47      	ldr	r3, [pc, #284]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4013      	ands	r3, r2
 80018ae:	d113      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e07f      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018bc:	4b41      	ldr	r3, [pc, #260]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 80018be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c0:	2202      	movs	r2, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d108      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e074      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ca:	4b3e      	ldr	r3, [pc, #248]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 80018cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e06d      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018d8:	4b3a      	ldr	r3, [pc, #232]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2207      	movs	r2, #7
 80018de:	4393      	bics	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4b37      	ldr	r3, [pc, #220]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ec:	f7fe ff74 	bl	80007d8 <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f4:	e009      	b.n	800190a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f6:	f7fe ff6f 	bl	80007d8 <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	4a2f      	ldr	r2, [pc, #188]	@ (80019c0 <HAL_RCC_ClockConfig+0x1f4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e054      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2238      	movs	r2, #56	@ 0x38
 8001910:	401a      	ands	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	429a      	cmp	r2, r3
 800191a:	d1ec      	bne.n	80018f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2207      	movs	r2, #7
 8001922:	4013      	ands	r3, r2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d21e      	bcs.n	8001968 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2207      	movs	r2, #7
 8001930:	4393      	bics	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800193c:	f7fe ff4c 	bl	80007d8 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001944:	e009      	b.n	800195a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001946:	f7fe ff47 	bl	80007d8 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <HAL_RCC_ClockConfig+0x1f4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e02c      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2207      	movs	r2, #7
 8001960:	4013      	ands	r3, r2
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d1ee      	bne.n	8001946 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2204      	movs	r2, #4
 800196e:	4013      	ands	r3, r2
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4a15      	ldr	r2, [pc, #84]	@ (80019cc <HAL_RCC_ClockConfig+0x200>)
 8001978:	4013      	ands	r3, r2
 800197a:	0019      	movs	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001986:	f000 f829 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 800198a:	0001      	movs	r1, r0
 800198c:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	220f      	movs	r2, #15
 8001994:	401a      	ands	r2, r3
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_RCC_ClockConfig+0x204>)
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	58d3      	ldr	r3, [r2, r3]
 800199c:	221f      	movs	r2, #31
 800199e:	4013      	ands	r3, r2
 80019a0:	000a      	movs	r2, r1
 80019a2:	40da      	lsrs	r2, r3
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_RCC_ClockConfig+0x208>)
 80019a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_RCC_ClockConfig+0x20c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7fe feb7 	bl	8000720 <HAL_InitTick>
 80019b2:	0003      	movs	r3, r0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b004      	add	sp, #16
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40022000 	.word	0x40022000
 80019c0:	00001388 	.word	0x00001388
 80019c4:	40021000 	.word	0x40021000
 80019c8:	fffff0ff 	.word	0xfffff0ff
 80019cc:	ffff8fff 	.word	0xffff8fff
 80019d0:	08002808 	.word	0x08002808
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019e2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2238      	movs	r2, #56	@ 0x38
 80019e8:	4013      	ands	r3, r2
 80019ea:	d10f      	bne.n	8001a0c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019ec:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0adb      	lsrs	r3, r3, #11
 80019f2:	2207      	movs	r2, #7
 80019f4:	4013      	ands	r3, r2
 80019f6:	2201      	movs	r2, #1
 80019f8:	409a      	lsls	r2, r3
 80019fa:	0013      	movs	r3, r2
 80019fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	4835      	ldr	r0, [pc, #212]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a02:	f7fe fb7f 	bl	8000104 <__udivsi3>
 8001a06:	0003      	movs	r3, r0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	e05d      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2238      	movs	r2, #56	@ 0x38
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a18:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x100>)
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	e054      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2238      	movs	r2, #56	@ 0x38
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b10      	cmp	r3, #16
 8001a28:	d138      	bne.n	8001a9c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2203      	movs	r2, #3
 8001a30:	4013      	ands	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a34:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	3301      	adds	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d10d      	bne.n	8001a64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	4824      	ldr	r0, [pc, #144]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x100>)
 8001a4c:	f7fe fb5a 	bl	8000104 <__udivsi3>
 8001a50:	0003      	movs	r3, r0
 8001a52:	0019      	movs	r1, r3
 8001a54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	227f      	movs	r2, #127	@ 0x7f
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	434b      	muls	r3, r1
 8001a60:	617b      	str	r3, [r7, #20]
        break;
 8001a62:	e00d      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	481c      	ldr	r0, [pc, #112]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a68:	f7fe fb4c 	bl	8000104 <__udivsi3>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	0019      	movs	r1, r3
 8001a70:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	227f      	movs	r2, #127	@ 0x7f
 8001a78:	4013      	ands	r3, r2
 8001a7a:	434b      	muls	r3, r1
 8001a7c:	617b      	str	r3, [r7, #20]
        break;
 8001a7e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a80:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0f5b      	lsrs	r3, r3, #29
 8001a86:	2207      	movs	r2, #7
 8001a88:	4013      	ands	r3, r2
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	6978      	ldr	r0, [r7, #20]
 8001a92:	f7fe fb37 	bl	8000104 <__udivsi3>
 8001a96:	0003      	movs	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	e015      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2238      	movs	r2, #56	@ 0x38
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b20      	cmp	r3, #32
 8001aa6:	d103      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001aa8:	2380      	movs	r3, #128	@ 0x80
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2238      	movs	r2, #56	@ 0x38
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b18      	cmp	r3, #24
 8001aba:	d103      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001abc:	23fa      	movs	r3, #250	@ 0xfa
 8001abe:	01db      	lsls	r3, r3, #7
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e001      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ac8:	693b      	ldr	r3, [r7, #16]
}
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b006      	add	sp, #24
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	00f42400 	.word	0x00f42400
 8001adc:	007a1200 	.word	0x007a1200

08001ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ae8:	2313      	movs	r3, #19
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001af0:	2312      	movs	r3, #18
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	029b      	lsls	r3, r3, #10
 8001b00:	4013      	ands	r3, r2
 8001b02:	d100      	bne.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b04:	e0ad      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2011      	movs	r0, #17
 8001b08:	183b      	adds	r3, r7, r0
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0e:	4b47      	ldr	r3, [pc, #284]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	055b      	lsls	r3, r3, #21
 8001b16:	4013      	ands	r3, r2
 8001b18:	d110      	bne.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b44      	ldr	r3, [pc, #272]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b1e:	4b43      	ldr	r3, [pc, #268]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b20:	2180      	movs	r1, #128	@ 0x80
 8001b22:	0549      	lsls	r1, r1, #21
 8001b24:	430a      	orrs	r2, r1
 8001b26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b28:	4b40      	ldr	r3, [pc, #256]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	055b      	lsls	r3, r3, #21
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b36:	183b      	adds	r3, r7, r0
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b3b      	ldr	r3, [pc, #236]	@ (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b42:	2180      	movs	r1, #128	@ 0x80
 8001b44:	0049      	lsls	r1, r1, #1
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b4a:	f7fe fe45 	bl	80007d8 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b52:	e00b      	b.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b54:	f7fe fe40 	bl	80007d8 <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d904      	bls.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b62:	2313      	movs	r3, #19
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2203      	movs	r2, #3
 8001b68:	701a      	strb	r2, [r3, #0]
        break;
 8001b6a:	e005      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b6c:	4b30      	ldr	r3, [pc, #192]	@ (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	@ 0x80
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4013      	ands	r3, r2
 8001b76:	d0ed      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b78:	2313      	movs	r3, #19
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d15e      	bne.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b86:	23c0      	movs	r3, #192	@ 0xc0
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d019      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d014      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b9e:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba2:	4a24      	ldr	r2, [pc, #144]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ba8:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001baa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bae:	2180      	movs	r1, #128	@ 0x80
 8001bb0:	0249      	lsls	r1, r1, #9
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bbc:	491e      	ldr	r1, [pc, #120]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d016      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7fe fe02 	bl	80007d8 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd8:	e00c      	b.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7fe fdfd 	bl	80007d8 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4a15      	ldr	r2, [pc, #84]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d904      	bls.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001bea:	2313      	movs	r3, #19
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	2203      	movs	r2, #3
 8001bf0:	701a      	strb	r2, [r3, #0]
            break;
 8001bf2:	e004      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d0ed      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001bfe:	2313      	movs	r3, #19
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10a      	bne.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0c:	4a09      	ldr	r2, [pc, #36]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c16:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c1c:	e016      	b.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c1e:	2312      	movs	r3, #18
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	2213      	movs	r2, #19
 8001c24:	18ba      	adds	r2, r7, r2
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40007000 	.word	0x40007000
 8001c34:	fffffcff 	.word	0xfffffcff
 8001c38:	fffeffff 	.word	0xfffeffff
 8001c3c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c40:	2312      	movs	r3, #18
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	2213      	movs	r2, #19
 8001c46:	18ba      	adds	r2, r7, r2
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c4c:	2311      	movs	r3, #17
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d105      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c56:	4bb6      	ldr	r3, [pc, #728]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c5a:	4bb5      	ldr	r3, [pc, #724]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c5c:	49b5      	ldr	r1, [pc, #724]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001c5e:	400a      	ands	r2, r1
 8001c60:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c6c:	4bb0      	ldr	r3, [pc, #704]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c70:	2203      	movs	r2, #3
 8001c72:	4393      	bics	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4bad      	ldr	r3, [pc, #692]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2202      	movs	r2, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	d009      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c8a:	4ba9      	ldr	r3, [pc, #676]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8e:	220c      	movs	r2, #12
 8001c90:	4393      	bics	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4ba5      	ldr	r3, [pc, #660]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d009      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ca8:	4ba1      	ldr	r3, [pc, #644]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cac:	2230      	movs	r2, #48	@ 0x30
 8001cae:	4393      	bics	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	4b9e      	ldr	r3, [pc, #632]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d009      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cc6:	4b9a      	ldr	r3, [pc, #616]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cca:	4a9b      	ldr	r2, [pc, #620]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	4b96      	ldr	r3, [pc, #600]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	015b      	lsls	r3, r3, #5
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001ce6:	4b92      	ldr	r3, [pc, #584]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cea:	4a94      	ldr	r2, [pc, #592]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	0019      	movs	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	4b8e      	ldr	r3, [pc, #568]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	2380      	movs	r3, #128	@ 0x80
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d009      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d06:	4b8a      	ldr	r3, [pc, #552]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0a:	4a8d      	ldr	r2, [pc, #564]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d14:	4b86      	ldr	r3, [pc, #536]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4013      	ands	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d26:	4b82      	ldr	r3, [pc, #520]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2a:	4a86      	ldr	r2, [pc, #536]	@ (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d34:	4b7e      	ldr	r3, [pc, #504]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d36:	430a      	orrs	r2, r1
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	4013      	ands	r3, r2
 8001d42:	d009      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d44:	4b7a      	ldr	r3, [pc, #488]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d48:	4a7f      	ldr	r2, [pc, #508]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	4b77      	ldr	r3, [pc, #476]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d54:	430a      	orrs	r2, r1
 8001d56:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2240      	movs	r2, #64	@ 0x40
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d009      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d62:	4b73      	ldr	r3, [pc, #460]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d66:	4a79      	ldr	r2, [pc, #484]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	4b6f      	ldr	r3, [pc, #444]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d72:	430a      	orrs	r2, r1
 8001d74:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	01db      	lsls	r3, r3, #7
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d015      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d82:	4b6b      	ldr	r3, [pc, #428]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	0899      	lsrs	r1, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d8e:	4b68      	ldr	r3, [pc, #416]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d90:	430a      	orrs	r2, r1
 8001d92:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	05db      	lsls	r3, r3, #23
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d106      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001da0:	4b63      	ldr	r3, [pc, #396]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4b62      	ldr	r3, [pc, #392]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da6:	2180      	movs	r1, #128	@ 0x80
 8001da8:	0249      	lsls	r1, r1, #9
 8001daa:	430a      	orrs	r2, r1
 8001dac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	031b      	lsls	r3, r3, #12
 8001db6:	4013      	ands	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dba:	4b5d      	ldr	r3, [pc, #372]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbe:	2240      	movs	r2, #64	@ 0x40
 8001dc0:	4393      	bics	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dc8:	4b59      	ldr	r3, [pc, #356]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	039b      	lsls	r3, r3, #14
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d016      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001dda:	4b55      	ldr	r3, [pc, #340]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dde:	4a5c      	ldr	r2, [pc, #368]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001de8:	4b51      	ldr	r3, [pc, #324]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001df2:	2380      	movs	r3, #128	@ 0x80
 8001df4:	03db      	lsls	r3, r3, #15
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d106      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e00:	2180      	movs	r1, #128	@ 0x80
 8001e02:	0449      	lsls	r1, r1, #17
 8001e04:	430a      	orrs	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	03db      	lsls	r3, r3, #15
 8001e10:	4013      	ands	r3, r2
 8001e12:	d016      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001e14:	4b46      	ldr	r3, [pc, #280]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e18:	4a4e      	ldr	r2, [pc, #312]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e22:	4b43      	ldr	r3, [pc, #268]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e24:	430a      	orrs	r2, r1
 8001e26:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	045b      	lsls	r3, r3, #17
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d106      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e34:	4b3e      	ldr	r3, [pc, #248]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	4b3d      	ldr	r3, [pc, #244]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e3a:	2180      	movs	r1, #128	@ 0x80
 8001e3c:	0449      	lsls	r1, r1, #17
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	@ 0x80
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d014      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e4e:	4b38      	ldr	r3, [pc, #224]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e52:	2203      	movs	r2, #3
 8001e54:	4393      	bics	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1a      	ldr	r2, [r3, #32]
 8001e5c:	4b34      	ldr	r3, [pc, #208]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d106      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e6a:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b30      	ldr	r3, [pc, #192]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	0249      	lsls	r1, r1, #9
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	019b      	lsls	r3, r3, #6
 8001e80:	4013      	ands	r3, r2
 8001e82:	d014      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001e84:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	220c      	movs	r2, #12
 8001e8a:	4393      	bics	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e92:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d106      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ea0:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea6:	2180      	movs	r1, #128	@ 0x80
 8001ea8:	0249      	lsls	r1, r1, #9
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	045b      	lsls	r3, r3, #17
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d016      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eba:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	4a22      	ldr	r2, [pc, #136]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ed2:	2380      	movs	r3, #128	@ 0x80
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee0:	2180      	movs	r1, #128	@ 0x80
 8001ee2:	0449      	lsls	r1, r1, #17
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	049b      	lsls	r3, r3, #18
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d016      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001f02:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d106      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f1a:	2180      	movs	r1, #128	@ 0x80
 8001f1c:	0449      	lsls	r1, r1, #17
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f22:	2312      	movs	r3, #18
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	781b      	ldrb	r3, [r3, #0]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b006      	add	sp, #24
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	efffffff 	.word	0xefffffff
 8001f38:	fffff3ff 	.word	0xfffff3ff
 8001f3c:	fffffcff 	.word	0xfffffcff
 8001f40:	fff3ffff 	.word	0xfff3ffff
 8001f44:	ffcfffff 	.word	0xffcfffff
 8001f48:	ffffcfff 	.word	0xffffcfff
 8001f4c:	ffff3fff 	.word	0xffff3fff
 8001f50:	ffbfffff 	.word	0xffbfffff
 8001f54:	feffffff 	.word	0xfeffffff

08001f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e04a      	b.n	8002000 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	223d      	movs	r2, #61	@ 0x3d
 8001f6e:	5c9b      	ldrb	r3, [r3, r2]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	223c      	movs	r2, #60	@ 0x3c
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7fe fb19 	bl	80005b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	223d      	movs	r2, #61	@ 0x3d
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3304      	adds	r3, #4
 8001f96:	0019      	movs	r1, r3
 8001f98:	0010      	movs	r0, r2
 8001f9a:	f000 fa3b 	bl	8002414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2248      	movs	r2, #72	@ 0x48
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	223e      	movs	r2, #62	@ 0x3e
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	223f      	movs	r2, #63	@ 0x3f
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	5499      	strb	r1, [r3, r2]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2240      	movs	r2, #64	@ 0x40
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2241      	movs	r2, #65	@ 0x41
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2242      	movs	r2, #66	@ 0x42
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2243      	movs	r2, #67	@ 0x43
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2244      	movs	r2, #68	@ 0x44
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2245      	movs	r2, #69	@ 0x45
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	5499      	strb	r1, [r3, r2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2246      	movs	r2, #70	@ 0x46
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2247      	movs	r2, #71	@ 0x47
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	223d      	movs	r2, #61	@ 0x3d
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2202      	movs	r2, #2
 8002024:	4013      	ands	r3, r2
 8002026:	d021      	beq.n	800206c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d01d      	beq.n	800206c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2203      	movs	r2, #3
 8002036:	4252      	negs	r2, r2
 8002038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2203      	movs	r2, #3
 8002048:	4013      	ands	r3, r2
 800204a:	d004      	beq.n	8002056 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f9c8 	bl	80023e4 <HAL_TIM_IC_CaptureCallback>
 8002054:	e007      	b.n	8002066 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	0018      	movs	r0, r3
 800205a:	f000 f9bb 	bl	80023d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0018      	movs	r0, r3
 8002062:	f000 f9c7 	bl	80023f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d022      	beq.n	80020ba <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
 800207a:	d01e      	beq.n	80020ba <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2205      	movs	r2, #5
 8002082:	4252      	negs	r2, r2
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	23c0      	movs	r3, #192	@ 0xc0
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4013      	ands	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0018      	movs	r0, r3
 800209e:	f000 f9a1 	bl	80023e4 <HAL_TIM_IC_CaptureCallback>
 80020a2:	e007      	b.n	80020b4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 f994 	bl	80023d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 f9a0 	bl	80023f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2208      	movs	r2, #8
 80020be:	4013      	ands	r3, r2
 80020c0:	d021      	beq.n	8002106 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2208      	movs	r2, #8
 80020c6:	4013      	ands	r3, r2
 80020c8:	d01d      	beq.n	8002106 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2209      	movs	r2, #9
 80020d0:	4252      	negs	r2, r2
 80020d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2204      	movs	r2, #4
 80020d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	2203      	movs	r2, #3
 80020e2:	4013      	ands	r3, r2
 80020e4:	d004      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 f97b 	bl	80023e4 <HAL_TIM_IC_CaptureCallback>
 80020ee:	e007      	b.n	8002100 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 f96e 	bl	80023d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 f97a 	bl	80023f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2210      	movs	r2, #16
 800210a:	4013      	ands	r3, r2
 800210c:	d022      	beq.n	8002154 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2210      	movs	r2, #16
 8002112:	4013      	ands	r3, r2
 8002114:	d01e      	beq.n	8002154 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2211      	movs	r2, #17
 800211c:	4252      	negs	r2, r2
 800211e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2208      	movs	r2, #8
 8002124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	23c0      	movs	r3, #192	@ 0xc0
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	0018      	movs	r0, r3
 8002138:	f000 f954 	bl	80023e4 <HAL_TIM_IC_CaptureCallback>
 800213c:	e007      	b.n	800214e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f000 f947 	bl	80023d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0018      	movs	r0, r3
 800214a:	f000 f953 	bl	80023f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2201      	movs	r2, #1
 8002158:	4013      	ands	r3, r2
 800215a:	d00c      	beq.n	8002176 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	4013      	ands	r3, r2
 8002162:	d008      	beq.n	8002176 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2202      	movs	r2, #2
 800216a:	4252      	negs	r2, r2
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0018      	movs	r0, r3
 8002172:	f000 f927 	bl	80023c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2280      	movs	r2, #128	@ 0x80
 800217a:	4013      	ands	r3, r2
 800217c:	d104      	bne.n	8002188 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	019b      	lsls	r3, r3, #6
 8002184:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002186:	d00b      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2280      	movs	r2, #128	@ 0x80
 800218c:	4013      	ands	r3, r2
 800218e:	d007      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1e      	ldr	r2, [pc, #120]	@ (8002210 <HAL_TIM_IRQHandler+0x208>)
 8002196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	0018      	movs	r0, r3
 800219c:	f000 faec 	bl	8002778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4013      	ands	r3, r2
 80021a8:	d00b      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2280      	movs	r2, #128	@ 0x80
 80021ae:	4013      	ands	r3, r2
 80021b0:	d007      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <HAL_TIM_IRQHandler+0x20c>)
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 fae3 	bl	8002788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2240      	movs	r2, #64	@ 0x40
 80021c6:	4013      	ands	r3, r2
 80021c8:	d00c      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2240      	movs	r2, #64	@ 0x40
 80021ce:	4013      	ands	r3, r2
 80021d0:	d008      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2241      	movs	r2, #65	@ 0x41
 80021d8:	4252      	negs	r2, r2
 80021da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 f910 	bl	8002404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2220      	movs	r2, #32
 80021e8:	4013      	ands	r3, r2
 80021ea:	d00c      	beq.n	8002206 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	4013      	ands	r3, r2
 80021f2:	d008      	beq.n	8002206 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2221      	movs	r2, #33	@ 0x21
 80021fa:	4252      	negs	r2, r2
 80021fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 fab1 	bl	8002768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002206:	46c0      	nop			@ (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b004      	add	sp, #16
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	ffffdf7f 	.word	0xffffdf7f
 8002214:	fffffeff 	.word	0xfffffeff

08002218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002222:	230f      	movs	r3, #15
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	223c      	movs	r2, #60	@ 0x3c
 800222e:	5c9b      	ldrb	r3, [r3, r2]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_TIM_ConfigClockSource+0x20>
 8002234:	2302      	movs	r3, #2
 8002236:	e0bc      	b.n	80023b2 <HAL_TIM_ConfigClockSource+0x19a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	223c      	movs	r2, #60	@ 0x3c
 800223c:	2101      	movs	r1, #1
 800223e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	223d      	movs	r2, #61	@ 0x3d
 8002244:	2102      	movs	r1, #2
 8002246:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4a5a      	ldr	r2, [pc, #360]	@ (80023bc <HAL_TIM_ConfigClockSource+0x1a4>)
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4a59      	ldr	r2, [pc, #356]	@ (80023c0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2280      	movs	r2, #128	@ 0x80
 800226e:	0192      	lsls	r2, r2, #6
 8002270:	4293      	cmp	r3, r2
 8002272:	d040      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0xde>
 8002274:	2280      	movs	r2, #128	@ 0x80
 8002276:	0192      	lsls	r2, r2, #6
 8002278:	4293      	cmp	r3, r2
 800227a:	d900      	bls.n	800227e <HAL_TIM_ConfigClockSource+0x66>
 800227c:	e088      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x178>
 800227e:	2280      	movs	r2, #128	@ 0x80
 8002280:	0152      	lsls	r2, r2, #5
 8002282:	4293      	cmp	r3, r2
 8002284:	d100      	bne.n	8002288 <HAL_TIM_ConfigClockSource+0x70>
 8002286:	e088      	b.n	800239a <HAL_TIM_ConfigClockSource+0x182>
 8002288:	2280      	movs	r2, #128	@ 0x80
 800228a:	0152      	lsls	r2, r2, #5
 800228c:	4293      	cmp	r3, r2
 800228e:	d900      	bls.n	8002292 <HAL_TIM_ConfigClockSource+0x7a>
 8002290:	e07e      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x178>
 8002292:	2b70      	cmp	r3, #112	@ 0x70
 8002294:	d018      	beq.n	80022c8 <HAL_TIM_ConfigClockSource+0xb0>
 8002296:	d900      	bls.n	800229a <HAL_TIM_ConfigClockSource+0x82>
 8002298:	e07a      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x178>
 800229a:	2b60      	cmp	r3, #96	@ 0x60
 800229c:	d04f      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x126>
 800229e:	d900      	bls.n	80022a2 <HAL_TIM_ConfigClockSource+0x8a>
 80022a0:	e076      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x178>
 80022a2:	2b50      	cmp	r3, #80	@ 0x50
 80022a4:	d03b      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x106>
 80022a6:	d900      	bls.n	80022aa <HAL_TIM_ConfigClockSource+0x92>
 80022a8:	e072      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x178>
 80022aa:	2b40      	cmp	r3, #64	@ 0x40
 80022ac:	d057      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x146>
 80022ae:	d900      	bls.n	80022b2 <HAL_TIM_ConfigClockSource+0x9a>
 80022b0:	e06e      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x178>
 80022b2:	2b30      	cmp	r3, #48	@ 0x30
 80022b4:	d063      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x166>
 80022b6:	d86b      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x178>
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d060      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x166>
 80022bc:	d868      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x178>
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d05d      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x166>
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d05b      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x166>
 80022c6:	e063      	b.n	8002390 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022d8:	f000 f9b0 	bl	800263c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2277      	movs	r2, #119	@ 0x77
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	609a      	str	r2, [r3, #8]
      break;
 80022f4:	e052      	b.n	800239c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002306:	f000 f999 	bl	800263c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2180      	movs	r1, #128	@ 0x80
 8002316:	01c9      	lsls	r1, r1, #7
 8002318:	430a      	orrs	r2, r1
 800231a:	609a      	str	r2, [r3, #8]
      break;
 800231c:	e03e      	b.n	800239c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800232a:	001a      	movs	r2, r3
 800232c:	f000 f90a 	bl	8002544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2150      	movs	r1, #80	@ 0x50
 8002336:	0018      	movs	r0, r3
 8002338:	f000 f964 	bl	8002604 <TIM_ITRx_SetConfig>
      break;
 800233c:	e02e      	b.n	800239c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800234a:	001a      	movs	r2, r3
 800234c:	f000 f928 	bl	80025a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2160      	movs	r1, #96	@ 0x60
 8002356:	0018      	movs	r0, r3
 8002358:	f000 f954 	bl	8002604 <TIM_ITRx_SetConfig>
      break;
 800235c:	e01e      	b.n	800239c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800236a:	001a      	movs	r2, r3
 800236c:	f000 f8ea 	bl	8002544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2140      	movs	r1, #64	@ 0x40
 8002376:	0018      	movs	r0, r3
 8002378:	f000 f944 	bl	8002604 <TIM_ITRx_SetConfig>
      break;
 800237c:	e00e      	b.n	800239c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	0019      	movs	r1, r3
 8002388:	0010      	movs	r0, r2
 800238a:	f000 f93b 	bl	8002604 <TIM_ITRx_SetConfig>
      break;
 800238e:	e005      	b.n	800239c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002390:	230f      	movs	r3, #15
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
      break;
 8002398:	e000      	b.n	800239c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800239a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	223d      	movs	r2, #61	@ 0x3d
 80023a0:	2101      	movs	r1, #1
 80023a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	223c      	movs	r2, #60	@ 0x3c
 80023a8:	2100      	movs	r1, #0
 80023aa:	5499      	strb	r1, [r3, r2]

  return status;
 80023ac:	230f      	movs	r3, #15
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	781b      	ldrb	r3, [r3, #0]
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	ffceff88 	.word	0xffceff88
 80023c0:	ffff00ff 	.word	0xffff00ff

080023c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023cc:	46c0      	nop			@ (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023dc:	46c0      	nop			@ (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023ec:	46c0      	nop			@ (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b002      	add	sp, #8
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023fc:	46c0      	nop			@ (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	b002      	add	sp, #8
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800240c:	46c0      	nop			@ (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b002      	add	sp, #8
 8002412:	bd80      	pop	{r7, pc}

08002414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a3f      	ldr	r2, [pc, #252]	@ (8002524 <TIM_Base_SetConfig+0x110>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00c      	beq.n	8002446 <TIM_Base_SetConfig+0x32>
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	05db      	lsls	r3, r3, #23
 8002432:	429a      	cmp	r2, r3
 8002434:	d007      	beq.n	8002446 <TIM_Base_SetConfig+0x32>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a3b      	ldr	r2, [pc, #236]	@ (8002528 <TIM_Base_SetConfig+0x114>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d003      	beq.n	8002446 <TIM_Base_SetConfig+0x32>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a3a      	ldr	r2, [pc, #232]	@ (800252c <TIM_Base_SetConfig+0x118>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d108      	bne.n	8002458 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2270      	movs	r2, #112	@ 0x70
 800244a:	4393      	bics	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a32      	ldr	r2, [pc, #200]	@ (8002524 <TIM_Base_SetConfig+0x110>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d01c      	beq.n	800249a <TIM_Base_SetConfig+0x86>
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	05db      	lsls	r3, r3, #23
 8002466:	429a      	cmp	r2, r3
 8002468:	d017      	beq.n	800249a <TIM_Base_SetConfig+0x86>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a2e      	ldr	r2, [pc, #184]	@ (8002528 <TIM_Base_SetConfig+0x114>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <TIM_Base_SetConfig+0x86>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a2d      	ldr	r2, [pc, #180]	@ (800252c <TIM_Base_SetConfig+0x118>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00f      	beq.n	800249a <TIM_Base_SetConfig+0x86>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a2c      	ldr	r2, [pc, #176]	@ (8002530 <TIM_Base_SetConfig+0x11c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00b      	beq.n	800249a <TIM_Base_SetConfig+0x86>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2b      	ldr	r2, [pc, #172]	@ (8002534 <TIM_Base_SetConfig+0x120>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <TIM_Base_SetConfig+0x86>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a2a      	ldr	r2, [pc, #168]	@ (8002538 <TIM_Base_SetConfig+0x124>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d003      	beq.n	800249a <TIM_Base_SetConfig+0x86>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a29      	ldr	r2, [pc, #164]	@ (800253c <TIM_Base_SetConfig+0x128>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d108      	bne.n	80024ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a28      	ldr	r2, [pc, #160]	@ (8002540 <TIM_Base_SetConfig+0x12c>)
 800249e:	4013      	ands	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	4393      	bics	r3, r2
 80024b2:	001a      	movs	r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <TIM_Base_SetConfig+0x110>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <TIM_Base_SetConfig+0xde>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a15      	ldr	r2, [pc, #84]	@ (8002534 <TIM_Base_SetConfig+0x120>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <TIM_Base_SetConfig+0xde>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a14      	ldr	r2, [pc, #80]	@ (8002538 <TIM_Base_SetConfig+0x124>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <TIM_Base_SetConfig+0xde>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a13      	ldr	r2, [pc, #76]	@ (800253c <TIM_Base_SetConfig+0x128>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d103      	bne.n	80024fa <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2201      	movs	r2, #1
 8002506:	4013      	ands	r3, r2
 8002508:	2b01      	cmp	r3, #1
 800250a:	d106      	bne.n	800251a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2201      	movs	r2, #1
 8002512:	4393      	bics	r3, r2
 8002514:	001a      	movs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	611a      	str	r2, [r3, #16]
  }
}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b004      	add	sp, #16
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40000400 	.word	0x40000400
 800252c:	40000800 	.word	0x40000800
 8002530:	40002000 	.word	0x40002000
 8002534:	40014000 	.word	0x40014000
 8002538:	40014400 	.word	0x40014400
 800253c:	40014800 	.word	0x40014800
 8002540:	fffffcff 	.word	0xfffffcff

08002544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	2201      	movs	r2, #1
 800255c:	4393      	bics	r3, r2
 800255e:	001a      	movs	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	22f0      	movs	r2, #240	@ 0xf0
 800256e:	4393      	bics	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	220a      	movs	r2, #10
 8002580:	4393      	bics	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	621a      	str	r2, [r3, #32]
}
 8002598:	46c0      	nop			@ (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b006      	add	sp, #24
 800259e:	bd80      	pop	{r7, pc}

080025a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	2210      	movs	r2, #16
 80025b8:	4393      	bics	r3, r2
 80025ba:	001a      	movs	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002600 <TIM_TI2_ConfigInputStage+0x60>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	031b      	lsls	r3, r3, #12
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	22a0      	movs	r2, #160	@ 0xa0
 80025dc:	4393      	bics	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	621a      	str	r2, [r3, #32]
}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b006      	add	sp, #24
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	ffff0fff 	.word	0xffff0fff

08002604 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <TIM_ITRx_SetConfig+0x34>)
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	2207      	movs	r2, #7
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	609a      	str	r2, [r3, #8]
}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b004      	add	sp, #16
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	ffcfff8f 	.word	0xffcfff8f

0800263c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4a09      	ldr	r2, [pc, #36]	@ (8002678 <TIM_ETR_SetConfig+0x3c>)
 8002654:	4013      	ands	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	021a      	lsls	r2, r3, #8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	431a      	orrs	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	46c0      	nop			@ (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b006      	add	sp, #24
 8002676:	bd80      	pop	{r7, pc}
 8002678:	ffff00ff 	.word	0xffff00ff

0800267c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	223c      	movs	r2, #60	@ 0x3c
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002690:	2302      	movs	r3, #2
 8002692:	e05a      	b.n	800274a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	223c      	movs	r2, #60	@ 0x3c
 8002698:	2101      	movs	r1, #1
 800269a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	223d      	movs	r2, #61	@ 0x3d
 80026a0:	2102      	movs	r1, #2
 80026a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a26      	ldr	r2, [pc, #152]	@ (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d108      	bne.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a25      	ldr	r2, [pc, #148]	@ (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2270      	movs	r2, #112	@ 0x70
 80026d4:	4393      	bics	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a19      	ldr	r2, [pc, #100]	@ (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d014      	beq.n	800271e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	05db      	lsls	r3, r3, #23
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d00e      	beq.n	800271e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a15      	ldr	r2, [pc, #84]	@ (800275c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d004      	beq.n	800271e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a12      	ldr	r2, [pc, #72]	@ (8002764 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10c      	bne.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2280      	movs	r2, #128	@ 0x80
 8002722:	4393      	bics	r3, r2
 8002724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	4313      	orrs	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	223d      	movs	r2, #61	@ 0x3d
 800273c:	2101      	movs	r1, #1
 800273e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	223c      	movs	r2, #60	@ 0x3c
 8002744:	2100      	movs	r1, #0
 8002746:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b004      	add	sp, #16
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	40012c00 	.word	0x40012c00
 8002758:	ff0fffff 	.word	0xff0fffff
 800275c:	40000400 	.word	0x40000400
 8002760:	40000800 	.word	0x40000800
 8002764:	40014000 	.word	0x40014000

08002768 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002790:	46c0      	nop			@ (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}

08002798 <memset>:
 8002798:	0003      	movs	r3, r0
 800279a:	1882      	adds	r2, r0, r2
 800279c:	4293      	cmp	r3, r2
 800279e:	d100      	bne.n	80027a2 <memset+0xa>
 80027a0:	4770      	bx	lr
 80027a2:	7019      	strb	r1, [r3, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	e7f9      	b.n	800279c <memset+0x4>

080027a8 <__libc_init_array>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	2600      	movs	r6, #0
 80027ac:	4c0c      	ldr	r4, [pc, #48]	@ (80027e0 <__libc_init_array+0x38>)
 80027ae:	4d0d      	ldr	r5, [pc, #52]	@ (80027e4 <__libc_init_array+0x3c>)
 80027b0:	1b64      	subs	r4, r4, r5
 80027b2:	10a4      	asrs	r4, r4, #2
 80027b4:	42a6      	cmp	r6, r4
 80027b6:	d109      	bne.n	80027cc <__libc_init_array+0x24>
 80027b8:	2600      	movs	r6, #0
 80027ba:	f000 f819 	bl	80027f0 <_init>
 80027be:	4c0a      	ldr	r4, [pc, #40]	@ (80027e8 <__libc_init_array+0x40>)
 80027c0:	4d0a      	ldr	r5, [pc, #40]	@ (80027ec <__libc_init_array+0x44>)
 80027c2:	1b64      	subs	r4, r4, r5
 80027c4:	10a4      	asrs	r4, r4, #2
 80027c6:	42a6      	cmp	r6, r4
 80027c8:	d105      	bne.n	80027d6 <__libc_init_array+0x2e>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	00b3      	lsls	r3, r6, #2
 80027ce:	58eb      	ldr	r3, [r5, r3]
 80027d0:	4798      	blx	r3
 80027d2:	3601      	adds	r6, #1
 80027d4:	e7ee      	b.n	80027b4 <__libc_init_array+0xc>
 80027d6:	00b3      	lsls	r3, r6, #2
 80027d8:	58eb      	ldr	r3, [r5, r3]
 80027da:	4798      	blx	r3
 80027dc:	3601      	adds	r6, #1
 80027de:	e7f2      	b.n	80027c6 <__libc_init_array+0x1e>
 80027e0:	08002848 	.word	0x08002848
 80027e4:	08002848 	.word	0x08002848
 80027e8:	0800284c 	.word	0x0800284c
 80027ec:	08002848 	.word	0x08002848

080027f0 <_init>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f6:	bc08      	pop	{r3}
 80027f8:	469e      	mov	lr, r3
 80027fa:	4770      	bx	lr

080027fc <_fini>:
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002802:	bc08      	pop	{r3}
 8002804:	469e      	mov	lr, r3
 8002806:	4770      	bx	lr
